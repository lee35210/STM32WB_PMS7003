
UART_PMS7003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008208  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08008348  08008348  00018348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000004  080085f0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c90  200001ec  080087d8  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00001504  20001e7c  080087d8  00021e7c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002671f  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004ffc  00000000  00000000  0004693b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e13a  00000000  00000000  0004b937  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013f8  00000000  00000000  00059a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001e70  00000000  00000000  0005ae70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b7b7  00000000  00000000  0005cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007ab7  00000000  00000000  00068497  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006ff4e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004060  00000000  00000000  0006ffcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08008330 	.word	0x08008330

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	08008330 	.word	0x08008330

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	bf14      	ite	ne
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e720      	b.n	8000364 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aedc 	beq.w	8000312 <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6c1      	b.n	8000312 <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b97a 	b.w	8000e3c <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	468c      	mov	ip, r1
 8000b66:	460d      	mov	r5, r1
 8000b68:	4604      	mov	r4, r0
 8000b6a:	9e08      	ldr	r6, [sp, #32]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d151      	bne.n	8000c14 <__udivmoddi4+0xb4>
 8000b70:	428a      	cmp	r2, r1
 8000b72:	4617      	mov	r7, r2
 8000b74:	d96d      	bls.n	8000c52 <__udivmoddi4+0xf2>
 8000b76:	fab2 fe82 	clz	lr, r2
 8000b7a:	f1be 0f00 	cmp.w	lr, #0
 8000b7e:	d00b      	beq.n	8000b98 <__udivmoddi4+0x38>
 8000b80:	f1ce 0c20 	rsb	ip, lr, #32
 8000b84:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b88:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b8c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b90:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b94:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b98:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b9c:	0c25      	lsrs	r5, r4, #16
 8000b9e:	fbbc f8fa 	udiv	r8, ip, sl
 8000ba2:	fa1f f987 	uxth.w	r9, r7
 8000ba6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000baa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bae:	fb08 f309 	mul.w	r3, r8, r9
 8000bb2:	42ab      	cmp	r3, r5
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x6c>
 8000bb6:	19ed      	adds	r5, r5, r7
 8000bb8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000bbc:	f080 8123 	bcs.w	8000e06 <__udivmoddi4+0x2a6>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	f240 8120 	bls.w	8000e06 <__udivmoddi4+0x2a6>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	443d      	add	r5, r7
 8000bcc:	1aed      	subs	r5, r5, r3
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bd4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bdc:	fb00 f909 	mul.w	r9, r0, r9
 8000be0:	45a1      	cmp	r9, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x98>
 8000be4:	19e4      	adds	r4, r4, r7
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 810a 	bcs.w	8000e02 <__udivmoddi4+0x2a2>
 8000bee:	45a1      	cmp	r9, r4
 8000bf0:	f240 8107 	bls.w	8000e02 <__udivmoddi4+0x2a2>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	443c      	add	r4, r7
 8000bf8:	eba4 0409 	sub.w	r4, r4, r9
 8000bfc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c00:	2100      	movs	r1, #0
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d061      	beq.n	8000cca <__udivmoddi4+0x16a>
 8000c06:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6034      	str	r4, [r6, #0]
 8000c0e:	6073      	str	r3, [r6, #4]
 8000c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0xc8>
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d054      	beq.n	8000cc6 <__udivmoddi4+0x166>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c22:	4608      	mov	r0, r1
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	fab3 f183 	clz	r1, r3
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	f040 808e 	bne.w	8000d4e <__udivmoddi4+0x1ee>
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xdc>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80fa 	bhi.w	8000e30 <__udivmoddi4+0x2d0>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb65 0503 	sbc.w	r5, r5, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	46ac      	mov	ip, r5
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d03f      	beq.n	8000cca <__udivmoddi4+0x16a>
 8000c4a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b912      	cbnz	r2, 8000c5a <__udivmoddi4+0xfa>
 8000c54:	2701      	movs	r7, #1
 8000c56:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c5a:	fab7 fe87 	clz	lr, r7
 8000c5e:	f1be 0f00 	cmp.w	lr, #0
 8000c62:	d134      	bne.n	8000cce <__udivmoddi4+0x16e>
 8000c64:	1beb      	subs	r3, r5, r7
 8000c66:	0c3a      	lsrs	r2, r7, #16
 8000c68:	fa1f fc87 	uxth.w	ip, r7
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c72:	0c25      	lsrs	r5, r4, #16
 8000c74:	fb02 3318 	mls	r3, r2, r8, r3
 8000c78:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c7c:	fb0c f308 	mul.w	r3, ip, r8
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x134>
 8000c84:	19ed      	adds	r5, r5, r7
 8000c86:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x132>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	f200 80d1 	bhi.w	8000e34 <__udivmoddi4+0x2d4>
 8000c92:	4680      	mov	r8, r0
 8000c94:	1aed      	subs	r5, r5, r3
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c9c:	fb02 5510 	mls	r5, r2, r0, r5
 8000ca0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000ca4:	fb0c fc00 	mul.w	ip, ip, r0
 8000ca8:	45a4      	cmp	ip, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x15c>
 8000cac:	19e4      	adds	r4, r4, r7
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x15a>
 8000cb4:	45a4      	cmp	ip, r4
 8000cb6:	f200 80b8 	bhi.w	8000e2a <__udivmoddi4+0x2ca>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc4:	e79d      	b.n	8000c02 <__udivmoddi4+0xa2>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	f1ce 0420 	rsb	r4, lr, #32
 8000cd2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cd6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cda:	fa20 f804 	lsr.w	r8, r0, r4
 8000cde:	0c3a      	lsrs	r2, r7, #16
 8000ce0:	fa25 f404 	lsr.w	r4, r5, r4
 8000ce4:	ea48 0803 	orr.w	r8, r8, r3
 8000ce8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cec:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cf0:	fb02 4411 	mls	r4, r2, r1, r4
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cfc:	fb01 f30c 	mul.w	r3, r1, ip
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x1bc>
 8000d08:	19ed      	adds	r5, r5, r7
 8000d0a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0e:	f080 808a 	bcs.w	8000e26 <__udivmoddi4+0x2c6>
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	f240 8087 	bls.w	8000e26 <__udivmoddi4+0x2c6>
 8000d18:	3902      	subs	r1, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aeb      	subs	r3, r5, r3
 8000d1e:	fa1f f588 	uxth.w	r5, r8
 8000d22:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d26:	fb02 3310 	mls	r3, r2, r0, r3
 8000d2a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d2e:	fb00 f30c 	mul.w	r3, r0, ip
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x1e6>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3c:	d26f      	bcs.n	8000e1e <__udivmoddi4+0x2be>
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	d96d      	bls.n	8000e1e <__udivmoddi4+0x2be>
 8000d42:	3802      	subs	r0, #2
 8000d44:	443d      	add	r5, r7
 8000d46:	1aeb      	subs	r3, r5, r3
 8000d48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4c:	e78f      	b.n	8000c6e <__udivmoddi4+0x10e>
 8000d4e:	f1c1 0720 	rsb	r7, r1, #32
 8000d52:	fa22 f807 	lsr.w	r8, r2, r7
 8000d56:	408b      	lsls	r3, r1
 8000d58:	fa05 f401 	lsl.w	r4, r5, r1
 8000d5c:	ea48 0303 	orr.w	r3, r8, r3
 8000d60:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d64:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d68:	40fd      	lsrs	r5, r7
 8000d6a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d6e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d72:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d76:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d7a:	fa1f f883 	uxth.w	r8, r3
 8000d7e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d82:	fb09 f408 	mul.w	r4, r9, r8
 8000d86:	42ac      	cmp	r4, r5
 8000d88:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x244>
 8000d92:	18ed      	adds	r5, r5, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	d243      	bcs.n	8000e22 <__udivmoddi4+0x2c2>
 8000d9a:	42ac      	cmp	r4, r5
 8000d9c:	d941      	bls.n	8000e22 <__udivmoddi4+0x2c2>
 8000d9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000da2:	441d      	add	r5, r3
 8000da4:	1b2d      	subs	r5, r5, r4
 8000da6:	fa1f fe8e 	uxth.w	lr, lr
 8000daa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000dae:	fb0c 5510 	mls	r5, ip, r0, r5
 8000db2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000db6:	fb00 f808 	mul.w	r8, r0, r8
 8000dba:	45a0      	cmp	r8, r4
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x26e>
 8000dbe:	18e4      	adds	r4, r4, r3
 8000dc0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dc4:	d229      	bcs.n	8000e1a <__udivmoddi4+0x2ba>
 8000dc6:	45a0      	cmp	r8, r4
 8000dc8:	d927      	bls.n	8000e1a <__udivmoddi4+0x2ba>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	441c      	add	r4, r3
 8000dce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd2:	eba4 0408 	sub.w	r4, r4, r8
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	454c      	cmp	r4, r9
 8000ddc:	46c6      	mov	lr, r8
 8000dde:	464d      	mov	r5, r9
 8000de0:	d315      	bcc.n	8000e0e <__udivmoddi4+0x2ae>
 8000de2:	d012      	beq.n	8000e0a <__udivmoddi4+0x2aa>
 8000de4:	b156      	cbz	r6, 8000dfc <__udivmoddi4+0x29c>
 8000de6:	ebba 030e 	subs.w	r3, sl, lr
 8000dea:	eb64 0405 	sbc.w	r4, r4, r5
 8000dee:	fa04 f707 	lsl.w	r7, r4, r7
 8000df2:	40cb      	lsrs	r3, r1
 8000df4:	431f      	orrs	r7, r3
 8000df6:	40cc      	lsrs	r4, r1
 8000df8:	6037      	str	r7, [r6, #0]
 8000dfa:	6074      	str	r4, [r6, #4]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	4618      	mov	r0, r3
 8000e04:	e6f8      	b.n	8000bf8 <__udivmoddi4+0x98>
 8000e06:	4690      	mov	r8, r2
 8000e08:	e6e0      	b.n	8000bcc <__udivmoddi4+0x6c>
 8000e0a:	45c2      	cmp	sl, r8
 8000e0c:	d2ea      	bcs.n	8000de4 <__udivmoddi4+0x284>
 8000e0e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e12:	eb69 0503 	sbc.w	r5, r9, r3
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7e4      	b.n	8000de4 <__udivmoddi4+0x284>
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	e7d7      	b.n	8000dce <__udivmoddi4+0x26e>
 8000e1e:	4640      	mov	r0, r8
 8000e20:	e791      	b.n	8000d46 <__udivmoddi4+0x1e6>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e7be      	b.n	8000da4 <__udivmoddi4+0x244>
 8000e26:	4601      	mov	r1, r0
 8000e28:	e778      	b.n	8000d1c <__udivmoddi4+0x1bc>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	e745      	b.n	8000cbc <__udivmoddi4+0x15c>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xe6>
 8000e34:	f1a8 0802 	sub.w	r8, r8, #2
 8000e38:	443d      	add	r5, r7
 8000e3a:	e72b      	b.n	8000c94 <__udivmoddi4+0x134>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000e42:	4c10      	ldr	r4, [pc, #64]	; (8000e84 <HAL_InitTick+0x44>)
 8000e44:	6823      	ldr	r3, [r4, #0]
{
 8000e46:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000e48:	b90b      	cbnz	r3, 8000e4e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8000e4e:	f001 ff05 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8000e52:	6822      	ldr	r2, [r4, #0]
 8000e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e60:	f000 f8aa 	bl	8000fb8 <HAL_SYSTICK_Config>
 8000e64:	4604      	mov	r4, r0
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d1ef      	bne.n	8000e4a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	2d0f      	cmp	r5, #15
 8000e6c:	d8ed      	bhi.n	8000e4a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4629      	mov	r1, r5
 8000e72:	f04f 30ff 	mov.w	r0, #4294967295
 8000e76:	f000 f85d 	bl	8000f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_InitTick+0x48>)
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000e80:	bd38      	pop	{r3, r4, r5, pc}
 8000e82:	bf00      	nop
 8000e84:	20000004 	.word	0x20000004
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_Init+0x28>)
 8000e8e:	6813      	ldr	r3, [r2, #0]
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000e94:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9a:	f000 f839 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ffce 	bl	8000e40 <HAL_InitTick>
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	b918      	cbnz	r0, 8000eb0 <HAL_Init+0x24>
    HAL_MspInit();
 8000ea8:	f004 fdd0 	bl	8005a4c <HAL_MspInit>
}
 8000eac:	4620      	mov	r0, r4
 8000eae:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000eb0:	2401      	movs	r4, #1
 8000eb2:	e7fb      	b.n	8000eac <HAL_Init+0x20>
 8000eb4:	58004000 	.word	0x58004000

08000eb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_IncTick+0x10>)
 8000eba:	4904      	ldr	r1, [pc, #16]	; (8000ecc <HAL_IncTick+0x14>)
 8000ebc:	6813      	ldr	r3, [r2, #0]
 8000ebe:	6809      	ldr	r1, [r1, #0]
 8000ec0:	440b      	add	r3, r1
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000438 	.word	0x20000438
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ed0:	4b01      	ldr	r3, [pc, #4]	; (8000ed8 <HAL_GetTick+0x8>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000438 	.word	0x20000438

08000edc <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8000edc:	4b01      	ldr	r3, [pc, #4]	; (8000ee4 <HAL_GetTickPrio+0x8>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff fff0 	bl	8000ed0 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000ef0:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 8000ef2:	bf1c      	itt	ne
 8000ef4:	4b05      	ldrne	r3, [pc, #20]	; (8000f0c <HAL_Delay+0x24>)
 8000ef6:	681b      	ldrne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 8000ef8:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 8000efa:	bf18      	it	ne
 8000efc:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	f7ff ffe7 	bl	8000ed0 <HAL_GetTick>
 8000f02:	1b40      	subs	r0, r0, r5
 8000f04:	4284      	cmp	r4, r0
 8000f06:	d8fa      	bhi.n	8000efe <HAL_Delay+0x16>
    {
    }
  }
 8000f08:	bd38      	pop	{r3, r4, r5, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f12:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	0c1b      	lsrs	r3, r3, #16
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	0200      	lsls	r0, r0, #8
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f2a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f2c:	60d3      	str	r3, [r2, #12]
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f36:	b530      	push	{r4, r5, lr}
 8000f38:	68dc      	ldr	r4, [r3, #12]
 8000f3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	bf28      	it	cs
 8000f48:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 0501 	mov.w	r5, #1
 8000f50:	fa05 f303 	lsl.w	r3, r5, r3
 8000f54:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f58:	bf8c      	ite	hi
 8000f5a:	3c03      	subhi	r4, #3
 8000f5c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5e:	4019      	ands	r1, r3
 8000f60:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f62:	fa05 f404 	lsl.w	r4, r5, r4
 8000f66:	3c01      	subs	r4, #1
 8000f68:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	ea42 0201 	orr.w	r2, r2, r1
 8000f70:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	bfad      	iteet	ge
 8000f76:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	f000 000f 	andlt.w	r0, r0, #15
 8000f7e:	4b06      	ldrlt	r3, [pc, #24]	; (8000f98 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	bfb5      	itete	lt
 8000f86:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f90:	bd30      	pop	{r4, r5, pc}
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	e000ed14 	.word	0xe000ed14

08000f9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	db08      	blt.n	8000fb2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa0:	0942      	lsrs	r2, r0, #5
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f000 001f 	and.w	r0, r0, #31
 8000fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8000fac:	4b01      	ldr	r3, [pc, #4]	; (8000fb4 <HAL_NVIC_EnableIRQ+0x18>)
 8000fae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	3801      	subs	r0, #1
 8000fba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fbe:	d20a      	bcs.n	8000fd6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	21f0      	movs	r1, #240	; 0xf0
 8000fc8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000fe4:	6803      	ldr	r3, [r0, #0]
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000fec:	bf88      	it	hi
 8000fee:	490f      	ldrhi	r1, [pc, #60]	; (800102c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000ff0:	f022 0203 	bic.w	r2, r2, #3
 8000ff4:	bf9b      	ittet	ls
 8000ff6:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 8000ffa:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000ffe:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001000:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001002:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8001006:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001008:	f1a3 0308 	sub.w	r3, r3, #8
 800100c:	f04f 0214 	mov.w	r2, #20
 8001010:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001014:	f04f 0201 	mov.w	r2, #1
 8001018:	f003 031c 	and.w	r3, r3, #28
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001020:	bf88      	it	hi
 8001022:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001024:	6503      	str	r3, [r0, #80]	; 0x50
 8001026:	4770      	bx	lr
 8001028:	40020407 	.word	0x40020407
 800102c:	4002081c 	.word	0x4002081c
 8001030:	40020880 	.word	0x40020880

08001034 <HAL_DMA_Init>:
{
 8001034:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8001036:	4604      	mov	r4, r0
 8001038:	2800      	cmp	r0, #0
 800103a:	d05d      	beq.n	80010f8 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800103c:	6801      	ldr	r1, [r0, #0]
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_DMA_Init+0xc8>)
 8001040:	4299      	cmp	r1, r3
 8001042:	f04f 0014 	mov.w	r0, #20
 8001046:	d84a      	bhi.n	80010de <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001048:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <HAL_DMA_Init+0xcc>)
 800104a:	440a      	add	r2, r1
 800104c:	fbb2 f2f0 	udiv	r2, r2, r0
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001054:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001058:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800105a:	2302      	movs	r3, #2
 800105c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001060:	68e0      	ldr	r0, [r4, #12]
 8001062:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8001064:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001066:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001068:	6920      	ldr	r0, [r4, #16]
 800106a:	4303      	orrs	r3, r0
 800106c:	6960      	ldr	r0, [r4, #20]
 800106e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001070:	69a0      	ldr	r0, [r4, #24]
 8001072:	4303      	orrs	r3, r0
 8001074:	69e0      	ldr	r0, [r4, #28]
 8001076:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001078:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800107a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800107e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001082:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001084:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001086:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff ffab 	bl	8000fe4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800108e:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001090:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001092:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001098:	bf04      	itt	eq
 800109a:	2300      	moveq	r3, #0
 800109c:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800109e:	6862      	ldr	r2, [r4, #4]
 80010a0:	b2d3      	uxtb	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010a4:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010a8:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010aa:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010ac:	d81f      	bhi.n	80010ee <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80010b0:	4815      	ldr	r0, [pc, #84]	; (8001108 <HAL_DMA_Init+0xd4>)
 80010b2:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010b4:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010b6:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010b8:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010ba:	2101      	movs	r1, #1
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80010c4:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010c6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010c8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80010ca:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010cc:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ce:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80010d0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80010d4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80010d8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 80010dc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_DMA_Init+0xd8>)
 80010e0:	440b      	add	r3, r1
 80010e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_DMA_Init+0xdc>)
 80010ec:	e7b4      	b.n	8001058 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80010f2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80010f4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80010f6:	e7ea      	b.n	80010ce <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
}
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	40020407 	.word	0x40020407
 8001100:	bffdfff8 	.word	0xbffdfff8
 8001104:	1000823f 	.word	0x1000823f
 8001108:	40020940 	.word	0x40020940
 800110c:	bffdfbf8 	.word	0xbffdfbf8
 8001110:	40020400 	.word	0x40020400

08001114 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8001114:	b140      	cbz	r0, 8001128 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001116:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800111a:	2b02      	cmp	r3, #2
 800111c:	d006      	beq.n	800112c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111e:	2304      	movs	r3, #4
 8001120:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001122:	2300      	movs	r3, #0
 8001124:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
}
 800112a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112c:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800112e:	6c81      	ldr	r1, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f022 020e 	bic.w	r2, r2, #14
 8001136:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001138:	680a      	ldr	r2, [r1, #0]
 800113a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800113e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001140:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001142:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001144:	f022 0201 	bic.w	r2, r2, #1
 8001148:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800114a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800114c:	f003 021c 	and.w	r2, r3, #28
 8001150:	2301      	movs	r3, #1
 8001152:	4093      	lsls	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001156:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001158:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800115a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800115c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800115e:	b133      	cbz	r3, 800116e <HAL_DMA_Abort+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001166:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001168:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800116a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800116c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800116e:	2301      	movs	r3, #1
 8001170:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001174:	2300      	movs	r3, #0
 8001176:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 800117a:	4618      	mov	r0, r3
 800117c:	4770      	bx	lr

0800117e <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800117e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001182:	2b02      	cmp	r3, #2
{
 8001184:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001186:	d003      	beq.n	8001190 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001188:	2304      	movs	r3, #4
 800118a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800118c:	2001      	movs	r0, #1
 800118e:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001190:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001192:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f022 020e 	bic.w	r2, r2, #14
 800119a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011a4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ac:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011b0:	f003 021c 	and.w	r2, r3, #28
 80011b4:	2301      	movs	r3, #1
 80011b6:	4093      	lsls	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80011bc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80011be:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80011c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80011c2:	b133      	cbz	r3, 80011d2 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011cc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80011ce:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80011d0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 80011d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80011da:	2400      	movs	r4, #0
 80011dc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80011e0:	b113      	cbz	r3, 80011e8 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80011e2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80011e4:	4620      	mov	r0, r4
 80011e6:	bd10      	pop	{r4, pc}
 80011e8:	4618      	mov	r0, r3
}
 80011ea:	bd10      	pop	{r4, pc}

080011ec <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80011f0:	6803      	ldr	r3, [r0, #0]
{
 80011f2:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011f4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011f8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80011fa:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011fc:	2404      	movs	r4, #4
 80011fe:	4094      	lsls	r4, r2
 8001200:	4226      	tst	r6, r4
 8001202:	d00e      	beq.n	8001222 <HAL_DMA_IRQHandler+0x36>
 8001204:	f015 0f04 	tst.w	r5, #4
 8001208:	d00b      	beq.n	8001222 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800120e:	bf5e      	ittt	pl
 8001210:	681a      	ldrpl	r2, [r3, #0]
 8001212:	f022 0204 	bicpl.w	r2, r2, #4
 8001216:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001218:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800121a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800121c:	b373      	cbz	r3, 800127c <HAL_DMA_IRQHandler+0x90>
}
 800121e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001220:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001222:	2402      	movs	r4, #2
 8001224:	4094      	lsls	r4, r2
 8001226:	4226      	tst	r6, r4
 8001228:	d012      	beq.n	8001250 <HAL_DMA_IRQHandler+0x64>
 800122a:	f015 0f02 	tst.w	r5, #2
 800122e:	d00f      	beq.n	8001250 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	0695      	lsls	r5, r2, #26
 8001234:	d406      	bmi.n	8001244 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f022 020a 	bic.w	r2, r2, #10
 800123c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800123e:	2301      	movs	r3, #1
 8001240:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001244:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001246:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001248:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800124c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800124e:	e7e5      	b.n	800121c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001250:	2408      	movs	r4, #8
 8001252:	4094      	lsls	r4, r2
 8001254:	4234      	tst	r4, r6
 8001256:	d011      	beq.n	800127c <HAL_DMA_IRQHandler+0x90>
 8001258:	072c      	lsls	r4, r5, #28
 800125a:	d50f      	bpl.n	800127c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125c:	681c      	ldr	r4, [r3, #0]
 800125e:	f024 040e 	bic.w	r4, r4, #14
 8001262:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001264:	2301      	movs	r3, #1
 8001266:	fa03 f202 	lsl.w	r2, r3, r2
 800126a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800126c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800126e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001272:	2300      	movs	r3, #0
 8001274:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001278:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800127a:	e7cf      	b.n	800121c <HAL_DMA_IRQHandler+0x30>
}
 800127c:	bc70      	pop	{r4, r5, r6}
 800127e:	4770      	bx	lr

08001280 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001280:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8001282:	4770      	bx	lr

08001284 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001288:	4a55      	ldr	r2, [pc, #340]	; (80013e0 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 800128e:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001290:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001294:	fa38 f403 	lsrs.w	r4, r8, r3
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 800129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129e:	2401      	movs	r4, #1
 80012a0:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 80012a4:	ea18 050a 	ands.w	r5, r8, sl
 80012a8:	f000 808f 	beq.w	80013ca <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	684c      	ldr	r4, [r1, #4]
 80012ae:	f024 0b10 	bic.w	fp, r4, #16
 80012b2:	f1bb 0f02 	cmp.w	fp, #2
 80012b6:	d111      	bne.n	80012dc <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 80012b8:	08df      	lsrs	r7, r3, #3
 80012ba:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012be:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80012c2:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80012c8:	fa09 fc0e 	lsl.w	ip, r9, lr
 80012cc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d0:	690e      	ldr	r6, [r1, #16]
 80012d2:	fa06 f60e 	lsl.w	r6, r6, lr
 80012d6:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 80012da:	623e      	str	r6, [r7, #32]
 80012dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e0:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80012e2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e4:	fa07 f70c 	lsl.w	r7, r7, ip
 80012e8:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ea:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ee:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012f4:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f8:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fc:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001300:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001302:	d811      	bhi.n	8001328 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8001304:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001306:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800130a:	68ce      	ldr	r6, [r1, #12]
 800130c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001310:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001314:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001316:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001318:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800131c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001320:	409e      	lsls	r6, r3
 8001322:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001326:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001328:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800132a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800132c:	688e      	ldr	r6, [r1, #8]
 800132e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001332:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001334:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001336:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001338:	d547      	bpl.n	80013ca <HAL_GPIO_Init+0x146>
 800133a:	f023 0703 	bic.w	r7, r3, #3
 800133e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001342:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001346:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800134a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800134c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001350:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001354:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001358:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135c:	d037      	beq.n	80013ce <HAL_GPIO_Init+0x14a>
 800135e:	4e21      	ldr	r6, [pc, #132]	; (80013e4 <HAL_GPIO_Init+0x160>)
 8001360:	42b0      	cmp	r0, r6
 8001362:	d036      	beq.n	80013d2 <HAL_GPIO_Init+0x14e>
 8001364:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001368:	42b0      	cmp	r0, r6
 800136a:	d034      	beq.n	80013d6 <HAL_GPIO_Init+0x152>
 800136c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001370:	42b0      	cmp	r0, r6
 8001372:	d032      	beq.n	80013da <HAL_GPIO_Init+0x156>
 8001374:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001378:	42b0      	cmp	r0, r6
 800137a:	bf14      	ite	ne
 800137c:	2607      	movne	r6, #7
 800137e:	2604      	moveq	r6, #4
 8001380:	fa06 f60e 	lsl.w	r6, r6, lr
 8001384:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001388:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800138a:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 800138e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001390:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001394:	bf0c      	ite	eq
 8001396:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001398:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800139a:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 800139e:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80013a6:	bf0c      	ite	eq
 80013a8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80013aa:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 80013ac:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 80013b0:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80013b6:	bf0c      	ite	eq
 80013b8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80013ba:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80013bc:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 80013be:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c0:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80013c2:	bf54      	ite	pl
 80013c4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80013c6:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 80013c8:	6056      	str	r6, [r2, #4]
    position++;
 80013ca:	3301      	adds	r3, #1
 80013cc:	e762      	b.n	8001294 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ce:	2600      	movs	r6, #0
 80013d0:	e7d6      	b.n	8001380 <HAL_GPIO_Init+0xfc>
 80013d2:	2601      	movs	r6, #1
 80013d4:	e7d4      	b.n	8001380 <HAL_GPIO_Init+0xfc>
 80013d6:	2602      	movs	r6, #2
 80013d8:	e7d2      	b.n	8001380 <HAL_GPIO_Init+0xfc>
 80013da:	2603      	movs	r6, #3
 80013dc:	e7d0      	b.n	8001380 <HAL_GPIO_Init+0xfc>
 80013de:	bf00      	nop
 80013e0:	58000800 	.word	0x58000800
 80013e4:	48000400 	.word	0x48000400

080013e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	b10a      	cbz	r2, 80013ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ea:	6181      	str	r1, [r0, #24]
 80013ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ee:	6281      	str	r1, [r0, #40]	; 0x28
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013f2:	6943      	ldr	r3, [r0, #20]
 80013f4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f6:	bf14      	ite	ne
 80013f8:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fa:	6181      	streq	r1, [r0, #24]
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001400:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001404:	68d9      	ldr	r1, [r3, #12]
 8001406:	4201      	tst	r1, r0
 8001408:	d002      	beq.n	8001410 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800140c:	f004 fb10 	bl	8005a30 <HAL_GPIO_EXTI_Callback>
 8001410:	bd08      	pop	{r3, pc}
 8001412:	bf00      	nop
 8001414:	58000800 	.word	0x58000800

08001418 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001418:	6803      	ldr	r3, [r0, #0]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800141e:	bf44      	itt	mi
 8001420:	2200      	movmi	r2, #0
 8001422:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001428:	bf5e      	ittt	pl
 800142a:	699a      	ldrpl	r2, [r3, #24]
 800142c:	f042 0201 	orrpl.w	r2, r2, #1
 8001430:	619a      	strpl	r2, [r3, #24]
 8001432:	4770      	bx	lr

08001434 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001434:	f011 0301 	ands.w	r3, r1, #1
 8001438:	d007      	beq.n	800144a <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800143a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800143e:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001442:	2b28      	cmp	r3, #40	; 0x28
 8001444:	bf0c      	ite	eq
 8001446:	2342      	moveq	r3, #66	; 0x42
 8001448:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800144a:	078a      	lsls	r2, r1, #30
 800144c:	d509      	bpl.n	8001462 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800144e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001452:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001456:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001458:	bf0c      	ite	eq
 800145a:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800145e:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001462:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001464:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001468:	bf48      	it	mi
 800146a:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800146e:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001472:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001474:	bf08      	it	eq
 8001476:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800147a:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800147c:	6801      	ldr	r1, [r0, #0]
 800147e:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 8001480:	bf08      	it	eq
 8001482:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001486:	ea22 0303 	bic.w	r3, r2, r3
 800148a:	600b      	str	r3, [r1, #0]
 800148c:	4770      	bx	lr

0800148e <HAL_I2C_Init>:
{
 800148e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001490:	4604      	mov	r4, r0
 8001492:	2800      	cmp	r0, #0
 8001494:	d04a      	beq.n	800152c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800149a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800149e:	b91b      	cbnz	r3, 80014a8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80014a0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80014a4:	f004 fad4 	bl	8005a50 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a8:	2324      	movs	r3, #36	; 0x24
 80014aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80014ae:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014b0:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ba:	6862      	ldr	r2, [r4, #4]
 80014bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014c0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014c2:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014c4:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014ce:	d124      	bne.n	800151a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014d6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014d8:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014da:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80014de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014ec:	6922      	ldr	r2, [r4, #16]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	69a1      	ldr	r1, [r4, #24]
 80014f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f8:	6a21      	ldr	r1, [r4, #32]
 80014fa:	69e2      	ldr	r2, [r4, #28]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001508:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800150a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800150e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001512:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001514:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001518:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800151a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001520:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001522:	bf04      	itt	eq
 8001524:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001528:	605a      	streq	r2, [r3, #4]
 800152a:	e7d4      	b.n	80014d6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
}
 800152e:	bd10      	pop	{r4, pc}

08001530 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001530:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8001532:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001534:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001536:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8001538:	b103      	cbz	r3, 800153c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800153a:	4718      	bx	r3
 800153c:	4770      	bx	lr

0800153e <HAL_I2C_SlaveTxCpltCallback>:
 800153e:	4770      	bx	lr

08001540 <HAL_I2C_SlaveRxCpltCallback>:
 8001540:	4770      	bx	lr

08001542 <I2C_ITSlaveSeqCplt>:
{
 8001542:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001544:	2500      	movs	r5, #0
 8001546:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800154a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800154e:	2b29      	cmp	r3, #41	; 0x29
 8001550:	d10c      	bne.n	800156c <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001552:	2328      	movs	r3, #40	; 0x28
 8001554:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001558:	2321      	movs	r3, #33	; 0x21
 800155a:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800155c:	2101      	movs	r1, #1
 800155e:	f7ff ff69 	bl	8001434 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001562:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001566:	f7ff ffea 	bl	800153e <HAL_I2C_SlaveTxCpltCallback>
 800156a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800156c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001570:	2b2a      	cmp	r3, #42	; 0x2a
 8001572:	d10b      	bne.n	800158c <I2C_ITSlaveSeqCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001574:	2328      	movs	r3, #40	; 0x28
 8001576:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800157a:	2322      	movs	r3, #34	; 0x22
 800157c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800157e:	2102      	movs	r1, #2
 8001580:	f7ff ff58 	bl	8001434 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001584:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001588:	f7ff ffda 	bl	8001540 <HAL_I2C_SlaveRxCpltCallback>
 800158c:	bd38      	pop	{r3, r4, r5, pc}

0800158e <HAL_I2C_AddrCallback>:
{
 800158e:	4770      	bx	lr

08001590 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001592:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001596:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800159a:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800159c:	4604      	mov	r4, r0
 800159e:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80015a0:	d134      	bne.n	800160c <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 80015a2:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015a4:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80015a6:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80015a8:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80015aa:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80015ac:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015ae:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 80015b0:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80015b4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015b8:	d120      	bne.n	80015fc <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80015ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80015be:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80015c2:	f015 0506 	ands.w	r5, r5, #6
 80015c6:	d10e      	bne.n	80015e6 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 80015c8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80015ca:	3101      	adds	r1, #1
 80015cc:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80015ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80015d0:	2902      	cmp	r1, #2
 80015d2:	d120      	bne.n	8001616 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80015d4:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 80015d6:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80015d8:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80015da:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015de:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015e0:	f7ff ffd5 	bl	800158e <HAL_I2C_AddrCallback>
 80015e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015e6:	2104      	movs	r1, #4
 80015e8:	f7ff ff24 	bl	8001434 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80015ec:	2300      	movs	r3, #0
 80015ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015f2:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015f6:	4631      	mov	r1, r6
 80015f8:	4620      	mov	r0, r4
 80015fa:	e7f1      	b.n	80015e0 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015fc:	2104      	movs	r1, #4
 80015fe:	f7ff ff19 	bl	8001434 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001602:	2300      	movs	r3, #0
 8001604:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001608:	462a      	mov	r2, r5
 800160a:	e7f4      	b.n	80015f6 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800160c:	2208      	movs	r2, #8
 800160e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001610:	2300      	movs	r3, #0
 8001612:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001618 <HAL_I2C_ListenCpltCallback>:
 8001618:	4770      	bx	lr
	...

0800161c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <I2C_ITListenCplt+0x60>)
{
 800161e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8001620:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8001628:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 800162a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001632:	074b      	lsls	r3, r1, #29
{
 8001634:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001636:	d512      	bpl.n	800165e <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001638:	6802      	ldr	r2, [r0, #0]
 800163a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800163c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800163e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001642:	3301      	adds	r3, #1
 8001644:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001646:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001648:	b14b      	cbz	r3, 800165e <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 800164a:	3b01      	subs	r3, #1
 800164c:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800164e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001650:	3b01      	subs	r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001656:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800165e:	4620      	mov	r0, r4
 8001660:	2107      	movs	r1, #7
 8001662:	f7ff fee7 	bl	8001434 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	2210      	movs	r2, #16
 800166a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800166c:	2300      	movs	r3, #0
 800166e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff ffd0 	bl	8001618 <HAL_I2C_ListenCpltCallback>
 8001678:	bd10      	pop	{r4, pc}
 800167a:	bf00      	nop
 800167c:	ffff0000 	.word	0xffff0000

08001680 <HAL_I2C_ErrorCallback>:
 8001680:	4770      	bx	lr

08001682 <HAL_I2C_AbortCpltCallback>:
{
 8001682:	4770      	bx	lr

08001684 <I2C_ITError>:
{
 8001684:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001686:	4a32      	ldr	r2, [pc, #200]	; (8001750 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001688:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800168c:	2500      	movs	r5, #0
 800168e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001692:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001694:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001696:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001698:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 800169a:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800169c:	2b02      	cmp	r3, #2
{
 800169e:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 80016a0:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80016a2:	d822      	bhi.n	80016ea <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80016a4:	2103      	movs	r1, #3
 80016a6:	f7ff fec5 	bl	8001434 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80016aa:	2328      	movs	r3, #40	; 0x28
 80016ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 80016b2:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80016b4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80016ba:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80016bc:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 80016c0:	d020      	beq.n	8001704 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 80016c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80016c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d03e      	beq.n	800174c <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <I2C_ITError+0xd4>)
 80016d0:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80016d2:	2300      	movs	r3, #0
 80016d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80016d8:	f7ff fd51 	bl	800117e <HAL_DMA_Abort_IT>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d035      	beq.n	800174c <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80016e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80016e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80016e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80016e8:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80016ea:	2107      	movs	r1, #7
 80016ec:	f7ff fea2 	bl	8001434 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80016f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80016f4:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 80016f6:	bf1c      	itt	ne
 80016f8:	2320      	movne	r3, #32
 80016fa:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80016fe:	2300      	movs	r3, #0
 8001700:	6303      	str	r3, [r0, #48]	; 0x30
 8001702:	e7d7      	b.n	80016b4 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001704:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8001708:	d00e      	beq.n	8001728 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800170a:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800170c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800170e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001712:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001714:	b1d0      	cbz	r0, 800174c <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <I2C_ITError+0xd4>)
 8001718:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800171a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800171e:	f7ff fd2e 	bl	800117e <HAL_DMA_Abort_IT>
 8001722:	b198      	cbz	r0, 800174c <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001724:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001726:	e7dc      	b.n	80016e2 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001728:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800172c:	2b60      	cmp	r3, #96	; 0x60
 800172e:	d108      	bne.n	8001742 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8001730:	2320      	movs	r3, #32
 8001732:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001736:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff ffa1 	bl	8001682 <HAL_I2C_AbortCpltCallback>
 8001740:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8001742:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff ff9a 	bl	8001680 <HAL_I2C_ErrorCallback>
 800174c:	bd70      	pop	{r4, r5, r6, pc}
 800174e:	bf00      	nop
 8001750:	ffff0000 	.word	0xffff0000
 8001754:	08001855 	.word	0x08001855
 8001758:	080019c9 	.word	0x080019c9

0800175c <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800175c:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175e:	2220      	movs	r2, #32
{
 8001760:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001762:	681d      	ldr	r5, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001764:	61da      	str	r2, [r3, #28]
{
 8001766:	460e      	mov	r6, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001768:	2107      	movs	r1, #7
{
 800176a:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800176c:	f7ff fe62 	bl	8001434 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001770:	6803      	ldr	r3, [r0, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001778:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001780:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001784:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001788:	f022 0201 	bic.w	r2, r2, #1
 800178c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800178e:	f7ff fe43 	bl	8001418 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001792:	0469      	lsls	r1, r5, #17
 8001794:	d534      	bpl.n	8001800 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8001796:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8001798:	b11b      	cbz	r3, 80017a2 <I2C_ITSlaveCplt+0x46>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80017a2:	0773      	lsls	r3, r6, #29
 80017a4:	d510      	bpl.n	80017c8 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80017ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017b0:	3301      	adds	r3, #1
 80017b2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80017b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80017b6:	f026 0604 	bic.w	r6, r6, #4
    if ((hi2c->XferSize > 0U))
 80017ba:	b12b      	cbz	r3, 80017c8 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 80017bc:	3b01      	subs	r3, #1
 80017be:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80017c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80017c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b11b      	cbz	r3, 80017d6 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017de:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80017e0:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017e2:	b18d      	cbz	r5, 8001808 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80017e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff ff4c 	bl	8001684 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80017ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80017f0:	2b28      	cmp	r3, #40	; 0x28
 80017f2:	d12b      	bne.n	800184c <I2C_ITSlaveCplt+0xf0>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80017f4:	4631      	mov	r1, r6
 80017f6:	4620      	mov	r0, r4
}
 80017f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80017fc:	f7ff bf0e 	b.w	800161c <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001800:	042a      	lsls	r2, r5, #16
 8001802:	d5ce      	bpl.n	80017a2 <I2C_ITSlaveCplt+0x46>
    if (hi2c->hdmarx != NULL)
 8001804:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001806:	e7c7      	b.n	8001798 <I2C_ITSlaveCplt+0x3c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800180a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800180e:	d00d      	beq.n	800182c <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fe96 	bl	8001542 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <I2C_ITSlaveCplt+0xf4>)
 8001818:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800181a:	2320      	movs	r3, #32
 800181c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001820:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff fef7 	bl	8001618 <HAL_I2C_ListenCpltCallback>
 800182a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800182c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001830:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001834:	2b22      	cmp	r3, #34	; 0x22
 8001836:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 800183a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800183e:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001840:	d102      	bne.n	8001848 <I2C_ITSlaveCplt+0xec>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001842:	f7ff fe7d 	bl	8001540 <HAL_I2C_SlaveRxCpltCallback>
 8001846:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001848:	f7ff fe79 	bl	800153e <HAL_I2C_SlaveTxCpltCallback>
 800184c:	bd70      	pop	{r4, r5, r6, pc}
 800184e:	bf00      	nop
 8001850:	ffff0000 	.word	0xffff0000

08001854 <I2C_Slave_ISR_IT>:
{
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8001858:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800185c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800185e:	2a01      	cmp	r2, #1
{
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8001864:	d07e      	beq.n	8001964 <I2C_Slave_ISR_IT+0x110>
 8001866:	2201      	movs	r2, #1
 8001868:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800186c:	06ca      	lsls	r2, r1, #27
 800186e:	d539      	bpl.n	80018e4 <I2C_Slave_ISR_IT+0x90>
 8001870:	06f2      	lsls	r2, r6, #27
 8001872:	d537      	bpl.n	80018e4 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8001874:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001876:	b292      	uxth	r2, r2
 8001878:	bb32      	cbnz	r2, 80018c8 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800187a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800187e:	2a28      	cmp	r2, #40	; 0x28
 8001880:	d110      	bne.n	80018a4 <I2C_Slave_ISR_IT+0x50>
 8001882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001886:	d10d      	bne.n	80018a4 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001888:	f7ff fec8 	bl	800161c <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800188c:	06aa      	lsls	r2, r5, #26
 800188e:	d505      	bpl.n	800189c <I2C_Slave_ISR_IT+0x48>
 8001890:	06b3      	lsls	r3, r6, #26
 8001892:	d503      	bpl.n	800189c <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001894:	4629      	mov	r1, r5
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff ff60 	bl	800175c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 800189c:	2000      	movs	r0, #0
 800189e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80018a4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80018a8:	2a29      	cmp	r2, #41	; 0x29
 80018aa:	6822      	ldr	r2, [r4, #0]
 80018ac:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b0:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80018b2:	d1eb      	bne.n	800188c <I2C_Slave_ISR_IT+0x38>
 80018b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018b8:	d0e8      	beq.n	800188c <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff fdac 	bl	8001418 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fe3e 	bl	8001542 <I2C_ITSlaveSeqCplt>
 80018c6:	e7e1      	b.n	800188c <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	2110      	movs	r1, #16
 80018cc:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80018d0:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018d4:	f042 0204 	orr.w	r2, r2, #4
 80018d8:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80018da:	d1d7      	bne.n	800188c <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80018dc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80018de:	f7ff fed1 	bl	8001684 <I2C_ITError>
 80018e2:	e7d3      	b.n	800188c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80018e4:	076a      	lsls	r2, r5, #29
 80018e6:	d51c      	bpl.n	8001922 <I2C_Slave_ISR_IT+0xce>
 80018e8:	0770      	lsls	r0, r6, #29
 80018ea:	d51a      	bpl.n	8001922 <I2C_Slave_ISR_IT+0xce>
    if (hi2c->XferCount > 0U)
 80018ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80018ee:	b292      	uxth	r2, r2
 80018f0:	b17a      	cbz	r2, 8001912 <I2C_Slave_ISR_IT+0xbe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018f2:	6821      	ldr	r1, [r4, #0]
 80018f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018f6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80018f8:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 80018fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018fc:	3201      	adds	r2, #1
 80018fe:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001900:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001902:	3a01      	subs	r2, #1
 8001904:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001906:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001908:	3a01      	subs	r2, #1
 800190a:	b292      	uxth	r2, r2
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800190c:	f025 0504 	bic.w	r5, r5, #4
      hi2c->XferCount--;
 8001910:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001912:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001914:	b292      	uxth	r2, r2
 8001916:	2a00      	cmp	r2, #0
 8001918:	d1b8      	bne.n	800188c <I2C_Slave_ISR_IT+0x38>
 800191a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800191e:	d1cf      	bne.n	80018c0 <I2C_Slave_ISR_IT+0x6c>
 8001920:	e7b4      	b.n	800188c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001922:	0729      	lsls	r1, r5, #28
 8001924:	d505      	bpl.n	8001932 <I2C_Slave_ISR_IT+0xde>
 8001926:	0732      	lsls	r2, r6, #28
 8001928:	d503      	bpl.n	8001932 <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fe30 	bl	8001590 <I2C_ITAddrCplt.isra.8>
 8001930:	e7ac      	b.n	800188c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001932:	07a8      	lsls	r0, r5, #30
 8001934:	d5aa      	bpl.n	800188c <I2C_Slave_ISR_IT+0x38>
 8001936:	07b1      	lsls	r1, r6, #30
 8001938:	d5a8      	bpl.n	800188c <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 800193a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800193c:	b292      	uxth	r2, r2
 800193e:	b16a      	cbz	r2, 800195c <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001948:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800194a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800194c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800194e:	3b01      	subs	r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001954:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001956:	3b01      	subs	r3, #1
 8001958:	8523      	strh	r3, [r4, #40]	; 0x28
 800195a:	e797      	b.n	800188c <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800195c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8001960:	d194      	bne.n	800188c <I2C_Slave_ISR_IT+0x38>
 8001962:	e7ad      	b.n	80018c0 <I2C_Slave_ISR_IT+0x6c>
  __HAL_LOCK(hi2c);
 8001964:	2002      	movs	r0, #2
}
 8001966:	bd70      	pop	{r4, r5, r6, pc}

08001968 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001968:	6803      	ldr	r3, [r0, #0]
 800196a:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800196c:	681a      	ldr	r2, [r3, #0]
{
 800196e:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001970:	05cc      	lsls	r4, r1, #23
 8001972:	d508      	bpl.n	8001986 <HAL_I2C_ER_IRQHandler+0x1e>
 8001974:	0614      	lsls	r4, r2, #24
 8001976:	d506      	bpl.n	8001986 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001978:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800197a:	f044 0401 	orr.w	r4, r4, #1
 800197e:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001980:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001984:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001986:	054c      	lsls	r4, r1, #21
 8001988:	d508      	bpl.n	800199c <HAL_I2C_ER_IRQHandler+0x34>
 800198a:	0614      	lsls	r4, r2, #24
 800198c:	d506      	bpl.n	800199c <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800198e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001990:	f044 0408 	orr.w	r4, r4, #8
 8001994:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001996:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800199a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800199c:	0589      	lsls	r1, r1, #22
 800199e:	d508      	bpl.n	80019b2 <HAL_I2C_ER_IRQHandler+0x4a>
 80019a0:	0612      	lsls	r2, r2, #24
 80019a2:	d506      	bpl.n	80019b2 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80019a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80019a6:	f042 0202 	orr.w	r2, r2, #2
 80019aa:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b0:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80019b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80019b4:	f011 0f0b 	tst.w	r1, #11
 80019b8:	d003      	beq.n	80019c2 <HAL_I2C_ER_IRQHandler+0x5a>
}
 80019ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80019be:	f7ff be61 	b.w	8001684 <I2C_ITError>
}
 80019c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80019c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 80019ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 80019cc:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80019d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80019d4:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80019d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019da:	2b60      	cmp	r3, #96	; 0x60
 80019dc:	d105      	bne.n	80019ea <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 80019de:	2320      	movs	r3, #32
 80019e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80019e4:	f7ff fe4d 	bl	8001682 <HAL_I2C_AbortCpltCallback>
 80019e8:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80019ea:	f7ff fe49 	bl	8001680 <HAL_I2C_ErrorCallback>
 80019ee:	bd08      	pop	{r3, pc}

080019f0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	2a20      	cmp	r2, #32
{
 80019f8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	d11d      	bne.n	8001a38 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d019      	beq.n	8001a38 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a04:	2324      	movs	r3, #36	; 0x24
 8001a06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a0a:	6803      	ldr	r3, [r0, #0]
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	f024 0401 	bic.w	r4, r4, #1
 8001a12:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a14:	681c      	ldr	r4, [r3, #0]
 8001a16:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001a1a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a1c:	681c      	ldr	r4, [r3, #0]
 8001a1e:	4321      	orrs	r1, r4
 8001a20:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	f041 0101 	orr.w	r1, r1, #1
 8001a28:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001a2c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a30:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001a38:	2002      	movs	r0, #2
  }
}
 8001a3a:	bd10      	pop	{r4, pc}

08001a3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a3c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001a42:	b2e4      	uxtb	r4, r4
 8001a44:	2c20      	cmp	r4, #32
 8001a46:	d11c      	bne.n	8001a82 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a48:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d018      	beq.n	8001a82 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a50:	2324      	movs	r3, #36	; 0x24
 8001a52:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a56:	6803      	ldr	r3, [r0, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a60:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a62:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a66:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a6a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a74:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a7a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001a82:	2002      	movs	r0, #2
  }
}
 8001a84:	bd10      	pop	{r4, pc}
	...

08001a88 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001a88:	4a02      	ldr	r2, [pc, #8]	; (8001a94 <HAL_I2CEx_EnableFastModePlus+0xc>)
 8001a8a:	6853      	ldr	r3, [r2, #4]
 8001a8c:	4318      	orrs	r0, r3
 8001a8e:	6050      	str	r0, [r2, #4]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a98:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a9a:	4604      	mov	r4, r0
{
 8001a9c:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d057      	beq.n	8001b52 <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001aa2:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001aa6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aaa:	b91b      	cbnz	r3, 8001ab4 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aac:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ab0:	f004 fa1c 	bl	8005eec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001aba:	6820      	ldr	r0, [r4, #0]
 8001abc:	f002 fc03 	bl	80042c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ac4:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ac6:	4615      	mov	r5, r2
 8001ac8:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	4298      	cmp	r0, r3
 8001acc:	f102 0201 	add.w	r2, r2, #1
 8001ad0:	d820      	bhi.n	8001b14 <HAL_PCD_Init+0x7c>
 8001ad2:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad8:	4298      	cmp	r0, r3
 8001ada:	f102 0201 	add.w	r2, r2, #1
 8001ade:	d828      	bhi.n	8001b32 <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ae0:	f104 0610 	add.w	r6, r4, #16
 8001ae4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ae6:	466d      	mov	r5, sp
 8001ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aea:	6833      	ldr	r3, [r6, #0]
 8001aec:	602b      	str	r3, [r5, #0]
 8001aee:	1d23      	adds	r3, r4, #4
 8001af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001af2:	6820      	ldr	r0, [r4, #0]
 8001af4:	f002 fbf1 	bl	80042da <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001af8:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8001afa:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001afc:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b00:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b04:	69e3      	ldr	r3, [r4, #28]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f000 fbbb 	bl	8002286 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001b10:	4628      	mov	r0, r5
 8001b12:	e01f      	b.n	8001b54 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 8001b14:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8001b18:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b1c:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b1e:	3302      	adds	r3, #2
 8001b20:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8001b22:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b26:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b2a:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b2c:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b2e:	50e5      	str	r5, [r4, r3]
 8001b30:	e7ca      	b.n	8001ac8 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8001b32:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001b36:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b3a:	330a      	adds	r3, #10
 8001b3c:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8001b3e:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b42:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b46:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b4a:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b4e:	50e1      	str	r1, [r4, r3]
 8001b50:	e7c1      	b.n	8001ad6 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
}
 8001b54:	b006      	add	sp, #24
 8001b56:	bd70      	pop	{r4, r5, r6, pc}

08001b58 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001b58:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001b5c:	2b01      	cmp	r3, #1
{
 8001b5e:	b510      	push	{r4, lr}
 8001b60:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001b62:	d00c      	beq.n	8001b7e <HAL_PCD_Start+0x26>
 8001b64:	2301      	movs	r3, #1
 8001b66:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8001b6a:	6800      	ldr	r0, [r0, #0]
 8001b6c:	f002 fe97 	bl	800489e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b70:	6820      	ldr	r0, [r4, #0]
 8001b72:	f002 fb9d 	bl	80042b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001b7c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001b7e:	2002      	movs	r0, #2
}
 8001b80:	bd10      	pop	{r4, pc}

08001b82 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001b82:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8001b86:	2a01      	cmp	r2, #1
{
 8001b88:	b510      	push	{r4, lr}
 8001b8a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_PCD_SetAddress+0x24>
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001b94:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b98:	6800      	ldr	r0, [r0, #0]
 8001b9a:	f002 fe7a 	bl	8004892 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8001ba4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001ba6:	2002      	movs	r0, #2
  return HAL_OK;
}
 8001ba8:	bd10      	pop	{r4, pc}

08001baa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001baa:	b570      	push	{r4, r5, r6, lr}
 8001bac:	4604      	mov	r4, r0
 8001bae:	f001 0007 	and.w	r0, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001bb6:	b2c5      	uxtb	r5, r0
 8001bb8:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bbc:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8001bc0:	bf15      	itete	ne
 8001bc2:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001bc6:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bca:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bcc:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 1U;
 8001bd0:	bf15      	itete	ne
 8001bd2:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8001bd4:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8001bd6:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8001bda:	f885 6129 	strbeq.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8001bde:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001be0:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8001be2:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be4:	b2c0      	uxtb	r0, r0
 8001be6:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8001be8:	b102      	cbz	r2, 8001bec <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bea:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bec:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001bee:	bf04      	itt	eq
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001bf4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d009      	beq.n	8001c10 <HAL_PCD_EP_Open+0x66>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c02:	6820      	ldr	r0, [r4, #0]
 8001c04:	f002 fb86 	bl	8004314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001c10:	2002      	movs	r0, #2
}
 8001c12:	bd70      	pop	{r4, r5, r6, pc}

08001c14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c14:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c18:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c22:	fb01 0102 	mla	r1, r1, r2, r0
{
 8001c26:	b510      	push	{r4, lr}
 8001c28:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8001c2a:	bf19      	ittee	ne
 8001c2c:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c32:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 8001c36:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 8001c3a:	bf15      	itete	ne
 8001c3c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001c3e:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001c40:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 8001c44:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c48:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8001c4a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d009      	beq.n	8001c66 <HAL_PCD_EP_Close+0x52>
 8001c52:	2301      	movs	r3, #1
 8001c54:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	f002 fccd 	bl	80045f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001c64:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c66:	2002      	movs	r0, #2
}
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c6a:	b570      	push	{r4, r5, r6, lr}
 8001c6c:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c70:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8001c74:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001c76:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c78:	f886 1128 	strb.w	r1, [r6, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	f504 7194 	add.w	r1, r4, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c80:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001c82:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
  ep->xfer_len = len;
 8001c86:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
  ep->xfer_count = 0U;
 8001c8a:	f8c6 5144 	str.w	r5, [r6, #324]	; 0x144
  ep->is_in = 0U;
 8001c8e:	f886 5129 	strb.w	r5, [r6, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c92:	6800      	ldr	r0, [r0, #0]
 8001c94:	f002 fe24 	bl	80048e0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001c98:	4628      	mov	r0, r5
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}

08001c9c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c9c:	f001 0107 	and.w	r1, r1, #7
 8001ca0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001ca4:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8001ca8:	4770      	bx	lr

08001caa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001caa:	b570      	push	{r4, r5, r6, lr}
 8001cac:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cb0:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8001cb4:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8001cb6:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8001cb8:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8001cba:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc0:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001cc6:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001cc8:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8001cca:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cce:	6800      	ldr	r0, [r0, #0]
 8001cd0:	f002 fe06 	bl	80048e0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}

08001cd8 <HAL_PCD_IRQHandler>:
{
 8001cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cdc:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cde:	6800      	ldr	r0, [r0, #0]
 8001ce0:	f002 fde8 	bl	80048b4 <USB_ReadInterrupts>
 8001ce4:	0402      	lsls	r2, r0, #16
 8001ce6:	f100 823a 	bmi.w	800215e <HAL_PCD_IRQHandler+0x486>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001cea:	6820      	ldr	r0, [r4, #0]
 8001cec:	f002 fde2 	bl	80048b4 <USB_ReadInterrupts>
 8001cf0:	0543      	lsls	r3, r0, #21
 8001cf2:	d50f      	bpl.n	8001d14 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cf4:	6822      	ldr	r2, [r4, #0]
 8001cf6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8001d02:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d04:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001d08:	f004 f941 	bl	8005f8e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff ff37 	bl	8001b82 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d14:	6820      	ldr	r0, [r4, #0]
 8001d16:	f002 fdcd 	bl	80048b4 <USB_ReadInterrupts>
 8001d1a:	0443      	lsls	r3, r0, #17
 8001d1c:	d508      	bpl.n	8001d30 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d1e:	6822      	ldr	r2, [r4, #0]
 8001d20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	f002 fdbf 	bl	80048b4 <USB_ReadInterrupts>
 8001d36:	0487      	lsls	r7, r0, #18
 8001d38:	d508      	bpl.n	8001d4c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d3a:	6822      	ldr	r2, [r4, #0]
 8001d3c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d4c:	6820      	ldr	r0, [r4, #0]
 8001d4e:	f002 fdb1 	bl	80048b4 <USB_ReadInterrupts>
 8001d52:	04c6      	lsls	r6, r0, #19
 8001d54:	d526      	bpl.n	8001da4 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d68:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001d6c:	f023 0308 	bic.w	r3, r3, #8
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001d78:	f894 3260 	ldrb.w	r3, [r4, #608]	; 0x260
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8001d80:	2100      	movs	r1, #0
 8001d82:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d86:	4620      	mov	r0, r4
 8001d88:	f004 fa04 	bl	8006194 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f004 f921 	bl	8005fd4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	f002 fd85 	bl	80048b4 <USB_ReadInterrupts>
 8001daa:	0505      	lsls	r5, r0, #20
 8001dac:	d51d      	bpl.n	8001dea <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001dae:	6820      	ldr	r0, [r4, #0]
 8001db0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dbe:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001dc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001dce:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001ddc:	f002 fd6a 	bl	80048b4 <USB_ReadInterrupts>
 8001de0:	04c0      	lsls	r0, r0, #19
 8001de2:	d402      	bmi.n	8001dea <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8001de4:	4620      	mov	r0, r4
 8001de6:	f004 f8e5 	bl	8005fb4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001dea:	6820      	ldr	r0, [r4, #0]
 8001dec:	f002 fd62 	bl	80048b4 <USB_ReadInterrupts>
 8001df0:	0601      	lsls	r1, r0, #24
 8001df2:	d529      	bpl.n	8001e48 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dfe:	0412      	lsls	r2, r2, #16
 8001e00:	0c12      	lsrs	r2, r2, #16
 8001e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001e06:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	f040 81ac 	bne.w	8002168 <HAL_PCD_IRQHandler+0x490>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001e10:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001e14:	b292      	uxth	r2, r2
 8001e16:	f042 0204 	orr.w	r2, r2, #4
 8001e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001e1e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f042 0208 	orr.w	r2, r2, #8
 8001e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e30:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8001e34:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e36:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8001e3a:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e3e:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e42:	4620      	mov	r0, r4
 8001e44:	f004 f9a6 	bl	8006194 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e48:	6820      	ldr	r0, [r4, #0]
 8001e4a:	f002 fd33 	bl	80048b4 <USB_ReadInterrupts>
 8001e4e:	0582      	lsls	r2, r0, #22
 8001e50:	d50b      	bpl.n	8001e6a <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e52:	6822      	ldr	r2, [r4, #0]
 8001e54:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c1b      	lsrs	r3, r3, #16
 8001e60:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f004 f88e 	bl	8005f86 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e6a:	6820      	ldr	r0, [r4, #0]
 8001e6c:	f002 fd22 	bl	80048b4 <USB_ReadInterrupts>
 8001e70:	05c3      	lsls	r3, r0, #23
 8001e72:	d508      	bpl.n	8001e86 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e74:	6822      	ldr	r2, [r4, #0]
 8001e76:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8001e8a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001e8e:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001e90:	f011 070f 	ands.w	r7, r1, #15
 8001e94:	f040 80ab 	bne.w	8001fee <HAL_PCD_IRQHandler+0x316>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e98:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e9a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e9e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ea0:	d12b      	bne.n	8001efa <HAL_PCD_IRQHandler+0x222>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ea2:	ea03 030a 	and.w	r3, r3, sl
 8001ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eaa:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001eb0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001eb4:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8001eb8:	fa10 f083 	uxtah	r0, r0, r3
 8001ebc:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8001ec0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001ec8:	4413      	add	r3, r2
 8001eca:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f004 f853 	bl	8005f78 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ed2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ed6:	b153      	cbz	r3, 8001eee <HAL_PCD_IRQHandler+0x216>
 8001ed8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001eda:	b942      	cbnz	r2, 8001eee <HAL_PCD_IRQHandler+0x216>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001edc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ee0:	6821      	ldr	r1, [r4, #0]
 8001ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee6:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001eea:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	d4c8      	bmi.n	8001e8a <HAL_PCD_IRQHandler+0x1b2>
 8001ef8:	e6f7      	b.n	8001cea <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001efa:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8001efe:	d020      	beq.n	8001f42 <HAL_PCD_IRQHandler+0x26a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f04:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001f08:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001f0c:	fa11 f383 	uxtah	r3, r1, r3

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f10:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001f14:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001f18:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f20:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f24:	f002 fdbe 	bl	8004aa4 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	8813      	ldrh	r3, [r2, #0]
 8001f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f30:	051b      	lsls	r3, r3, #20
 8001f32:	0d1b      	lsrs	r3, r3, #20
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f004 f80e 	bl	8005f5c <HAL_PCD_SetupStageCallback>
 8001f40:	e7d5      	b.n	8001eee <HAL_PCD_IRQHandler+0x216>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f42:	041f      	lsls	r7, r3, #16
 8001f44:	d5d3      	bpl.n	8001eee <HAL_PCD_IRQHandler+0x216>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f46:	8803      	ldrh	r3, [r0, #0]
 8001f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4c:	051b      	lsls	r3, r3, #20
 8001f4e:	0d1b      	lsrs	r3, r3, #20
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f5a:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001f5e:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001f62:	fa11 f383 	uxtah	r3, r1, r3
 8001f66:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f72:	b18b      	cbz	r3, 8001f98 <HAL_PCD_IRQHandler+0x2c0>
 8001f74:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001f78:	b171      	cbz	r1, 8001f98 <HAL_PCD_IRQHandler+0x2c0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f7a:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001f7e:	f002 fd91 	bl	8004aa4 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8001f82:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001f86:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f90:	4629      	mov	r1, r5
 8001f92:	4620      	mov	r0, r4
 8001f94:	f003 ffe8 	bl	8005f68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8001f9e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001fa2:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	b933      	cbnz	r3, 8001fb8 <HAL_PCD_IRQHandler+0x2e0>
 8001faa:	5aab      	ldrh	r3, [r5, r2]
 8001fac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fb0:	ea43 030b 	orr.w	r3, r3, fp
 8001fb4:	52ab      	strh	r3, [r5, r2]
 8001fb6:	e007      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x2f0>
 8001fb8:	2b3d      	cmp	r3, #61	; 0x3d
 8001fba:	d814      	bhi.n	8001fe6 <HAL_PCD_IRQHandler+0x30e>
 8001fbc:	0859      	lsrs	r1, r3, #1
 8001fbe:	07de      	lsls	r6, r3, #31
 8001fc0:	bf48      	it	mi
 8001fc2:	3101      	addmi	r1, #1
 8001fc4:	0289      	lsls	r1, r1, #10
 8001fc6:	52a9      	strh	r1, [r5, r2]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fc8:	8803      	ldrh	r3, [r0, #0]
 8001fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe2:	8003      	strh	r3, [r0, #0]
 8001fe4:	e783      	b.n	8001eee <HAL_PCD_IRQHandler+0x216>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	ea4b 2383 	orr.w	r3, fp, r3, lsl #10
 8001fec:	e7e2      	b.n	8001fb4 <HAL_PCD_IRQHandler+0x2dc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fee:	b23e      	sxth	r6, r7
 8001ff0:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 8001ff4:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ff8:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8001ffc:	d040      	beq.n	8002080 <HAL_PCD_IRQHandler+0x3a8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ffe:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	051b      	lsls	r3, r3, #20
 8002008:	0d1b      	lsrs	r3, r3, #20
 800200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800200e:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002012:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8002016:	eb04 0108 	add.w	r1, r4, r8
 800201a:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 800201e:	2b00      	cmp	r3, #0
 8002020:	d159      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x3fe>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002022:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002026:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 800202a:	f200 4506 	addw	r5, r0, #1030	; 0x406
 800202e:	fa15 f383 	uxtah	r3, r5, r3
 8002032:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8002036:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800203a:	b135      	cbz	r5, 800204a <HAL_PCD_IRQHandler+0x372>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800203c:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8002040:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002044:	462b      	mov	r3, r5
 8002046:	f002 fd2d 	bl	8004aa4 <USB_ReadPMA>
 800204a:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 800204e:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 8002052:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002056:	442a      	add	r2, r5
 8002058:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        ep->xfer_buff += count;
 800205c:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 8002060:	442a      	add	r2, r5
 8002062:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002066:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800206a:	b11b      	cbz	r3, 8002074 <HAL_PCD_IRQHandler+0x39c>
 800206c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8002070:	4285      	cmp	r5, r0
 8002072:	d26b      	bcs.n	800214c <HAL_PCD_IRQHandler+0x474>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002074:	44a0      	add	r8, r4
 8002076:	4620      	mov	r0, r4
 8002078:	f898 1128 	ldrb.w	r1, [r8, #296]	; 0x128
 800207c:	f003 ff74 	bl	8005f68 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002080:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002084:	f43f af33 	beq.w	8001eee <HAL_PCD_IRQHandler+0x216>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002088:	6822      	ldr	r2, [r4, #0]
 800208a:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 800208e:	b29b      	uxth	r3, r3
 8002090:	ea03 030a 	and.w	r3, r3, sl
 8002094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002098:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800209c:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 80020a0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80020a4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80020a8:	f202 4202 	addw	r2, r2, #1026	; 0x402
 80020ac:	fa12 f283 	uxtah	r2, r2, r3
 80020b0:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80020b4:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
 80020b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80020bc:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80020be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80020c4:	441a      	add	r2, r3
 80020c6:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80020c8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020ca:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d143      	bne.n	8002158 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020d0:	f003 ff52 	bl	8005f78 <HAL_PCD_DataInStageCallback>
 80020d4:	e70b      	b.n	8001eee <HAL_PCD_IRQHandler+0x216>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020d6:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 80020da:	b213      	sxth	r3, r2
 80020dc:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80020e0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020e4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020e8:	d022      	beq.n	8002130 <HAL_PCD_IRQHandler+0x458>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ea:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80020ee:	fa15 f383 	uxtah	r3, r5, r3
 80020f2:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80020f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80020fa:	b135      	cbz	r5, 800210a <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020fc:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 8002100:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002102:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002106:	f002 fccd 	bl	8004aa4 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800210a:	eb04 0308 	add.w	r3, r4, r8
 800210e:	6822      	ldr	r2, [r4, #0]
 8002110:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8002114:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800212a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800212e:	e78c      	b.n	800204a <HAL_PCD_IRQHandler+0x372>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002130:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8002134:	fa15 f383 	uxtah	r3, r5, r3
 8002138:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 800213c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8002140:	2d00      	cmp	r5, #0
 8002142:	d0e2      	beq.n	800210a <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002144:	462b      	mov	r3, r5
 8002146:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800214a:	e7da      	b.n	8002102 <HAL_PCD_IRQHandler+0x42a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800214c:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff fd8a 	bl	8001c6a <HAL_PCD_EP_Receive>
 8002156:	e793      	b.n	8002080 <HAL_PCD_IRQHandler+0x3a8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002158:	f7ff fda7 	bl	8001caa <HAL_PCD_EP_Transmit>
 800215c:	e6c7      	b.n	8001eee <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800215e:	f8df a010 	ldr.w	sl, [pc, #16]	; 8002170 <HAL_PCD_IRQHandler+0x498>
 8002162:	f8df b010 	ldr.w	fp, [pc, #16]	; 8002174 <HAL_PCD_IRQHandler+0x49c>
 8002166:	e6c2      	b.n	8001eee <HAL_PCD_IRQHandler+0x216>
      HAL_PCD_SuspendCallback(hpcd);
 8002168:	4620      	mov	r0, r4
 800216a:	f003 ff23 	bl	8005fb4 <HAL_PCD_SuspendCallback>
 800216e:	e66b      	b.n	8001e48 <HAL_PCD_IRQHandler+0x170>
 8002170:	ffff8f0f 	.word	0xffff8f0f
 8002174:	ffff8000 	.word	0xffff8000

08002178 <HAL_PCD_EP_SetStall>:
{
 8002178:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800217a:	6843      	ldr	r3, [r0, #4]
 800217c:	f001 0507 	and.w	r5, r1, #7
 8002180:	429d      	cmp	r5, r3
{
 8002182:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002184:	d82d      	bhi.n	80021e2 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8002186:	f011 0f80 	tst.w	r1, #128	; 0x80
 800218a:	f04f 0320 	mov.w	r3, #32
 800218e:	d01e      	beq.n	80021ce <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8002190:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002194:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8002198:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219a:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 800219c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 80021a0:	2201      	movs	r2, #1
 80021a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a4:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80021a6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
 80021aa:	4291      	cmp	r1, r2
 80021ac:	d01b      	beq.n	80021e6 <HAL_PCD_EP_SetStall+0x6e>
 80021ae:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021b2:	4619      	mov	r1, r3
 80021b4:	6820      	ldr	r0, [r4, #0]
 80021b6:	f002 faff 	bl	80047b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ba:	b925      	cbnz	r5, 80021c6 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021bc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80021c0:	6820      	ldr	r0, [r4, #0]
 80021c2:	f002 fb7b 	bl	80048bc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80021cc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80021ce:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 80021d2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80021d6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80021d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 80021dc:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
 80021e0:	e7de      	b.n	80021a0 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80021e6:	2002      	movs	r0, #2
}
 80021e8:	bd38      	pop	{r3, r4, r5, pc}

080021ea <HAL_PCD_EP_ClrStall>:
{
 80021ea:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021ec:	6843      	ldr	r3, [r0, #4]
 80021ee:	f001 020f 	and.w	r2, r1, #15
 80021f2:	429a      	cmp	r2, r3
{
 80021f4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021f6:	d82a      	bhi.n	800224e <HAL_PCD_EP_ClrStall+0x64>
 80021f8:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80021fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002200:	b2da      	uxtb	r2, r3
 8002202:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002206:	fb01 0102 	mla	r1, r1, r2, r0
 800220a:	bf19      	ittee	ne
 800220c:	3128      	addne	r1, #40	; 0x28
    ep->is_in = 1U;
 800220e:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002212:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 8002216:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 800221a:	bf14      	ite	ne
 800221c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800221e:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8002220:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8002224:	bf14      	ite	ne
 8002226:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 800222a:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 800222e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002232:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8002236:	2b01      	cmp	r3, #1
 8002238:	d00b      	beq.n	8002252 <HAL_PCD_EP_ClrStall+0x68>
 800223a:	2301      	movs	r3, #1
 800223c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	f002 fada 	bl	80047fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002246:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 800224a:	4628      	mov	r0, r5
 800224c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
 8002250:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002252:	2002      	movs	r0, #2
}
 8002254:	bd38      	pop	{r3, r4, r5, pc}

08002256 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002256:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225a:	bf1b      	ittet	ne
 800225c:	f001 0107 	andne.w	r1, r1, #7
 8002260:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002264:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002268:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800226a:	bf08      	it	eq
 800226c:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002270:	b91a      	cbnz	r2, 800227a <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002272:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002274:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002276:	2000      	movs	r0, #0
 8002278:	4770      	bx	lr
    ep->doublebuffer = 1U;
 800227a:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800227c:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800227e:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8002280:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002282:	8143      	strh	r3, [r0, #10]
 8002284:	e7f7      	b.n	8002276 <HAL_PCDEx_PMAConfig+0x20>

08002286 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8002286:	6802      	ldr	r2, [r0, #0]
{
 8002288:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 800228a:	2101      	movs	r1, #1
 800228c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002290:	2000      	movs	r0, #0
 8002292:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002296:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800229a:	b29b      	uxth	r3, r3
 800229c:	430b      	orrs	r3, r1
 800229e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80022a2:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b4:	4a02      	ldr	r2, [pc, #8]	; (80022c0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80022b6:	6813      	ldr	r3, [r2, #0]
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4770      	bx	lr
 80022c0:	58000400 	.word	0x58000400

080022c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_PWREx_GetVoltageRange+0xc>)
 80022c6:	6818      	ldr	r0, [r3, #0]
}
 80022c8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	58000400 	.word	0x58000400

080022d4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80022d4:	4a02      	ldr	r2, [pc, #8]	; (80022e0 <HAL_PWREx_EnableVddUSB+0xc>)
 80022d6:	6853      	ldr	r3, [r2, #4]
 80022d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022dc:	6053      	str	r3, [r2, #4]
 80022de:	4770      	bx	lr
 80022e0:	58000400 	.word	0x58000400

080022e4 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	6818      	ldr	r0, [r3, #0]
}
 80022ea:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80022ee:	4770      	bx	lr

080022f0 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	6818      	ldr	r0, [r3, #0]
}
 80022f6:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80022fa:	4770      	bx	lr

080022fc <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002300:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8002304:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002308:	4770      	bx	lr

0800230a <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	6818      	ldr	r0, [r3, #0]
}
 8002310:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002314:	4770      	bx	lr

08002316 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231a:	6813      	ldr	r3, [r2, #0]
 800231c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002320:	4318      	orrs	r0, r3
 8002322:	6010      	str	r0, [r2, #0]
 8002324:	4770      	bx	lr

08002326 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 8002330:	28b0      	cmp	r0, #176	; 0xb0
 8002332:	bf28      	it	cs
 8002334:	20b0      	movcs	r0, #176	; 0xb0
 8002336:	4770      	bx	lr

08002338 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233c:	6853      	ldr	r3, [r2, #4]
 800233e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002342:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002346:	6050      	str	r0, [r2, #4]
 8002348:	4770      	bx	lr

0800234a <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	6818      	ldr	r0, [r3, #0]
}
 8002350:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8002354:	4770      	bx	lr
	...

08002358 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002358:	28b0      	cmp	r0, #176	; 0xb0
 800235a:	4b32      	ldr	r3, [pc, #200]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800235c:	4a32      	ldr	r2, [pc, #200]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800235e:	bf98      	it	ls
 8002360:	0900      	lsrls	r0, r0, #4
{
 8002362:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002364:	bf8c      	ite	hi
 8002366:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002368:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800236c:	4c2f      	ldr	r4, [pc, #188]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8002372:	b08d      	sub	sp, #52	; 0x34
 8002374:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002378:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800237c:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8002388:	fbb5 f5f3 	udiv	r5, r5, r3
 800238c:	f7ff ff9a 	bl	80022c4 <HAL_PWREx_GetVoltageRange>
 8002390:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002392:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002396:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800239a:	f104 0210 	add.w	r2, r4, #16
 800239e:	ca07      	ldmia	r2, {r0, r1, r2}
 80023a0:	ab01      	add	r3, sp, #4
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80023a2:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80023a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80023a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ac:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80023b0:	ac0c      	add	r4, sp, #48	; 0x30
 80023b2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b6:	d11f      	bne.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 80023b8:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023ba:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80023be:	4295      	cmp	r5, r2
 80023c0:	d815      	bhi.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023c2:	aa0c      	add	r2, sp, #48	; 0x30
 80023c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80023c8:	f853 4c10 	ldr.w	r4, [r3, #-16]
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80023cc:	4d19      	ldr	r5, [pc, #100]	; (8002434 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	f023 0307 	bic.w	r3, r3, #7
 80023d4:	4323      	orrs	r3, r4
 80023d6:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80023d8:	f7fe fd7a 	bl	8000ed0 <HAL_GetTick>
 80023dc:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023de:	682b      	ldr	r3, [r5, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	429c      	cmp	r4, r3
 80023e6:	d116      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80023e8:	2000      	movs	r0, #0
}
 80023ea:	b00d      	add	sp, #52	; 0x34
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023ee:	3301      	adds	r3, #1
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d1e2      	bne.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80023f4:	2400      	movs	r4, #0
 80023f6:	e7e9      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80023f8:	9b01      	ldr	r3, [sp, #4]
 80023fa:	429d      	cmp	r5, r3
 80023fc:	d907      	bls.n	800240e <RCC_SetFlashLatencyFromMSIRange+0xb6>
 80023fe:	9b02      	ldr	r3, [sp, #8]
 8002400:	429d      	cmp	r5, r3
 8002402:	d906      	bls.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8002404:	9b03      	ldr	r3, [sp, #12]
 8002406:	429d      	cmp	r5, r3
 8002408:	d8f4      	bhi.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800240a:	2302      	movs	r3, #2
 800240c:	e7d9      	b.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800240e:	2300      	movs	r3, #0
 8002410:	e7d7      	b.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002412:	2301      	movs	r3, #1
 8002414:	e7d5      	b.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002416:	f7fe fd5b 	bl	8000ed0 <HAL_GetTick>
 800241a:	1b80      	subs	r0, r0, r6
 800241c:	2802      	cmp	r0, #2
 800241e:	d9de      	bls.n	80023de <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 8002420:	2003      	movs	r0, #3
 8002422:	e7e2      	b.n	80023ea <RCC_SetFlashLatencyFromMSIRange+0x92>
 8002424:	0800847c 	.word	0x0800847c
 8002428:	0800841c 	.word	0x0800841c
 800242c:	08008348 	.word	0x08008348
 8002430:	000f4240 	.word	0x000f4240
 8002434:	58004000 	.word	0x58004000

08002438 <HAL_RCC_OscConfig>:
{
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 800243a:	4604      	mov	r4, r0
 800243c:	b908      	cbnz	r0, 8002442 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 800243e:	2001      	movs	r0, #1
 8002440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002442:	6803      	ldr	r3, [r0, #0]
 8002444:	069d      	lsls	r5, r3, #26
 8002446:	d52a      	bpl.n	800249e <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244c:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800244e:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002450:	f013 030c 	ands.w	r3, r3, #12
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x2a>
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d146      	bne.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 800245a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800245e:	2b01      	cmp	r3, #1
 8002460:	d142      	bne.n	80024e8 <HAL_RCC_OscConfig+0xb0>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002462:	f7ff ff52 	bl	800230a <LL_RCC_MSI_IsReady>
 8002466:	b110      	cbz	r0, 800246e <HAL_RCC_OscConfig+0x36>
 8002468:	69e3      	ldr	r3, [r4, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0e7      	beq.n	800243e <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800246e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002470:	f7ff ff59 	bl	8002326 <LL_RCC_MSI_GetRange>
 8002474:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002476:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002478:	d92b      	bls.n	80024d2 <HAL_RCC_OscConfig+0x9a>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800247a:	f7ff ff6d 	bl	8002358 <RCC_SetFlashLatencyFromMSIRange>
 800247e:	2800      	cmp	r0, #0
 8002480:	d1dd      	bne.n	800243e <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002482:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002484:	f7ff ff47 	bl	8002316 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002488:	6a20      	ldr	r0, [r4, #32]
 800248a:	f7ff ff55 	bl	8002338 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 800248e:	f003 fc89 	bl	8005da4 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002492:	4bb8      	ldr	r3, [pc, #736]	; (8002774 <HAL_RCC_OscConfig+0x33c>)
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	f7fe fcd3 	bl	8000e40 <HAL_InitTick>
 800249a:	2800      	cmp	r0, #0
 800249c:	d1cf      	bne.n	800243e <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	07d8      	lsls	r0, r3, #31
 80024a2:	d44e      	bmi.n	8002542 <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	0799      	lsls	r1, r3, #30
 80024a8:	f100 8098 	bmi.w	80025dc <HAL_RCC_OscConfig+0x1a4>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	f013 0f18 	tst.w	r3, #24
 80024b2:	f040 80d9 	bne.w	8002668 <HAL_RCC_OscConfig+0x230>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	075a      	lsls	r2, r3, #29
 80024ba:	f100 8168 	bmi.w	800278e <HAL_RCC_OscConfig+0x356>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	065a      	lsls	r2, r3, #25
 80024c2:	f100 81ba 	bmi.w	800283a <HAL_RCC_OscConfig+0x402>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80024c8:	2800      	cmp	r0, #0
 80024ca:	f040 81e2 	bne.w	8002892 <HAL_RCC_OscConfig+0x45a>
  return HAL_OK;
 80024ce:	2000      	movs	r0, #0
 80024d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d2:	f7ff ff20 	bl	8002316 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d6:	6a20      	ldr	r0, [r4, #32]
 80024d8:	f7ff ff2e 	bl	8002338 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024de:	f7ff ff3b 	bl	8002358 <RCC_SetFlashLatencyFromMSIRange>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d0d3      	beq.n	800248e <HAL_RCC_OscConfig+0x56>
 80024e6:	e7aa      	b.n	800243e <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e8:	69e2      	ldr	r2, [r4, #28]
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	b1ba      	cbz	r2, 8002520 <HAL_RCC_OscConfig+0xe8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024f8:	f7fe fcea 	bl	8000ed0 <HAL_GetTick>
 80024fc:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80024fe:	f7ff ff04 	bl	800230a <LL_RCC_MSI_IsReady>
 8002502:	b130      	cbz	r0, 8002512 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002504:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002506:	f7ff ff06 	bl	8002316 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250a:	6a20      	ldr	r0, [r4, #32]
 800250c:	f7ff ff14 	bl	8002338 <LL_RCC_MSI_SetCalibTrimming>
 8002510:	e7c5      	b.n	800249e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002512:	f7fe fcdd 	bl	8000ed0 <HAL_GetTick>
 8002516:	1b40      	subs	r0, r0, r5
 8002518:	2802      	cmp	r0, #2
 800251a:	d9f0      	bls.n	80024fe <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800251c:	2003      	movs	r0, #3
 800251e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002528:	f7fe fcd2 	bl	8000ed0 <HAL_GetTick>
 800252c:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 800252e:	f7ff feec 	bl	800230a <LL_RCC_MSI_IsReady>
 8002532:	2800      	cmp	r0, #0
 8002534:	d0b3      	beq.n	800249e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002536:	f7fe fccb 	bl	8000ed0 <HAL_GetTick>
 800253a:	1b40      	subs	r0, r0, r5
 800253c:	2802      	cmp	r0, #2
 800253e:	d9f6      	bls.n	800252e <HAL_RCC_OscConfig+0xf6>
 8002540:	e7ec      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002546:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002548:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800254a:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800254e:	2b08      	cmp	r3, #8
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0x126>
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d10b      	bne.n	800256e <HAL_RCC_OscConfig+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002556:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800255a:	2b03      	cmp	r3, #3
 800255c:	d107      	bne.n	800256e <HAL_RCC_OscConfig+0x136>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	f7ff fec1 	bl	80022e4 <LL_RCC_HSE_IsReady>
 8002562:	2800      	cmp	r0, #0
 8002564:	d09e      	beq.n	80024a4 <HAL_RCC_OscConfig+0x6c>
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d19b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x6c>
 800256c:	e767      	b.n	800243e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	6862      	ldr	r2, [r4, #4]
 8002570:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	d110      	bne.n	800259c <HAL_RCC_OscConfig+0x164>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002580:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002582:	f7fe fca5 	bl	8000ed0 <HAL_GetTick>
 8002586:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8002588:	f7ff feac 	bl	80022e4 <LL_RCC_HSE_IsReady>
 800258c:	2800      	cmp	r0, #0
 800258e:	d189      	bne.n	80024a4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fc9e 	bl	8000ed0 <HAL_GetTick>
 8002594:	1b40      	subs	r0, r0, r5
 8002596:	2864      	cmp	r0, #100	; 0x64
 8002598:	d9f6      	bls.n	8002588 <HAL_RCC_OscConfig+0x150>
 800259a:	e7bf      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80025a0:	d104      	bne.n	80025ac <HAL_RCC_OscConfig+0x174>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e7e6      	b.n	800257a <HAL_RCC_OscConfig+0x142>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80025b2:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80025ba:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d1e0      	bne.n	8002582 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 80025c0:	f7fe fc86 	bl	8000ed0 <HAL_GetTick>
 80025c4:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 80025c6:	f7ff fe8d 	bl	80022e4 <LL_RCC_HSE_IsReady>
 80025ca:	2800      	cmp	r0, #0
 80025cc:	f43f af6a 	beq.w	80024a4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe fc7e 	bl	8000ed0 <HAL_GetTick>
 80025d4:	1b40      	subs	r0, r0, r5
 80025d6:	2864      	cmp	r0, #100	; 0x64
 80025d8:	d9f5      	bls.n	80025c6 <HAL_RCC_OscConfig+0x18e>
 80025da:	e79f      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e0:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025e2:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025e4:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x1c0>
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d114      	bne.n	800261a <HAL_RCC_OscConfig+0x1e2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025f0:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d110      	bne.n	800261a <HAL_RCC_OscConfig+0x1e2>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f8:	f7ff fe7a 	bl	80022f0 <LL_RCC_HSI_IsReady>
 80025fc:	b118      	cbz	r0, 8002606 <HAL_RCC_OscConfig+0x1ce>
 80025fe:	68e3      	ldr	r3, [r4, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f43f af1c 	beq.w	800243e <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260a:	6921      	ldr	r1, [r4, #16]
 800260c:	6853      	ldr	r3, [r2, #4]
 800260e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002612:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002616:	6053      	str	r3, [r2, #4]
 8002618:	e748      	b.n	80024ac <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800261a:	68e2      	ldr	r2, [r4, #12]
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002620:	b182      	cbz	r2, 8002644 <HAL_RCC_OscConfig+0x20c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002628:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800262a:	f7fe fc51 	bl	8000ed0 <HAL_GetTick>
 800262e:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8002630:	f7ff fe5e 	bl	80022f0 <LL_RCC_HSI_IsReady>
 8002634:	2800      	cmp	r0, #0
 8002636:	d1e6      	bne.n	8002606 <HAL_RCC_OscConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002638:	f7fe fc4a 	bl	8000ed0 <HAL_GetTick>
 800263c:	1b40      	subs	r0, r0, r5
 800263e:	2802      	cmp	r0, #2
 8002640:	d9f6      	bls.n	8002630 <HAL_RCC_OscConfig+0x1f8>
 8002642:	e76b      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800264c:	f7fe fc40 	bl	8000ed0 <HAL_GetTick>
 8002650:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8002652:	f7ff fe4d 	bl	80022f0 <LL_RCC_HSI_IsReady>
 8002656:	2800      	cmp	r0, #0
 8002658:	f43f af28 	beq.w	80024ac <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fc38 	bl	8000ed0 <HAL_GetTick>
 8002660:	1b40      	subs	r0, r0, r5
 8002662:	2802      	cmp	r0, #2
 8002664:	d9f5      	bls.n	8002652 <HAL_RCC_OscConfig+0x21a>
 8002666:	e759      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002668:	6962      	ldr	r2, [r4, #20]
 800266a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800266e:	2a00      	cmp	r2, #0
 8002670:	d06b      	beq.n	800274a <HAL_RCC_OscConfig+0x312>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002672:	06db      	lsls	r3, r3, #27
 8002674:	d543      	bpl.n	80026fe <HAL_RCC_OscConfig+0x2c6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002676:	f7ff fe41 	bl	80022fc <LL_RCC_LSI1_IsReady>
 800267a:	b310      	cbz	r0, 80026c2 <HAL_RCC_OscConfig+0x28a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800267c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002680:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800268c:	f7fe fc20 	bl	8000ed0 <HAL_GetTick>
 8002690:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002692:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002696:	071f      	lsls	r7, r3, #28
 8002698:	f140 817d 	bpl.w	8002996 <HAL_RCC_OscConfig+0x55e>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800269c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026a0:	69a2      	ldr	r2, [r4, #24]
 80026a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026aa:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80026ae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80026ba:	f7fe fc09 	bl	8000ed0 <HAL_GetTick>
 80026be:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 80026c0:	e018      	b.n	80026f4 <HAL_RCC_OscConfig+0x2bc>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80026c2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 80026ce:	f7fe fbff 	bl	8000ed0 <HAL_GetTick>
 80026d2:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 80026d4:	f7ff fe12 	bl	80022fc <LL_RCC_LSI1_IsReady>
 80026d8:	2800      	cmp	r0, #0
 80026da:	d1cf      	bne.n	800267c <HAL_RCC_OscConfig+0x244>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026dc:	f7fe fbf8 	bl	8000ed0 <HAL_GetTick>
 80026e0:	1b40      	subs	r0, r0, r5
 80026e2:	2802      	cmp	r0, #2
 80026e4:	d9f6      	bls.n	80026d4 <HAL_RCC_OscConfig+0x29c>
 80026e6:	e719      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026e8:	f7fe fbf2 	bl	8000ed0 <HAL_GetTick>
 80026ec:	1b40      	subs	r0, r0, r5
 80026ee:	2802      	cmp	r0, #2
 80026f0:	f63f af14 	bhi.w	800251c <HAL_RCC_OscConfig+0xe4>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80026f4:	f7ff fe02 	bl	80022fc <LL_RCC_LSI1_IsReady>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d1f5      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2b0>
 80026fc:	e6db      	b.n	80024b6 <HAL_RCC_OscConfig+0x7e>
 80026fe:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800270a:	f7fe fbe1 	bl	8000ed0 <HAL_GetTick>
 800270e:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002710:	f7ff fdf4 	bl	80022fc <LL_RCC_LSI1_IsReady>
 8002714:	b198      	cbz	r0, 800273e <HAL_RCC_OscConfig+0x306>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800271a:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800271c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002720:	f022 0204 	bic.w	r2, r2, #4
 8002724:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002728:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800272c:	0718      	lsls	r0, r3, #28
 800272e:	f57f aec2 	bpl.w	80024b6 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002732:	f7fe fbcd 	bl	8000ed0 <HAL_GetTick>
 8002736:	1b80      	subs	r0, r0, r6
 8002738:	2803      	cmp	r0, #3
 800273a:	d9f5      	bls.n	8002728 <HAL_RCC_OscConfig+0x2f0>
 800273c:	e6ee      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800273e:	f7fe fbc7 	bl	8000ed0 <HAL_GetTick>
 8002742:	1b80      	subs	r0, r0, r6
 8002744:	2802      	cmp	r0, #2
 8002746:	d9e3      	bls.n	8002710 <HAL_RCC_OscConfig+0x2d8>
 8002748:	e6e8      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800274a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002756:	f7fe fbbb 	bl	8000ed0 <HAL_GetTick>
 800275a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800275c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002760:	0719      	lsls	r1, r3, #28
 8002762:	f140 811f 	bpl.w	80029a4 <HAL_RCC_OscConfig+0x56c>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002766:	f7fe fbb3 	bl	8000ed0 <HAL_GetTick>
 800276a:	1b80      	subs	r0, r0, r6
 800276c:	2803      	cmp	r0, #3
 800276e:	d9f5      	bls.n	800275c <HAL_RCC_OscConfig+0x324>
 8002770:	e6d4      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
 8002772:	bf00      	nop
 8002774:	20000008 	.word	0x20000008
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002778:	f7fe fbaa 	bl	8000ed0 <HAL_GetTick>
 800277c:	1b40      	subs	r0, r0, r5
 800277e:	2802      	cmp	r0, #2
 8002780:	f63f aecc 	bhi.w	800251c <HAL_RCC_OscConfig+0xe4>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002784:	f7ff fdba 	bl	80022fc <LL_RCC_LSI1_IsReady>
 8002788:	2800      	cmp	r0, #0
 800278a:	d1f5      	bne.n	8002778 <HAL_RCC_OscConfig+0x340>
 800278c:	e693      	b.n	80024b6 <HAL_RCC_OscConfig+0x7e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278e:	4d8b      	ldr	r5, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x584>)
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	d51c      	bpl.n	80027d0 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002796:	68a3      	ldr	r3, [r4, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800279e:	d125      	bne.n	80027ec <HAL_RCC_OscConfig+0x3b4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027a0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 80027ac:	f7fe fb90 	bl	8000ed0 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80027b0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80027b4:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f241 3588 	movw	r5, #5000	; 0x1388
 80027ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027be:	0798      	lsls	r0, r3, #30
 80027c0:	f53f ae7d 	bmi.w	80024be <HAL_RCC_OscConfig+0x86>
 80027c4:	f7fe fb84 	bl	8000ed0 <HAL_GetTick>
 80027c8:	1b80      	subs	r0, r0, r6
 80027ca:	42a8      	cmp	r0, r5
 80027cc:	d9f5      	bls.n	80027ba <HAL_RCC_OscConfig+0x382>
 80027ce:	e6a5      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
      HAL_PWR_EnableBkUpAccess();
 80027d0:	f7ff fd70 	bl	80022b4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80027d4:	f7fe fb7c 	bl	8000ed0 <HAL_GetTick>
 80027d8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027da:	682b      	ldr	r3, [r5, #0]
 80027dc:	05df      	lsls	r7, r3, #23
 80027de:	d4da      	bmi.n	8002796 <HAL_RCC_OscConfig+0x35e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe fb76 	bl	8000ed0 <HAL_GetTick>
 80027e4:	1b80      	subs	r0, r0, r6
 80027e6:	2802      	cmp	r0, #2
 80027e8:	d9f7      	bls.n	80027da <HAL_RCC_OscConfig+0x3a2>
 80027ea:	e697      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x3c6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027f0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80027fc:	e7d0      	b.n	80027a0 <HAL_RCC_OscConfig+0x368>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fe:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800280a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1c8      	bne.n	80027ac <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 800281a:	f7fe fb59 	bl	8000ed0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002822:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002824:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002828:	0799      	lsls	r1, r3, #30
 800282a:	f57f ae48 	bpl.w	80024be <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe fb4f 	bl	8000ed0 <HAL_GetTick>
 8002832:	1bc0      	subs	r0, r0, r7
 8002834:	42b0      	cmp	r0, r6
 8002836:	d9f5      	bls.n	8002824 <HAL_RCC_OscConfig+0x3ec>
 8002838:	e670      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800283a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800283c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002840:	b19b      	cbz	r3, 800286a <HAL_RCC_OscConfig+0x432>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002842:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800284e:	f7fe fb3f 	bl	8000ed0 <HAL_GetTick>
 8002852:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002854:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002858:	079a      	lsls	r2, r3, #30
 800285a:	f53f ae34 	bmi.w	80024c6 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285e:	f7fe fb37 	bl	8000ed0 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2802      	cmp	r0, #2
 8002866:	d9f5      	bls.n	8002854 <HAL_RCC_OscConfig+0x41c>
 8002868:	e658      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800286a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002876:	f7fe fb2b 	bl	8000ed0 <HAL_GetTick>
 800287a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800287c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002880:	079b      	lsls	r3, r3, #30
 8002882:	f57f ae20 	bpl.w	80024c6 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002886:	f7fe fb23 	bl	8000ed0 <HAL_GetTick>
 800288a:	1b80      	subs	r0, r0, r6
 800288c:	2802      	cmp	r0, #2
 800288e:	d9f5      	bls.n	800287c <HAL_RCC_OscConfig+0x444>
 8002890:	e644      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	2a0c      	cmp	r2, #12
 800289e:	d052      	beq.n	8002946 <HAL_RCC_OscConfig+0x50e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028a0:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028a2:	2802      	cmp	r0, #2
 80028a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	d134      	bne.n	8002916 <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb10 	bl	8000ed0 <HAL_GetTick>
 80028b0:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 80028b2:	f7ff fd4a 	bl	800234a <LL_RCC_PLL_IsReady>
 80028b6:	bb40      	cbnz	r0, 800290a <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028c0:	68d0      	ldr	r0, [r2, #12]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	493e      	ldr	r1, [pc, #248]	; (80029c0 <HAL_RCC_OscConfig+0x588>)
 80028c6:	4001      	ands	r1, r0
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80028d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028dc:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e6:	68d3      	ldr	r3, [r2, #12]
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ec:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80028ee:	f7fe faef 	bl	8000ed0 <HAL_GetTick>
 80028f2:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 80028f4:	f7ff fd29 	bl	800234a <LL_RCC_PLL_IsReady>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f47f ade8 	bne.w	80024ce <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe fae7 	bl	8000ed0 <HAL_GetTick>
 8002902:	1b00      	subs	r0, r0, r4
 8002904:	2802      	cmp	r0, #2
 8002906:	d9f5      	bls.n	80028f4 <HAL_RCC_OscConfig+0x4bc>
 8002908:	e608      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fae1 	bl	8000ed0 <HAL_GetTick>
 800290e:	1b40      	subs	r0, r0, r5
 8002910:	2802      	cmp	r0, #2
 8002912:	d9ce      	bls.n	80028b2 <HAL_RCC_OscConfig+0x47a>
 8002914:	e602      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	f022 0203 	bic.w	r2, r2, #3
 800291c:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002924:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002928:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800292a:	f7fe fad1 	bl	8000ed0 <HAL_GetTick>
 800292e:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8002930:	f7ff fd0b 	bl	800234a <LL_RCC_PLL_IsReady>
 8002934:	2800      	cmp	r0, #0
 8002936:	f43f adca 	beq.w	80024ce <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fac9 	bl	8000ed0 <HAL_GetTick>
 800293e:	1b00      	subs	r0, r0, r4
 8002940:	2802      	cmp	r0, #2
 8002942:	d9f5      	bls.n	8002930 <HAL_RCC_OscConfig+0x4f8>
 8002944:	e5ea      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002946:	2801      	cmp	r0, #1
 8002948:	d036      	beq.n	80029b8 <HAL_RCC_OscConfig+0x580>
        uint32_t pllcfgr = RCC->PLLCFGR;
 800294a:	68d8      	ldr	r0, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800294e:	f000 0203 	and.w	r2, r0, #3
 8002952:	429a      	cmp	r2, r3
 8002954:	f47f ad73 	bne.w	800243e <HAL_RCC_OscConfig+0x6>
 8002958:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295a:	f000 0370 	and.w	r3, r0, #112	; 0x70
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	4293      	cmp	r3, r2
 8002960:	f47f ad6d 	bne.w	800243e <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002964:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002966:	f3c0 2306 	ubfx	r3, r0, #8, #7
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800296a:	4293      	cmp	r3, r2
 800296c:	f47f ad67 	bne.w	800243e <HAL_RCC_OscConfig+0x6>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002970:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002972:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002976:	4293      	cmp	r3, r2
 8002978:	f47f ad61 	bne.w	800243e <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800297c:	6c22      	ldr	r2, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800297e:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002982:	4293      	cmp	r3, r2
 8002984:	f47f ad5b 	bne.w	800243e <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002988:	6c63      	ldr	r3, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800298a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 800298e:	1ac0      	subs	r0, r0, r3
 8002990:	bf18      	it	ne
 8002992:	2001      	movne	r0, #1
 8002994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002996:	f7fe fa9b 	bl	8000ed0 <HAL_GetTick>
 800299a:	1b80      	subs	r0, r0, r6
 800299c:	2803      	cmp	r0, #3
 800299e:	f67f ae78 	bls.w	8002692 <HAL_RCC_OscConfig+0x25a>
 80029a2:	e5bb      	b.n	800251c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029a4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80029b0:	f7fe fa8e 	bl	8000ed0 <HAL_GetTick>
 80029b4:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 80029b6:	e6e5      	b.n	8002784 <HAL_RCC_OscConfig+0x34c>
}
 80029b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	58000400 	.word	0x58000400
 80029c0:	11c1808c 	.word	0x11c1808c

080029c4 <HAL_RCC_ClockConfig>:
{
 80029c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80029ca:	4604      	mov	r4, r0
 80029cc:	b910      	cbnz	r0, 80029d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80029ce:	2001      	movs	r0, #1
 80029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4e79      	ldr	r6, [pc, #484]	; (8002bbc <HAL_RCC_ClockConfig+0x1f8>)
 80029d6:	6833      	ldr	r3, [r6, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	428b      	cmp	r3, r1
 80029de:	d372      	bcc.n	8002ac6 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	0799      	lsls	r1, r3, #30
 80029e4:	d50e      	bpl.n	8002a04 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029e6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80029ea:	68a2      	ldr	r2, [r4, #8]
 80029ec:	68b3      	ldr	r3, [r6, #8]
 80029ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80029f6:	f7fe fa6b 	bl	8000ed0 <HAL_GetTick>
 80029fa:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80029fc:	68b3      	ldr	r3, [r6, #8]
 80029fe:	03db      	lsls	r3, r3, #15
 8002a00:	f140 80b8 	bpl.w	8002b74 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	069a      	lsls	r2, r3, #26
 8002a08:	d511      	bpl.n	8002a2e <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a0a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002a0e:	6962      	ldr	r2, [r4, #20]
 8002a10:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fa57 	bl	8000ed0 <HAL_GetTick>
 8002a22:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a24:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002a28:	0399      	lsls	r1, r3, #14
 8002a2a:	f140 80aa 	bpl.w	8002b82 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	0658      	lsls	r0, r3, #25
 8002a32:	d512      	bpl.n	8002a5a <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a34:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002a38:	69a2      	ldr	r2, [r4, #24]
 8002a3a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002a3e:	f023 030f 	bic.w	r3, r3, #15
 8002a42:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002a46:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fa41 	bl	8000ed0 <HAL_GetTick>
 8002a4e:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a50:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002a54:	03db      	lsls	r3, r3, #15
 8002a56:	f140 809b 	bpl.w	8002b90 <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	075a      	lsls	r2, r3, #29
 8002a5e:	d50e      	bpl.n	8002a7e <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a60:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002a64:	68e2      	ldr	r2, [r4, #12]
 8002a66:	68b3      	ldr	r3, [r6, #8]
 8002a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a70:	f7fe fa2e 	bl	8000ed0 <HAL_GetTick>
 8002a74:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a76:	68b3      	ldr	r3, [r6, #8]
 8002a78:	0399      	lsls	r1, r3, #14
 8002a7a:	f140 8090 	bpl.w	8002b9e <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	0718      	lsls	r0, r3, #28
 8002a82:	d50f      	bpl.n	8002aa4 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a84:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a88:	6922      	ldr	r2, [r4, #16]
 8002a8a:	68b3      	ldr	r3, [r6, #8]
 8002a8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a94:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a96:	f7fe fa1b 	bl	8000ed0 <HAL_GetTick>
 8002a9a:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a9c:	68b3      	ldr	r3, [r6, #8]
 8002a9e:	035b      	lsls	r3, r3, #13
 8002aa0:	f140 8084 	bpl.w	8002bac <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	07da      	lsls	r2, r3, #31
 8002aa8:	d423      	bmi.n	8002af2 <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aaa:	4c44      	ldr	r4, [pc, #272]	; (8002bbc <HAL_RCC_ClockConfig+0x1f8>)
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	429d      	cmp	r5, r3
 8002ab4:	d34b      	bcc.n	8002b4e <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 8002ab6:	f003 f975 	bl	8005da4 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8002aba:	f7fe fa0f 	bl	8000edc <HAL_GetTickPrio>
}
 8002abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002ac2:	f7fe b9bd 	b.w	8000e40 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	6833      	ldr	r3, [r6, #0]
 8002ac8:	f023 0307 	bic.w	r3, r3, #7
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ad0:	f7fe f9fe 	bl	8000ed0 <HAL_GetTick>
 8002ad4:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	6833      	ldr	r3, [r6, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	429d      	cmp	r5, r3
 8002ade:	f43f af7f 	beq.w	80029e0 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ae2:	f7fe f9f5 	bl	8000ed0 <HAL_GetTick>
 8002ae6:	1bc0      	subs	r0, r0, r7
 8002ae8:	2802      	cmp	r0, #2
 8002aea:	d9f4      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8002aec:	2003      	movs	r0, #3
 8002aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af2:	6863      	ldr	r3, [r4, #4]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d11e      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 8002af8:	f7ff fbf4 	bl	80022e4 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002afc:	2800      	cmp	r0, #0
 8002afe:	f43f af66 	beq.w	80029ce <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b02:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002b06:	6862      	ldr	r2, [r4, #4]
 8002b08:	68b3      	ldr	r3, [r6, #8]
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002b12:	f7fe f9dd 	bl	8000ed0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b16:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b1a:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b1c:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	6862      	ldr	r2, [r4, #4]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b28:	d0bf      	beq.n	8002aaa <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2a:	f7fe f9d1 	bl	8000ed0 <HAL_GetTick>
 8002b2e:	1bc0      	subs	r0, r0, r7
 8002b30:	4540      	cmp	r0, r8
 8002b32:	d9f3      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x158>
 8002b34:	e7da      	b.n	8002aec <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d102      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b3a:	f7ff fc06 	bl	800234a <LL_RCC_PLL_IsReady>
 8002b3e:	e7dd      	b.n	8002afc <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b40:	b913      	cbnz	r3, 8002b48 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b42:	f7ff fbe2 	bl	800230a <LL_RCC_MSI_IsReady>
 8002b46:	e7d9      	b.n	8002afc <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b48:	f7ff fbd2 	bl	80022f0 <LL_RCC_HSI_IsReady>
 8002b4c:	e7d6      	b.n	8002afc <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f023 0307 	bic.w	r3, r3, #7
 8002b54:	432b      	orrs	r3, r5
 8002b56:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002b58:	f7fe f9ba 	bl	8000ed0 <HAL_GetTick>
 8002b5c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	429d      	cmp	r5, r3
 8002b66:	d0a6      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b68:	f7fe f9b2 	bl	8000ed0 <HAL_GetTick>
 8002b6c:	1b80      	subs	r0, r0, r6
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d9f5      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x19a>
 8002b72:	e7bb      	b.n	8002aec <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b74:	f7fe f9ac 	bl	8000ed0 <HAL_GetTick>
 8002b78:	1bc0      	subs	r0, r0, r7
 8002b7a:	2802      	cmp	r0, #2
 8002b7c:	f67f af3e 	bls.w	80029fc <HAL_RCC_ClockConfig+0x38>
 8002b80:	e7b4      	b.n	8002aec <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b82:	f7fe f9a5 	bl	8000ed0 <HAL_GetTick>
 8002b86:	1bc0      	subs	r0, r0, r7
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	f67f af4b 	bls.w	8002a24 <HAL_RCC_ClockConfig+0x60>
 8002b8e:	e7ad      	b.n	8002aec <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b90:	f7fe f99e 	bl	8000ed0 <HAL_GetTick>
 8002b94:	1bc0      	subs	r0, r0, r7
 8002b96:	2802      	cmp	r0, #2
 8002b98:	f67f af5a 	bls.w	8002a50 <HAL_RCC_ClockConfig+0x8c>
 8002b9c:	e7a6      	b.n	8002aec <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b9e:	f7fe f997 	bl	8000ed0 <HAL_GetTick>
 8002ba2:	1bc0      	subs	r0, r0, r7
 8002ba4:	2802      	cmp	r0, #2
 8002ba6:	f67f af66 	bls.w	8002a76 <HAL_RCC_ClockConfig+0xb2>
 8002baa:	e79f      	b.n	8002aec <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bac:	f7fe f990 	bl	8000ed0 <HAL_GetTick>
 8002bb0:	1bc0      	subs	r0, r0, r7
 8002bb2:	2802      	cmp	r0, #2
 8002bb4:	f67f af72 	bls.w	8002a9c <HAL_RCC_ClockConfig+0xd8>
 8002bb8:	e798      	b.n	8002aec <HAL_RCC_ClockConfig+0x128>
 8002bba:	bf00      	nop
 8002bbc:	58004000 	.word	0x58004000

08002bc0 <HAL_RCC_GetSysClockFreq>:
 8002bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8002bc4:	b508      	push	{r3, lr}
 8002bc6:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bc8:	f013 030c 	ands.w	r3, r3, #12
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bce:	f7ff fbaa 	bl	8002326 <LL_RCC_MSI_GetRange>
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x90>)
 8002bd4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002bd8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002bdc:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d033      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002be6:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8002be8:	481a      	ldr	r0, [pc, #104]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bea:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf0:	bf08      	it	eq
 8002bf2:	4618      	moveq	r0, r3
 8002bf4:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bf6:	68d3      	ldr	r3, [r2, #12]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d022      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x86>
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d118      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c04:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE;
 8002c06:	4814      	ldr	r0, [pc, #80]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c0e:	bf08      	it	eq
 8002c10:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c16:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c18:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c1a:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c1c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002c20:	4358      	muls	r0, r3
 8002c22:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8002c26:	3301      	adds	r3, #1
 8002c28:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c2c:	0f53      	lsrs	r3, r2, #29
 8002c2e:	3301      	adds	r3, #1
 8002c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c34:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c36:	f7ff fb76 	bl	8002326 <LL_RCC_MSI_GetRange>
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x90>)
 8002c3c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002c40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002c44:	e7e5      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8002c46:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c48:	e7e3      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8002c4a:	4802      	ldr	r0, [pc, #8]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
}
 8002c4c:	bd08      	pop	{r3, pc}
 8002c4e:	bf00      	nop
 8002c50:	0800847c 	.word	0x0800847c
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	01e84800 	.word	0x01e84800

08002c5c <HAL_RCC_GetHCLKFreq>:
{
 8002c5c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c5e:	f7ff ffaf 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002c72:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c76:	bd08      	pop	{r3, pc}
 8002c78:	0800841c 	.word	0x0800841c

08002c7c <HAL_RCC_GetPCLK1Freq>:
{
 8002c7c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c7e:	f7ff ffed 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	f003 031f 	and.w	r3, r3, #31
}
 8002c96:	40d8      	lsrs	r0, r3
 8002c98:	bd08      	pop	{r3, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0800845c 	.word	0x0800845c

08002ca0 <HAL_RCC_GetPCLK2Freq>:
{
 8002ca0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ca2:	f7ff ffdb 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
}
 8002cba:	40d8      	lsrs	r0, r3
 8002cbc:	bd08      	pop	{r3, pc}
 8002cbe:	bf00      	nop
 8002cc0:	0800845c 	.word	0x0800845c

08002cc4 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002ccc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd6:	0902      	lsrs	r2, r0, #4
 8002cd8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cdc:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002ce0:	0100      	lsls	r0, r0, #4
 8002ce2:	ea23 0302 	bic.w	r3, r3, r2
 8002ce6:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8002cea:	4318      	orrs	r0, r3
 8002cec:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf6:	6813      	ldr	r3, [r2, #0]
 8002cf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4770      	bx	lr

08002d00 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4770      	bx	lr

08002d0e <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	6818      	ldr	r0, [r3, #0]
}
 8002d14:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8002d18:	4770      	bx	lr

08002d1a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d1c:	6805      	ldr	r5, [r0, #0]
 8002d1e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8002d22:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d24:	d043      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2c:	d015      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d2e:	d802      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002d30:	b1d3      	cbz	r3, 8002d68 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002d32:	2501      	movs	r5, #1
 8002d34:	e03b      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d3a:	d002      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d40:	d1f7      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d46:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002d48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d4c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d50:	430b      	orrs	r3, r1
 8002d52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002d56:	2500      	movs	r5, #0
 8002d58:	e029      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5e:	68d3      	ldr	r3, [r2, #12]
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	60d3      	str	r3, [r2, #12]
        break;
 8002d66:	e7ec      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002d68:	f7ff ffca 	bl	8002d00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d6c:	f7fe f8b0 	bl	8000ed0 <HAL_GetTick>
 8002d70:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d72:	f7ff ffcc 	bl	8002d0e <LL_RCC_PLLSAI1_IsReady>
 8002d76:	b9a0      	cbnz	r0, 8002da2 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7c:	6861      	ldr	r1, [r4, #4]
 8002d7e:	6913      	ldr	r3, [r2, #16]
 8002d80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d88:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002d8a:	6913      	ldr	r3, [r2, #16]
 8002d8c:	68a1      	ldr	r1, [r4, #8]
 8002d8e:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8002d92:	430b      	orrs	r3, r1
 8002d94:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002d96:	f7ff ffac 	bl	8002cf2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9a:	f7fe f899 	bl	8000ed0 <HAL_GetTick>
 8002d9e:	4605      	mov	r5, r0
 8002da0:	e0cd      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da2:	f7fe f895 	bl	8000ed0 <HAL_GetTick>
 8002da6:	1b40      	subs	r0, r0, r5
 8002da8:	2802      	cmp	r0, #2
 8002daa:	d9e2      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8002dac:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	051a      	lsls	r2, r3, #20
 8002db2:	d515      	bpl.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002db4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dba:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8002dbe:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8002dc2:	42bb      	cmp	r3, r7
 8002dc4:	d00c      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8002dc6:	f7ff fa75 	bl	80022b4 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002dca:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002dce:	2f00      	cmp	r7, #0
 8002dd0:	f040 80c0 	bne.w	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8002dd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	07df      	lsls	r7, r3, #31
 8002de4:	d509      	bpl.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dea:	69a0      	ldr	r0, [r4, #24]
 8002dec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002df0:	f022 0203 	bic.w	r2, r2, #3
 8002df4:	4302      	orrs	r2, r0
 8002df6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dfa:	079e      	lsls	r6, r3, #30
 8002dfc:	d509      	bpl.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e02:	69e0      	ldr	r0, [r4, #28]
 8002e04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e0c:	4302      	orrs	r2, r0
 8002e0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e12:	06d8      	lsls	r0, r3, #27
 8002e14:	d50c      	bpl.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e18:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002e1c:	0c31      	lsrs	r1, r6, #16
 8002e1e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e22:	0409      	lsls	r1, r1, #16
 8002e24:	ea22 0201 	bic.w	r2, r2, r1
 8002e28:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002e2c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e30:	0699      	lsls	r1, r3, #26
 8002e32:	d50c      	bpl.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e36:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8002e3a:	0c31      	lsrs	r1, r6, #16
 8002e3c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002e40:	0409      	lsls	r1, r1, #16
 8002e42:	ea22 0201 	bic.w	r2, r2, r1
 8002e46:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002e4a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e4e:	075a      	lsls	r2, r3, #29
 8002e50:	d502      	bpl.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e52:	6a20      	ldr	r0, [r4, #32]
 8002e54:	f7ff ff3d 	bl	8002cd2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	071b      	lsls	r3, r3, #28
 8002e5c:	d502      	bpl.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e60:	f7ff ff37 	bl	8002cd2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	05df      	lsls	r7, r3, #23
 8002e68:	d511      	bpl.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e74:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e78:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e7a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002e7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e82:	f040 8090 	bne.w	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002e86:	68d3      	ldr	r3, [r2, #12]
 8002e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	059e      	lsls	r6, r3, #22
 8002e92:	d51a      	bpl.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e96:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002ea0:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8002ea4:	f040 80b7 	bne.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ea8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002eac:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002eb0:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eb2:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002eb6:	bf08      	it	eq
 8002eb8:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002ebc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8002ec0:	bf02      	ittt	eq
 8002ec2:	68d3      	ldreq	r3, [r2, #12]
 8002ec4:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	0558      	lsls	r0, r3, #21
 8002ece:	d511      	bpl.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ed4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002ed6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002eda:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ede:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002ee0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002ee8:	f040 80a3 	bne.w	8003032 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002eec:	68d3      	ldr	r3, [r2, #12]
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002ef4:	6822      	ldr	r2, [r4, #0]
 8002ef6:	04d1      	lsls	r1, r2, #19
 8002ef8:	d509      	bpl.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002efe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002f00:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8002f04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f08:	4303      	orrs	r3, r0
 8002f0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002f0e:	0493      	lsls	r3, r2, #18
 8002f10:	d50d      	bpl.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002f18:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f22:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002f24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002f2e:	4628      	mov	r0, r5
 8002f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f32:	f7fd ffcd 	bl	8000ed0 <HAL_GetTick>
 8002f36:	1b40      	subs	r0, r0, r5
 8002f38:	2802      	cmp	r0, #2
 8002f3a:	f63f af37 	bhi.w	8002dac <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f3e:	f7ff fee6 	bl	8002d0e <LL_RCC_PLLSAI1_IsReady>
 8002f42:	2801      	cmp	r0, #1
 8002f44:	d1f5      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	6961      	ldr	r1, [r4, #20]
 8002f4c:	6913      	ldr	r3, [r2, #16]
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6113      	str	r3, [r2, #16]
 8002f52:	e6f6      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f54:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002f58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f5c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f60:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002f64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f68:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002f6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8002f74:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f78:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002f7c:	07db      	lsls	r3, r3, #31
 8002f7e:	f57f af2f 	bpl.w	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8002f82:	f7fd ffa5 	bl	8000ed0 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8002f8a:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f8c:	e004      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x27e>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fd ff9f 	bl	8000ed0 <HAL_GetTick>
 8002f92:	1bc0      	subs	r0, r0, r7
 8002f94:	42b0      	cmp	r0, r6
 8002f96:	d804      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x288>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f98:	f7ff fe94 	bl	8002cc4 <LL_RCC_LSE_IsReady>
 8002f9c:	2801      	cmp	r0, #1
 8002f9e:	d1f6      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002fa0:	e71e      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8002fa2:	2503      	movs	r5, #3
 8002fa4:	e71c      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fa6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002faa:	f47f af70 	bne.w	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fae:	f7ff fea7 	bl	8002d00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fb2:	f7fd ff8d 	bl	8000ed0 <HAL_GetTick>
 8002fb6:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fb8:	f7ff fea9 	bl	8002d0e <LL_RCC_PLLSAI1_IsReady>
 8002fbc:	b9a0      	cbnz	r0, 8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc2:	6861      	ldr	r1, [r4, #4]
 8002fc4:	6913      	ldr	r3, [r2, #16]
 8002fc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fce:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002fd0:	6913      	ldr	r3, [r2, #16]
 8002fd2:	68e1      	ldr	r1, [r4, #12]
 8002fd4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fdc:	f7ff fe89 	bl	8002cf2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fd ff76 	bl	8000ed0 <HAL_GetTick>
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	e00b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe8:	f7fd ff72 	bl	8000ed0 <HAL_GetTick>
 8002fec:	1b80      	subs	r0, r0, r6
 8002fee:	2802      	cmp	r0, #2
 8002ff0:	d9e2      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x29e>
              ret = HAL_TIMEOUT;
 8002ff2:	2503      	movs	r5, #3
 8002ff4:	e74b      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff6:	f7fd ff6b 	bl	8000ed0 <HAL_GetTick>
 8002ffa:	1b80      	subs	r0, r0, r6
 8002ffc:	2802      	cmp	r0, #2
 8002ffe:	d8f8      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003000:	f7ff fe85 	bl	8002d0e <LL_RCC_PLLSAI1_IsReady>
 8003004:	2801      	cmp	r0, #1
 8003006:	d1f6      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300c:	6961      	ldr	r1, [r4, #20]
 800300e:	6913      	ldr	r3, [r2, #16]
 8003010:	430b      	orrs	r3, r1
 8003012:	6113      	str	r3, [r2, #16]
 8003014:	e73b      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003016:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800301a:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800301e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003022:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003026:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800302a:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 800302e:	4301      	orrs	r1, r0
 8003030:	e73f      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x198>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003032:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003036:	f47f af5d 	bne.w	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800303a:	f7ff fe61 	bl	8002d00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800303e:	f7fd ff47 	bl	8000ed0 <HAL_GetTick>
 8003042:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003044:	f7ff fe63 	bl	8002d0e <LL_RCC_PLLSAI1_IsReady>
 8003048:	b9a0      	cbnz	r0, 8003074 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800304a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800304e:	6861      	ldr	r1, [r4, #4]
 8003050:	6913      	ldr	r3, [r2, #16]
 8003052:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003056:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800305a:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800305c:	6913      	ldr	r3, [r2, #16]
 800305e:	6921      	ldr	r1, [r4, #16]
 8003060:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003064:	430b      	orrs	r3, r1
 8003066:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003068:	f7ff fe43 	bl	8002cf2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fd ff30 	bl	8000ed0 <HAL_GetTick>
 8003070:	4606      	mov	r6, r0
 8003072:	e00b      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x372>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003074:	f7fd ff2c 	bl	8000ed0 <HAL_GetTick>
 8003078:	1b80      	subs	r0, r0, r6
 800307a:	2802      	cmp	r0, #2
 800307c:	d9e2      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x32a>
              ret = HAL_TIMEOUT;
 800307e:	2503      	movs	r5, #3
 8003080:	e738      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003082:	f7fd ff25 	bl	8000ed0 <HAL_GetTick>
 8003086:	1b80      	subs	r0, r0, r6
 8003088:	2802      	cmp	r0, #2
 800308a:	d8f8      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x364>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800308c:	f7ff fe3f 	bl	8002d0e <LL_RCC_PLLSAI1_IsReady>
 8003090:	2801      	cmp	r0, #1
 8003092:	d1f6      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003098:	6961      	ldr	r1, [r4, #20]
 800309a:	6913      	ldr	r3, [r2, #16]
 800309c:	430b      	orrs	r3, r1
 800309e:	6113      	str	r3, [r2, #16]
 80030a0:	e728      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1da>

080030a2 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80030a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4770      	bx	lr

080030b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030b0:	6802      	ldr	r2, [r0, #0]
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030b8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030ba:	6893      	ldr	r3, [r2, #8]
 80030bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030c6:	2320      	movs	r3, #32
 80030c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	66c3      	str	r3, [r0, #108]	; 0x6c
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80030d4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80030d8:	2b20      	cmp	r3, #32
{
 80030da:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80030dc:	d168      	bne.n	80031b0 <HAL_UART_Receive_IT+0xdc>
    if ((pData == NULL) || (Size == 0U))
 80030de:	2900      	cmp	r1, #0
 80030e0:	d064      	beq.n	80031ac <HAL_UART_Receive_IT+0xd8>
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d062      	beq.n	80031ac <HAL_UART_Receive_IT+0xd8>
    __HAL_LOCK(huart);
 80030e6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d060      	beq.n	80031b0 <HAL_UART_Receive_IT+0xdc>
 80030ee:	2301      	movs	r3, #1
 80030f0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 80030f4:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 80030f6:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 80030fc:	f04f 0100 	mov.w	r1, #0
    huart->RxXferSize  = Size;
 8003100:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003104:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003108:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800310a:	d12e      	bne.n	800316a <HAL_UART_Receive_IT+0x96>
 800310c:	6901      	ldr	r1, [r0, #16]
 800310e:	bb51      	cbnz	r1, 8003166 <HAL_UART_Receive_IT+0x92>
 8003110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003114:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	2100      	movs	r1, #0
 800311a:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800311e:	2122      	movs	r1, #34	; 0x22
 8003120:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003124:	6801      	ldr	r1, [r0, #0]
 8003126:	688c      	ldr	r4, [r1, #8]
 8003128:	f044 0401 	orr.w	r4, r4, #1
 800312c:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800312e:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8003130:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8003134:	d129      	bne.n	800318a <HAL_UART_Receive_IT+0xb6>
 8003136:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800313a:	4294      	cmp	r4, r2
 800313c:	d825      	bhi.n	800318a <HAL_UART_Receive_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003142:	d120      	bne.n	8003186 <HAL_UART_Receive_IT+0xb2>
 8003144:	6903      	ldr	r3, [r0, #16]
 8003146:	b9f3      	cbnz	r3, 8003186 <HAL_UART_Receive_IT+0xb2>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314a:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800314c:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8003152:	2300      	movs	r3, #0
 8003154:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003158:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800315a:	688a      	ldr	r2, [r1, #8]
 800315c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003160:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8003162:	4618      	mov	r0, r3
 8003164:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8003166:	21ff      	movs	r1, #255	; 0xff
 8003168:	e7d4      	b.n	8003114 <HAL_UART_Receive_IT+0x40>
 800316a:	b923      	cbnz	r3, 8003176 <HAL_UART_Receive_IT+0xa2>
 800316c:	6901      	ldr	r1, [r0, #16]
 800316e:	2900      	cmp	r1, #0
 8003170:	d0f9      	beq.n	8003166 <HAL_UART_Receive_IT+0x92>
 8003172:	217f      	movs	r1, #127	; 0x7f
 8003174:	e7ce      	b.n	8003114 <HAL_UART_Receive_IT+0x40>
 8003176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800317a:	d1cb      	bne.n	8003114 <HAL_UART_Receive_IT+0x40>
 800317c:	6901      	ldr	r1, [r0, #16]
 800317e:	2900      	cmp	r1, #0
 8003180:	d0f7      	beq.n	8003172 <HAL_UART_Receive_IT+0x9e>
 8003182:	213f      	movs	r1, #63	; 0x3f
 8003184:	e7c6      	b.n	8003114 <HAL_UART_Receive_IT+0x40>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_UART_Receive_IT+0xe4>)
 8003188:	e7df      	b.n	800314a <HAL_UART_Receive_IT+0x76>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318e:	d10b      	bne.n	80031a8 <HAL_UART_Receive_IT+0xd4>
 8003190:	6903      	ldr	r3, [r0, #16]
 8003192:	b94b      	cbnz	r3, 80031a8 <HAL_UART_Receive_IT+0xd4>
        huart->RxISR = UART_RxISR_16BIT;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003196:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8003198:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800319a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 800319e:	2300      	movs	r3, #0
 80031a0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80031a4:	600a      	str	r2, [r1, #0]
 80031a6:	e7dc      	b.n	8003162 <HAL_UART_Receive_IT+0x8e>
        huart->RxISR = UART_RxISR_8BIT;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_UART_Receive_IT+0xec>)
 80031aa:	e7f4      	b.n	8003196 <HAL_UART_Receive_IT+0xc2>
      return HAL_ERROR;
 80031ac:	2001      	movs	r0, #1
 80031ae:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80031b0:	2002      	movs	r0, #2
}
 80031b2:	bd10      	pop	{r4, pc}
 80031b4:	080033ad 	.word	0x080033ad
 80031b8:	08003305 	.word	0x08003305
 80031bc:	080032ab 	.word	0x080032ab
 80031c0:	0800324f 	.word	0x0800324f

080031c4 <HAL_UART_DMAStop>:
{
 80031c4:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80031c6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80031c8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80031cc:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	0609      	lsls	r1, r1, #24
{
 80031d4:	4604      	mov	r4, r0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80031d6:	d520      	bpl.n	800321a <HAL_UART_DMAStop+0x56>
 80031d8:	2a21      	cmp	r2, #33	; 0x21
 80031da:	d11e      	bne.n	800321a <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031dc:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 80031de:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e4:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 80031e6:	b160      	cbz	r0, 8003202 <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80031e8:	f7fd ff94 	bl	8001114 <HAL_DMA_Abort>
 80031ec:	b148      	cbz	r0, 8003202 <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80031ee:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80031f0:	f7fe f846 	bl	8001280 <HAL_DMA_GetError>
 80031f4:	2820      	cmp	r0, #32
 80031f6:	d104      	bne.n	8003202 <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031f8:	2310      	movs	r3, #16
 80031fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
 8003200:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800320a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003212:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8003214:	2320      	movs	r3, #32
 8003216:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	6898      	ldr	r0, [r3, #8]
 800321e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003222:	d013      	beq.n	800324c <HAL_UART_DMAStop+0x88>
 8003224:	2d22      	cmp	r5, #34	; 0x22
 8003226:	d110      	bne.n	800324a <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003228:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800322a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003230:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8003232:	b138      	cbz	r0, 8003244 <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003234:	f7fd ff6e 	bl	8001114 <HAL_DMA_Abort>
 8003238:	b120      	cbz	r0, 8003244 <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800323a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800323c:	f7fe f820 	bl	8001280 <HAL_DMA_GetError>
 8003240:	2820      	cmp	r0, #32
 8003242:	d0d9      	beq.n	80031f8 <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 8003244:	4620      	mov	r0, r4
 8003246:	f7ff ff33 	bl	80030b0 <UART_EndRxTransfer>
  return HAL_OK;
 800324a:	2000      	movs	r0, #0
}
 800324c:	bd38      	pop	{r3, r4, r5, pc}

0800324e <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800324e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8003252:	2a22      	cmp	r2, #34	; 0x22
{
 8003254:	b510      	push	{r4, lr}
 8003256:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003258:	d122      	bne.n	80032a0 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800325a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800325c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8003260:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003262:	4022      	ands	r2, r4
 8003264:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 8003266:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003268:	3201      	adds	r2, #1
 800326a:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800326c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8003270:	3a01      	subs	r2, #1
 8003272:	b292      	uxth	r2, r2
 8003274:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003278:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800327c:	b292      	uxth	r2, r2
 800327e:	b99a      	cbnz	r2, 80032a8 <UART_RxISR_8BIT+0x5a>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003280:	6801      	ldr	r1, [r0, #0]
 8003282:	680c      	ldr	r4, [r1, #0]
 8003284:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8003288:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	688c      	ldr	r4, [r1, #8]
 800328c:	f024 0401 	bic.w	r4, r4, #1
 8003290:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003292:	2120      	movs	r1, #32
 8003294:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003298:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800329a:	f002 fbc3 	bl	8005a24 <HAL_UART_RxCpltCallback>
 800329e:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032a0:	6993      	ldr	r3, [r2, #24]
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	bd10      	pop	{r4, pc}

080032aa <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032aa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80032ae:	2a22      	cmp	r2, #34	; 0x22
{
 80032b0:	b510      	push	{r4, lr}
 80032b2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032b4:	d120      	bne.n	80032f8 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032b6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80032b8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 80032bc:	400c      	ands	r4, r1
 80032be:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80032c0:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 80032c4:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80032c6:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80032ca:	3901      	subs	r1, #1
 80032cc:	b289      	uxth	r1, r1
 80032ce:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80032d2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80032d6:	b289      	uxth	r1, r1
 80032d8:	b991      	cbnz	r1, 8003300 <UART_RxISR_16BIT+0x56>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032da:	6814      	ldr	r4, [r2, #0]
 80032dc:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80032e0:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e2:	6894      	ldr	r4, [r2, #8]
 80032e4:	f024 0401 	bic.w	r4, r4, #1
 80032e8:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032ea:	2220      	movs	r2, #32
 80032ec:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032f0:	66c1      	str	r1, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032f2:	f002 fb97 	bl	8005a24 <HAL_UART_RxCpltCallback>
 80032f6:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032f8:	6993      	ldr	r3, [r2, #24]
 80032fa:	f043 0308 	orr.w	r3, r3, #8
 80032fe:	6193      	str	r3, [r2, #24]
 8003300:	bd10      	pop	{r4, pc}
	...

08003304 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003304:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003308:	2b22      	cmp	r3, #34	; 0x22
{
 800330a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003310:	d140      	bne.n	8003394 <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 8003312:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003316:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800331a:	4f22      	ldr	r7, [pc, #136]	; (80033a4 <UART_RxISR_8BIT_FIFOEN+0xa0>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800331c:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003320:	b9ad      	cbnz	r5, 800334e <UART_RxISR_8BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003322:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003326:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003328:	2b00      	cmp	r3, #0
 800332a:	d038      	beq.n	800339e <UART_RxISR_8BIT_FIFOEN+0x9a>
 800332c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8003330:	429a      	cmp	r2, r3
 8003332:	d934      	bls.n	800339e <UART_RxISR_8BIT_FIFOEN+0x9a>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800333c:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800333e:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 8003340:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	f042 0220 	orr.w	r2, r2, #32
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800334e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003350:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003354:	4033      	ands	r3, r6
 8003356:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8003358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800335a:	3301      	adds	r3, #1
 800335c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800335e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003362:	3b01      	subs	r3, #1
 8003364:	b29b      	uxth	r3, r3
 8003366:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800336a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800336e:	b29b      	uxth	r3, r3
 8003370:	b96b      	cbnz	r3, 800338e <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800337a:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800337c:	6891      	ldr	r1, [r2, #8]
 800337e:	4039      	ands	r1, r7
 8003380:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 8003382:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8003384:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8003388:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800338a:	f002 fb4b 	bl	8005a24 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800338e:	3d01      	subs	r5, #1
 8003390:	b2ad      	uxth	r5, r5
 8003392:	e7c5      	b.n	8003320 <UART_RxISR_8BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003394:	6802      	ldr	r2, [r0, #0]
 8003396:	6993      	ldr	r3, [r2, #24]
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	6193      	str	r3, [r2, #24]
 800339e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a2:	bf00      	nop
 80033a4:	effffffe 	.word	0xeffffffe
 80033a8:	0800324f 	.word	0x0800324f

080033ac <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033ac:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80033b0:	2b22      	cmp	r3, #34	; 0x22
{
 80033b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033b8:	d13e      	bne.n	8003438 <UART_RxISR_16BIT_FIFOEN+0x8c>
  uint16_t  uhMask = huart->Mask;
 80033ba:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80033be:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033c2:	4f21      	ldr	r7, [pc, #132]	; (8003448 <UART_RxISR_16BIT_FIFOEN+0x9c>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033c4:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80033c8:	b9ad      	cbnz	r5, 80033f6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80033ca:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80033ce:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d036      	beq.n	8003442 <UART_RxISR_16BIT_FIFOEN+0x96>
 80033d4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80033d8:	429a      	cmp	r2, r3
 80033da:	d932      	bls.n	8003442 <UART_RxISR_16BIT_FIFOEN+0x96>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80033e4:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80033e6:	4a19      	ldr	r2, [pc, #100]	; (800344c <UART_RxISR_16BIT_FIFOEN+0xa0>)
 80033e8:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	f042 0220 	orr.w	r2, r2, #32
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033f6:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80033f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80033fc:	4031      	ands	r1, r6
 80033fe:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8003402:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8003404:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003408:	3a01      	subs	r2, #1
 800340a:	b292      	uxth	r2, r2
 800340c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8003410:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003414:	b292      	uxth	r2, r2
 8003416:	b962      	cbnz	r2, 8003432 <UART_RxISR_16BIT_FIFOEN+0x86>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800341e:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	4039      	ands	r1, r7
 8003424:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 8003426:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8003428:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800342c:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800342e:	f002 faf9 	bl	8005a24 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003432:	3d01      	subs	r5, #1
 8003434:	b2ad      	uxth	r5, r5
 8003436:	e7c7      	b.n	80033c8 <UART_RxISR_16BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003438:	6802      	ldr	r2, [r0, #0]
 800343a:	6993      	ldr	r3, [r2, #24]
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6193      	str	r3, [r2, #24]
 8003442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003446:	bf00      	nop
 8003448:	effffffe 	.word	0xeffffffe
 800344c:	080032ab 	.word	0x080032ab

08003450 <HAL_UART_ErrorCallback>:
 8003450:	4770      	bx	lr
	...

08003454 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003454:	6802      	ldr	r2, [r0, #0]
 8003456:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003458:	6811      	ldr	r1, [r2, #0]
{
 800345a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800345c:	f640 050f 	movw	r5, #2063	; 0x80f
 8003460:	422b      	tst	r3, r5
{
 8003462:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8003466:	d10d      	bne.n	8003484 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003468:	069e      	lsls	r6, r3, #26
 800346a:	f140 8087 	bpl.w	800357c <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800346e:	068d      	lsls	r5, r1, #26
 8003470:	d402      	bmi.n	8003478 <HAL_UART_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003472:	00c6      	lsls	r6, r0, #3
 8003474:	f140 8082 	bpl.w	800357c <HAL_UART_IRQHandler+0x128>
      if (huart->RxISR != NULL)
 8003478:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80b5 	beq.w	80035ea <HAL_UART_IRQHandler+0x196>
      huart->TxISR(huart);
 8003480:	4620      	mov	r0, r4
 8003482:	e06f      	b.n	8003564 <HAL_UART_IRQHandler+0x110>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003484:	4e59      	ldr	r6, [pc, #356]	; (80035ec <HAL_UART_IRQHandler+0x198>)
 8003486:	4006      	ands	r6, r0
 8003488:	d102      	bne.n	8003490 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800348a:	4d59      	ldr	r5, [pc, #356]	; (80035f0 <HAL_UART_IRQHandler+0x19c>)
 800348c:	4229      	tst	r1, r5
 800348e:	d075      	beq.n	800357c <HAL_UART_IRQHandler+0x128>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003490:	07dd      	lsls	r5, r3, #31
 8003492:	d509      	bpl.n	80034a8 <HAL_UART_IRQHandler+0x54>
 8003494:	05cd      	lsls	r5, r1, #23
 8003496:	d507      	bpl.n	80034a8 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003498:	2501      	movs	r5, #1
 800349a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800349c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80034a0:	f045 0501 	orr.w	r5, r5, #1
 80034a4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a8:	079d      	lsls	r5, r3, #30
 80034aa:	d509      	bpl.n	80034c0 <HAL_UART_IRQHandler+0x6c>
 80034ac:	07c5      	lsls	r5, r0, #31
 80034ae:	d507      	bpl.n	80034c0 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034b0:	2502      	movs	r5, #2
 80034b2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034b4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80034b8:	f045 0504 	orr.w	r5, r5, #4
 80034bc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034c0:	075d      	lsls	r5, r3, #29
 80034c2:	d509      	bpl.n	80034d8 <HAL_UART_IRQHandler+0x84>
 80034c4:	07c5      	lsls	r5, r0, #31
 80034c6:	d507      	bpl.n	80034d8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034c8:	2504      	movs	r5, #4
 80034ca:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034cc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80034d0:	f045 0502 	orr.w	r5, r5, #2
 80034d4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034d8:	071d      	lsls	r5, r3, #28
 80034da:	d50a      	bpl.n	80034f2 <HAL_UART_IRQHandler+0x9e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80034dc:	068d      	lsls	r5, r1, #26
 80034de:	d400      	bmi.n	80034e2 <HAL_UART_IRQHandler+0x8e>
 80034e0:	b13e      	cbz	r6, 80034f2 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034e2:	2508      	movs	r5, #8
 80034e4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034e6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80034ea:	f045 0508 	orr.w	r5, r5, #8
 80034ee:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034f2:	051e      	lsls	r6, r3, #20
 80034f4:	d50a      	bpl.n	800350c <HAL_UART_IRQHandler+0xb8>
 80034f6:	014d      	lsls	r5, r1, #5
 80034f8:	d508      	bpl.n	800350c <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034fa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80034fe:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003500:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003504:	f042 0220 	orr.w	r2, r2, #32
 8003508:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800350c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003510:	2a00      	cmp	r2, #0
 8003512:	d06a      	beq.n	80035ea <HAL_UART_IRQHandler+0x196>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003514:	069e      	lsls	r6, r3, #26
 8003516:	d507      	bpl.n	8003528 <HAL_UART_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003518:	068d      	lsls	r5, r1, #26
 800351a:	d401      	bmi.n	8003520 <HAL_UART_IRQHandler+0xcc>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800351c:	00c0      	lsls	r0, r0, #3
 800351e:	d503      	bpl.n	8003528 <HAL_UART_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 8003520:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003522:	b10b      	cbz	r3, 8003528 <HAL_UART_IRQHandler+0xd4>
          huart->RxISR(huart);
 8003524:	4620      	mov	r0, r4
 8003526:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003528:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800352a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800352e:	6892      	ldr	r2, [r2, #8]
 8003530:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8003532:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003534:	d402      	bmi.n	800353c <HAL_UART_IRQHandler+0xe8>
 8003536:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800353a:	d01a      	beq.n	8003572 <HAL_UART_IRQHandler+0x11e>
        UART_EndRxTransfer(huart);
 800353c:	f7ff fdb8 	bl	80030b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	0652      	lsls	r2, r2, #25
 8003546:	d510      	bpl.n	800356a <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003548:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800354a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003550:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003552:	b150      	cbz	r0, 800356a <HAL_UART_IRQHandler+0x116>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_UART_IRQHandler+0x1a0>)
 8003556:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003558:	f7fd fe11 	bl	800117e <HAL_DMA_Abort_IT>
 800355c:	2800      	cmp	r0, #0
 800355e:	d044      	beq.n	80035ea <HAL_UART_IRQHandler+0x196>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003560:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003562:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8003564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003568:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800356a:	4620      	mov	r0, r4
 800356c:	f7ff ff70 	bl	8003450 <HAL_UART_ErrorCallback>
 8003570:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003572:	f7ff ff6d 	bl	8003450 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003576:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800357a:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800357c:	02de      	lsls	r6, r3, #11
 800357e:	d509      	bpl.n	8003594 <HAL_UART_IRQHandler+0x140>
 8003580:	0245      	lsls	r5, r0, #9
 8003582:	d507      	bpl.n	8003594 <HAL_UART_IRQHandler+0x140>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003584:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003588:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800358a:	6213      	str	r3, [r2, #32]
}
 800358c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003590:	f000 be28 	b.w	80041e4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003594:	061e      	lsls	r6, r3, #24
 8003596:	d505      	bpl.n	80035a4 <HAL_UART_IRQHandler+0x150>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003598:	060d      	lsls	r5, r1, #24
 800359a:	d401      	bmi.n	80035a0 <HAL_UART_IRQHandler+0x14c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800359c:	0200      	lsls	r0, r0, #8
 800359e:	d501      	bpl.n	80035a4 <HAL_UART_IRQHandler+0x150>
    if (huart->TxISR != NULL)
 80035a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80035a2:	e76a      	b.n	800347a <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035a4:	065e      	lsls	r6, r3, #25
 80035a6:	d50e      	bpl.n	80035c6 <HAL_UART_IRQHandler+0x172>
 80035a8:	064d      	lsls	r5, r1, #25
 80035aa:	d50c      	bpl.n	80035c6 <HAL_UART_IRQHandler+0x172>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b2:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	2320      	movs	r3, #32
 80035b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 80035be:	4620      	mov	r0, r4
 80035c0:	f002 fa2a 	bl	8005a18 <HAL_UART_TxCpltCallback>
 80035c4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80035c6:	0218      	lsls	r0, r3, #8
 80035c8:	d506      	bpl.n	80035d8 <HAL_UART_IRQHandler+0x184>
 80035ca:	004a      	lsls	r2, r1, #1
 80035cc:	d504      	bpl.n	80035d8 <HAL_UART_IRQHandler+0x184>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80035ce:	4620      	mov	r0, r4
}
 80035d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80035d4:	f000 be08 	b.w	80041e8 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035d8:	01db      	lsls	r3, r3, #7
 80035da:	d506      	bpl.n	80035ea <HAL_UART_IRQHandler+0x196>
 80035dc:	2900      	cmp	r1, #0
 80035de:	da04      	bge.n	80035ea <HAL_UART_IRQHandler+0x196>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035e0:	4620      	mov	r0, r4
}
 80035e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035e6:	f000 bdfe 	b.w	80041e6 <HAL_UARTEx_RxFifoFullCallback>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	10000001 	.word	0x10000001
 80035f0:	04000120 	.word	0x04000120
 80035f4:	080035f9 	.word	0x080035f9

080035f8 <UART_DMAAbortOnError>:
{
 80035f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003602:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8003606:	f7ff ff23 	bl	8003450 <HAL_UART_ErrorCallback>
 800360a:	bd08      	pop	{r3, pc}

0800360c <HAL_UART_GetState>:
  temp1 = huart->gState;
 800360c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8003610:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8003614:	4310      	orrs	r0, r2
 8003616:	4770      	bx	lr

08003618 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003618:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361a:	69c1      	ldr	r1, [r0, #28]
 800361c:	6883      	ldr	r3, [r0, #8]
{
 800361e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003622:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003624:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003626:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003628:	4303      	orrs	r3, r0
 800362a:	6960      	ldr	r0, [r4, #20]
 800362c:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800362e:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003630:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8003632:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	48ac      	ldr	r0, [pc, #688]	; (80038e8 <UART_SetConfig+0x2d0>)
 8003636:	4028      	ands	r0, r5
 8003638:	4303      	orrs	r3, r0
 800363a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800363c:	6853      	ldr	r3, [r2, #4]
 800363e:	68e0      	ldr	r0, [r4, #12]
 8003640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003644:	4303      	orrs	r3, r0
 8003646:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003648:	4ba8      	ldr	r3, [pc, #672]	; (80038ec <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800364a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800364c:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800364e:	bf1c      	itt	ne
 8003650:	6a23      	ldrne	r3, [r4, #32]
 8003652:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003654:	6893      	ldr	r3, [r2, #8]
 8003656:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800365a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800365e:	4303      	orrs	r3, r0
 8003660:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003662:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003666:	f020 000f 	bic.w	r0, r0, #15
 800366a:	4318      	orrs	r0, r3
 800366c:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800366e:	48a0      	ldr	r0, [pc, #640]	; (80038f0 <UART_SetConfig+0x2d8>)
 8003670:	4282      	cmp	r2, r0
 8003672:	d11a      	bne.n	80036aa <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003678:	489e      	ldr	r0, [pc, #632]	; (80038f4 <UART_SetConfig+0x2dc>)
 800367a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800367e:	f002 0203 	and.w	r2, r2, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003682:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003686:	5c82      	ldrb	r2, [r0, r2]
 8003688:	f102 32ff 	add.w	r2, r2, #4294967295
 800368c:	f000 8220 	beq.w	8003ad0 <UART_SetConfig+0x4b8>
    switch (clocksource)
 8003690:	2a07      	cmp	r2, #7
 8003692:	f200 83e7 	bhi.w	8003e64 <UART_SetConfig+0x84c>
 8003696:	e8df f012 	tbh	[pc, r2, lsl #1]
 800369a:	0327      	.short	0x0327
 800369c:	03e50349 	.word	0x03e50349
 80036a0:	03e5038c 	.word	0x03e5038c
 80036a4:	03e503e5 	.word	0x03e503e5
 80036a8:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036aa:	4890      	ldr	r0, [pc, #576]	; (80038ec <UART_SetConfig+0x2d4>)
 80036ac:	4282      	cmp	r2, r0
 80036ae:	f040 83d5 	bne.w	8003e5c <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80036b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80036ba:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80036be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80036c2:	f000 8094 	beq.w	80037ee <UART_SetConfig+0x1d6>
 80036c6:	d80c      	bhi.n	80036e2 <UART_SetConfig+0xca>
 80036c8:	b3ca      	cbz	r2, 800373e <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 80036ca:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80036d2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80036da:	6723      	str	r3, [r4, #112]	; 0x70
}
 80036dc:	4610      	mov	r0, r2
 80036de:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80036e6:	d064      	beq.n	80037b2 <UART_SetConfig+0x19a>
 80036e8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80036ec:	d1ed      	bne.n	80036ca <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80e1 	beq.w	80038b6 <UART_SetConfig+0x29e>
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f000 80e1 	beq.w	80038bc <UART_SetConfig+0x2a4>
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	f000 80e1 	beq.w	80038c2 <UART_SetConfig+0x2aa>
 8003700:	2b03      	cmp	r3, #3
 8003702:	f000 80e1 	beq.w	80038c8 <UART_SetConfig+0x2b0>
 8003706:	2b04      	cmp	r3, #4
 8003708:	f000 80e1 	beq.w	80038ce <UART_SetConfig+0x2b6>
 800370c:	2b05      	cmp	r3, #5
 800370e:	f000 80e1 	beq.w	80038d4 <UART_SetConfig+0x2bc>
 8003712:	2b06      	cmp	r3, #6
 8003714:	f000 80e1 	beq.w	80038da <UART_SetConfig+0x2c2>
 8003718:	2b07      	cmp	r3, #7
 800371a:	f000 80e1 	beq.w	80038e0 <UART_SetConfig+0x2c8>
 800371e:	2b08      	cmp	r3, #8
 8003720:	f000 8100 	beq.w	8003924 <UART_SetConfig+0x30c>
 8003724:	2b09      	cmp	r3, #9
 8003726:	f000 8100 	beq.w	800392a <UART_SetConfig+0x312>
 800372a:	2b0a      	cmp	r3, #10
 800372c:	f000 8100 	beq.w	8003930 <UART_SetConfig+0x318>
 8003730:	2b0b      	cmp	r3, #11
 8003732:	bf14      	ite	ne
 8003734:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8003738:	2080      	moveq	r0, #128	; 0x80
 800373a:	2308      	movs	r3, #8
 800373c:	e093      	b.n	8003866 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800373e:	f7ff fa9d 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8003742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003744:	b1fb      	cbz	r3, 8003786 <UART_SetConfig+0x16e>
 8003746:	2b01      	cmp	r3, #1
 8003748:	d01f      	beq.n	800378a <UART_SetConfig+0x172>
 800374a:	2b02      	cmp	r3, #2
 800374c:	d01f      	beq.n	800378e <UART_SetConfig+0x176>
 800374e:	2b03      	cmp	r3, #3
 8003750:	d01f      	beq.n	8003792 <UART_SetConfig+0x17a>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d01f      	beq.n	8003796 <UART_SetConfig+0x17e>
 8003756:	2b05      	cmp	r3, #5
 8003758:	d01f      	beq.n	800379a <UART_SetConfig+0x182>
 800375a:	2b06      	cmp	r3, #6
 800375c:	d01f      	beq.n	800379e <UART_SetConfig+0x186>
 800375e:	2b07      	cmp	r3, #7
 8003760:	d01f      	beq.n	80037a2 <UART_SetConfig+0x18a>
 8003762:	2b08      	cmp	r3, #8
 8003764:	d01f      	beq.n	80037a6 <UART_SetConfig+0x18e>
 8003766:	2b09      	cmp	r3, #9
 8003768:	d01f      	beq.n	80037aa <UART_SetConfig+0x192>
 800376a:	2b0a      	cmp	r3, #10
 800376c:	d01f      	beq.n	80037ae <UART_SetConfig+0x196>
 800376e:	2b0b      	cmp	r3, #11
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003778:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800377c:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800377e:	2800      	cmp	r0, #0
 8003780:	d171      	bne.n	8003866 <UART_SetConfig+0x24e>
 8003782:	4602      	mov	r2, r0
 8003784:	e7a2      	b.n	80036cc <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003786:	2301      	movs	r3, #1
 8003788:	e7f6      	b.n	8003778 <UART_SetConfig+0x160>
 800378a:	2302      	movs	r3, #2
 800378c:	e7f4      	b.n	8003778 <UART_SetConfig+0x160>
 800378e:	2304      	movs	r3, #4
 8003790:	e7f2      	b.n	8003778 <UART_SetConfig+0x160>
 8003792:	2306      	movs	r3, #6
 8003794:	e7f0      	b.n	8003778 <UART_SetConfig+0x160>
 8003796:	2308      	movs	r3, #8
 8003798:	e7ee      	b.n	8003778 <UART_SetConfig+0x160>
 800379a:	230a      	movs	r3, #10
 800379c:	e7ec      	b.n	8003778 <UART_SetConfig+0x160>
 800379e:	230c      	movs	r3, #12
 80037a0:	e7ea      	b.n	8003778 <UART_SetConfig+0x160>
 80037a2:	2310      	movs	r3, #16
 80037a4:	e7e8      	b.n	8003778 <UART_SetConfig+0x160>
 80037a6:	2320      	movs	r3, #32
 80037a8:	e7e6      	b.n	8003778 <UART_SetConfig+0x160>
 80037aa:	2340      	movs	r3, #64	; 0x40
 80037ac:	e7e4      	b.n	8003778 <UART_SetConfig+0x160>
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	e7e2      	b.n	8003778 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d052      	beq.n	800385c <UART_SetConfig+0x244>
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d052      	beq.n	8003860 <UART_SetConfig+0x248>
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d052      	beq.n	8003864 <UART_SetConfig+0x24c>
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d069      	beq.n	8003896 <UART_SetConfig+0x27e>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d069      	beq.n	800389a <UART_SetConfig+0x282>
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d069      	beq.n	800389e <UART_SetConfig+0x286>
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d069      	beq.n	80038a2 <UART_SetConfig+0x28a>
 80037ce:	2b07      	cmp	r3, #7
 80037d0:	d069      	beq.n	80038a6 <UART_SetConfig+0x28e>
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d069      	beq.n	80038aa <UART_SetConfig+0x292>
 80037d6:	2b09      	cmp	r3, #9
 80037d8:	d069      	beq.n	80038ae <UART_SetConfig+0x296>
 80037da:	2b0a      	cmp	r3, #10
 80037dc:	d069      	beq.n	80038b2 <UART_SetConfig+0x29a>
 80037de:	4846      	ldr	r0, [pc, #280]	; (80038f8 <UART_SetConfig+0x2e0>)
 80037e0:	f24f 4224 	movw	r2, #62500	; 0xf424
 80037e4:	2b0b      	cmp	r3, #11
 80037e6:	bf08      	it	eq
 80037e8:	4610      	moveq	r0, r2
 80037ea:	2302      	movs	r3, #2
 80037ec:	e03b      	b.n	8003866 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80037ee:	f7ff f9e7 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 80037f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037f4:	b1e3      	cbz	r3, 8003830 <UART_SetConfig+0x218>
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d01c      	beq.n	8003834 <UART_SetConfig+0x21c>
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d01c      	beq.n	8003838 <UART_SetConfig+0x220>
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d01c      	beq.n	800383c <UART_SetConfig+0x224>
 8003802:	2b04      	cmp	r3, #4
 8003804:	d01c      	beq.n	8003840 <UART_SetConfig+0x228>
 8003806:	2b05      	cmp	r3, #5
 8003808:	d01c      	beq.n	8003844 <UART_SetConfig+0x22c>
 800380a:	2b06      	cmp	r3, #6
 800380c:	d01c      	beq.n	8003848 <UART_SetConfig+0x230>
 800380e:	2b07      	cmp	r3, #7
 8003810:	d01c      	beq.n	800384c <UART_SetConfig+0x234>
 8003812:	2b08      	cmp	r3, #8
 8003814:	d01c      	beq.n	8003850 <UART_SetConfig+0x238>
 8003816:	2b09      	cmp	r3, #9
 8003818:	d01c      	beq.n	8003854 <UART_SetConfig+0x23c>
 800381a:	2b0a      	cmp	r3, #10
 800381c:	d01c      	beq.n	8003858 <UART_SetConfig+0x240>
 800381e:	2b0b      	cmp	r3, #11
 8003820:	bf14      	ite	ne
 8003822:	2301      	movne	r3, #1
 8003824:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003828:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800382c:	2304      	movs	r3, #4
 800382e:	e7a6      	b.n	800377e <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003830:	2301      	movs	r3, #1
 8003832:	e7f9      	b.n	8003828 <UART_SetConfig+0x210>
 8003834:	2302      	movs	r3, #2
 8003836:	e7f7      	b.n	8003828 <UART_SetConfig+0x210>
 8003838:	2304      	movs	r3, #4
 800383a:	e7f5      	b.n	8003828 <UART_SetConfig+0x210>
 800383c:	2306      	movs	r3, #6
 800383e:	e7f3      	b.n	8003828 <UART_SetConfig+0x210>
 8003840:	2308      	movs	r3, #8
 8003842:	e7f1      	b.n	8003828 <UART_SetConfig+0x210>
 8003844:	230a      	movs	r3, #10
 8003846:	e7ef      	b.n	8003828 <UART_SetConfig+0x210>
 8003848:	230c      	movs	r3, #12
 800384a:	e7ed      	b.n	8003828 <UART_SetConfig+0x210>
 800384c:	2310      	movs	r3, #16
 800384e:	e7eb      	b.n	8003828 <UART_SetConfig+0x210>
 8003850:	2320      	movs	r3, #32
 8003852:	e7e9      	b.n	8003828 <UART_SetConfig+0x210>
 8003854:	2340      	movs	r3, #64	; 0x40
 8003856:	e7e7      	b.n	8003828 <UART_SetConfig+0x210>
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	e7e5      	b.n	8003828 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800385c:	4826      	ldr	r0, [pc, #152]	; (80038f8 <UART_SetConfig+0x2e0>)
 800385e:	e7c4      	b.n	80037ea <UART_SetConfig+0x1d2>
 8003860:	4826      	ldr	r0, [pc, #152]	; (80038fc <UART_SetConfig+0x2e4>)
 8003862:	e7c2      	b.n	80037ea <UART_SetConfig+0x1d2>
 8003864:	4826      	ldr	r0, [pc, #152]	; (8003900 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003866:	6862      	ldr	r2, [r4, #4]
 8003868:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800386c:	4281      	cmp	r1, r0
 800386e:	f63f af2c 	bhi.w	80036ca <UART_SetConfig+0xb2>
 8003872:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003876:	f63f af28 	bhi.w	80036ca <UART_SetConfig+0xb2>
        switch (clocksource)
 800387a:	2b08      	cmp	r3, #8
 800387c:	f200 8125 	bhi.w	8003aca <UART_SetConfig+0x4b2>
 8003880:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003884:	01230059 	.word	0x01230059
 8003888:	01230095 	.word	0x01230095
 800388c:	012300d1 	.word	0x012300d1
 8003890:	01230123 	.word	0x01230123
 8003894:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003896:	481b      	ldr	r0, [pc, #108]	; (8003904 <UART_SetConfig+0x2ec>)
 8003898:	e7a7      	b.n	80037ea <UART_SetConfig+0x1d2>
 800389a:	481b      	ldr	r0, [pc, #108]	; (8003908 <UART_SetConfig+0x2f0>)
 800389c:	e7a5      	b.n	80037ea <UART_SetConfig+0x1d2>
 800389e:	481b      	ldr	r0, [pc, #108]	; (800390c <UART_SetConfig+0x2f4>)
 80038a0:	e7a3      	b.n	80037ea <UART_SetConfig+0x1d2>
 80038a2:	481b      	ldr	r0, [pc, #108]	; (8003910 <UART_SetConfig+0x2f8>)
 80038a4:	e7a1      	b.n	80037ea <UART_SetConfig+0x1d2>
 80038a6:	481b      	ldr	r0, [pc, #108]	; (8003914 <UART_SetConfig+0x2fc>)
 80038a8:	e79f      	b.n	80037ea <UART_SetConfig+0x1d2>
 80038aa:	481b      	ldr	r0, [pc, #108]	; (8003918 <UART_SetConfig+0x300>)
 80038ac:	e79d      	b.n	80037ea <UART_SetConfig+0x1d2>
 80038ae:	481b      	ldr	r0, [pc, #108]	; (800391c <UART_SetConfig+0x304>)
 80038b0:	e79b      	b.n	80037ea <UART_SetConfig+0x1d2>
 80038b2:	481b      	ldr	r0, [pc, #108]	; (8003920 <UART_SetConfig+0x308>)
 80038b4:	e799      	b.n	80037ea <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80038b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80038ba:	e73e      	b.n	800373a <UART_SetConfig+0x122>
 80038bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038c0:	e73b      	b.n	800373a <UART_SetConfig+0x122>
 80038c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038c6:	e738      	b.n	800373a <UART_SetConfig+0x122>
 80038c8:	f241 5055 	movw	r0, #5461	; 0x1555
 80038cc:	e735      	b.n	800373a <UART_SetConfig+0x122>
 80038ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038d2:	e732      	b.n	800373a <UART_SetConfig+0x122>
 80038d4:	f640 40cc 	movw	r0, #3276	; 0xccc
 80038d8:	e72f      	b.n	800373a <UART_SetConfig+0x122>
 80038da:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80038de:	e72c      	b.n	800373a <UART_SetConfig+0x122>
 80038e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038e4:	e729      	b.n	800373a <UART_SetConfig+0x122>
 80038e6:	bf00      	nop
 80038e8:	cfff69f3 	.word	0xcfff69f3
 80038ec:	40008000 	.word	0x40008000
 80038f0:	40013800 	.word	0x40013800
 80038f4:	08008374 	.word	0x08008374
 80038f8:	00f42400 	.word	0x00f42400
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	003d0900 	.word	0x003d0900
 8003904:	0028b0aa 	.word	0x0028b0aa
 8003908:	001e8480 	.word	0x001e8480
 800390c:	00186a00 	.word	0x00186a00
 8003910:	00145855 	.word	0x00145855
 8003914:	000f4240 	.word	0x000f4240
 8003918:	0007a120 	.word	0x0007a120
 800391c:	0003d090 	.word	0x0003d090
 8003920:	0001e848 	.word	0x0001e848
 8003924:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003928:	e79d      	b.n	8003866 <UART_SetConfig+0x24e>
 800392a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800392e:	e704      	b.n	800373a <UART_SetConfig+0x122>
 8003930:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003934:	e701      	b.n	800373a <UART_SetConfig+0x122>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003936:	f7ff f9a1 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800393a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8089 	beq.w	8003a54 <UART_SetConfig+0x43c>
 8003942:	2b01      	cmp	r3, #1
 8003944:	d072      	beq.n	8003a2c <UART_SetConfig+0x414>
 8003946:	2b02      	cmp	r3, #2
 8003948:	d072      	beq.n	8003a30 <UART_SetConfig+0x418>
 800394a:	2b03      	cmp	r3, #3
 800394c:	d072      	beq.n	8003a34 <UART_SetConfig+0x41c>
 800394e:	2b04      	cmp	r3, #4
 8003950:	d072      	beq.n	8003a38 <UART_SetConfig+0x420>
 8003952:	2b05      	cmp	r3, #5
 8003954:	d072      	beq.n	8003a3c <UART_SetConfig+0x424>
 8003956:	2b06      	cmp	r3, #6
 8003958:	d072      	beq.n	8003a40 <UART_SetConfig+0x428>
 800395a:	2b07      	cmp	r3, #7
 800395c:	d072      	beq.n	8003a44 <UART_SetConfig+0x42c>
 800395e:	2b08      	cmp	r3, #8
 8003960:	d072      	beq.n	8003a48 <UART_SetConfig+0x430>
 8003962:	2b09      	cmp	r3, #9
 8003964:	d072      	beq.n	8003a4c <UART_SetConfig+0x434>
 8003966:	2b0a      	cmp	r3, #10
 8003968:	d072      	beq.n	8003a50 <UART_SetConfig+0x438>
 800396a:	2b0b      	cmp	r3, #11
 800396c:	d172      	bne.n	8003a54 <UART_SetConfig+0x43c>
 800396e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003972:	2300      	movs	r3, #0
 8003974:	2100      	movs	r1, #0
 8003976:	f7fd f8db 	bl	8000b30 <__aeabi_uldivmod>
 800397a:	6865      	ldr	r5, [r4, #4]
 800397c:	020f      	lsls	r7, r1, #8
 800397e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003982:	0206      	lsls	r6, r0, #8
 8003984:	0868      	lsrs	r0, r5, #1
 8003986:	eb16 0b00 	adds.w	fp, r6, r0
 800398a:	f147 0c00 	adc.w	ip, r7, #0
 800398e:	462a      	mov	r2, r5
 8003990:	2300      	movs	r3, #0
 8003992:	4658      	mov	r0, fp
 8003994:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003996:	f7fd f8cb 	bl	8000b30 <__aeabi_uldivmod>
            break;
 800399a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800399c:	4b9a      	ldr	r3, [pc, #616]	; (8003c08 <UART_SetConfig+0x5f0>)
 800399e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80039a2:	4299      	cmp	r1, r3
 80039a4:	f63f ae91 	bhi.w	80036ca <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	60d8      	str	r0, [r3, #12]
 80039ac:	e68e      	b.n	80036cc <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d036      	beq.n	8003a22 <UART_SetConfig+0x40a>
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d016      	beq.n	80039e6 <UART_SetConfig+0x3ce>
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d016      	beq.n	80039ea <UART_SetConfig+0x3d2>
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d016      	beq.n	80039ee <UART_SetConfig+0x3d6>
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d01e      	beq.n	8003a02 <UART_SetConfig+0x3ea>
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d01e      	beq.n	8003a06 <UART_SetConfig+0x3ee>
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d01e      	beq.n	8003a0a <UART_SetConfig+0x3f2>
 80039cc:	2b07      	cmp	r3, #7
 80039ce:	d020      	beq.n	8003a12 <UART_SetConfig+0x3fa>
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d020      	beq.n	8003a16 <UART_SetConfig+0x3fe>
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d020      	beq.n	8003a1a <UART_SetConfig+0x402>
 80039d8:	2b0a      	cmp	r3, #10
 80039da:	d020      	beq.n	8003a1e <UART_SetConfig+0x406>
 80039dc:	2b0b      	cmp	r3, #11
 80039de:	d120      	bne.n	8003a22 <UART_SetConfig+0x40a>
 80039e0:	488a      	ldr	r0, [pc, #552]	; (8003c0c <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e2:	2100      	movs	r1, #0
 80039e4:	e006      	b.n	80039f4 <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e6:	488a      	ldr	r0, [pc, #552]	; (8003c10 <UART_SetConfig+0x5f8>)
 80039e8:	e7fb      	b.n	80039e2 <UART_SetConfig+0x3ca>
 80039ea:	488a      	ldr	r0, [pc, #552]	; (8003c14 <UART_SetConfig+0x5fc>)
 80039ec:	e7f9      	b.n	80039e2 <UART_SetConfig+0x3ca>
 80039ee:	a182      	add	r1, pc, #520	; (adr r1, 8003bf8 <UART_SetConfig+0x5e0>)
 80039f0:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f4:	0855      	lsrs	r5, r2, #1
 80039f6:	1940      	adds	r0, r0, r5
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	f141 0100 	adc.w	r1, r1, #0
 8003a00:	e7c9      	b.n	8003996 <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a02:	4885      	ldr	r0, [pc, #532]	; (8003c18 <UART_SetConfig+0x600>)
 8003a04:	e7ed      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a06:	4885      	ldr	r0, [pc, #532]	; (8003c1c <UART_SetConfig+0x604>)
 8003a08:	e7eb      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a0a:	a17d      	add	r1, pc, #500	; (adr r1, 8003c00 <UART_SetConfig+0x5e8>)
 8003a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a10:	e7f0      	b.n	80039f4 <UART_SetConfig+0x3dc>
 8003a12:	4883      	ldr	r0, [pc, #524]	; (8003c20 <UART_SetConfig+0x608>)
 8003a14:	e7e5      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a16:	4883      	ldr	r0, [pc, #524]	; (8003c24 <UART_SetConfig+0x60c>)
 8003a18:	e7e3      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a1a:	4883      	ldr	r0, [pc, #524]	; (8003c28 <UART_SetConfig+0x610>)
 8003a1c:	e7e1      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a1e:	4883      	ldr	r0, [pc, #524]	; (8003c2c <UART_SetConfig+0x614>)
 8003a20:	e7df      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a22:	4883      	ldr	r0, [pc, #524]	; (8003c30 <UART_SetConfig+0x618>)
 8003a24:	e7dd      	b.n	80039e2 <UART_SetConfig+0x3ca>
            pclk = HAL_RCC_GetSysClockFreq();
 8003a26:	f7ff f8cb 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8003a2a:	e786      	b.n	800393a <UART_SetConfig+0x322>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	e7a0      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a30:	2204      	movs	r2, #4
 8003a32:	e79e      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a34:	2206      	movs	r2, #6
 8003a36:	e79c      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a38:	2208      	movs	r2, #8
 8003a3a:	e79a      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a3c:	220a      	movs	r2, #10
 8003a3e:	e798      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a40:	220c      	movs	r2, #12
 8003a42:	e796      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a44:	2210      	movs	r2, #16
 8003a46:	e794      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a48:	2220      	movs	r2, #32
 8003a4a:	e792      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a4c:	2240      	movs	r2, #64	; 0x40
 8003a4e:	e790      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	e78e      	b.n	8003972 <UART_SetConfig+0x35a>
 8003a54:	2201      	movs	r2, #1
 8003a56:	e78c      	b.n	8003972 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a5a:	b39b      	cbz	r3, 8003ac4 <UART_SetConfig+0x4ac>
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d016      	beq.n	8003a8e <UART_SetConfig+0x476>
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d017      	beq.n	8003a94 <UART_SetConfig+0x47c>
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d018      	beq.n	8003a9a <UART_SetConfig+0x482>
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d018      	beq.n	8003a9e <UART_SetConfig+0x486>
 8003a6c:	2b05      	cmp	r3, #5
 8003a6e:	d019      	beq.n	8003aa4 <UART_SetConfig+0x48c>
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d019      	beq.n	8003aa8 <UART_SetConfig+0x490>
 8003a74:	2b07      	cmp	r3, #7
 8003a76:	d019      	beq.n	8003aac <UART_SetConfig+0x494>
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d01a      	beq.n	8003ab2 <UART_SetConfig+0x49a>
 8003a7c:	2b09      	cmp	r3, #9
 8003a7e:	d01b      	beq.n	8003ab8 <UART_SetConfig+0x4a0>
 8003a80:	2b0a      	cmp	r3, #10
 8003a82:	d01c      	beq.n	8003abe <UART_SetConfig+0x4a6>
 8003a84:	2b0b      	cmp	r3, #11
 8003a86:	d11d      	bne.n	8003ac4 <UART_SetConfig+0x4ac>
 8003a88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a8c:	e7a9      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a8e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003a92:	e7a6      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a94:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a98:	e7a3      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a9a:	4866      	ldr	r0, [pc, #408]	; (8003c34 <UART_SetConfig+0x61c>)
 8003a9c:	e7a1      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003a9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003aa2:	e79e      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003aa4:	4864      	ldr	r0, [pc, #400]	; (8003c38 <UART_SetConfig+0x620>)
 8003aa6:	e79c      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003aa8:	4864      	ldr	r0, [pc, #400]	; (8003c3c <UART_SetConfig+0x624>)
 8003aaa:	e79a      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003aac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ab0:	e797      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003ab2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003ab6:	e794      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003ab8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003abc:	e791      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003abe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ac2:	e78e      	b.n	80039e2 <UART_SetConfig+0x3ca>
 8003ac4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003ac8:	e78b      	b.n	80039e2 <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 8003aca:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003acc:	2000      	movs	r0, #0
 8003ace:	e765      	b.n	800399c <UART_SetConfig+0x384>
    switch (clocksource)
 8003ad0:	2a07      	cmp	r2, #7
 8003ad2:	f200 8106 	bhi.w	8003ce2 <UART_SetConfig+0x6ca>
 8003ad6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003ada:	0008      	.short	0x0008
 8003adc:	0104003f 	.word	0x0104003f
 8003ae0:	01040076 	.word	0x01040076
 8003ae4:	01040104 	.word	0x01040104
 8003ae8:	00c7      	.short	0x00c7
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aea:	f7ff f8d9 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003af0:	2900      	cmp	r1, #0
 8003af2:	d06b      	beq.n	8003bcc <UART_SetConfig+0x5b4>
 8003af4:	2901      	cmp	r1, #1
 8003af6:	d06b      	beq.n	8003bd0 <UART_SetConfig+0x5b8>
 8003af8:	2902      	cmp	r1, #2
 8003afa:	d06b      	beq.n	8003bd4 <UART_SetConfig+0x5bc>
 8003afc:	2903      	cmp	r1, #3
 8003afe:	d06b      	beq.n	8003bd8 <UART_SetConfig+0x5c0>
 8003b00:	2904      	cmp	r1, #4
 8003b02:	d06b      	beq.n	8003bdc <UART_SetConfig+0x5c4>
 8003b04:	2905      	cmp	r1, #5
 8003b06:	d06b      	beq.n	8003be0 <UART_SetConfig+0x5c8>
 8003b08:	2906      	cmp	r1, #6
 8003b0a:	d06b      	beq.n	8003be4 <UART_SetConfig+0x5cc>
 8003b0c:	2907      	cmp	r1, #7
 8003b0e:	d06b      	beq.n	8003be8 <UART_SetConfig+0x5d0>
 8003b10:	2908      	cmp	r1, #8
 8003b12:	d06b      	beq.n	8003bec <UART_SetConfig+0x5d4>
 8003b14:	2909      	cmp	r1, #9
 8003b16:	d06b      	beq.n	8003bf0 <UART_SetConfig+0x5d8>
 8003b18:	290a      	cmp	r1, #10
 8003b1a:	d06b      	beq.n	8003bf4 <UART_SetConfig+0x5dc>
 8003b1c:	290b      	cmp	r1, #11
 8003b1e:	bf14      	ite	ne
 8003b20:	2201      	movne	r2, #1
 8003b22:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003b26:	6861      	ldr	r1, [r4, #4]
 8003b28:	fbb0 f2f2 	udiv	r2, r0, r2
 8003b2c:	084b      	lsrs	r3, r1, #1
 8003b2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b36:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b38:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3a:	f1a3 0010 	sub.w	r0, r3, #16
 8003b3e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003b42:	4288      	cmp	r0, r1
 8003b44:	f63f adc1 	bhi.w	80036ca <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b48:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003b4c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b4e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003b52:	430b      	orrs	r3, r1
 8003b54:	60c3      	str	r3, [r0, #12]
 8003b56:	e5b9      	b.n	80036cc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b58:	b1fb      	cbz	r3, 8003b9a <UART_SetConfig+0x582>
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d01f      	beq.n	8003b9e <UART_SetConfig+0x586>
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d01f      	beq.n	8003ba2 <UART_SetConfig+0x58a>
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d01f      	beq.n	8003ba6 <UART_SetConfig+0x58e>
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d01f      	beq.n	8003baa <UART_SetConfig+0x592>
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d01f      	beq.n	8003bae <UART_SetConfig+0x596>
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d01f      	beq.n	8003bb2 <UART_SetConfig+0x59a>
 8003b72:	2b07      	cmp	r3, #7
 8003b74:	d01f      	beq.n	8003bb6 <UART_SetConfig+0x59e>
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d01f      	beq.n	8003bba <UART_SetConfig+0x5a2>
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	d01f      	beq.n	8003bbe <UART_SetConfig+0x5a6>
 8003b7e:	2b0a      	cmp	r3, #10
 8003b80:	d01f      	beq.n	8003bc2 <UART_SetConfig+0x5aa>
 8003b82:	492f      	ldr	r1, [pc, #188]	; (8003c40 <UART_SetConfig+0x628>)
 8003b84:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <UART_SetConfig+0x614>)
 8003b86:	2b0b      	cmp	r3, #11
 8003b88:	bf14      	ite	ne
 8003b8a:	4613      	movne	r3, r2
 8003b8c:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b8e:	6862      	ldr	r2, [r4, #4]
 8003b90:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b98:	e7cd      	b.n	8003b36 <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <UART_SetConfig+0x614>)
 8003b9c:	e7f7      	b.n	8003b8e <UART_SetConfig+0x576>
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <UART_SetConfig+0x5f4>)
 8003ba0:	e7f5      	b.n	8003b8e <UART_SetConfig+0x576>
 8003ba2:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <UART_SetConfig+0x62c>)
 8003ba4:	e7f3      	b.n	8003b8e <UART_SetConfig+0x576>
 8003ba6:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <UART_SetConfig+0x630>)
 8003ba8:	e7f1      	b.n	8003b8e <UART_SetConfig+0x576>
 8003baa:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <UART_SetConfig+0x634>)
 8003bac:	e7ef      	b.n	8003b8e <UART_SetConfig+0x576>
 8003bae:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <UART_SetConfig+0x638>)
 8003bb0:	e7ed      	b.n	8003b8e <UART_SetConfig+0x576>
 8003bb2:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <UART_SetConfig+0x63c>)
 8003bb4:	e7eb      	b.n	8003b8e <UART_SetConfig+0x576>
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <UART_SetConfig+0x640>)
 8003bb8:	e7e9      	b.n	8003b8e <UART_SetConfig+0x576>
 8003bba:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <UART_SetConfig+0x644>)
 8003bbc:	e7e7      	b.n	8003b8e <UART_SetConfig+0x576>
 8003bbe:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <UART_SetConfig+0x648>)
 8003bc0:	e7e5      	b.n	8003b8e <UART_SetConfig+0x576>
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <UART_SetConfig+0x64c>)
 8003bc4:	e7e3      	b.n	8003b8e <UART_SetConfig+0x576>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7fe fffb 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8003bca:	e790      	b.n	8003aee <UART_SetConfig+0x4d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bcc:	2201      	movs	r2, #1
 8003bce:	e7aa      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	e7a8      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	e7a6      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bd8:	2206      	movs	r2, #6
 8003bda:	e7a4      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bdc:	2208      	movs	r2, #8
 8003bde:	e7a2      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003be0:	220a      	movs	r2, #10
 8003be2:	e7a0      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003be4:	220c      	movs	r2, #12
 8003be6:	e79e      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003be8:	2210      	movs	r2, #16
 8003bea:	e79c      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bec:	2220      	movs	r2, #32
 8003bee:	e79a      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bf0:	2240      	movs	r2, #64	; 0x40
 8003bf2:	e798      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	e796      	b.n	8003b26 <UART_SetConfig+0x50e>
 8003bf8:	28b0aa00 	.word	0x28b0aa00
 8003bfc:	00000000 	.word	0x00000000
 8003c00:	14585500 	.word	0x14585500
 8003c04:	00000000 	.word	0x00000000
 8003c08:	000ffcff 	.word	0x000ffcff
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	7a120000 	.word	0x7a120000
 8003c14:	3d090000 	.word	0x3d090000
 8003c18:	1e848000 	.word	0x1e848000
 8003c1c:	186a0000 	.word	0x186a0000
 8003c20:	0f424000 	.word	0x0f424000
 8003c24:	07a12000 	.word	0x07a12000
 8003c28:	03d09000 	.word	0x03d09000
 8003c2c:	01e84800 	.word	0x01e84800
 8003c30:	f4240000 	.word	0xf4240000
 8003c34:	00155500 	.word	0x00155500
 8003c38:	000ccc00 	.word	0x000ccc00
 8003c3c:	000aaa00 	.word	0x000aaa00
 8003c40:	0001e848 	.word	0x0001e848
 8003c44:	007a1200 	.word	0x007a1200
 8003c48:	00516154 	.word	0x00516154
 8003c4c:	003d0900 	.word	0x003d0900
 8003c50:	0030d400 	.word	0x0030d400
 8003c54:	0028b0aa 	.word	0x0028b0aa
 8003c58:	001e8480 	.word	0x001e8480
 8003c5c:	000f4240 	.word	0x000f4240
 8003c60:	0007a120 	.word	0x0007a120
 8003c64:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c68:	b1d3      	cbz	r3, 8003ca0 <UART_SetConfig+0x688>
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d01b      	beq.n	8003ca6 <UART_SetConfig+0x68e>
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d01c      	beq.n	8003cac <UART_SetConfig+0x694>
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d01d      	beq.n	8003cb2 <UART_SetConfig+0x69a>
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d01e      	beq.n	8003cb8 <UART_SetConfig+0x6a0>
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d01f      	beq.n	8003cbe <UART_SetConfig+0x6a6>
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d020      	beq.n	8003cc4 <UART_SetConfig+0x6ac>
 8003c82:	2b07      	cmp	r3, #7
 8003c84:	d021      	beq.n	8003cca <UART_SetConfig+0x6b2>
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d022      	beq.n	8003cd0 <UART_SetConfig+0x6b8>
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d023      	beq.n	8003cd6 <UART_SetConfig+0x6be>
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d024      	beq.n	8003cdc <UART_SetConfig+0x6c4>
 8003c92:	2b0b      	cmp	r3, #11
 8003c94:	bf14      	ite	ne
 8003c96:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8003c9a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003c9e:	e776      	b.n	8003b8e <UART_SetConfig+0x576>
 8003ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca4:	e773      	b.n	8003b8e <UART_SetConfig+0x576>
 8003ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003caa:	e770      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cb0:	e76d      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cb2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003cb6:	e76a      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cbc:	e767      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cbe:	f641 1398 	movw	r3, #6552	; 0x1998
 8003cc2:	e764      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cc4:	f241 5354 	movw	r3, #5460	; 0x1554
 8003cc8:	e761      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cce:	e75e      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cd4:	e75b      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cda:	e758      	b.n	8003b8e <UART_SetConfig+0x576>
 8003cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ce0:	e755      	b.n	8003b8e <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8003ce2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e728      	b.n	8003b3a <UART_SetConfig+0x522>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce8:	f7fe ffda 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d062      	beq.n	8003db8 <UART_SetConfig+0x7a0>
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d062      	beq.n	8003dbc <UART_SetConfig+0x7a4>
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d062      	beq.n	8003dc0 <UART_SetConfig+0x7a8>
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d062      	beq.n	8003dc4 <UART_SetConfig+0x7ac>
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d062      	beq.n	8003dc8 <UART_SetConfig+0x7b0>
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d062      	beq.n	8003dcc <UART_SetConfig+0x7b4>
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d062      	beq.n	8003dd0 <UART_SetConfig+0x7b8>
 8003d0a:	2b07      	cmp	r3, #7
 8003d0c:	d062      	beq.n	8003dd4 <UART_SetConfig+0x7bc>
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d062      	beq.n	8003dd8 <UART_SetConfig+0x7c0>
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d062      	beq.n	8003ddc <UART_SetConfig+0x7c4>
 8003d16:	2b0a      	cmp	r3, #10
 8003d18:	d062      	beq.n	8003de0 <UART_SetConfig+0x7c8>
 8003d1a:	2b0b      	cmp	r3, #11
 8003d1c:	bf14      	ite	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003d24:	6862      	ldr	r2, [r4, #4]
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	e01c      	b.n	8003d66 <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2c:	b35b      	cbz	r3, 8003d86 <UART_SetConfig+0x76e>
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d02b      	beq.n	8003d8a <UART_SetConfig+0x772>
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d02b      	beq.n	8003d8e <UART_SetConfig+0x776>
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d02b      	beq.n	8003d92 <UART_SetConfig+0x77a>
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d02b      	beq.n	8003d96 <UART_SetConfig+0x77e>
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d02b      	beq.n	8003d9a <UART_SetConfig+0x782>
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d02b      	beq.n	8003d9e <UART_SetConfig+0x786>
 8003d46:	2b07      	cmp	r3, #7
 8003d48:	d02b      	beq.n	8003da2 <UART_SetConfig+0x78a>
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d02b      	beq.n	8003da6 <UART_SetConfig+0x78e>
 8003d4e:	2b09      	cmp	r3, #9
 8003d50:	d02b      	beq.n	8003daa <UART_SetConfig+0x792>
 8003d52:	2b0a      	cmp	r3, #10
 8003d54:	d02b      	beq.n	8003dae <UART_SetConfig+0x796>
 8003d56:	4a45      	ldr	r2, [pc, #276]	; (8003e6c <UART_SetConfig+0x854>)
 8003d58:	f24f 4124 	movw	r1, #62500	; 0xf424
 8003d5c:	2b0b      	cmp	r3, #11
 8003d5e:	bf14      	ite	ne
 8003d60:	4613      	movne	r3, r2
 8003d62:	460b      	moveq	r3, r1
 8003d64:	6862      	ldr	r2, [r4, #4]
 8003d66:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003d6a:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d6e:	2200      	movs	r2, #0
 8003d70:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d72:	f1a3 0010 	sub.w	r0, r3, #16
 8003d76:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003d7a:	4288      	cmp	r0, r1
 8003d7c:	f63f aca5 	bhi.w	80036ca <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8003d80:	6821      	ldr	r1, [r4, #0]
 8003d82:	60cb      	str	r3, [r1, #12]
 8003d84:	e4a2      	b.n	80036cc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <UART_SetConfig+0x854>)
 8003d88:	e7ec      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <UART_SetConfig+0x858>)
 8003d8c:	e7ea      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <UART_SetConfig+0x85c>)
 8003d90:	e7e8      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003d92:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <UART_SetConfig+0x860>)
 8003d94:	e7e6      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003d96:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <UART_SetConfig+0x864>)
 8003d98:	e7e4      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003d9a:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <UART_SetConfig+0x868>)
 8003d9c:	e7e2      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <UART_SetConfig+0x86c>)
 8003da0:	e7e0      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003da2:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <UART_SetConfig+0x870>)
 8003da4:	e7de      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <UART_SetConfig+0x874>)
 8003da8:	e7dc      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003daa:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <UART_SetConfig+0x878>)
 8003dac:	e7da      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <UART_SetConfig+0x87c>)
 8003db0:	e7d8      	b.n	8003d64 <UART_SetConfig+0x74c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003db2:	f7fe ff05 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8003db6:	e799      	b.n	8003cec <UART_SetConfig+0x6d4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db8:	2301      	movs	r3, #1
 8003dba:	e7b3      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e7b1      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	e7af      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dc4:	2306      	movs	r3, #6
 8003dc6:	e7ad      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	e7ab      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dcc:	230a      	movs	r3, #10
 8003dce:	e7a9      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	e7a7      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	e7a5      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003dd8:	2320      	movs	r3, #32
 8003dda:	e7a3      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003ddc:	2340      	movs	r3, #64	; 0x40
 8003dde:	e7a1      	b.n	8003d24 <UART_SetConfig+0x70c>
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	e79f      	b.n	8003d24 <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de4:	b1cb      	cbz	r3, 8003e1a <UART_SetConfig+0x802>
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d01a      	beq.n	8003e20 <UART_SetConfig+0x808>
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d01b      	beq.n	8003e26 <UART_SetConfig+0x80e>
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d01c      	beq.n	8003e2c <UART_SetConfig+0x814>
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d01d      	beq.n	8003e32 <UART_SetConfig+0x81a>
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d01e      	beq.n	8003e38 <UART_SetConfig+0x820>
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d01f      	beq.n	8003e3e <UART_SetConfig+0x826>
 8003dfe:	2b07      	cmp	r3, #7
 8003e00:	d020      	beq.n	8003e44 <UART_SetConfig+0x82c>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d021      	beq.n	8003e4a <UART_SetConfig+0x832>
 8003e06:	2b09      	cmp	r3, #9
 8003e08:	d022      	beq.n	8003e50 <UART_SetConfig+0x838>
 8003e0a:	2b0a      	cmp	r3, #10
 8003e0c:	d023      	beq.n	8003e56 <UART_SetConfig+0x83e>
 8003e0e:	2b0b      	cmp	r3, #11
 8003e10:	bf14      	ite	ne
 8003e12:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8003e16:	2380      	moveq	r3, #128	; 0x80
 8003e18:	e7a4      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1e:	e7a1      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e24:	e79e      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e2a:	e79b      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e2c:	f241 5355 	movw	r3, #5461	; 0x1555
 8003e30:	e798      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e36:	e795      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e38:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003e3c:	e792      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e3e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003e42:	e78f      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e48:	e78c      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e4e:	e789      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e54:	e786      	b.n	8003d64 <UART_SetConfig+0x74c>
 8003e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e5a:	e783      	b.n	8003d64 <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e60:	f43f af3f 	beq.w	8003ce2 <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8003e64:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e783      	b.n	8003d72 <UART_SetConfig+0x75a>
 8003e6a:	bf00      	nop
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	007a1200 	.word	0x007a1200
 8003e74:	003d0900 	.word	0x003d0900
 8003e78:	0028b0aa 	.word	0x0028b0aa
 8003e7c:	001e8480 	.word	0x001e8480
 8003e80:	00186a00 	.word	0x00186a00
 8003e84:	00145855 	.word	0x00145855
 8003e88:	000f4240 	.word	0x000f4240
 8003e8c:	0007a120 	.word	0x0007a120
 8003e90:	0003d090 	.word	0x0003d090
 8003e94:	0001e848 	.word	0x0001e848

08003e98 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e9a:	07da      	lsls	r2, r3, #31
{
 8003e9c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e9e:	d506      	bpl.n	8003eae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ea0:	6801      	ldr	r1, [r0, #0]
 8003ea2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003ea4:	684a      	ldr	r2, [r1, #4]
 8003ea6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003eaa:	4322      	orrs	r2, r4
 8003eac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eae:	079c      	lsls	r4, r3, #30
 8003eb0:	d506      	bpl.n	8003ec0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb2:	6801      	ldr	r1, [r0, #0]
 8003eb4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003eb6:	684a      	ldr	r2, [r1, #4]
 8003eb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ebc:	4322      	orrs	r2, r4
 8003ebe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec0:	0759      	lsls	r1, r3, #29
 8003ec2:	d506      	bpl.n	8003ed2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec4:	6801      	ldr	r1, [r0, #0]
 8003ec6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003ec8:	684a      	ldr	r2, [r1, #4]
 8003eca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ece:	4322      	orrs	r2, r4
 8003ed0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed2:	071a      	lsls	r2, r3, #28
 8003ed4:	d506      	bpl.n	8003ee4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed6:	6801      	ldr	r1, [r0, #0]
 8003ed8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003eda:	684a      	ldr	r2, [r1, #4]
 8003edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee0:	4322      	orrs	r2, r4
 8003ee2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee4:	06dc      	lsls	r4, r3, #27
 8003ee6:	d506      	bpl.n	8003ef6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee8:	6801      	ldr	r1, [r0, #0]
 8003eea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ef2:	4322      	orrs	r2, r4
 8003ef4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef6:	0699      	lsls	r1, r3, #26
 8003ef8:	d506      	bpl.n	8003f08 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efa:	6801      	ldr	r1, [r0, #0]
 8003efc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003efe:	688a      	ldr	r2, [r1, #8]
 8003f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f04:	4322      	orrs	r2, r4
 8003f06:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f08:	065a      	lsls	r2, r3, #25
 8003f0a:	d50f      	bpl.n	8003f2c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f0c:	6801      	ldr	r1, [r0, #0]
 8003f0e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f10:	684a      	ldr	r2, [r1, #4]
 8003f12:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f16:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f18:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f1c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f1e:	d105      	bne.n	8003f2c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f20:	684a      	ldr	r2, [r1, #4]
 8003f22:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003f24:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003f28:	4322      	orrs	r2, r4
 8003f2a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	d506      	bpl.n	8003f3e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f30:	6802      	ldr	r2, [r0, #0]
 8003f32:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003f34:	6853      	ldr	r3, [r2, #4]
 8003f36:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6053      	str	r3, [r2, #4]
 8003f3e:	bd10      	pop	{r4, pc}

08003f40 <UART_WaitOnFlagUntilTimeout>:
{
 8003f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f44:	9d06      	ldr	r5, [sp, #24]
 8003f46:	4604      	mov	r4, r0
 8003f48:	460f      	mov	r7, r1
 8003f4a:	4616      	mov	r6, r2
 8003f4c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4e:	6821      	ldr	r1, [r4, #0]
 8003f50:	69ca      	ldr	r2, [r1, #28]
 8003f52:	ea37 0302 	bics.w	r3, r7, r2
 8003f56:	bf0c      	ite	eq
 8003f58:	2201      	moveq	r2, #1
 8003f5a:	2200      	movne	r2, #0
 8003f5c:	42b2      	cmp	r2, r6
 8003f5e:	d002      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003f60:	2000      	movs	r0, #0
}
 8003f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	1c68      	adds	r0, r5, #1
 8003f68:	d0f2      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fc ffb1 	bl	8000ed0 <HAL_GetTick>
 8003f6e:	eba0 0008 	sub.w	r0, r0, r8
 8003f72:	4285      	cmp	r5, r0
 8003f74:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003f76:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f78:	d300      	bcc.n	8003f7c <UART_WaitOnFlagUntilTimeout+0x3c>
 8003f7a:	b98d      	cbnz	r5, 8003fa0 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f80:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	6883      	ldr	r3, [r0, #8]
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003f90:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003f94:	2300      	movs	r3, #0
 8003f96:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8003f9a:	2003      	movs	r0, #3
 8003f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fa0:	075a      	lsls	r2, r3, #29
 8003fa2:	d5d4      	bpl.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa4:	69c3      	ldr	r3, [r0, #28]
 8003fa6:	051b      	lsls	r3, r3, #20
 8003fa8:	d5d1      	bpl.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fae:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003fb0:	6803      	ldr	r3, [r0, #0]
 8003fb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fb6:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	6883      	ldr	r3, [r0, #8]
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003fce:	e7e1      	b.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x54>

08003fd0 <HAL_UART_Transmit>:
{
 8003fd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fd4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003fda:	2b20      	cmp	r3, #32
{
 8003fdc:	4604      	mov	r4, r0
 8003fde:	460e      	mov	r6, r1
 8003fe0:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe2:	d14f      	bne.n	8004084 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8003fe4:	2900      	cmp	r1, #0
 8003fe6:	d04b      	beq.n	8004080 <HAL_UART_Transmit+0xb0>
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	d049      	beq.n	8004080 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8003fec:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d047      	beq.n	8004084 <HAL_UART_Transmit+0xb4>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004002:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 8004006:	f7fc ff63 	bl	8000ed0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800400c:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004014:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8004016:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401a:	d103      	bne.n	8004024 <HAL_UART_Transmit+0x54>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	b90b      	cbnz	r3, 8004024 <HAL_UART_Transmit+0x54>
 8004020:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004022:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8004024:	2300      	movs	r3, #0
 8004026:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 800402a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8004032:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004034:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8004036:	b942      	cbnz	r2, 800404a <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004038:	2140      	movs	r1, #64	; 0x40
 800403a:	4620      	mov	r0, r4
 800403c:	f7ff ff80 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8004040:	b948      	cbnz	r0, 8004056 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8004042:	2320      	movs	r3, #32
 8004044:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8004048:	e006      	b.n	8004058 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800404a:	2200      	movs	r2, #0
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff ff76 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8004054:	b118      	cbz	r0, 800405e <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 8004056:	2003      	movs	r0, #3
}
 8004058:	b003      	add	sp, #12
 800405a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800405e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004060:	b95e      	cbnz	r6, 800407a <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004062:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004066:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800406a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800406c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8004070:	3b01      	subs	r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004078:	e7d7      	b.n	800402a <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800407a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800407e:	e7f4      	b.n	800406a <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8004080:	2001      	movs	r0, #1
 8004082:	e7e9      	b.n	8004058 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8004084:	2002      	movs	r0, #2
 8004086:	e7e7      	b.n	8004058 <HAL_UART_Transmit+0x88>

08004088 <UART_CheckIdleState>:
{
 8004088:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800408a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	2600      	movs	r6, #0
 800408e:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004092:	f7fc ff1d 	bl	8000ed0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800409c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800409e:	d417      	bmi.n	80040d0 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	075b      	lsls	r3, r3, #29
 80040a6:	d50a      	bpl.n	80040be <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	462b      	mov	r3, r5
 80040b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7ff ff42 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 80040bc:	b9a0      	cbnz	r0, 80040e8 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80040be:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80040c0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80040c6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 80040ce:	e00c      	b.n	80040ea <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4632      	mov	r2, r6
 80040d8:	4603      	mov	r3, r0
 80040da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff ff2e 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d0db      	beq.n	80040a0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80040e8:	2003      	movs	r0, #3
}
 80040ea:	b002      	add	sp, #8
 80040ec:	bd70      	pop	{r4, r5, r6, pc}

080040ee <HAL_UART_Init>:
{
 80040ee:	b510      	push	{r4, lr}
  if (huart == NULL)
 80040f0:	4604      	mov	r4, r0
 80040f2:	b350      	cbz	r0, 800414a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80040f4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80040f8:	b91b      	cbnz	r3, 8004102 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80040fa:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80040fe:	f001 fd1d 	bl	8005b3c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004102:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004104:	2324      	movs	r3, #36	; 0x24
 8004106:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004112:	4620      	mov	r0, r4
 8004114:	f7ff fa80 	bl	8003618 <UART_SetConfig>
 8004118:	2801      	cmp	r0, #1
 800411a:	d016      	beq.n	800414a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800411c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800411e:	b113      	cbz	r3, 8004126 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff feb9 	bl	8003e98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800412e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004136:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800413e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004146:	f7ff bf9f 	b.w	8004088 <UART_CheckIdleState>
}
 800414a:	2001      	movs	r0, #1
 800414c:	bd10      	pop	{r4, pc}

0800414e <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800414e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004150:	2203      	movs	r2, #3
 8004152:	f88d 2003 	strb.w	r2, [sp, #3]
 8004156:	2207      	movs	r2, #7
 8004158:	f88d 2004 	strb.w	r2, [sp, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f88d 2006 	strb.w	r2, [sp, #6]
 8004162:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004166:	2208      	movs	r2, #8
 8004168:	f88d 2008 	strb.w	r2, [sp, #8]
 800416c:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004170:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004172:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004174:	2104      	movs	r1, #4
 8004176:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004178:	f88d 3000 	strb.w	r3, [sp]
 800417c:	f88d 3001 	strb.w	r3, [sp, #1]
 8004180:	f88d 3002 	strb.w	r3, [sp, #2]
 8004184:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004188:	f88d 1009 	strb.w	r1, [sp, #9]
 800418c:	f88d 400a 	strb.w	r4, [sp, #10]
 8004190:	f88d 100b 	strb.w	r1, [sp, #11]
 8004194:	f88d 300d 	strb.w	r3, [sp, #13]
 8004198:	f88d 300e 	strb.w	r3, [sp, #14]
 800419c:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041a0:	b92a      	cbnz	r2, 80041ae <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 80041a2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80041a6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80041aa:	b004      	add	sp, #16
 80041ac:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041ae:	6802      	ldr	r2, [r0, #0]
 80041b0:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041b2:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80041b4:	aa04      	add	r2, sp, #16
 80041b6:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80041ba:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80041be:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80041c2:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 80041c6:	00d2      	lsls	r2, r2, #3
 80041c8:	fb92 f2f1 	sdiv	r2, r2, r1
 80041cc:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80041d0:	aa04      	add	r2, sp, #16
 80041d2:	4413      	add	r3, r2
 80041d4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80041d8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80041dc:	00d2      	lsls	r2, r2, #3
 80041de:	fb92 f3f3 	sdiv	r3, r2, r3
 80041e2:	e7e0      	b.n	80041a6 <UARTEx_SetNbDataToProcess+0x58>

080041e4 <HAL_UARTEx_WakeupCallback>:
 80041e4:	4770      	bx	lr

080041e6 <HAL_UARTEx_RxFifoFullCallback>:
 80041e6:	4770      	bx	lr

080041e8 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 80041e8:	4770      	bx	lr

080041ea <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80041ea:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d014      	beq.n	800421c <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041f2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80041f4:	2324      	movs	r3, #36	; 0x24
 80041f6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041fa:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80041fc:	6813      	ldr	r3, [r2, #0]
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004204:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004208:	2300      	movs	r3, #0
 800420a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800420c:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800420e:	2220      	movs	r2, #32
 8004210:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004214:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8004218:	4618      	mov	r0, r3
 800421a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800421c:	2002      	movs	r0, #2
}
 800421e:	4770      	bx	lr

08004220 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004220:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004222:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004226:	2b01      	cmp	r3, #1
{
 8004228:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800422a:	d01b      	beq.n	8004264 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800422c:	2301      	movs	r3, #1
 800422e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8004232:	2324      	movs	r3, #36	; 0x24
 8004234:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004238:	6803      	ldr	r3, [r0, #0]
 800423a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800424a:	4311      	orrs	r1, r2
 800424c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800424e:	f7ff ff7e 	bl	800414e <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004252:	6803      	ldr	r3, [r0, #0]
 8004254:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004256:	2320      	movs	r3, #32
 8004258:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800425c:	2000      	movs	r0, #0
 800425e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8004262:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004264:	2002      	movs	r0, #2
}
 8004266:	bd38      	pop	{r3, r4, r5, pc}

08004268 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004268:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800426a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800426e:	2b01      	cmp	r3, #1
{
 8004270:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004272:	d01b      	beq.n	80042ac <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8004274:	2301      	movs	r3, #1
 8004276:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800427a:	2324      	movs	r3, #36	; 0x24
 800427c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004280:	6803      	ldr	r3, [r0, #0]
 8004282:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8004292:	4311      	orrs	r1, r2
 8004294:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004296:	f7ff ff5a 	bl	800414e <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800429a:	6803      	ldr	r3, [r0, #0]
 800429c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800429e:	2320      	movs	r3, #32
 80042a0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80042ac:	2002      	movs	r0, #2
}
 80042ae:	bd38      	pop	{r3, r4, r5, pc}

080042b0 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80042b0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80042c2:	2000      	movs	r0, #0
 80042c4:	4770      	bx	lr

080042c6 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80042c6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80042ca:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80042ce:	045b      	lsls	r3, r3, #17
 80042d0:	0c5b      	lsrs	r3, r3, #17
 80042d2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80042d6:	2000      	movs	r0, #0
 80042d8:	4770      	bx	lr

080042da <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042da:	b084      	sub	sp, #16
 80042dc:	b510      	push	{r4, lr}
 80042de:	ac03      	add	r4, sp, #12
 80042e0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80042e4:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80042ec:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80042f0:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042f4:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80042f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80042fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8004300:	b29b      	uxth	r3, r3
 8004302:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800430e:	b004      	add	sp, #16
 8004310:	4610      	mov	r0, r2
 8004312:	4770      	bx	lr

08004314 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004316:	780d      	ldrb	r5, [r1, #0]
 8004318:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 800431c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8004320:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004322:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8004326:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004328:	0412      	lsls	r2, r2, #16
 800432a:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 800432c:	2803      	cmp	r0, #3
 800432e:	d84f      	bhi.n	80043d0 <USB_ActivateEndpoint+0xbc>
 8004330:	e8df f000 	tbb	[pc, r0]
 8004334:	48044b02 	.word	0x48044b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 800433c:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800433e:	f248 0480 	movw	r4, #32896	; 0x8080
 8004342:	4322      	orrs	r2, r4
 8004344:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004348:	780f      	ldrb	r7, [r1, #0]
 800434a:	4da8      	ldr	r5, [pc, #672]	; (80045ec <USB_ActivateEndpoint+0x2d8>)
 800434c:	b23e      	sxth	r6, r7
 800434e:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004352:	b292      	uxth	r2, r2
 8004354:	402a      	ands	r2, r5
 8004356:	433a      	orrs	r2, r7
 8004358:	4322      	orrs	r2, r4
 800435a:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800435e:	7b0c      	ldrb	r4, [r1, #12]
 8004360:	780a      	ldrb	r2, [r1, #0]
 8004362:	2c00      	cmp	r4, #0
 8004364:	d17f      	bne.n	8004466 <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
 8004366:	784f      	ldrb	r7, [r1, #1]
 8004368:	88ce      	ldrh	r6, [r1, #6]
 800436a:	2408      	movs	r4, #8
 800436c:	b397      	cbz	r7, 80043d4 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800436e:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8004372:	fb14 3202 	smlabb	r2, r4, r2, r3
 8004376:	fa12 f287 	uxtah	r2, r2, r7
 800437a:	f026 0601 	bic.w	r6, r6, #1
 800437e:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004382:	780a      	ldrb	r2, [r1, #0]
 8004384:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8004388:	0666      	lsls	r6, r4, #25
 800438a:	d509      	bpl.n	80043a0 <USB_ActivateEndpoint+0x8c>
 800438c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8004390:	b2a4      	uxth	r4, r4
 8004392:	402c      	ands	r4, r5
 8004394:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004398:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800439c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80043a0:	78ca      	ldrb	r2, [r1, #3]
 80043a2:	7809      	ldrb	r1, [r1, #0]
 80043a4:	4c92      	ldr	r4, [pc, #584]	; (80045f0 <USB_ActivateEndpoint+0x2dc>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043a6:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 80043a8:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043aa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80043ae:	b292      	uxth	r2, r2
 80043b0:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 80043b4:	d001      	beq.n	80043ba <USB_ActivateEndpoint+0xa6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043b6:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043c2:	e0c3      	b.n	800454c <USB_ActivateEndpoint+0x238>
      wEpRegVal |= USB_EP_INTERRUPT;
 80043c4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80043c8:	e7b8      	b.n	800433c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ce:	e7b5      	b.n	800433c <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
 80043d2:	e7b4      	b.n	800433e <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043d4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80043d8:	fb14 3202 	smlabb	r2, r4, r2, r3
 80043dc:	fa12 f285 	uxtah	r2, r2, r5
 80043e0:	f026 0601 	bic.w	r6, r6, #1
 80043e4:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043e8:	780a      	ldrb	r2, [r1, #0]
 80043ea:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80043ee:	fb14 3202 	smlabb	r2, r4, r2, r3
 80043f2:	690c      	ldr	r4, [r1, #16]
 80043f4:	b2ad      	uxth	r5, r5
 80043f6:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80043fa:	b944      	cbnz	r4, 800440e <USB_ActivateEndpoint+0xfa>
 80043fc:	5b54      	ldrh	r4, [r2, r5]
 80043fe:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8004402:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004406:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800440a:	5354      	strh	r4, [r2, r5]
 800440c:	e007      	b.n	800441e <USB_ActivateEndpoint+0x10a>
 800440e:	2c3d      	cmp	r4, #61	; 0x3d
 8004410:	d824      	bhi.n	800445c <USB_ActivateEndpoint+0x148>
 8004412:	0866      	lsrs	r6, r4, #1
 8004414:	07e4      	lsls	r4, r4, #31
 8004416:	bf48      	it	mi
 8004418:	3601      	addmi	r6, #1
 800441a:	02b6      	lsls	r6, r6, #10
 800441c:	5356      	strh	r6, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800441e:	780c      	ldrb	r4, [r1, #0]
 8004420:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004424:	0457      	lsls	r7, r2, #17
 8004426:	d50d      	bpl.n	8004444 <USB_ActivateEndpoint+0x130>
 8004428:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800442c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004430:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004434:	0412      	lsls	r2, r2, #16
 8004436:	0c12      	lsrs	r2, r2, #16
 8004438:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800443c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004440:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004444:	7809      	ldrb	r1, [r1, #0]
 8004446:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800444a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800444e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004452:	0412      	lsls	r2, r2, #16
 8004454:	0c12      	lsrs	r2, r2, #16
 8004456:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800445a:	e7ae      	b.n	80043ba <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800445c:	4e65      	ldr	r6, [pc, #404]	; (80045f4 <USB_ActivateEndpoint+0x2e0>)
 800445e:	0964      	lsrs	r4, r4, #5
 8004460:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 8004464:	e7d1      	b.n	800440a <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004466:	b212      	sxth	r2, r2
 8004468:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800446c:	b2a4      	uxth	r4, r4
 800446e:	402c      	ands	r4, r5
 8004470:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8004474:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004478:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800447c:	780e      	ldrb	r6, [r1, #0]
 800447e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004482:	2208      	movs	r2, #8
 8004484:	fb12 3606 	smlabb	r6, r2, r6, r3
 8004488:	fa16 f484 	uxtah	r4, r6, r4
 800448c:	890e      	ldrh	r6, [r1, #8]
 800448e:	f026 0601 	bic.w	r6, r6, #1
 8004492:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8004496:	780e      	ldrb	r6, [r1, #0]
 8004498:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800449c:	fb12 3206 	smlabb	r2, r2, r6, r3
 80044a0:	fa12 f284 	uxtah	r2, r2, r4
 80044a4:	894c      	ldrh	r4, [r1, #10]
 80044a6:	f024 0401 	bic.w	r4, r4, #1
 80044aa:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 80044ae:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 80044b0:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044b2:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 80044b4:	2c00      	cmp	r4, #0
 80044b6:	d14c      	bne.n	8004552 <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044b8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80044bc:	0466      	lsls	r6, r4, #17
 80044be:	d509      	bpl.n	80044d4 <USB_ActivateEndpoint+0x1c0>
 80044c0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80044c4:	b2a4      	uxth	r4, r4
 80044c6:	402c      	ands	r4, r5
 80044c8:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80044cc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80044d0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044d4:	780c      	ldrb	r4, [r1, #0]
 80044d6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80044da:	0655      	lsls	r5, r2, #25
 80044dc:	d50d      	bpl.n	80044fa <USB_ActivateEndpoint+0x1e6>
 80044de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80044e2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80044e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80044ea:	0412      	lsls	r2, r2, #16
 80044ec:	0c12      	lsrs	r2, r2, #16
 80044ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80044f6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80044fa:	780c      	ldrb	r4, [r1, #0]
 80044fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004500:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004504:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004508:	0412      	lsls	r2, r2, #16
 800450a:	0c12      	lsrs	r2, r2, #16
 800450c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004510:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004514:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004518:	780d      	ldrb	r5, [r1, #0]
 800451a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800451e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004522:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004526:	0412      	lsls	r2, r2, #16
 8004528:	0c12      	lsrs	r2, r2, #16
 800452a:	f248 0480 	movw	r4, #32896	; 0x8080
 800452e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004532:	4322      	orrs	r2, r4
 8004534:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004538:	7809      	ldrb	r1, [r1, #0]
 800453a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800453e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004546:	0412      	lsls	r2, r2, #16
 8004548:	0c12      	lsrs	r2, r2, #16
 800454a:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800454c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8004550:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004552:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8004556:	0464      	lsls	r4, r4, #17
 8004558:	d509      	bpl.n	800456e <USB_ActivateEndpoint+0x25a>
 800455a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800455e:	b2a4      	uxth	r4, r4
 8004560:	402c      	ands	r4, r5
 8004562:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8004566:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800456a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800456e:	780c      	ldrb	r4, [r1, #0]
 8004570:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004574:	0652      	lsls	r2, r2, #25
 8004576:	d50d      	bpl.n	8004594 <USB_ActivateEndpoint+0x280>
 8004578:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800457c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004580:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004584:	0412      	lsls	r2, r2, #16
 8004586:	0c12      	lsrs	r2, r2, #16
 8004588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800458c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004590:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004594:	780c      	ldrb	r4, [r1, #0]
 8004596:	4d16      	ldr	r5, [pc, #88]	; (80045f0 <USB_ActivateEndpoint+0x2dc>)
 8004598:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800459c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80045a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045a4:	0412      	lsls	r2, r2, #16
 80045a6:	0c12      	lsrs	r2, r2, #16
 80045a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80045ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045b0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80045b4:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 80045b6:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045b8:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 80045ba:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80045c0:	b292      	uxth	r2, r2
 80045c2:	ea02 0205 	and.w	r2, r2, r5
 80045c6:	bf18      	it	ne
 80045c8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045d4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045d8:	7809      	ldrb	r1, [r1, #0]
 80045da:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80045de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045e6:	0412      	lsls	r2, r2, #16
 80045e8:	0c12      	lsrs	r2, r2, #16
 80045ea:	e6e6      	b.n	80043ba <USB_ActivateEndpoint+0xa6>
 80045ec:	ffff8f8f 	.word	0xffff8f8f
 80045f0:	ffff8fbf 	.word	0xffff8fbf
 80045f4:	ffff8000 	.word	0xffff8000

080045f8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045f8:	b510      	push	{r4, lr}
 80045fa:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80045fc:	7b0c      	ldrb	r4, [r1, #12]
 80045fe:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004600:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 8004602:	2c00      	cmp	r4, #0
 8004604:	d13d      	bne.n	8004682 <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 8004606:	b312      	cbz	r2, 800464e <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004608:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800460c:	0652      	lsls	r2, r2, #25
 800460e:	d50d      	bpl.n	800462c <USB_DeactivateEndpoint+0x34>
 8004610:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004614:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004618:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800461c:	0412      	lsls	r2, r2, #16
 800461e:	0c12      	lsrs	r2, r2, #16
 8004620:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004624:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004628:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800462c:	780a      	ldrb	r2, [r1, #0]
 800462e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800463a:	041b      	lsls	r3, r3, #16
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800464a:	2000      	movs	r0, #0
 800464c:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800464e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004652:	0454      	lsls	r4, r2, #17
 8004654:	d50d      	bpl.n	8004672 <USB_DeactivateEndpoint+0x7a>
 8004656:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800465a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800465e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004662:	0412      	lsls	r2, r2, #16
 8004664:	0c12      	lsrs	r2, r2, #16
 8004666:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800466a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800466e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004672:	780a      	ldrb	r2, [r1, #0]
 8004674:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	e7db      	b.n	800463a <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 8004682:	2a00      	cmp	r2, #0
 8004684:	d14e      	bne.n	8004724 <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004686:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800468a:	0452      	lsls	r2, r2, #17
 800468c:	d50d      	bpl.n	80046aa <USB_DeactivateEndpoint+0xb2>
 800468e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004692:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004696:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800469a:	0412      	lsls	r2, r2, #16
 800469c:	0c12      	lsrs	r2, r2, #16
 800469e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80046a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046aa:	780a      	ldrb	r2, [r1, #0]
 80046ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046b0:	065c      	lsls	r4, r3, #25
 80046b2:	d50d      	bpl.n	80046d0 <USB_DeactivateEndpoint+0xd8>
 80046b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80046d0:	780a      	ldrb	r2, [r1, #0]
 80046d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	041b      	lsls	r3, r3, #16
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046ee:	780c      	ldrb	r4, [r1, #0]
 80046f0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80046f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	f248 0280 	movw	r2, #32896	; 0x8080
 8004704:	4313      	orrs	r3, r2
 8004706:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800470a:	7809      	ldrb	r1, [r1, #0]
 800470c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	4313      	orrs	r3, r2
 800471e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8004722:	e792      	b.n	800464a <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004724:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004728:	0452      	lsls	r2, r2, #17
 800472a:	d50d      	bpl.n	8004748 <USB_DeactivateEndpoint+0x150>
 800472c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004730:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004734:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004738:	0412      	lsls	r2, r2, #16
 800473a:	0c12      	lsrs	r2, r2, #16
 800473c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004744:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004748:	780a      	ldrb	r2, [r1, #0]
 800474a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800474e:	065b      	lsls	r3, r3, #25
 8004750:	d50d      	bpl.n	800476e <USB_DeactivateEndpoint+0x176>
 8004752:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800476a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800476e:	780a      	ldrb	r2, [r1, #0]
 8004770:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477c:	041b      	lsls	r3, r3, #16
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800478c:	780c      	ldrb	r4, [r1, #0]
 800478e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f248 0280 	movw	r2, #32896	; 0x8080
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047a8:	7809      	ldrb	r1, [r1, #0]
 80047aa:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80047ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	e7af      	b.n	8004718 <USB_DeactivateEndpoint+0x120>

080047b8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047b8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80047ba:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047bc:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 80047be:	b18b      	cbz	r3, 80047e4 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80047e0:	2000      	movs	r0, #0
 80047e2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047f8:	e7ec      	b.n	80047d4 <USB_EPSetStall+0x1c>

080047fa <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80047fa:	7b0b      	ldrb	r3, [r1, #12]
 80047fc:	bb4b      	cbnz	r3, 8004852 <USB_EPClearStall+0x58>
 80047fe:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8004800:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004802:	b212      	sxth	r2, r2
    if (ep->is_in != 0U)
 8004804:	b33b      	cbz	r3, 8004856 <USB_EPClearStall+0x5c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004806:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800480a:	065b      	lsls	r3, r3, #25
 800480c:	d50d      	bpl.n	800482a <USB_EPClearStall+0x30>
 800480e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004826:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800482a:	78cb      	ldrb	r3, [r1, #3]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d010      	beq.n	8004852 <USB_EPClearStall+0x58>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004830:	780a      	ldrb	r2, [r1, #0]
 8004832:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004852:	2000      	movs	r0, #0
 8004854:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004856:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800485a:	045b      	lsls	r3, r3, #17
 800485c:	d50d      	bpl.n	800487a <USB_EPClearStall+0x80>
 800485e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004876:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800487a:	780a      	ldrb	r2, [r1, #0]
 800487c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004890:	e7d9      	b.n	8004846 <USB_EPClearStall+0x4c>

08004892 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004892:	b911      	cbnz	r1, 800489a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800489a:	2000      	movs	r0, #0
 800489c:	4770      	bx	lr

0800489e <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800489e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80048a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80048b0:	2000      	movs	r0, #0
 80048b2:	4770      	bx	lr

080048b4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80048b4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80048b8:	b280      	uxth	r0, r0
 80048ba:	4770      	bx	lr

080048bc <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80048bc:	2000      	movs	r0, #0
 80048be:	4770      	bx	lr

080048c0 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80048c4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048c6:	4402      	add	r2, r0
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	440b      	add	r3, r1
 80048ce:	1a52      	subs	r2, r2, r1

  for (i = n; i != 0U; i--)
 80048d0:	4299      	cmp	r1, r3
 80048d2:	d100      	bne.n	80048d6 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80048d4:	4770      	bx	lr
 80048d6:	8808      	ldrh	r0, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 80048d8:	5288      	strh	r0, [r1, r2]
 80048da:	3102      	adds	r1, #2
 80048dc:	e7f8      	b.n	80048d0 <USB_WritePMA+0x10>
	...

080048e0 <USB_EPStartXfer>:
{
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80048e4:	7848      	ldrb	r0, [r1, #1]
 80048e6:	698a      	ldr	r2, [r1, #24]
 80048e8:	690b      	ldr	r3, [r1, #16]
 80048ea:	7b0f      	ldrb	r7, [r1, #12]
 80048ec:	2801      	cmp	r0, #1
{
 80048ee:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 80048f0:	d16b      	bne.n	80049ca <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 80048f2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80048f4:	bf97      	itett	ls
 80048f6:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80048f8:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80048fa:	618b      	strls	r3, [r1, #24]
 80048fc:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80048fe:	bf88      	it	hi
 8004900:	618a      	strhi	r2, [r1, #24]
 8004902:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8004904:	bb0f      	cbnz	r7, 800494a <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004906:	88ca      	ldrh	r2, [r1, #6]
 8004908:	6949      	ldr	r1, [r1, #20]
 800490a:	4633      	mov	r3, r6
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff ffd7 	bl	80048c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004912:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004916:	782a      	ldrb	r2, [r5, #0]
 8004918:	f204 4102 	addw	r1, r4, #1026	; 0x402
 800491c:	fa11 f383 	uxtah	r3, r1, r3
 8004920:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004924:	782a      	ldrb	r2, [r5, #0]
 8004926:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800492a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800493a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004942:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8004946:	2000      	movs	r0, #0
 8004948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800494a:	7809      	ldrb	r1, [r1, #0]
 800494c:	b20a      	sxth	r2, r1
 800494e:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8004952:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004956:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800495a:	bf15      	itete	ne
 800495c:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004960:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004964:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004968:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800496c:	bf15      	itete	ne
 800496e:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004972:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 8004976:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8004978:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800497a:	6969      	ldr	r1, [r5, #20]
 800497c:	4633      	mov	r3, r6
 800497e:	4620      	mov	r0, r4
 8004980:	f7ff ff9e 	bl	80048c0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004984:	786b      	ldrb	r3, [r5, #1]
 8004986:	782a      	ldrb	r2, [r5, #0]
 8004988:	b97b      	cbnz	r3, 80049aa <USB_EPStartXfer+0xca>
 800498a:	b212      	sxth	r2, r2
 800498c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049a4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80049a8:	e7bc      	b.n	8004924 <USB_EPStartXfer+0x44>
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d1ba      	bne.n	8004924 <USB_EPStartXfer+0x44>
 80049ae:	b212      	sxth	r2, r2
 80049b0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80049b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c8:	e7ec      	b.n	80049a4 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 80049ca:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80049cc:	bf95      	itete	ls
 80049ce:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80049d0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80049d2:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 80049d4:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 80049d6:	bf98      	it	ls
 80049d8:	4613      	movls	r3, r2
 80049da:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 80049dc:	b98f      	cbnz	r7, 8004a02 <USB_EPStartXfer+0x122>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80049de:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80049e2:	f204 4006 	addw	r0, r4, #1030	; 0x406
 80049e6:	fa10 f282 	uxtah	r2, r0, r2
 80049ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80049ee:	bb9b      	cbnz	r3, 8004a58 <USB_EPStartXfer+0x178>
 80049f0:	8813      	ldrh	r3, [r2, #0]
 80049f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fe:	8013      	strh	r3, [r2, #0]
 8004a00:	e032      	b.n	8004a68 <USB_EPStartXfer+0x188>
 8004a02:	b980      	cbnz	r0, 8004a26 <USB_EPStartXfer+0x146>
 8004a04:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8004a08:	f204 4002 	addw	r0, r4, #1026	; 0x402
 8004a0c:	fa10 f282 	uxtah	r2, r0, r2
 8004a10:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004a14:	b99b      	cbnz	r3, 8004a3e <USB_EPStartXfer+0x15e>
 8004a16:	8811      	ldrh	r1, [r2, #0]
 8004a18:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004a1c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004a20:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004a24:	8011      	strh	r1, [r2, #0]
 8004a26:	786a      	ldrb	r2, [r5, #1]
 8004a28:	7828      	ldrb	r0, [r5, #0]
 8004a2a:	bb72      	cbnz	r2, 8004a8a <USB_EPStartXfer+0x1aa>
 8004a2c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8004a30:	f204 4106 	addw	r1, r4, #1030	; 0x406
 8004a34:	fa11 f282 	uxtah	r2, r1, r2
 8004a38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004a3c:	e7d7      	b.n	80049ee <USB_EPStartXfer+0x10e>
 8004a3e:	2b3d      	cmp	r3, #61	; 0x3d
 8004a40:	d805      	bhi.n	8004a4e <USB_EPStartXfer+0x16e>
 8004a42:	0859      	lsrs	r1, r3, #1
 8004a44:	07d8      	lsls	r0, r3, #31
 8004a46:	bf48      	it	mi
 8004a48:	3101      	addmi	r1, #1
 8004a4a:	0289      	lsls	r1, r1, #10
 8004a4c:	e7ea      	b.n	8004a24 <USB_EPStartXfer+0x144>
 8004a4e:	4814      	ldr	r0, [pc, #80]	; (8004aa0 <USB_EPStartXfer+0x1c0>)
 8004a50:	0959      	lsrs	r1, r3, #5
 8004a52:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8004a56:	e7e5      	b.n	8004a24 <USB_EPStartXfer+0x144>
 8004a58:	2b3d      	cmp	r3, #61	; 0x3d
 8004a5a:	d811      	bhi.n	8004a80 <USB_EPStartXfer+0x1a0>
 8004a5c:	0859      	lsrs	r1, r3, #1
 8004a5e:	07db      	lsls	r3, r3, #31
 8004a60:	bf48      	it	mi
 8004a62:	3101      	addmi	r1, #1
 8004a64:	0289      	lsls	r1, r1, #10
 8004a66:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a68:	782a      	ldrb	r2, [r5, #0]
 8004a6a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004a7e:	e75c      	b.n	800493a <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a80:	0959      	lsrs	r1, r3, #5
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <USB_EPStartXfer+0x1c0>)
 8004a84:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004a88:	e7b9      	b.n	80049fe <USB_EPStartXfer+0x11e>
 8004a8a:	2a01      	cmp	r2, #1
 8004a8c:	bf01      	itttt	eq
 8004a8e:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8004a92:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8004a96:	fa12 f181 	uxtaheq	r1, r2, r1
 8004a9a:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8004a9e:	e7e3      	b.n	8004a68 <USB_EPStartXfer+0x188>
 8004aa0:	ffff8000 	.word	0xffff8000

08004aa4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004aa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8004aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004aaa:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004aac:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 8004aae:	460d      	mov	r5, r1
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	1a47      	subs	r7, r0, r1
 8004ab4:	197c      	adds	r4, r7, r5
 8004ab6:	3502      	adds	r5, #2
 8004ab8:	b932      	cbnz	r2, 8004ac8 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004aba:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8004abc:	bf44      	itt	mi
 8004abe:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ac2:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
 8004ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8004ac8:	8824      	ldrh	r4, [r4, #0]
 8004aca:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004acc:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004ad0:	0a24      	lsrs	r4, r4, #8
 8004ad2:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	e7ec      	b.n	8004ab4 <USB_ReadPMA+0x10>

08004ada <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ada:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8004ade:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ae0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ae4:	b15b      	cbz	r3, 8004afe <USBD_CDC_EP0_RxReady+0x24>
 8004ae6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004aea:	28ff      	cmp	r0, #255	; 0xff
 8004aec:	d007      	beq.n	8004afe <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004af4:	4621      	mov	r1, r4
 8004af6:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004af8:	23ff      	movs	r3, #255	; 0xff
 8004afa:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004afe:	2000      	movs	r0, #0
 8004b00:	bd10      	pop	{r4, pc}
	...

08004b04 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004b04:	2343      	movs	r3, #67	; 0x43
 8004b06:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004b08:	4800      	ldr	r0, [pc, #0]	; (8004b0c <USBD_CDC_GetFSCfgDesc+0x8>)
 8004b0a:	4770      	bx	lr
 8004b0c:	20000044 	.word	0x20000044

08004b10 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004b10:	2343      	movs	r3, #67	; 0x43
 8004b12:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004b14:	4800      	ldr	r0, [pc, #0]	; (8004b18 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004b16:	4770      	bx	lr
 8004b18:	20000088 	.word	0x20000088

08004b1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b1c:	2343      	movs	r3, #67	; 0x43
 8004b1e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004b20:	4800      	ldr	r0, [pc, #0]	; (8004b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004b22:	4770      	bx	lr
 8004b24:	200000d8 	.word	0x200000d8

08004b28 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b28:	230a      	movs	r3, #10
 8004b2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004b2c:	4800      	ldr	r0, [pc, #0]	; (8004b30 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004b2e:	4770      	bx	lr
 8004b30:	200000cc 	.word	0x200000cc

08004b34 <USBD_CDC_DataOut>:
{
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b38:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b3c:	f001 fb26 	bl	800618c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8004b40:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b44:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8004b48:	b14b      	cbz	r3, 8004b5e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b4a:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8004b4e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004b58:	4798      	blx	r3
    return USBD_OK;
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004b5e:	2002      	movs	r0, #2
}
 8004b60:	bd38      	pop	{r3, r4, r5, pc}

08004b62 <USBD_CDC_DataIn>:
{
 8004b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b64:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8004b68:	b1ce      	cbz	r6, 8004b9e <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b6a:	2314      	movs	r3, #20
 8004b6c:	fb03 0301 	mla	r3, r3, r1, r0
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	b182      	cbz	r2, 8004b96 <USBD_CDC_DataIn+0x34>
 8004b74:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8004b78:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8004b7c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004b7e:	fbb2 f4f5 	udiv	r4, r2, r5
 8004b82:	fb05 2414 	mls	r4, r5, r4, r2
 8004b86:	b934      	cbnz	r4, 8004b96 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8004b88:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	f001 fae1 	bl	8006154 <USBD_LL_Transmit>
    return USBD_OK;
 8004b92:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8004b96:	2000      	movs	r0, #0
 8004b98:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8004b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8004b9e:	2002      	movs	r0, #2
}
 8004ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ba2 <USBD_CDC_Setup>:
{
 8004ba2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ba6:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ba8:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8004bac:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bb0:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8004bb8:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8004bbc:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bc0:	d028      	beq.n	8004c14 <USBD_CDC_Setup+0x72>
 8004bc2:	2c20      	cmp	r4, #32
 8004bc4:	d147      	bne.n	8004c56 <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8004bc6:	88cc      	ldrh	r4, [r1, #6]
 8004bc8:	784b      	ldrb	r3, [r1, #1]
 8004bca:	b1e4      	cbz	r4, 8004c06 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8004bcc:	0612      	lsls	r2, r2, #24
 8004bce:	d511      	bpl.n	8004bf4 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bd0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	4622      	mov	r2, r4
 8004bde:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004be0:	88f2      	ldrh	r2, [r6, #6]
 8004be2:	4639      	mov	r1, r7
 8004be4:	4628      	mov	r0, r5
 8004be6:	f000 fc37 	bl	8005458 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004bea:	4644      	mov	r4, r8
}
 8004bec:	4620      	mov	r0, r4
 8004bee:	b003      	add	sp, #12
 8004bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8004bf4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004bf8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4639      	mov	r1, r7
 8004c00:	f000 fc3f 	bl	8005482 <USBD_CtlPrepareRx>
 8004c04:	e7f1      	b.n	8004bea <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c06:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	6895      	ldr	r5, [r2, #8]
 8004c0e:	4622      	mov	r2, r4
 8004c10:	47a8      	blx	r5
 8004c12:	e7eb      	b.n	8004bec <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8004c14:	784f      	ldrb	r7, [r1, #1]
 8004c16:	2f0a      	cmp	r7, #10
 8004c18:	d00d      	beq.n	8004c36 <USBD_CDC_Setup+0x94>
 8004c1a:	2f0b      	cmp	r7, #11
 8004c1c:	d015      	beq.n	8004c4a <USBD_CDC_Setup+0xa8>
 8004c1e:	b9d7      	cbnz	r7, 8004c56 <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d114      	bne.n	8004c52 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f10d 0106 	add.w	r1, sp, #6
 8004c2e:	f000 fc13 	bl	8005458 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004c32:	463c      	mov	r4, r7
 8004c34:	e7da      	b.n	8004bec <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d109      	bne.n	8004c52 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f10d 0105 	add.w	r1, sp, #5
 8004c44:	f000 fc08 	bl	8005458 <USBD_CtlSendData>
 8004c48:	e7d0      	b.n	8004bec <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c4a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d0cc      	beq.n	8004bec <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8004c56:	f000 fbd8 	bl	800540a <USBD_CtlError>
      ret = USBD_FAIL;
 8004c5a:	2402      	movs	r4, #2
      break;
 8004c5c:	e7c6      	b.n	8004bec <USBD_CDC_Setup+0x4a>

08004c5e <USBD_CDC_DeInit>:
{
 8004c5e:	b538      	push	{r3, r4, r5, lr}
 8004c60:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c62:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004c64:	2181      	movs	r1, #129	; 0x81
 8004c66:	f001 fa2d 	bl	80060c4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c6a:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c6c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f001 fa28 	bl	80060c4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004c74:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c78:	2182      	movs	r1, #130	; 0x82
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f001 fa22 	bl	80060c4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004c80:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c84:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004c86:	b14b      	cbz	r3, 8004c9c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c88:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004c90:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8004c94:	f001 faa6 	bl	80061e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004c98:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}

08004ca0 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ca0:	7c03      	ldrb	r3, [r0, #16]
{
 8004ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ca8:	bbcb      	cbnz	r3, 8004d1e <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cae:	2202      	movs	r2, #2
 8004cb0:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cb2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cb4:	f001 f9f6 	bl	80060a4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cb8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cba:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f001 f9ee 	bl	80060a4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cc8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ccc:	2308      	movs	r3, #8
 8004cce:	2203      	movs	r2, #3
 8004cd0:	2182      	movs	r1, #130	; 0x82
 8004cd2:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004cd4:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cd6:	f001 f9e5 	bl	80060a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004cda:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cdc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ce0:	f001 fa7c 	bl	80061dc <USBD_static_malloc>
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004cea:	b358      	cbz	r0, 8004d44 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004cec:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cf4:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8004cf8:	2700      	movs	r7, #0
 8004cfa:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8004cfe:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d02:	f1b8 0f00 	cmp.w	r8, #0
 8004d06:	d113      	bne.n	8004d30 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d0c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004d10:	4629      	mov	r1, r5
 8004d12:	4620      	mov	r0, r4
 8004d14:	f001 fa2c 	bl	8006170 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004d18:	4640      	mov	r0, r8
 8004d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	2202      	movs	r2, #2
 8004d22:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d24:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d26:	f001 f9bd 	bl	80060a4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d2a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	e7c6      	b.n	8004cbe <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d30:	2340      	movs	r3, #64	; 0x40
 8004d32:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004d36:	4629      	mov	r1, r5
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f001 fa19 	bl	8006170 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004d3e:	4638      	mov	r0, r7
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8004d44:	4628      	mov	r0, r5
}
 8004d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d4a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004d4a:	b119      	cbz	r1, 8004d54 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004d4c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004d50:	2000      	movs	r0, #0
 8004d52:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004d54:	2002      	movs	r0, #2
  }

  return ret;
}
 8004d56:	4770      	bx	lr

08004d58 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004d5c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004d5e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004d66:	4770      	bx	lr

08004d68 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004d68:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004d6c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004d6e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004d72:	4770      	bx	lr

08004d74 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d74:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004d78:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004d7a:	b162      	cbz	r2, 8004d96 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d7c:	7c04      	ldrb	r4, [r0, #16]
 8004d7e:	b944      	cbnz	r4, 8004d92 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d80:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d84:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004d88:	2101      	movs	r1, #1
 8004d8a:	f001 f9f1 	bl	8006170 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004d8e:	2000      	movs	r0, #0
 8004d90:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004d92:	2340      	movs	r3, #64	; 0x40
 8004d94:	e7f6      	b.n	8004d84 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8004d96:	2002      	movs	r0, #2
  }
}
 8004d98:	bd10      	pop	{r4, pc}

08004d9a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d9a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d9c:	b180      	cbz	r0, 8004dc0 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004d9e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004da2:	b113      	cbz	r3, 8004daa <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004daa:	b109      	cbz	r1, 8004db0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004dac:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8004db6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004db8:	f001 f920 	bl	8005ffc <USBD_LL_Init>

  return USBD_OK;
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004dc0:	2002      	movs	r0, #2
}
 8004dc2:	bd08      	pop	{r3, pc}

08004dc4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004dc4:	b119      	cbz	r1, 8004dce <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004dc6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004dca:	2000      	movs	r0, #0
 8004dcc:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004dce:	2002      	movs	r0, #2
  }

  return status;
}
 8004dd0:	4770      	bx	lr

08004dd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004dd2:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004dd4:	f001 f958 	bl	8006088 <USBD_LL_Start>

  return USBD_OK;
}
 8004dd8:	2000      	movs	r0, #0
 8004dda:	bd08      	pop	{r3, pc}

08004ddc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004ddc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004dde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004de2:	b90b      	cbnz	r3, 8004de8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004de4:	2002      	movs	r0, #2
 8004de6:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4798      	blx	r3
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d1f9      	bne.n	8004de4 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004df0:	bd08      	pop	{r3, pc}

08004df2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004df2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004df4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4798      	blx	r3

  return USBD_OK;
}
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	bd08      	pop	{r3, pc}

08004e00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e04:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 faea 	bl	80053e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e0e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004e10:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8004e14:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004e18:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004e1c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004e20:	f001 031f 	and.w	r3, r1, #31
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d00e      	beq.n	8004e46 <USBD_LL_SetupStage+0x46>
 8004e28:	d307      	bcc.n	8004e3a <USBD_LL_SetupStage+0x3a>
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d010      	beq.n	8004e50 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e2e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e32:	4620      	mov	r0, r4
 8004e34:	f001 f954 	bl	80060e0 <USBD_LL_StallEP>
      break;
 8004e38:	e003      	b.n	8004e42 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 f8f7 	bl	8005030 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004e42:	2000      	movs	r0, #0
 8004e44:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004e46:	4629      	mov	r1, r5
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f000 fa1d 	bl	8005288 <USBD_StdItfReq>
      break;
 8004e4e:	e7f8      	b.n	8004e42 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004e50:	4629      	mov	r1, r5
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 fa3d 	bl	80052d2 <USBD_StdEPReq>
      break;
 8004e58:	e7f3      	b.n	8004e42 <USBD_LL_SetupStage+0x42>

08004e5a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e5a:	b570      	push	{r4, r5, r6, lr}
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004e60:	bb49      	cbnz	r1, 8004eb6 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e62:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d11e      	bne.n	8004ea8 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e6a:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8004e6e:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d90b      	bls.n	8004e8e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8004e76:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004e78:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004e7a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004e7e:	bf8c      	ite	hi
 8004e80:	b29a      	uxthhi	r2, r3
 8004e82:	b292      	uxthls	r2, r2
 8004e84:	4631      	mov	r1, r6
 8004e86:	f000 fb0b 	bl	80054a0 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004e8a:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	b123      	cbz	r3, 8004ea0 <USBD_LL_DataOutStage+0x46>
 8004e96:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004e9a:	2a03      	cmp	r2, #3
 8004e9c:	d100      	bne.n	8004ea0 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004e9e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f000 fb05 	bl	80054b0 <USBD_CtlSendStatus>
 8004ea6:	e7f0      	b.n	8004e8a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d1ee      	bne.n	8004e8a <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004eac:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004eb0:	f001 f916 	bl	80060e0 <USBD_LL_StallEP>
 8004eb4:	e7e9      	b.n	8004e8a <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004eb6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	b12b      	cbz	r3, 8004eca <USBD_LL_DataOutStage+0x70>
 8004ebe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004ec2:	2a03      	cmp	r2, #3
 8004ec4:	d101      	bne.n	8004eca <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8004ec6:	4798      	blx	r3
 8004ec8:	e7df      	b.n	8004e8a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004eca:	2002      	movs	r0, #2
}
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}

08004ece <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ece:	b570      	push	{r4, r5, r6, lr}
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004ed4:	460e      	mov	r6, r1
 8004ed6:	2900      	cmp	r1, #0
 8004ed8:	d148      	bne.n	8004f6c <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004eda:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004ede:	2a02      	cmp	r2, #2
 8004ee0:	d13d      	bne.n	8004f5e <USBD_LL_DataInStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ee2:	6a05      	ldr	r5, [r0, #32]
 8004ee4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004ee6:	4295      	cmp	r5, r2
 8004ee8:	d914      	bls.n	8004f14 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8004eea:	1aaa      	subs	r2, r5, r2
 8004eec:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004eee:	4619      	mov	r1, r3
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	f000 fabe 	bl	8005472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ef6:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4619      	mov	r1, r3
 8004efc:	4620      	mov	r0, r4
 8004efe:	f001 f937 	bl	8006170 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004f02:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	f04f 0000 	mov.w	r0, #0
 8004f0c:	d13a      	bne.n	8004f84 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004f0e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f14:	69c3      	ldr	r3, [r0, #28]
 8004f16:	fbb3 f5f2 	udiv	r5, r3, r2
 8004f1a:	fb02 3515 	mls	r5, r2, r5, r3
 8004f1e:	b965      	cbnz	r5, 8004f3a <USBD_LL_DataInStage+0x6c>
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d80a      	bhi.n	8004f3a <USBD_LL_DataInStage+0x6c>
            (pep->total_length >= pep->maxpacket) &&
 8004f24:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d206      	bcs.n	8004f3a <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f2c:	462a      	mov	r2, r5
 8004f2e:	f000 faa0 	bl	8005472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f32:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f36:	462b      	mov	r3, r5
 8004f38:	e7de      	b.n	8004ef8 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f3a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	b12b      	cbz	r3, 8004f4e <USBD_LL_DataInStage+0x80>
 8004f42:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004f46:	2a03      	cmp	r2, #3
 8004f48:	d101      	bne.n	8004f4e <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	4620      	mov	r0, r4
 8004f52:	f001 f8c5 	bl	80060e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004f56:	4620      	mov	r0, r4
 8004f58:	f000 fab5 	bl	80054c6 <USBD_CtlReceiveStatus>
 8004f5c:	e7d1      	b.n	8004f02 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004f5e:	f032 0304 	bics.w	r3, r2, #4
 8004f62:	d1ce      	bne.n	8004f02 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	f001 f8bb 	bl	80060e0 <USBD_LL_StallEP>
 8004f6a:	e7ca      	b.n	8004f02 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004f6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	b133      	cbz	r3, 8004f82 <USBD_LL_DataInStage+0xb4>
 8004f74:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004f78:	2a03      	cmp	r2, #3
 8004f7a:	d102      	bne.n	8004f82 <USBD_LL_DataInStage+0xb4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004f7c:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004f7e:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004f82:	2002      	movs	r0, #2
}
 8004f84:	bd70      	pop	{r4, r5, r6, pc}

08004f86 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f86:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f88:	2200      	movs	r2, #0
{
 8004f8a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f8c:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f8e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f90:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f92:	2340      	movs	r3, #64	; 0x40
 8004f94:	f001 f886 	bl	80060a4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f98:	4633      	mov	r3, r6
 8004f9a:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f9c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fa0:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f001 f87c 	bl	80060a4 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004fac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fb0:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fb2:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fb4:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fb6:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fba:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004fbe:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fc0:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8004fc4:	b123      	cbz	r3, 8004fd0 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fc6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004fca:	4620      	mov	r0, r4
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}

08004fd4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004fd4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	4770      	bx	lr

08004fda <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004fda:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004fde:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004fe8:	2000      	movs	r0, #0
 8004fea:	4770      	bx	lr

08004fec <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004fec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ff0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ff2:	bf04      	itt	eq
 8004ff4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004ff8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	4770      	bx	lr

08005000 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005000:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005002:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005006:	2a03      	cmp	r2, #3
 8005008:	d104      	bne.n	8005014 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800500a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	b103      	cbz	r3, 8005014 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005012:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005014:	2000      	movs	r0, #0
 8005016:	bd08      	pop	{r3, pc}

08005018 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005018:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800501a:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800501c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800501e:	f001 f85f 	bl	80060e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005022:	4620      	mov	r0, r4
 8005024:	2100      	movs	r1, #0
}
 8005026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800502a:	f001 b859 	b.w	80060e0 <USBD_LL_StallEP>
	...

08005030 <USBD_StdDevReq>:
{
 8005030:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005032:	780b      	ldrb	r3, [r1, #0]
 8005034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005038:	2b20      	cmp	r3, #32
{
 800503a:	4604      	mov	r4, r0
 800503c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800503e:	d011      	beq.n	8005064 <USBD_StdDevReq+0x34>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d00f      	beq.n	8005064 <USBD_StdDevReq+0x34>
 8005044:	bb73      	cbnz	r3, 80050a4 <USBD_StdDevReq+0x74>
      switch (req->bRequest)
 8005046:	784b      	ldrb	r3, [r1, #1]
 8005048:	2b09      	cmp	r3, #9
 800504a:	d82a      	bhi.n	80050a2 <USBD_StdDevReq+0x72>
 800504c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005050:	010e00f2 	.word	0x010e00f2
 8005054:	01070029 	.word	0x01070029
 8005058:	008b0029 	.word	0x008b0029
 800505c:	00290013 	.word	0x00290013
 8005060:	00a700da 	.word	0x00a700da
      pdev->pClass->Setup(pdev, req);
 8005064:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005068:	4629      	mov	r1, r5
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4620      	mov	r0, r4
 800506e:	4798      	blx	r3
}
 8005070:	2000      	movs	r0, #0
 8005072:	b003      	add	sp, #12
 8005074:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800507c:	884b      	ldrh	r3, [r1, #2]
 800507e:	0a1a      	lsrs	r2, r3, #8
 8005080:	3a01      	subs	r2, #1
 8005082:	2a0e      	cmp	r2, #14
 8005084:	d80d      	bhi.n	80050a2 <USBD_StdDevReq+0x72>
 8005086:	e8df f002 	tbb	[pc, r2]
 800508a:	2c10      	.short	0x2c10
 800508c:	590c0c39 	.word	0x590c0c39
 8005090:	0c0c0c63 	.word	0x0c0c0c63
 8005094:	0c0c0c0c 	.word	0x0c0c0c0c
 8005098:	08          	.byte	0x08
 8005099:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800509a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800509e:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80050a0:	b933      	cbnz	r3, 80050b0 <USBD_StdDevReq+0x80>
          USBD_CtlError(pdev, req);
 80050a2:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80050a4:	f7ff ffb8 	bl	8005018 <USBD_CtlError.constprop.1>
  return ret;
 80050a8:	e7e2      	b.n	8005070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80050aa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80050ae:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80050b0:	7c20      	ldrb	r0, [r4, #16]
 80050b2:	f10d 0106 	add.w	r1, sp, #6
 80050b6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80050b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80050bc:	b152      	cbz	r2, 80050d4 <USBD_StdDevReq+0xa4>
 80050be:	88eb      	ldrh	r3, [r5, #6]
 80050c0:	b143      	cbz	r3, 80050d4 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 80050c2:	429a      	cmp	r2, r3
 80050c4:	bf28      	it	cs
 80050c6:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80050c8:	4601      	mov	r1, r0
 80050ca:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80050cc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80050d0:	f000 f9c2 	bl	8005458 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80050d4:	88eb      	ldrh	r3, [r5, #6]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1ca      	bne.n	8005070 <USBD_StdDevReq+0x40>
        USBD_CtlSendStatus(pdev);
 80050da:	4620      	mov	r0, r4
 80050dc:	f000 f9e8 	bl	80054b0 <USBD_CtlSendStatus>
 80050e0:	e7c6      	b.n	8005070 <USBD_StdDevReq+0x40>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050e2:	7c02      	ldrb	r2, [r0, #16]
 80050e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80050e8:	b932      	cbnz	r2, 80050f8 <USBD_StdDevReq+0xc8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80050ec:	f10d 0006 	add.w	r0, sp, #6
 80050f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050f2:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80050f4:	7043      	strb	r3, [r0, #1]
 80050f6:	e7df      	b.n	80050b8 <USBD_StdDevReq+0x88>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	e7f7      	b.n	80050ec <USBD_StdDevReq+0xbc>
      switch ((uint8_t)(req->wValue))
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d8cf      	bhi.n	80050a2 <USBD_StdDevReq+0x72>
 8005102:	e8df f003 	tbb	[pc, r3]
 8005106:	0703      	.short	0x0703
 8005108:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800510c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	e7c5      	b.n	80050a0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005114:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	e7c1      	b.n	80050a0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800511c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	e7bd      	b.n	80050a0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005124:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	e7b9      	b.n	80050a0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800512c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	e7b5      	b.n	80050a0 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005134:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	e7b1      	b.n	80050a0 <USBD_StdDevReq+0x70>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800513c:	7c03      	ldrb	r3, [r0, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1af      	bne.n	80050a2 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005142:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005146:	f10d 0006 	add.w	r0, sp, #6
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514c:	4798      	blx	r3
 800514e:	e7b3      	b.n	80050b8 <USBD_StdDevReq+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005150:	7c03      	ldrb	r3, [r0, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1a5      	bne.n	80050a2 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005156:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800515a:	f10d 0006 	add.w	r0, sp, #6
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005162:	2307      	movs	r3, #7
 8005164:	e7c6      	b.n	80050f4 <USBD_StdDevReq+0xc4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005166:	888b      	ldrh	r3, [r1, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d19a      	bne.n	80050a2 <USBD_StdDevReq+0x72>
 800516c:	88cb      	ldrh	r3, [r1, #6]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d197      	bne.n	80050a2 <USBD_StdDevReq+0x72>
 8005172:	884d      	ldrh	r5, [r1, #2]
 8005174:	2d7f      	cmp	r5, #127	; 0x7f
 8005176:	d894      	bhi.n	80050a2 <USBD_StdDevReq+0x72>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005178:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800517c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800517e:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005180:	d08f      	beq.n	80050a2 <USBD_StdDevReq+0x72>
      pdev->dev_address = dev_addr;
 8005182:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005186:	f000 ffd7 	bl	8006138 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800518a:	4620      	mov	r0, r4
 800518c:	f000 f990 	bl	80054b0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005190:	b11d      	cbz	r5, 800519a <USBD_StdDevReq+0x16a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005192:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005194:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005198:	e76a      	b.n	8005070 <USBD_StdDevReq+0x40>
 800519a:	2301      	movs	r3, #1
 800519c:	e7fa      	b.n	8005194 <USBD_StdDevReq+0x164>
  cfgidx = (uint8_t)(req->wValue);
 800519e:	7889      	ldrb	r1, [r1, #2]
 80051a0:	4d38      	ldr	r5, [pc, #224]	; (8005284 <USBD_StdDevReq+0x254>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80051a2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80051a4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80051a6:	f63f af7c 	bhi.w	80050a2 <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 80051aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d008      	beq.n	80051c4 <USBD_StdDevReq+0x194>
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d014      	beq.n	80051e0 <USBD_StdDevReq+0x1b0>
        USBD_CtlError(pdev, req);
 80051b6:	f7ff ff2f 	bl	8005018 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80051ba:	7829      	ldrb	r1, [r5, #0]
 80051bc:	4620      	mov	r0, r4
 80051be:	f7ff fe18 	bl	8004df2 <USBD_ClrClassConfig>
 80051c2:	e755      	b.n	8005070 <USBD_StdDevReq+0x40>
        if (cfgidx)
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d088      	beq.n	80050da <USBD_StdDevReq+0xaa>
          pdev->dev_config = cfgidx;
 80051c8:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80051ca:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80051cc:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80051ce:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80051d2:	4620      	mov	r0, r4
 80051d4:	f7ff fe02 	bl	8004ddc <USBD_SetClassConfig>
 80051d8:	2802      	cmp	r0, #2
 80051da:	f47f af7e 	bne.w	80050da <USBD_StdDevReq+0xaa>
 80051de:	e760      	b.n	80050a2 <USBD_StdDevReq+0x72>
        if (cfgidx == 0U)
 80051e0:	b931      	cbnz	r1, 80051f0 <USBD_StdDevReq+0x1c0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80051e2:	2302      	movs	r3, #2
 80051e4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80051e8:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80051ea:	f7ff fe02 	bl	8004df2 <USBD_ClrClassConfig>
 80051ee:	e774      	b.n	80050da <USBD_StdDevReq+0xaa>
        else if (cfgidx != pdev->dev_config)
 80051f0:	6841      	ldr	r1, [r0, #4]
 80051f2:	2901      	cmp	r1, #1
 80051f4:	f43f af71 	beq.w	80050da <USBD_StdDevReq+0xaa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80051f8:	b2c9      	uxtb	r1, r1
 80051fa:	f7ff fdfa 	bl	8004df2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80051fe:	7829      	ldrb	r1, [r5, #0]
 8005200:	6061      	str	r1, [r4, #4]
 8005202:	e7e6      	b.n	80051d2 <USBD_StdDevReq+0x1a2>
  if (req->wLength != 1U)
 8005204:	88ca      	ldrh	r2, [r1, #6]
 8005206:	2a01      	cmp	r2, #1
 8005208:	f47f af4b 	bne.w	80050a2 <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 800520c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005210:	2b00      	cmp	r3, #0
 8005212:	f43f af46 	beq.w	80050a2 <USBD_StdDevReq+0x72>
 8005216:	2b02      	cmp	r3, #2
 8005218:	d904      	bls.n	8005224 <USBD_StdDevReq+0x1f4>
 800521a:	2b03      	cmp	r3, #3
 800521c:	f47f af41 	bne.w	80050a2 <USBD_StdDevReq+0x72>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005220:	1d01      	adds	r1, r0, #4
 8005222:	e003      	b.n	800522c <USBD_StdDevReq+0x1fc>
        pdev->dev_default_config = 0U;
 8005224:	4601      	mov	r1, r0
 8005226:	2300      	movs	r3, #0
 8005228:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800522c:	4620      	mov	r0, r4
 800522e:	f000 f913 	bl	8005458 <USBD_CtlSendData>
 8005232:	e71d      	b.n	8005070 <USBD_StdDevReq+0x40>
  switch (pdev->dev_state)
 8005234:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005238:	3b01      	subs	r3, #1
 800523a:	2b02      	cmp	r3, #2
 800523c:	f63f af31 	bhi.w	80050a2 <USBD_StdDevReq+0x72>
      if (req->wLength != 0x2U)
 8005240:	88cb      	ldrh	r3, [r1, #6]
 8005242:	2b02      	cmp	r3, #2
 8005244:	f47f af2d 	bne.w	80050a2 <USBD_StdDevReq+0x72>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005248:	2301      	movs	r3, #1
 800524a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800524c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005250:	b10b      	cbz	r3, 8005256 <USBD_StdDevReq+0x226>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005252:	2303      	movs	r3, #3
 8005254:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005256:	2202      	movs	r2, #2
 8005258:	f104 010c 	add.w	r1, r4, #12
 800525c:	e7e6      	b.n	800522c <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800525e:	884b      	ldrh	r3, [r1, #2]
 8005260:	2b01      	cmp	r3, #1
 8005262:	f47f af05 	bne.w	8005070 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8005266:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800526a:	e736      	b.n	80050da <USBD_StdDevReq+0xaa>
  switch (pdev->dev_state)
 800526c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005270:	3b01      	subs	r3, #1
 8005272:	2b02      	cmp	r3, #2
 8005274:	f63f af15 	bhi.w	80050a2 <USBD_StdDevReq+0x72>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005278:	884b      	ldrh	r3, [r1, #2]
 800527a:	2b01      	cmp	r3, #1
 800527c:	f47f aef8 	bne.w	8005070 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	e7f0      	b.n	8005266 <USBD_StdDevReq+0x236>
 8005284:	20000208 	.word	0x20000208

08005288 <USBD_StdItfReq>:
{
 8005288:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800528a:	780b      	ldrb	r3, [r1, #0]
 800528c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005290:	2b20      	cmp	r3, #32
{
 8005292:	4604      	mov	r4, r0
 8005294:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005296:	d002      	beq.n	800529e <USBD_StdItfReq+0x16>
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d000      	beq.n	800529e <USBD_StdItfReq+0x16>
 800529c:	b9b3      	cbnz	r3, 80052cc <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 800529e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80052a2:	3b01      	subs	r3, #1
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d810      	bhi.n	80052ca <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80052a8:	792b      	ldrb	r3, [r5, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d80d      	bhi.n	80052ca <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052ae:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80052b2:	4629      	mov	r1, r5
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	4620      	mov	r0, r4
 80052b8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052ba:	88eb      	ldrh	r3, [r5, #6]
 80052bc:	b91b      	cbnz	r3, 80052c6 <USBD_StdItfReq+0x3e>
 80052be:	b910      	cbnz	r0, 80052c6 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 f8f5 	bl	80054b0 <USBD_CtlSendStatus>
}
 80052c6:	2000      	movs	r0, #0
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80052ca:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80052cc:	f7ff fea4 	bl	8005018 <USBD_CtlError.constprop.1>
      break;
 80052d0:	e7f9      	b.n	80052c6 <USBD_StdItfReq+0x3e>

080052d2 <USBD_StdEPReq>:
{
 80052d2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052d4:	780a      	ldrb	r2, [r1, #0]
 80052d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80052da:	2a20      	cmp	r2, #32
{
 80052dc:	4604      	mov	r4, r0
 80052de:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052e0:	d013      	beq.n	800530a <USBD_StdEPReq+0x38>
 80052e2:	2a40      	cmp	r2, #64	; 0x40
 80052e4:	d011      	beq.n	800530a <USBD_StdEPReq+0x38>
 80052e6:	b96a      	cbnz	r2, 8005304 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80052e8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80052ea:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80052ec:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80052ee:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80052f0:	d01f      	beq.n	8005332 <USBD_StdEPReq+0x60>
 80052f2:	d335      	bcc.n	8005360 <USBD_StdEPReq+0x8e>
 80052f4:	2d03      	cmp	r5, #3
 80052f6:	d105      	bne.n	8005304 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80052f8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80052fc:	2a02      	cmp	r2, #2
 80052fe:	d026      	beq.n	800534e <USBD_StdEPReq+0x7c>
 8005300:	2a03      	cmp	r2, #3
 8005302:	d00a      	beq.n	800531a <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 8005304:	f7ff fe88 	bl	8005018 <USBD_CtlError.constprop.1>
      break;
 8005308:	e005      	b.n	8005316 <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 800530a:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800530e:	4619      	mov	r1, r3
 8005310:	6892      	ldr	r2, [r2, #8]
 8005312:	4620      	mov	r0, r4
 8005314:	4790      	blx	r2
}
 8005316:	2000      	movs	r0, #0
 8005318:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 800531a:	885a      	ldrh	r2, [r3, #2]
 800531c:	b92a      	cbnz	r2, 800532a <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 800531e:	064a      	lsls	r2, r1, #25
 8005320:	d003      	beq.n	800532a <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005322:	88db      	ldrh	r3, [r3, #6]
 8005324:	b90b      	cbnz	r3, 800532a <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005326:	f000 fedb 	bl	80060e0 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f8c0 	bl	80054b0 <USBD_CtlSendStatus>
              break;
 8005330:	e7f1      	b.n	8005316 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8005332:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005336:	2a02      	cmp	r2, #2
 8005338:	d009      	beq.n	800534e <USBD_StdEPReq+0x7c>
 800533a:	2a03      	cmp	r2, #3
 800533c:	d1e2      	bne.n	8005304 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800533e:	885b      	ldrh	r3, [r3, #2]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e8      	bne.n	8005316 <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005344:	064d      	lsls	r5, r1, #25
 8005346:	d0f0      	beq.n	800532a <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005348:	f000 fed8 	bl	80060fc <USBD_LL_ClearStallEP>
 800534c:	e7ed      	b.n	800532a <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800534e:	064b      	lsls	r3, r1, #25
 8005350:	d017      	beq.n	8005382 <USBD_StdEPReq+0xb0>
                USBD_LL_StallEP(pdev, ep_addr);
 8005352:	f000 fec5 	bl	80060e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005356:	2180      	movs	r1, #128	; 0x80
 8005358:	4620      	mov	r0, r4
 800535a:	f000 fec1 	bl	80060e0 <USBD_LL_StallEP>
 800535e:	e7da      	b.n	8005316 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8005360:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005364:	2b02      	cmp	r3, #2
 8005366:	d00e      	beq.n	8005386 <USBD_StdEPReq+0xb4>
 8005368:	2b03      	cmp	r3, #3
 800536a:	d1cb      	bne.n	8005304 <USBD_StdEPReq+0x32>
              if ((ep_addr & 0x80U) == 0x80U)
 800536c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005370:	f04f 0314 	mov.w	r3, #20
 8005374:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005378:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800537c:	d012      	beq.n	80053a4 <USBD_StdEPReq+0xd2>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800537e:	6992      	ldr	r2, [r2, #24]
 8005380:	b9da      	cbnz	r2, 80053ba <USBD_StdEPReq+0xe8>
                USBD_CtlError(pdev, req);
 8005382:	4620      	mov	r0, r4
 8005384:	e7be      	b.n	8005304 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005386:	0649      	lsls	r1, r1, #25
 8005388:	d1fb      	bne.n	8005382 <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800538a:	0613      	lsls	r3, r2, #24
 800538c:	bf4c      	ite	mi
 800538e:	f100 0114 	addmi.w	r1, r0, #20
 8005392:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8005396:	2300      	movs	r3, #0
 8005398:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800539a:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800539c:	4620      	mov	r0, r4
 800539e:	f000 f85b 	bl	8005458 <USBD_CtlSendData>
              break;
 80053a2:	e7b8      	b.n	8005316 <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053a4:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d0ea      	beq.n	8005382 <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053ac:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80053b0:	fb03 0505 	mla	r5, r3, r5, r0
 80053b4:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80053b8:	e004      	b.n	80053c4 <USBD_StdEPReq+0xf2>
 80053ba:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80053be:	fb05 3503 	mla	r5, r5, r3, r3
 80053c2:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80053c4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80053c8:	d103      	bne.n	80053d2 <USBD_StdEPReq+0x100>
                pep->status = 0x0001U;
 80053ca:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80053cc:	2202      	movs	r2, #2
 80053ce:	4629      	mov	r1, r5
 80053d0:	e7e4      	b.n	800539c <USBD_StdEPReq+0xca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 fea0 	bl	8006118 <USBD_LL_IsStallEP>
 80053d8:	b108      	cbz	r0, 80053de <USBD_StdEPReq+0x10c>
                pep->status = 0x0001U;
 80053da:	2301      	movs	r3, #1
 80053dc:	e7f5      	b.n	80053ca <USBD_StdEPReq+0xf8>
                pep->status = 0x0000U;
 80053de:	6028      	str	r0, [r5, #0]
 80053e0:	e7f4      	b.n	80053cc <USBD_StdEPReq+0xfa>

080053e2 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80053e2:	780b      	ldrb	r3, [r1, #0]
 80053e4:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80053e6:	784b      	ldrb	r3, [r1, #1]
 80053e8:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80053ea:	78ca      	ldrb	r2, [r1, #3]
 80053ec:	788b      	ldrb	r3, [r1, #2]
 80053ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80053f2:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80053f4:	794a      	ldrb	r2, [r1, #5]
 80053f6:	790b      	ldrb	r3, [r1, #4]
 80053f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80053fc:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80053fe:	79ca      	ldrb	r2, [r1, #7]
 8005400:	798b      	ldrb	r3, [r1, #6]
 8005402:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005406:	80c3      	strh	r3, [r0, #6]
 8005408:	4770      	bx	lr

0800540a <USBD_CtlError>:
{
 800540a:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 800540c:	2180      	movs	r1, #128	; 0x80
{
 800540e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005410:	f000 fe66 	bl	80060e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005414:	4620      	mov	r0, r4
 8005416:	2100      	movs	r1, #0
}
 8005418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800541c:	f000 be60 	b.w	80060e0 <USBD_LL_StallEP>

08005420 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005420:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005422:	b188      	cbz	r0, 8005448 <USBD_GetString+0x28>
 8005424:	4605      	mov	r5, r0
 8005426:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005428:	f815 4b01 	ldrb.w	r4, [r5], #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2c00      	cmp	r4, #0
 8005430:	d1f9      	bne.n	8005426 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005432:	3301      	adds	r3, #1
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005438:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800543a:	2303      	movs	r3, #3
 800543c:	704b      	strb	r3, [r1, #1]
 800543e:	3801      	subs	r0, #1
 8005440:	2302      	movs	r3, #2
    while (*desc != '\0')
 8005442:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005446:	b905      	cbnz	r5, 800544a <USBD_GetString+0x2a>
 8005448:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8005450:	3302      	adds	r3, #2
 8005452:	b2db      	uxtb	r3, r3
 8005454:	548c      	strb	r4, [r1, r2]
 8005456:	e7f4      	b.n	8005442 <USBD_GetString+0x22>

08005458 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005458:	b510      	push	{r4, lr}
 800545a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800545c:	2202      	movs	r2, #2
 800545e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005462:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005464:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8005466:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005468:	2100      	movs	r1, #0
 800546a:	f000 fe73 	bl	8006154 <USBD_LL_Transmit>

  return USBD_OK;
}
 800546e:	2000      	movs	r0, #0
 8005470:	bd10      	pop	{r4, pc}

08005472 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005472:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005474:	4613      	mov	r3, r2
 8005476:	460a      	mov	r2, r1
 8005478:	2100      	movs	r1, #0
 800547a:	f000 fe6b 	bl	8006154 <USBD_LL_Transmit>

  return USBD_OK;
}
 800547e:	2000      	movs	r0, #0
 8005480:	bd08      	pop	{r3, pc}

08005482 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005482:	b510      	push	{r4, lr}
 8005484:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005486:	2203      	movs	r2, #3
 8005488:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800548c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005490:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8005492:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005496:	2100      	movs	r1, #0
 8005498:	f000 fe6a 	bl	8006170 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800549c:	2000      	movs	r0, #0
 800549e:	bd10      	pop	{r4, pc}

080054a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80054a0:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80054a2:	4613      	mov	r3, r2
 80054a4:	460a      	mov	r2, r1
 80054a6:	2100      	movs	r1, #0
 80054a8:	f000 fe62 	bl	8006170 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80054ac:	2000      	movs	r0, #0
 80054ae:	bd08      	pop	{r3, pc}

080054b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80054b0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80054b2:	2304      	movs	r3, #4
 80054b4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80054b8:	2300      	movs	r3, #0
 80054ba:	461a      	mov	r2, r3
 80054bc:	4619      	mov	r1, r3
 80054be:	f000 fe49 	bl	8006154 <USBD_LL_Transmit>

  return USBD_OK;
}
 80054c2:	2000      	movs	r0, #0
 80054c4:	bd08      	pop	{r3, pc}

080054c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80054c6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80054c8:	2305      	movs	r3, #5
 80054ca:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054ce:	2300      	movs	r3, #0
 80054d0:	461a      	mov	r2, r3
 80054d2:	4619      	mov	r1, r3
 80054d4:	f000 fe4c 	bl	8006170 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80054d8:	2000      	movs	r0, #0
 80054da:	bd08      	pop	{r3, pc}

080054dc <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80054dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80054e0:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80054e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054e4:	4302      	orrs	r2, r0
 80054e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	4018      	ands	r0, r3
 80054ec:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80054ee:	9b01      	ldr	r3, [sp, #4]
}
 80054f0:	b002      	add	sp, #8
 80054f2:	4770      	bx	lr
 80054f4:	0000      	movs	r0, r0
	...

080054f8 <hexTodec>:
//		return sq_return;
//	}
//}

int hexTodec(uint16_t hex_value)
{
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	ed2d 8b02 	vpush	{d8}
		}
		else if(('A'<=val)&&(val<='F'))
		{
			val=val-65+10;
		}
		sum+=(uint16_t)(val*pow(16,i));
 80054fe:	ed9f 8b16 	vldr	d8, [pc, #88]	; 8005558 <hexTodec+0x60>
{
 8005502:	2400      	movs	r4, #0
 8005504:	b082      	sub	sp, #8
 8005506:	4606      	mov	r6, r0
	uint16_t sum=0;
 8005508:	4625      	mov	r5, r4
		sum+=(uint16_t)(val*pow(16,i));
 800550a:	b2e0      	uxtb	r0, r4
 800550c:	f7fa ffca 	bl	80004a4 <__aeabi_ui2d>
 8005510:	eeb0 0a48 	vmov.f32	s0, s16
 8005514:	eef0 0a68 	vmov.f32	s1, s17
 8005518:	ec41 0b11 	vmov	d1, r0, r1
 800551c:	f001 fea2 	bl	8007264 <pow>
		val=((0x0f)&(hex_value>>4*i));
 8005520:	00a0      	lsls	r0, r4, #2
		sum+=(uint16_t)(val*pow(16,i));
 8005522:	ec53 2b10 	vmov	r2, r3, d0
		val=((0x0f)&(hex_value>>4*i));
 8005526:	fa46 f000 	asr.w	r0, r6, r0
		sum+=(uint16_t)(val*pow(16,i));
 800552a:	f000 000f 	and.w	r0, r0, #15
 800552e:	e9cd 2300 	strd	r2, r3, [sp]
 8005532:	f7fa ffc7 	bl	80004c4 <__aeabi_i2d>
 8005536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800553a:	f7fb f829 	bl	8000590 <__aeabi_dmul>
 800553e:	f7fb fad7 	bl	8000af0 <__aeabi_d2uiz>
 8005542:	3401      	adds	r4, #1
 8005544:	4405      	add	r5, r0
	for(i=0;i<4;i++)
 8005546:	2c04      	cmp	r4, #4
		sum+=(uint16_t)(val*pow(16,i));
 8005548:	b2ad      	uxth	r5, r5
	for(i=0;i<4;i++)
 800554a:	d1de      	bne.n	800550a <hexTodec+0x12>
	}
	return sum;
}
 800554c:	4628      	mov	r0, r5
 800554e:	b002      	add	sp, #8
 8005550:	ecbd 8b02 	vpop	{d8}
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	bf00      	nop
 8005558:	00000000 	.word	0x00000000
 800555c:	40300000 	.word	0x40300000

08005560 <print_PMS7003>:

void print_PMS7003(void)
{
 8005560:	b570      	push	{r4, r5, r6, lr}
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;

	check_byte_receive=pms7003_Buffer[30]<<8|pms7003_Buffer[31];
 8005562:	4c60      	ldr	r4, [pc, #384]	; (80056e4 <print_PMS7003+0x184>)
 8005564:	7fa3      	ldrb	r3, [r4, #30]
 8005566:	7fe6      	ldrb	r6, [r4, #31]
 8005568:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800556c:	2300      	movs	r3, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 800556e:	461d      	mov	r5, r3


	for(uint8_t i=0;i<30;i++)
	{
		check_byte_calculate+=pms7003_Buffer[i];
 8005570:	5ce2      	ldrb	r2, [r4, r3]
 8005572:	3301      	adds	r3, #1
 8005574:	4415      	add	r5, r2
	for(uint8_t i=0;i<30;i++)
 8005576:	2b1e      	cmp	r3, #30
		check_byte_calculate+=pms7003_Buffer[i];
 8005578:	b2ad      	uxth	r5, r5
	for(uint8_t i=0;i<30;i++)
 800557a:	d1f9      	bne.n	8005570 <print_PMS7003+0x10>
	}

	printf("pms : 0x%X	crc_cal : 0x%X\r\n",check_byte_receive,check_byte_calculate);
 800557c:	462a      	mov	r2, r5
 800557e:	4631      	mov	r1, r6
 8005580:	4859      	ldr	r0, [pc, #356]	; (80056e8 <print_PMS7003+0x188>)
 8005582:	f000 ff13 	bl	80063ac <iprintf>


	if(check_byte_receive==check_byte_calculate)
 8005586:	42ae      	cmp	r6, r5
 8005588:	f040 80a8 	bne.w	80056dc <print_PMS7003+0x17c>
	{
		printf("PM1.0 : %d	",hexTodec(combine_value=(pms7003_Buffer[10]<<8)|pms7003_Buffer[11]));
 800558c:	7ae3      	ldrb	r3, [r4, #11]
 800558e:	7aa0      	ldrb	r0, [r4, #10]
 8005590:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8005594:	f7ff ffb0 	bl	80054f8 <hexTodec>
 8005598:	4601      	mov	r1, r0
 800559a:	4854      	ldr	r0, [pc, #336]	; (80056ec <print_PMS7003+0x18c>)
 800559c:	f000 ff06 	bl	80063ac <iprintf>
		printf("PM2.5 : %d	",hexTodec(combine_value=(pms7003_Buffer[12]<<8)|pms7003_Buffer[13]));
 80055a0:	7b63      	ldrb	r3, [r4, #13]
 80055a2:	7b20      	ldrb	r0, [r4, #12]
 80055a4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80055a8:	f7ff ffa6 	bl	80054f8 <hexTodec>
 80055ac:	4601      	mov	r1, r0
 80055ae:	4850      	ldr	r0, [pc, #320]	; (80056f0 <print_PMS7003+0x190>)
 80055b0:	f000 fefc 	bl	80063ac <iprintf>
		printf("PM10 : %d	",hexTodec(combine_value=(pms7003_Buffer[14]<<8)|pms7003_Buffer[15]));
 80055b4:	7be3      	ldrb	r3, [r4, #15]
 80055b6:	7ba0      	ldrb	r0, [r4, #14]
 80055b8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80055bc:	f7ff ff9c 	bl	80054f8 <hexTodec>
 80055c0:	4601      	mov	r1, r0
 80055c2:	484c      	ldr	r0, [pc, #304]	; (80056f4 <print_PMS7003+0x194>)
 80055c4:	f000 fef2 	bl	80063ac <iprintf>
		printf("0.3um : %d	",hexTodec(combine_value=(pms7003_Buffer[16]<<8)|pms7003_Buffer[17]));
 80055c8:	7c63      	ldrb	r3, [r4, #17]
 80055ca:	7c20      	ldrb	r0, [r4, #16]
 80055cc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80055d0:	f7ff ff92 	bl	80054f8 <hexTodec>
 80055d4:	4601      	mov	r1, r0
 80055d6:	4848      	ldr	r0, [pc, #288]	; (80056f8 <print_PMS7003+0x198>)
 80055d8:	f000 fee8 	bl	80063ac <iprintf>
		printf("0.5um : %d	",hexTodec(combine_value=(pms7003_Buffer[18]<<8)|pms7003_Buffer[19]));
 80055dc:	7ce3      	ldrb	r3, [r4, #19]
 80055de:	7ca0      	ldrb	r0, [r4, #18]
 80055e0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80055e4:	f7ff ff88 	bl	80054f8 <hexTodec>
 80055e8:	4601      	mov	r1, r0
 80055ea:	4844      	ldr	r0, [pc, #272]	; (80056fc <print_PMS7003+0x19c>)
 80055ec:	f000 fede 	bl	80063ac <iprintf>
		printf("1.0um : %d	",hexTodec(combine_value=(pms7003_Buffer[20]<<8)|pms7003_Buffer[21]));
 80055f0:	7d63      	ldrb	r3, [r4, #21]
 80055f2:	7d20      	ldrb	r0, [r4, #20]
 80055f4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80055f8:	f7ff ff7e 	bl	80054f8 <hexTodec>
 80055fc:	4601      	mov	r1, r0
 80055fe:	4840      	ldr	r0, [pc, #256]	; (8005700 <print_PMS7003+0x1a0>)
 8005600:	f000 fed4 	bl	80063ac <iprintf>
		printf("2.5um : %d	",hexTodec(combine_value=(pms7003_Buffer[22]<<8)|pms7003_Buffer[23]));
 8005604:	7de3      	ldrb	r3, [r4, #23]
 8005606:	7da0      	ldrb	r0, [r4, #22]
 8005608:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800560c:	f7ff ff74 	bl	80054f8 <hexTodec>
 8005610:	4601      	mov	r1, r0
 8005612:	483c      	ldr	r0, [pc, #240]	; (8005704 <print_PMS7003+0x1a4>)
 8005614:	f000 feca 	bl	80063ac <iprintf>
		printf("5.0um : %d	",hexTodec(combine_value=(pms7003_Buffer[24]<<8)|pms7003_Buffer[25]));
 8005618:	7e63      	ldrb	r3, [r4, #25]
 800561a:	7e20      	ldrb	r0, [r4, #24]
 800561c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8005620:	f7ff ff6a 	bl	80054f8 <hexTodec>
 8005624:	4601      	mov	r1, r0
 8005626:	4838      	ldr	r0, [pc, #224]	; (8005708 <print_PMS7003+0x1a8>)
 8005628:	f000 fec0 	bl	80063ac <iprintf>
		printf("10.0um : %d\n",hexTodec(combine_value=(pms7003_Buffer[26]<<8)|pms7003_Buffer[27]));
 800562c:	7ee3      	ldrb	r3, [r4, #27]
 800562e:	7ea0      	ldrb	r0, [r4, #26]
 8005630:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8005634:	f7ff ff60 	bl	80054f8 <hexTodec>
 8005638:	4601      	mov	r1, r0
 800563a:	4834      	ldr	r0, [pc, #208]	; (800570c <print_PMS7003+0x1ac>)
 800563c:	f000 feb6 	bl	80063ac <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8005640:	2101      	movs	r1, #1
 8005642:	4833      	ldr	r0, [pc, #204]	; (8005710 <print_PMS7003+0x1b0>)
 8005644:	f7fb fed5 	bl	80013f2 <HAL_GPIO_TogglePin>
	}
	if(check_byte_receive==check_byte_calculate)
	{
		printf("PM1.0 : %d	",(combine_value=(pms7003_Buffer[10]<<8)|pms7003_Buffer[11]));
 8005648:	7ae3      	ldrb	r3, [r4, #11]
 800564a:	7aa1      	ldrb	r1, [r4, #10]
 800564c:	4827      	ldr	r0, [pc, #156]	; (80056ec <print_PMS7003+0x18c>)
 800564e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005652:	f000 feab 	bl	80063ac <iprintf>
		printf("PM2.5 : %d	",(combine_value=(pms7003_Buffer[12]<<8)|pms7003_Buffer[13]));
 8005656:	7b63      	ldrb	r3, [r4, #13]
 8005658:	7b21      	ldrb	r1, [r4, #12]
 800565a:	4825      	ldr	r0, [pc, #148]	; (80056f0 <print_PMS7003+0x190>)
 800565c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005660:	f000 fea4 	bl	80063ac <iprintf>
		printf("PM10 : %d	",(combine_value=(pms7003_Buffer[14]<<8)|pms7003_Buffer[15]));
 8005664:	7be3      	ldrb	r3, [r4, #15]
 8005666:	7ba1      	ldrb	r1, [r4, #14]
 8005668:	4822      	ldr	r0, [pc, #136]	; (80056f4 <print_PMS7003+0x194>)
 800566a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800566e:	f000 fe9d 	bl	80063ac <iprintf>
		printf("0.3um : %d	",(combine_value=(pms7003_Buffer[16]<<8)|pms7003_Buffer[17]));
 8005672:	7c63      	ldrb	r3, [r4, #17]
 8005674:	7c21      	ldrb	r1, [r4, #16]
 8005676:	4820      	ldr	r0, [pc, #128]	; (80056f8 <print_PMS7003+0x198>)
 8005678:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800567c:	f000 fe96 	bl	80063ac <iprintf>
		printf("0.5um : %d	",(combine_value=(pms7003_Buffer[18]<<8)|pms7003_Buffer[19]));
 8005680:	7ce3      	ldrb	r3, [r4, #19]
 8005682:	7ca1      	ldrb	r1, [r4, #18]
 8005684:	481d      	ldr	r0, [pc, #116]	; (80056fc <print_PMS7003+0x19c>)
 8005686:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800568a:	f000 fe8f 	bl	80063ac <iprintf>
		printf("1.0um : %d	",(combine_value=(pms7003_Buffer[20]<<8)|pms7003_Buffer[21]));
 800568e:	7d63      	ldrb	r3, [r4, #21]
 8005690:	7d21      	ldrb	r1, [r4, #20]
 8005692:	481b      	ldr	r0, [pc, #108]	; (8005700 <print_PMS7003+0x1a0>)
 8005694:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005698:	f000 fe88 	bl	80063ac <iprintf>
		printf("2.5um : %d	",(combine_value=(pms7003_Buffer[22]<<8)|pms7003_Buffer[23]));
 800569c:	7de3      	ldrb	r3, [r4, #23]
 800569e:	7da1      	ldrb	r1, [r4, #22]
 80056a0:	4818      	ldr	r0, [pc, #96]	; (8005704 <print_PMS7003+0x1a4>)
 80056a2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80056a6:	f000 fe81 	bl	80063ac <iprintf>
		printf("5.0um : %d	",(combine_value=(pms7003_Buffer[24]<<8)|pms7003_Buffer[25]));
 80056aa:	7e63      	ldrb	r3, [r4, #25]
 80056ac:	7e21      	ldrb	r1, [r4, #24]
 80056ae:	4816      	ldr	r0, [pc, #88]	; (8005708 <print_PMS7003+0x1a8>)
 80056b0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80056b4:	f000 fe7a 	bl	80063ac <iprintf>
		printf("10.0um : %d\n",(combine_value=(pms7003_Buffer[26]<<8)|pms7003_Buffer[27]));
 80056b8:	7ea1      	ldrb	r1, [r4, #26]
 80056ba:	7ee3      	ldrb	r3, [r4, #27]
 80056bc:	4813      	ldr	r0, [pc, #76]	; (800570c <print_PMS7003+0x1ac>)
 80056be:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80056c2:	f000 fe73 	bl	80063ac <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80056c6:	2101      	movs	r1, #1
 80056c8:	4811      	ldr	r0, [pc, #68]	; (8005710 <print_PMS7003+0x1b0>)
 80056ca:	f7fb fe92 	bl	80013f2 <HAL_GPIO_TogglePin>
	}
	else
	{
		printf("Check bytes not matched\r\n");
	}
	HAL_UART_DMAStop(&hlpuart1);
 80056ce:	4811      	ldr	r0, [pc, #68]	; (8005714 <print_PMS7003+0x1b4>)
 80056d0:	f7fd fd78 	bl	80031c4 <HAL_UART_DMAStop>
	receive_complete=0;
 80056d4:	4b10      	ldr	r3, [pc, #64]	; (8005718 <print_PMS7003+0x1b8>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
}
 80056da:	bd70      	pop	{r4, r5, r6, pc}
		printf("Check bytes not matched\r\n");
 80056dc:	480f      	ldr	r0, [pc, #60]	; (800571c <print_PMS7003+0x1bc>)
 80056de:	f000 fed9 	bl	8006494 <puts>
 80056e2:	e7f4      	b.n	80056ce <print_PMS7003+0x16e>
 80056e4:	2000043c 	.word	0x2000043c
 80056e8:	08008378 	.word	0x08008378
 80056ec:	08008394 	.word	0x08008394
 80056f0:	080083a0 	.word	0x080083a0
 80056f4:	080083ac 	.word	0x080083ac
 80056f8:	080083b7 	.word	0x080083b7
 80056fc:	080083c3 	.word	0x080083c3
 8005700:	080083cf 	.word	0x080083cf
 8005704:	080083db 	.word	0x080083db
 8005708:	080083e7 	.word	0x080083e7
 800570c:	080083f3 	.word	0x080083f3
 8005710:	48000400 	.word	0x48000400
 8005714:	20000508 	.word	0x20000508
 8005718:	20000209 	.word	0x20000209
 800571c:	08008400 	.word	0x08008400

08005720 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8005720:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8005722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8005726:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8005728:	4802      	ldr	r0, [pc, #8]	; (8005734 <_write+0x14>)
 800572a:	b292      	uxth	r2, r2
 800572c:	f7fe fc50 	bl	8003fd0 <HAL_UART_Transmit>
  return len;
}
 8005730:	4620      	mov	r0, r4
 8005732:	bd10      	pop	{r4, pc}
 8005734:	20000594 	.word	0x20000594

08005738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005738:	b530      	push	{r4, r5, lr}
 800573a:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800573c:	2248      	movs	r2, #72	; 0x48
 800573e:	2100      	movs	r1, #0
 8005740:	a808      	add	r0, sp, #32
 8005742:	f000 fe2b 	bl	800639c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005746:	221c      	movs	r2, #28
 8005748:	2100      	movs	r1, #0
 800574a:	a801      	add	r0, sp, #4
 800574c:	f000 fe26 	bl	800639c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005750:	2100      	movs	r1, #0
 8005752:	2250      	movs	r2, #80	; 0x50
 8005754:	a81a      	add	r0, sp, #104	; 0x68
 8005756:	f000 fe21 	bl	800639c <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800575e:	2501      	movs	r5, #1
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005766:	60da      	str	r2, [r3, #12]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	f022 0203 	bic.w	r2, r2, #3
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005774:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005778:	f022 0218 	bic.w	r2, r2, #24
 800577c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005780:	4a26      	ldr	r2, [pc, #152]	; (800581c <SystemClock_Config+0xe4>)
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005790:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800579a:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800579c:	2327      	movs	r3, #39	; 0x27
 800579e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80057a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057a4:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057aa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057ac:	2340      	movs	r3, #64	; 0x40
 80057ae:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80057b2:	2360      	movs	r3, #96	; 0x60
 80057b4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b6:	f7fc fe3f 	bl	8002438 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80057ba:	236f      	movs	r3, #111	; 0x6f
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057bc:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80057be:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80057c0:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80057c2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80057c4:	2302      	movs	r3, #2
 80057c6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057c8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80057ca:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057cc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80057ce:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80057d0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80057d2:	f7fd f8f7 	bl	80029c4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80057d6:	f242 1307 	movw	r3, #8455	; 0x2107
 80057da:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80057dc:	2318      	movs	r3, #24
 80057de:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80057e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057e4:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80057e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057ea:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80057ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80057f0:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80057f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057f6:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80057f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80057fc:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80057fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005802:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005804:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005806:	2310      	movs	r3, #16
 8005808:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800580a:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800580c:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800580e:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005810:	f7fd fa83 	bl	8002d1a <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8005814:	f7fd fc45 	bl	80030a2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8005818:	b02f      	add	sp, #188	; 0xbc
 800581a:	bd30      	pop	{r4, r5, pc}
 800581c:	58000400 	.word	0x58000400

08005820 <main>:
{
 8005820:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 8005822:	f7fb fb33 	bl	8000e8c <HAL_Init>
  SystemClock_Config();
 8005826:	f7ff ff87 	bl	8005738 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800582a:	2214      	movs	r2, #20
 800582c:	2100      	movs	r1, #0
 800582e:	a801      	add	r0, sp, #4
 8005830:	f000 fdb4 	bl	800639c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005834:	2004      	movs	r0, #4
 8005836:	f7ff fe51 	bl	80054dc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800583a:	2002      	movs	r0, #2
 800583c:	f7ff fe4e 	bl	80054dc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005840:	2001      	movs	r0, #1
 8005842:	f7ff fe4b 	bl	80054dc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005846:	2008      	movs	r0, #8
 8005848:	f7ff fe48 	bl	80054dc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800584c:	2200      	movs	r2, #0
 800584e:	2123      	movs	r1, #35	; 0x23
 8005850:	4864      	ldr	r0, [pc, #400]	; (80059e4 <main+0x1c4>)
  huart1.Instance = USART1;
 8005852:	4d65      	ldr	r5, [pc, #404]	; (80059e8 <main+0x1c8>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8005854:	f7fb fdc8 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005858:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800585a:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = B1_Pin;
 800585c:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800585e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005860:	4b62      	ldr	r3, [pc, #392]	; (80059ec <main+0x1cc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005862:	4863      	ldr	r0, [pc, #396]	; (80059f0 <main+0x1d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005864:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005866:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005868:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800586a:	f7fb fd0b 	bl	8001284 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800586e:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005870:	a901      	add	r1, sp, #4
 8005872:	485c      	ldr	r0, [pc, #368]	; (80059e4 <main+0x1c4>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8005874:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005876:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005878:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800587a:	9702      	str	r7, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800587c:	f7fb fd02 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8005880:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005882:	a901      	add	r1, sp, #4
 8005884:	485b      	ldr	r0, [pc, #364]	; (80059f4 <main+0x1d4>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8005886:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005888:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800588a:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800588c:	f7fb fcfa 	bl	8001284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005890:	4621      	mov	r1, r4
 8005892:	4622      	mov	r2, r4
 8005894:	200a      	movs	r0, #10
 8005896:	f7fb fb4d 	bl	8000f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800589a:	200a      	movs	r0, #10
 800589c:	f7fb fb7e 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 80058a0:	4a55      	ldr	r2, [pc, #340]	; (80059f8 <main+0x1d8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058a2:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 80058a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058a8:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058aa:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 80058ac:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80058b0:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80058b2:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058b4:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058b6:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058b8:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ba:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058bc:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058be:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058c0:	f7fe fc15 	bl	80040ee <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f7fe fcaa 	bl	8004220 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058cc:	4621      	mov	r1, r4
 80058ce:	4628      	mov	r0, r5
 80058d0:	f7fe fcca 	bl	8004268 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80058d4:	4628      	mov	r0, r5
 80058d6:	f7fe fc88 	bl	80041ea <HAL_UARTEx_DisableFifoMode>
  SET_BIT(RCC->AHB1ENR, Periphs);
 80058da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80058de:	4621      	mov	r1, r4
 80058e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  hlpuart1.Instance = LPUART1;
 80058e2:	4d46      	ldr	r5, [pc, #280]	; (80059fc <main+0x1dc>)
 80058e4:	f042 0204 	orr.w	r2, r2, #4
 80058e8:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80058ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058ec:	f002 0204 	and.w	r2, r2, #4
 80058f0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80058f2:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80058f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058f6:	433a      	orrs	r2, r7
 80058f8:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80058fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fc:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80058fe:	4622      	mov	r2, r4
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	200b      	movs	r0, #11
  (void)tmpreg;
 8005904:	9b00      	ldr	r3, [sp, #0]
 8005906:	f7fb fb15 	bl	8000f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800590a:	200b      	movs	r0, #11
 800590c:	f7fb fb46 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005910:	4622      	mov	r2, r4
 8005912:	4621      	mov	r1, r4
 8005914:	4630      	mov	r0, r6
 8005916:	f7fb fb0d 	bl	8000f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800591a:	4630      	mov	r0, r6
 800591c:	f7fb fb3e 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005920:	4622      	mov	r2, r4
 8005922:	4621      	mov	r1, r4
 8005924:	200d      	movs	r0, #13
 8005926:	f7fb fb05 	bl	8000f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800592a:	200d      	movs	r0, #13
 800592c:	f7fb fb36 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005930:	4622      	mov	r2, r4
 8005932:	4621      	mov	r1, r4
 8005934:	200e      	movs	r0, #14
 8005936:	f7fb fafd 	bl	8000f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800593a:	200e      	movs	r0, #14
 800593c:	f7fb fb2e 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 9600;
 8005940:	492f      	ldr	r1, [pc, #188]	; (8005a00 <main+0x1e0>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005942:	60ac      	str	r4, [r5, #8]
  hlpuart1.Init.BaudRate = 9600;
 8005944:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005948:	4628      	mov	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 800594a:	e885 000a 	stmia.w	r5, {r1, r3}
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800594e:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005950:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005952:	616e      	str	r6, [r5, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005954:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005956:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005958:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800595a:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800595c:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800595e:	f7fe fbc6 	bl	80040ee <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f7fe fc5b 	bl	8004220 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800596a:	4621      	mov	r1, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f7fe fc7b 	bl	8004268 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005972:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 8005974:	4e23      	ldr	r6, [pc, #140]	; (8005a04 <main+0x1e4>)
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005976:	f7fe fc38 	bl	80041ea <HAL_UARTEx_DisableFifoMode>
  MX_USB_Device_Init();
 800597a:	f000 fa69 	bl	8005e50 <MX_USB_Device_Init>
  hi2c1.Init.Timing = 0x00100413;
 800597e:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <main+0x1e8>)
 8005980:	4822      	ldr	r0, [pc, #136]	; (8005a0c <main+0x1ec>)
  hi2c1.Init.OwnAddress1 = 0;
 8005982:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00100413;
 8005984:	e886 0009 	stmia.w	r6, {r0, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005988:	4630      	mov	r0, r6
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800598a:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800598c:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800598e:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005990:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005992:	6234      	str	r4, [r6, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005994:	60f7      	str	r7, [r6, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005996:	f7fb fd7a 	bl	800148e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800599a:	4621      	mov	r1, r4
 800599c:	4630      	mov	r0, r6
 800599e:	f7fc f827 	bl	80019f0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80059a2:	4621      	mov	r1, r4
 80059a4:	4630      	mov	r0, r6
 80059a6:	f7fc f849 	bl	8001a3c <HAL_I2CEx_ConfigDigitalFilter>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80059aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
	  if((receive_complete==0)&&(HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY))
 80059ae:	4c18      	ldr	r4, [pc, #96]	; (8005a10 <main+0x1f0>)
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80059b0:	f7fc f86a 	bl	8001a88 <HAL_I2CEx_EnableFastModePlus>
 80059b4:	4626      	mov	r6, r4
	  if((receive_complete==0)&&(HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY))
 80059b6:	7823      	ldrb	r3, [r4, #0]
 80059b8:	b94b      	cbnz	r3, 80059ce <main+0x1ae>
 80059ba:	4628      	mov	r0, r5
 80059bc:	f7fd fe26 	bl	800360c <HAL_UART_GetState>
 80059c0:	2820      	cmp	r0, #32
 80059c2:	4602      	mov	r2, r0
 80059c4:	d103      	bne.n	80059ce <main+0x1ae>
		  HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)pms7003_Buffer,32);
 80059c6:	4913      	ldr	r1, [pc, #76]	; (8005a14 <main+0x1f4>)
 80059c8:	4628      	mov	r0, r5
 80059ca:	f7fd fb83 	bl	80030d4 <HAL_UART_Receive_IT>
	  if(receive_complete==1)
 80059ce:	7833      	ldrb	r3, [r6, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <main+0x1b8>
		  print_PMS7003();
 80059d4:	f7ff fdc4 	bl	8005560 <print_PMS7003>
	  HAL_Delay(2300);
 80059d8:	f640 00fc 	movw	r0, #2300	; 0x8fc
 80059dc:	f7fb fa84 	bl	8000ee8 <HAL_Delay>
	  if((receive_complete==0)&&(HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY))
 80059e0:	e7e9      	b.n	80059b6 <main+0x196>
 80059e2:	bf00      	nop
 80059e4:	48000400 	.word	0x48000400
 80059e8:	20000594 	.word	0x20000594
 80059ec:	10110000 	.word	0x10110000
 80059f0:	48000800 	.word	0x48000800
 80059f4:	48000c00 	.word	0x48000c00
 80059f8:	40013800 	.word	0x40013800
 80059fc:	20000508 	.word	0x20000508
 8005a00:	40008000 	.word	0x40008000
 8005a04:	200004bc 	.word	0x200004bc
 8005a08:	00100413 	.word	0x00100413
 8005a0c:	40005400 	.word	0x40005400
 8005a10:	20000209 	.word	0x20000209
 8005a14:	2000043c 	.word	0x2000043c

08005a18 <HAL_UART_TxCpltCallback>:
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
//	printf("transfer complete\r\n");
	transfer_complete=1;
 8005a18:	4b01      	ldr	r3, [pc, #4]	; (8005a20 <HAL_UART_TxCpltCallback+0x8>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	4770      	bx	lr
 8005a20:	2000020a 	.word	0x2000020a

08005a24 <HAL_UART_RxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	receive_complete=1;
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <HAL_UART_RxCpltCallback+0x8>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	4770      	bx	lr
 8005a2c:	20000209 	.word	0x20000209

08005a30 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a30:	4770      	bx	lr

08005a32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a32:	4770      	bx	lr

08005a34 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8005a38:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a3c:	4302      	orrs	r2, r0
 8005a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	4018      	ands	r0, r3
 8005a44:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8005a46:	9b01      	ldr	r3, [sp, #4]
}
 8005a48:	b002      	add	sp, #8
 8005a4a:	4770      	bx	lr

08005a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4606      	mov	r6, r0
 8005a54:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a56:	2214      	movs	r2, #20
 8005a58:	2100      	movs	r1, #0
 8005a5a:	a801      	add	r0, sp, #4
 8005a5c:	f000 fc9e 	bl	800639c <memset>
  if(hi2c->Instance==I2C1)
 8005a60:	6832      	ldr	r2, [r6, #0]
 8005a62:	4b30      	ldr	r3, [pc, #192]	; (8005b24 <HAL_I2C_MspInit+0xd4>)
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d15a      	bne.n	8005b1e <HAL_I2C_MspInit+0xce>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a68:	2002      	movs	r0, #2
 8005a6a:	f7ff ffe3 	bl	8005a34 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a74:	2312      	movs	r3, #18
 8005a76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a7c:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7e:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a80:	eb0d 0103 	add.w	r1, sp, r3
 8005a84:	4828      	ldr	r0, [pc, #160]	; (8005b28 <HAL_I2C_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a88:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a8a:	f7fb fbfb 	bl	8001284 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005a92:	4c26      	ldr	r4, [pc, #152]	; (8005b2c <HAL_I2C_MspInit+0xdc>)
 8005a94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a96:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005a9a:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a9e:	60a5      	str	r5, [r4, #8]
 8005aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005aa6:	9b00      	ldr	r3, [sp, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8005aa8:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_I2C_MspInit+0xe0>)
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005aaa:	60e5      	str	r5, [r4, #12]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8005aac:	f04f 0c0a 	mov.w	ip, #10
 8005ab0:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005ab4:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aba:	6165      	str	r5, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005abc:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005abe:	61e5      	str	r5, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ac0:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005ac2:	f7fb fab7 	bl	8001034 <HAL_DMA_Init>
 8005ac6:	b108      	cbz	r0, 8005acc <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8005ac8:	f7ff ffb3 	bl	8005a32 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005acc:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <HAL_I2C_MspInit+0xe4>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005ace:	63f4      	str	r4, [r6, #60]	; 0x3c
 8005ad0:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8005ad2:	4c19      	ldr	r4, [pc, #100]	; (8005b38 <HAL_I2C_MspInit+0xe8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ad4:	250b      	movs	r5, #11
 8005ad6:	f04f 0e10 	mov.w	lr, #16
 8005ada:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ade:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ae0:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ae2:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ae4:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ae6:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ae8:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aea:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005aec:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005aee:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005af0:	f7fb faa0 	bl	8001034 <HAL_DMA_Init>
 8005af4:	b108      	cbz	r0, 8005afa <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8005af6:	f7ff ff9c 	bl	8005a32 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005afa:	2200      	movs	r2, #0
 8005afc:	4611      	mov	r1, r2
 8005afe:	201e      	movs	r0, #30
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005b00:	63b4      	str	r4, [r6, #56]	; 0x38
 8005b02:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005b04:	f7fb fa16 	bl	8000f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005b08:	201e      	movs	r0, #30
 8005b0a:	f7fb fa47 	bl	8000f9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	201f      	movs	r0, #31
 8005b12:	4611      	mov	r1, r2
 8005b14:	f7fb fa0e 	bl	8000f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005b18:	201f      	movs	r0, #31
 8005b1a:	f7fb fa3f 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005b1e:	b006      	add	sp, #24
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
 8005b22:	bf00      	nop
 8005b24:	40005400 	.word	0x40005400
 8005b28:	48000400 	.word	0x48000400
 8005b2c:	20000680 	.word	0x20000680
 8005b30:	40020030 	.word	0x40020030
 8005b34:	40020044 	.word	0x40020044
 8005b38:	2000045c 	.word	0x2000045c

08005b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4606      	mov	r6, r0
 8005b40:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b42:	2214      	movs	r2, #20
 8005b44:	2100      	movs	r1, #0
 8005b46:	a803      	add	r0, sp, #12
 8005b48:	f000 fc28 	bl	800639c <memset>
  if(huart->Instance==LPUART1)
 8005b4c:	6833      	ldr	r3, [r6, #0]
 8005b4e:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <HAL_UART_MspInit+0xfc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d151      	bne.n	8005bf8 <HAL_UART_MspInit+0xbc>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b58:	2004      	movs	r0, #4
 8005b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8005b5c:	4c37      	ldr	r4, [pc, #220]	; (8005c3c <HAL_UART_MspInit+0x100>)
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005b6c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b6e:	f7ff ff61 	bl	8005a34 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005b72:	2303      	movs	r3, #3
 8005b74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b76:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b78:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b7c:	4830      	ldr	r0, [pc, #192]	; (8005c40 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005b80:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b82:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005b84:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b86:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b88:	f7fb fb7c 	bl	8001284 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <HAL_UART_MspInit+0x108>)
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b8e:	60a5      	str	r5, [r4, #8]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005b90:	f04f 0c10 	mov.w	ip, #16
 8005b94:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005b98:	4620      	mov	r0, r4
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b9a:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b9c:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b9e:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ba0:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ba2:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8005ba4:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ba6:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005ba8:	f7fb fa44 	bl	8001034 <HAL_DMA_Init>
 8005bac:	b108      	cbz	r0, 8005bb2 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8005bae:	f7ff ff40 	bl	8005a32 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bb2:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_UART_MspInit+0x10c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8005bb4:	67b4      	str	r4, [r6, #120]	; 0x78
 8005bb6:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8005bb8:	4c24      	ldr	r4, [pc, #144]	; (8005c4c <HAL_UART_MspInit+0x110>)
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bba:	2511      	movs	r5, #17
 8005bbc:	f04f 0e10 	mov.w	lr, #16
 8005bc0:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bc4:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bc6:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005bc8:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bca:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bcc:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bce:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bd0:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8005bd2:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005bd4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005bd6:	f7fb fa2d 	bl	8001034 <HAL_DMA_Init>
 8005bda:	b108      	cbz	r0, 8005be0 <HAL_UART_MspInit+0xa4>
    {
      Error_Handler();
 8005bdc:	f7ff ff29 	bl	8005a32 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005be0:	2200      	movs	r2, #0
 8005be2:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8005be4:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005be6:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8005be8:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005bea:	f7fb f9a3 	bl	8000f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005bee:	2025      	movs	r0, #37	; 0x25
 8005bf0:	f7fb f9d4 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005bf4:	b008      	add	sp, #32
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART1)
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <HAL_UART_MspInit+0x114>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d1fa      	bne.n	8005bf4 <HAL_UART_MspInit+0xb8>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c02:	2002      	movs	r0, #2
 8005c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c0a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c12:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	f7ff ff0d 	bl	8005a34 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
 8005c1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c26:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c28:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c2a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c2c:	4809      	ldr	r0, [pc, #36]	; (8005c54 <HAL_UART_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c30:	f7fb fb28 	bl	8001284 <HAL_GPIO_Init>
}
 8005c34:	e7de      	b.n	8005bf4 <HAL_UART_MspInit+0xb8>
 8005c36:	bf00      	nop
 8005c38:	40008000 	.word	0x40008000
 8005c3c:	200006e0 	.word	0x200006e0
 8005c40:	48000800 	.word	0x48000800
 8005c44:	40020008 	.word	0x40020008
 8005c48:	4002001c 	.word	0x4002001c
 8005c4c:	20000620 	.word	0x20000620
 8005c50:	40013800 	.word	0x40013800
 8005c54:	48000400 	.word	0x48000400

08005c58 <NMI_Handler>:
 8005c58:	4770      	bx	lr

08005c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c5a:	e7fe      	b.n	8005c5a <HardFault_Handler>

08005c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c5c:	e7fe      	b.n	8005c5c <MemManage_Handler>

08005c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c5e:	e7fe      	b.n	8005c5e <BusFault_Handler>

08005c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c60:	e7fe      	b.n	8005c60 <UsageFault_Handler>

08005c62 <SVC_Handler>:
 8005c62:	4770      	bx	lr

08005c64 <DebugMon_Handler>:
 8005c64:	4770      	bx	lr

08005c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c66:	4770      	bx	lr

08005c68 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c68:	f7fb b926 	b.w	8000eb8 <HAL_IncTick>

08005c6c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005c6c:	2010      	movs	r0, #16
 8005c6e:	f7fb bbc7 	b.w	8001400 <HAL_GPIO_EXTI_IRQHandler>
	...

08005c74 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//	printf("rx dma\r\n");
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005c74:	4801      	ldr	r0, [pc, #4]	; (8005c7c <DMA1_Channel1_IRQHandler+0x8>)
 8005c76:	f7fb bab9 	b.w	80011ec <HAL_DMA_IRQHandler>
 8005c7a:	bf00      	nop
 8005c7c:	200006e0 	.word	0x200006e0

08005c80 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <DMA1_Channel2_IRQHandler+0x8>)
 8005c82:	f7fb bab3 	b.w	80011ec <HAL_DMA_IRQHandler>
 8005c86:	bf00      	nop
 8005c88:	20000620 	.word	0x20000620

08005c8c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <DMA1_Channel3_IRQHandler+0x8>)
 8005c8e:	f7fb baad 	b.w	80011ec <HAL_DMA_IRQHandler>
 8005c92:	bf00      	nop
 8005c94:	20000680 	.word	0x20000680

08005c98 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <DMA1_Channel4_IRQHandler+0x8>)
 8005c9a:	f7fb baa7 	b.w	80011ec <HAL_DMA_IRQHandler>
 8005c9e:	bf00      	nop
 8005ca0:	2000045c 	.word	0x2000045c

08005ca4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005ca4:	4801      	ldr	r0, [pc, #4]	; (8005cac <USB_LP_IRQHandler+0x8>)
 8005ca6:	f7fc b817 	b.w	8001cd8 <HAL_PCD_IRQHandler>
 8005caa:	bf00      	nop
 8005cac:	20001a04 	.word	0x20001a04

08005cb0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <I2C1_EV_IRQHandler+0x8>)
 8005cb2:	f7fb bc3d 	b.w	8001530 <HAL_I2C_EV_IRQHandler>
 8005cb6:	bf00      	nop
 8005cb8:	200004bc 	.word	0x200004bc

08005cbc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <I2C1_ER_IRQHandler+0x8>)
 8005cbe:	f7fb be53 	b.w	8001968 <HAL_I2C_ER_IRQHandler>
 8005cc2:	bf00      	nop
 8005cc4:	200004bc 	.word	0x200004bc

08005cc8 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005cc8:	4801      	ldr	r0, [pc, #4]	; (8005cd0 <LPUART1_IRQHandler+0x8>)
 8005cca:	f7fd bbc3 	b.w	8003454 <HAL_UART_IRQHandler>
 8005cce:	bf00      	nop
 8005cd0:	20000508 	.word	0x20000508

08005cd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	460e      	mov	r6, r1
 8005cd8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cda:	460c      	mov	r4, r1
 8005cdc:	1ba3      	subs	r3, r4, r6
 8005cde:	429d      	cmp	r5, r3
 8005ce0:	dc01      	bgt.n	8005ce6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005ce6:	f3af 8000 	nop.w
 8005cea:	f804 0b01 	strb.w	r0, [r4], #1
 8005cee:	e7f5      	b.n	8005cdc <_read+0x8>

08005cf0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005cf0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <_sbrk+0x2c>)
 8005cf4:	6819      	ldr	r1, [r3, #0]
{
 8005cf6:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005cf8:	b909      	cbnz	r1, 8005cfe <_sbrk+0xe>
		heap_end = &end;
 8005cfa:	4909      	ldr	r1, [pc, #36]	; (8005d20 <_sbrk+0x30>)
 8005cfc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8005cfe:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005d00:	4669      	mov	r1, sp
 8005d02:	4402      	add	r2, r0
 8005d04:	428a      	cmp	r2, r1
 8005d06:	d906      	bls.n	8005d16 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005d08:	f000 fb1e 	bl	8006348 <__errno>
 8005d0c:	230c      	movs	r3, #12
 8005d0e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005d16:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005d18:	bd08      	pop	{r3, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2000020c 	.word	0x2000020c
 8005d20:	20001e80 	.word	0x20001e80

08005d24 <_close>:

int _close(int file)
{
	return -1;
}
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	4770      	bx	lr

08005d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d2e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005d30:	2000      	movs	r0, #0
 8005d32:	4770      	bx	lr

08005d34 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005d34:	2001      	movs	r0, #1
 8005d36:	4770      	bx	lr

08005d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005d38:	2000      	movs	r0, #0
 8005d3a:	4770      	bx	lr

08005d3c <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005d3c:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <SystemInit+0x60>)
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005d42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005d52:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	f042 0201 	orr.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8005d5e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005d62:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8005d6a:	4462      	add	r2, ip
 8005d6c:	4002      	ands	r2, r0
 8005d6e:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005d70:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005d74:	f022 0205 	bic.w	r2, r2, #5
 8005d78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005d7c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005d88:	4a05      	ldr	r2, [pc, #20]	; (8005da0 <SystemInit+0x64>)
 8005d8a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005d8c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d94:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005d96:	6199      	str	r1, [r3, #24]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	e000ed00 	.word	0xe000ed00
 8005da0:	22041000 	.word	0x22041000

08005da4 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da8:	4924      	ldr	r1, [pc, #144]	; (8005e3c <SystemCoreClockUpdate+0x98>)
 8005daa:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dac:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005dae:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005db2:	f000 000c 	and.w	r0, r0, #12
{
 8005db6:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005db8:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc0:	280c      	cmp	r0, #12
 8005dc2:	d839      	bhi.n	8005e38 <SystemCoreClockUpdate+0x94>
 8005dc4:	e8df f000 	tbb	[pc, r0]
 8005dc8:	38383838 	.word	0x38383838
 8005dcc:	38383807 	.word	0x38383807
 8005dd0:	38383816 	.word	0x38383816
 8005dd4:	18          	.byte	0x18
 8005dd5:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8005dd8:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005dde:	481a      	ldr	r0, [pc, #104]	; (8005e48 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005de0:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8005de2:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005de4:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8005de8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8005dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8005df4:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <SystemCoreClockUpdate+0xa8>)
 8005df6:	e7ef      	b.n	8005dd8 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005df8:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005dfa:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005dfc:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005e00:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005e04:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005e06:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005e0a:	d10e      	bne.n	8005e2a <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8005e0c:	490d      	ldr	r1, [pc, #52]	; (8005e44 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 8005e0e:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e16:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005e18:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e1a:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005e1e:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e20:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005e22:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8005e24:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e28:	e7d6      	b.n	8005dd8 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8005e2a:	2803      	cmp	r0, #3
 8005e2c:	d101      	bne.n	8005e32 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 8005e2e:	4907      	ldr	r1, [pc, #28]	; (8005e4c <SystemCoreClockUpdate+0xa8>)
 8005e30:	e7ed      	b.n	8005e0e <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8005e32:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e36:	e7ec      	b.n	8005e12 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8005e38:	6014      	str	r4, [r2, #0]
      break;
 8005e3a:	e7ce      	b.n	8005dda <SystemCoreClockUpdate+0x36>
 8005e3c:	0800847c 	.word	0x0800847c
 8005e40:	2000011c 	.word	0x2000011c
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	0800841c 	.word	0x0800841c
 8005e4c:	01e84800 	.word	0x01e84800

08005e50 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8005e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8005e52:	2200      	movs	r2, #0
 8005e54:	490e      	ldr	r1, [pc, #56]	; (8005e90 <MX_USB_Device_Init+0x40>)
 8005e56:	480f      	ldr	r0, [pc, #60]	; (8005e94 <MX_USB_Device_Init+0x44>)
 8005e58:	f7fe ff9f 	bl	8004d9a <USBD_Init>
 8005e5c:	b108      	cbz	r0, 8005e62 <MX_USB_Device_Init+0x12>
    Error_Handler();
 8005e5e:	f7ff fde8 	bl	8005a32 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8005e62:	490d      	ldr	r1, [pc, #52]	; (8005e98 <MX_USB_Device_Init+0x48>)
 8005e64:	480b      	ldr	r0, [pc, #44]	; (8005e94 <MX_USB_Device_Init+0x44>)
 8005e66:	f7fe ffad 	bl	8004dc4 <USBD_RegisterClass>
 8005e6a:	b108      	cbz	r0, 8005e70 <MX_USB_Device_Init+0x20>
    Error_Handler();
 8005e6c:	f7ff fde1 	bl	8005a32 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8005e70:	490a      	ldr	r1, [pc, #40]	; (8005e9c <MX_USB_Device_Init+0x4c>)
 8005e72:	4808      	ldr	r0, [pc, #32]	; (8005e94 <MX_USB_Device_Init+0x44>)
 8005e74:	f7fe ff69 	bl	8004d4a <USBD_CDC_RegisterInterface>
 8005e78:	b108      	cbz	r0, 8005e7e <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8005e7a:	f7ff fdda 	bl	8005a32 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8005e7e:	4805      	ldr	r0, [pc, #20]	; (8005e94 <MX_USB_Device_Init+0x44>)
 8005e80:	f7fe ffa7 	bl	8004dd2 <USBD_Start>
 8005e84:	b118      	cbz	r0, 8005e8e <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8005e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005e8a:	f7ff bdd2 	b.w	8005a32 <Error_Handler>
 8005e8e:	bd08      	pop	{r3, pc}
 8005e90:	20000130 	.word	0x20000130
 8005e94:	20000740 	.word	0x20000740
 8005e98:	2000000c 	.word	0x2000000c
 8005e9c:	20000120 	.word	0x20000120

08005ea0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	4770      	bx	lr

08005ea4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	4770      	bx	lr

08005ea8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ea8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005eaa:	4c05      	ldr	r4, [pc, #20]	; (8005ec0 <CDC_Receive_FS+0x18>)
 8005eac:	4601      	mov	r1, r0
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f7fe ff5a 	bl	8004d68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7fe ff5d 	bl	8004d74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005eba:	2000      	movs	r0, #0
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000740 	.word	0x20000740

08005ec4 <CDC_Init_FS>:
{
 8005ec4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005ec6:	4c06      	ldr	r4, [pc, #24]	; (8005ee0 <CDC_Init_FS+0x1c>)
 8005ec8:	4906      	ldr	r1, [pc, #24]	; (8005ee4 <CDC_Init_FS+0x20>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7fe ff43 	bl	8004d58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ed2:	4905      	ldr	r1, [pc, #20]	; (8005ee8 <CDC_Init_FS+0x24>)
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f7fe ff47 	bl	8004d68 <USBD_CDC_SetRxBuffer>
}
 8005eda:	2000      	movs	r0, #0
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000740 	.word	0x20000740
 8005ee4:	20001204 	.word	0x20001204
 8005ee8:	20000a04 	.word	0x20000a04

08005eec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4604      	mov	r4, r0
 8005ef0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef2:	2214      	movs	r2, #20
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	a803      	add	r0, sp, #12
 8005ef8:	f000 fa50 	bl	800639c <memset>
  if(pcdHandle->Instance==USB)
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	4b16      	ldr	r3, [pc, #88]	; (8005f58 <HAL_PCD_MspInit+0x6c>)
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d127      	bne.n	8005f54 <HAL_PCD_MspInit+0x68>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005f04:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f08:	a903      	add	r1, sp, #12
 8005f0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005f12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005f1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005f20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f22:	2302      	movs	r3, #2
 8005f24:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2e:	f7fb f9a9 	bl	8001284 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f38:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005f3a:	6da3      	ldr	r3, [r4, #88]	; 0x58

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	2014      	movs	r0, #20
 8005f46:	4611      	mov	r1, r2
  (void)tmpreg;
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	f7fa fff3 	bl	8000f34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8005f4e:	2014      	movs	r0, #20
 8005f50:	f7fb f824 	bl	8000f9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005f54:	b008      	add	sp, #32
 8005f56:	bd10      	pop	{r4, pc}
 8005f58:	40006800 	.word	0x40006800

08005f5c <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8005f5c:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8005f60:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005f64:	f7fe bf4c 	b.w	8004e00 <USBD_LL_SetupStage>

08005f68 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8005f68:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005f6c:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005f70:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8005f74:	f7fe bf71 	b.w	8004e5a <USBD_LL_DataOutStage>

08005f78 <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8005f78:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005f7c:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f82:	f7fe bfa4 	b.w	8004ece <USBD_LL_DataInStage>

08005f86 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8005f86:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005f8a:	f7ff b839 	b.w	8005000 <USBD_LL_SOF>

08005f8e <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f8e:	6883      	ldr	r3, [r0, #8]
 8005f90:	2b02      	cmp	r3, #2
{ 
 8005f92:	b510      	push	{r4, lr}
 8005f94:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f96:	d001      	beq.n	8005f9c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8005f98:	f7ff fd4b 	bl	8005a32 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f9c:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	f7ff f817 	bl	8004fd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005fa6:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8005faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005fae:	f7fe bfea 	b.w	8004f86 <USBD_LL_Reset>
	...

08005fb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005fb8:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005fbc:	f7ff f80d 	bl	8004fda <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005fc0:	69a3      	ldr	r3, [r4, #24]
 8005fc2:	b123      	cbz	r3, 8005fce <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fc4:	4a02      	ldr	r2, [pc, #8]	; (8005fd0 <HAL_PCD_SuspendCallback+0x1c>)
 8005fc6:	6913      	ldr	r3, [r2, #16]
 8005fc8:	f043 0306 	orr.w	r3, r3, #6
 8005fcc:	6113      	str	r3, [r2, #16]
 8005fce:	bd10      	pop	{r4, pc}
 8005fd0:	e000ed00 	.word	0xe000ed00

08005fd4 <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005fd4:	6983      	ldr	r3, [r0, #24]
{
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8005fda:	b133      	cbz	r3, 8005fea <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fdc:	4a06      	ldr	r2, [pc, #24]	; (8005ff8 <HAL_PCD_ResumeCallback+0x24>)
 8005fde:	6913      	ldr	r3, [r2, #16]
 8005fe0:	f023 0306 	bic.w	r3, r3, #6
 8005fe4:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8005fe6:	f7ff fba7 	bl	8005738 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005fea:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 8005fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ff2:	f7fe bffb 	b.w	8004fec <USBD_LL_Resume>
 8005ff6:	bf00      	nop
 8005ff8:	e000ed00 	.word	0xe000ed00

08005ffc <USBD_LL_Init>:
{
 8005ffc:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 8005ffe:	4c20      	ldr	r4, [pc, #128]	; (8006080 <USBD_LL_Init+0x84>)
  pdev->pData = &hpcd_USB_FS;
 8006000:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
{
 8006004:	4605      	mov	r5, r0
  hpcd_USB_FS.pData = pdev;
 8006006:	f8c4 0270 	str.w	r0, [r4, #624]	; 0x270
  HAL_PWREx_EnableVddUSB();
 800600a:	f7fc f963 	bl	80022d4 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800600e:	481d      	ldr	r0, [pc, #116]	; (8006084 <USBD_LL_Init+0x88>)
 8006010:	2308      	movs	r3, #8
 8006012:	e884 0009 	stmia.w	r4, {r0, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006016:	2302      	movs	r3, #2
 8006018:	60a3      	str	r3, [r4, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800601a:	6123      	str	r3, [r4, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800601c:	4620      	mov	r0, r4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800601e:	2300      	movs	r3, #0
 8006020:	6163      	str	r3, [r4, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006022:	61a3      	str	r3, [r4, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006024:	61e3      	str	r3, [r4, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006026:	6223      	str	r3, [r4, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006028:	f7fb fd36 	bl	8001a98 <HAL_PCD_Init>
 800602c:	b108      	cbz	r0, 8006032 <USBD_LL_Init+0x36>
    Error_Handler( );
 800602e:	f7ff fd00 	bl	8005a32 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006032:	2200      	movs	r2, #0
 8006034:	4611      	mov	r1, r2
 8006036:	2318      	movs	r3, #24
 8006038:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800603c:	f7fc f90b 	bl	8002256 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006040:	2358      	movs	r3, #88	; 0x58
 8006042:	2200      	movs	r2, #0
 8006044:	2180      	movs	r1, #128	; 0x80
 8006046:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800604a:	f7fc f904 	bl	8002256 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800604e:	23c0      	movs	r3, #192	; 0xc0
 8006050:	2200      	movs	r2, #0
 8006052:	2181      	movs	r1, #129	; 0x81
 8006054:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8006058:	f7fc f8fd 	bl	8002256 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800605c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006060:	2200      	movs	r2, #0
 8006062:	2101      	movs	r1, #1
 8006064:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8006068:	f7fc f8f5 	bl	8002256 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800606c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006070:	2200      	movs	r2, #0
 8006072:	2182      	movs	r1, #130	; 0x82
 8006074:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8006078:	f7fc f8ed 	bl	8002256 <HAL_PCDEx_PMAConfig>
}
 800607c:	2000      	movs	r0, #0
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20001a04 	.word	0x20001a04
 8006084:	40006800 	.word	0x40006800

08006088 <USBD_LL_Start>:
{
 8006088:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800608a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800608e:	f7fb fd63 	bl	8001b58 <HAL_PCD_Start>
 8006092:	2803      	cmp	r0, #3
 8006094:	bf9a      	itte	ls
 8006096:	4b02      	ldrls	r3, [pc, #8]	; (80060a0 <USBD_LL_Start+0x18>)
 8006098:	5c18      	ldrbls	r0, [r3, r0]
 800609a:	2002      	movhi	r0, #2
}
 800609c:	bd08      	pop	{r3, pc}
 800609e:	bf00      	nop
 80060a0:	080084bc 	.word	0x080084bc

080060a4 <USBD_LL_OpenEP>:
{
 80060a4:	b510      	push	{r4, lr}
 80060a6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80060a8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060ac:	4613      	mov	r3, r2
 80060ae:	4622      	mov	r2, r4
 80060b0:	f7fb fd7b 	bl	8001baa <HAL_PCD_EP_Open>
 80060b4:	2803      	cmp	r0, #3
 80060b6:	bf9a      	itte	ls
 80060b8:	4b01      	ldrls	r3, [pc, #4]	; (80060c0 <USBD_LL_OpenEP+0x1c>)
 80060ba:	5c18      	ldrbls	r0, [r3, r0]
 80060bc:	2002      	movhi	r0, #2
}
 80060be:	bd10      	pop	{r4, pc}
 80060c0:	080084bc 	.word	0x080084bc

080060c4 <USBD_LL_CloseEP>:
{
 80060c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80060c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060ca:	f7fb fda3 	bl	8001c14 <HAL_PCD_EP_Close>
 80060ce:	2803      	cmp	r0, #3
 80060d0:	bf9a      	itte	ls
 80060d2:	4b02      	ldrls	r3, [pc, #8]	; (80060dc <USBD_LL_CloseEP+0x18>)
 80060d4:	5c18      	ldrbls	r0, [r3, r0]
 80060d6:	2002      	movhi	r0, #2
}
 80060d8:	bd08      	pop	{r3, pc}
 80060da:	bf00      	nop
 80060dc:	080084bc 	.word	0x080084bc

080060e0 <USBD_LL_StallEP>:
{
 80060e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80060e2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80060e6:	f7fc f847 	bl	8002178 <HAL_PCD_EP_SetStall>
 80060ea:	2803      	cmp	r0, #3
 80060ec:	bf9a      	itte	ls
 80060ee:	4b02      	ldrls	r3, [pc, #8]	; (80060f8 <USBD_LL_StallEP+0x18>)
 80060f0:	5c18      	ldrbls	r0, [r3, r0]
 80060f2:	2002      	movhi	r0, #2
}
 80060f4:	bd08      	pop	{r3, pc}
 80060f6:	bf00      	nop
 80060f8:	080084bc 	.word	0x080084bc

080060fc <USBD_LL_ClearStallEP>:
{
 80060fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80060fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006102:	f7fc f872 	bl	80021ea <HAL_PCD_EP_ClrStall>
 8006106:	2803      	cmp	r0, #3
 8006108:	bf9a      	itte	ls
 800610a:	4b02      	ldrls	r3, [pc, #8]	; (8006114 <USBD_LL_ClearStallEP+0x18>)
 800610c:	5c18      	ldrbls	r0, [r3, r0]
 800610e:	2002      	movhi	r0, #2
}
 8006110:	bd08      	pop	{r3, pc}
 8006112:	bf00      	nop
 8006114:	080084bc 	.word	0x080084bc

08006118 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006118:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800611a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800611e:	bf45      	ittet	mi
 8006120:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8006124:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006128:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800612c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006130:	bf58      	it	pl
 8006132:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
}
 8006136:	4770      	bx	lr

08006138 <USBD_LL_SetUSBAddress>:
{
 8006138:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800613a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800613e:	f7fb fd20 	bl	8001b82 <HAL_PCD_SetAddress>
 8006142:	2803      	cmp	r0, #3
 8006144:	bf9a      	itte	ls
 8006146:	4b02      	ldrls	r3, [pc, #8]	; (8006150 <USBD_LL_SetUSBAddress+0x18>)
 8006148:	5c18      	ldrbls	r0, [r3, r0]
 800614a:	2002      	movhi	r0, #2
}
 800614c:	bd08      	pop	{r3, pc}
 800614e:	bf00      	nop
 8006150:	080084bc 	.word	0x080084bc

08006154 <USBD_LL_Transmit>:
{
 8006154:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006156:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800615a:	f7fb fda6 	bl	8001caa <HAL_PCD_EP_Transmit>
 800615e:	2803      	cmp	r0, #3
 8006160:	bf9a      	itte	ls
 8006162:	4b02      	ldrls	r3, [pc, #8]	; (800616c <USBD_LL_Transmit+0x18>)
 8006164:	5c18      	ldrbls	r0, [r3, r0]
 8006166:	2002      	movhi	r0, #2
}
 8006168:	bd08      	pop	{r3, pc}
 800616a:	bf00      	nop
 800616c:	080084bc 	.word	0x080084bc

08006170 <USBD_LL_PrepareReceive>:
{
 8006170:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006172:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006176:	f7fb fd78 	bl	8001c6a <HAL_PCD_EP_Receive>
 800617a:	2803      	cmp	r0, #3
 800617c:	bf9a      	itte	ls
 800617e:	4b02      	ldrls	r3, [pc, #8]	; (8006188 <USBD_LL_PrepareReceive+0x18>)
 8006180:	5c18      	ldrbls	r0, [r3, r0]
 8006182:	2002      	movhi	r0, #2
}
 8006184:	bd08      	pop	{r3, pc}
 8006186:	bf00      	nop
 8006188:	080084bc 	.word	0x080084bc

0800618c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800618c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006190:	f7fb bd84 	b.w	8001c9c <HAL_PCD_EP_GetRxCount>

08006194 <HAL_PCDEx_LPM_Callback>:
{
 8006194:	b510      	push	{r4, lr}
 8006196:	4604      	mov	r4, r0
  switch (msg)
 8006198:	b111      	cbz	r1, 80061a0 <HAL_PCDEx_LPM_Callback+0xc>
 800619a:	2901      	cmp	r1, #1
 800619c:	d00f      	beq.n	80061be <HAL_PCDEx_LPM_Callback+0x2a>
 800619e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80061a0:	6983      	ldr	r3, [r0, #24]
 80061a2:	b133      	cbz	r3, 80061b2 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 80061a4:	f7ff fac8 	bl	8005738 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061a8:	4a0b      	ldr	r2, [pc, #44]	; (80061d8 <HAL_PCDEx_LPM_Callback+0x44>)
 80061aa:	6913      	ldr	r3, [r2, #16]
 80061ac:	f023 0306 	bic.w	r3, r3, #6
 80061b0:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80061b2:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 80061b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 80061ba:	f7fe bf17 	b.w	8004fec <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 80061be:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 80061c2:	f7fe ff0a 	bl	8004fda <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80061c6:	69a3      	ldr	r3, [r4, #24]
 80061c8:	b123      	cbz	r3, 80061d4 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061ca:	4a03      	ldr	r2, [pc, #12]	; (80061d8 <HAL_PCDEx_LPM_Callback+0x44>)
 80061cc:	6913      	ldr	r3, [r2, #16]
 80061ce:	f043 0306 	orr.w	r3, r3, #6
 80061d2:	6113      	str	r3, [r2, #16]
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	bf00      	nop
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <USBD_static_malloc>:
}
 80061dc:	4800      	ldr	r0, [pc, #0]	; (80061e0 <USBD_static_malloc+0x4>)
 80061de:	4770      	bx	lr
 80061e0:	20000210 	.word	0x20000210

080061e4 <USBD_static_free>:
{
 80061e4:	4770      	bx	lr
	...

080061e8 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80061e8:	2312      	movs	r3, #18
 80061ea:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 80061ec:	4800      	ldr	r0, [pc, #0]	; (80061f0 <USBD_CDC_DeviceDescriptor+0x8>)
 80061ee:	4770      	bx	lr
 80061f0:	20000150 	.word	0x20000150

080061f4 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80061f4:	2304      	movs	r3, #4
 80061f6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80061f8:	4800      	ldr	r0, [pc, #0]	; (80061fc <USBD_CDC_LangIDStrDescriptor+0x8>)
 80061fa:	4770      	bx	lr
 80061fc:	20000164 	.word	0x20000164

08006200 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8006200:	2300      	movs	r3, #0
{
 8006202:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006204:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8006206:	b2dc      	uxtb	r4, r3
 8006208:	42a2      	cmp	r2, r4
 800620a:	d800      	bhi.n	800620e <IntToUnicode+0xe>
  }
}
 800620c:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 800620e:	0f04      	lsrs	r4, r0, #28
 8006210:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006212:	bf94      	ite	ls
 8006214:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006216:	3437      	addhi	r4, #55	; 0x37
 8006218:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800621c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8006220:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8006222:	7065      	strb	r5, [r4, #1]
 8006224:	3301      	adds	r3, #1
 8006226:	e7ee      	b.n	8006206 <IntToUnicode+0x6>

08006228 <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006228:	231a      	movs	r3, #26
{
 800622a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800622c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <USBD_CDC_SerialStrDescriptor+0x2c>)
 8006230:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006232:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8006234:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8006236:	18c0      	adds	r0, r0, r3
 8006238:	d00a      	beq.n	8006250 <USBD_CDC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <USBD_CDC_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800623c:	4907      	ldr	r1, [pc, #28]	; (800625c <USBD_CDC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800623e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006240:	2208      	movs	r2, #8
 8006242:	f7ff ffdd 	bl	8006200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006246:	2204      	movs	r2, #4
 8006248:	4905      	ldr	r1, [pc, #20]	; (8006260 <USBD_CDC_SerialStrDescriptor+0x38>)
 800624a:	4620      	mov	r0, r4
 800624c:	f7ff ffd8 	bl	8006200 <IntToUnicode>
}
 8006250:	4804      	ldr	r0, [pc, #16]	; (8006264 <USBD_CDC_SerialStrDescriptor+0x3c>)
 8006252:	bd10      	pop	{r4, pc}
 8006254:	1fff7590 	.word	0x1fff7590
 8006258:	1fff7594 	.word	0x1fff7594
 800625c:	2000016a 	.word	0x2000016a
 8006260:	2000017a 	.word	0x2000017a
 8006264:	20000168 	.word	0x20000168

08006268 <USBD_CDC_ManufacturerStrDescriptor>:
{
 8006268:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800626a:	4c04      	ldr	r4, [pc, #16]	; (800627c <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 800626c:	4804      	ldr	r0, [pc, #16]	; (8006280 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 800626e:	460a      	mov	r2, r1
 8006270:	4621      	mov	r1, r4
 8006272:	f7ff f8d5 	bl	8005420 <USBD_GetString>
}
 8006276:	4620      	mov	r0, r4
 8006278:	bd10      	pop	{r4, pc}
 800627a:	bf00      	nop
 800627c:	20001c78 	.word	0x20001c78
 8006280:	080084d9 	.word	0x080084d9

08006284 <USBD_CDC_ProductStrDescriptor>:
{
 8006284:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8006286:	4c04      	ldr	r4, [pc, #16]	; (8006298 <USBD_CDC_ProductStrDescriptor+0x14>)
 8006288:	4804      	ldr	r0, [pc, #16]	; (800629c <USBD_CDC_ProductStrDescriptor+0x18>)
 800628a:	460a      	mov	r2, r1
 800628c:	4621      	mov	r1, r4
 800628e:	f7ff f8c7 	bl	8005420 <USBD_GetString>
}
 8006292:	4620      	mov	r0, r4
 8006294:	bd10      	pop	{r4, pc}
 8006296:	bf00      	nop
 8006298:	20001c78 	.word	0x20001c78
 800629c:	080084ec 	.word	0x080084ec

080062a0 <USBD_CDC_ConfigStrDescriptor>:
{
 80062a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80062a2:	4c04      	ldr	r4, [pc, #16]	; (80062b4 <USBD_CDC_ConfigStrDescriptor+0x14>)
 80062a4:	4804      	ldr	r0, [pc, #16]	; (80062b8 <USBD_CDC_ConfigStrDescriptor+0x18>)
 80062a6:	460a      	mov	r2, r1
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7ff f8b9 	bl	8005420 <USBD_GetString>
}
 80062ae:	4620      	mov	r0, r4
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	bf00      	nop
 80062b4:	20001c78 	.word	0x20001c78
 80062b8:	080084c0 	.word	0x080084c0

080062bc <USBD_CDC_InterfaceStrDescriptor>:
{
 80062bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80062be:	4c04      	ldr	r4, [pc, #16]	; (80062d0 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 80062c0:	4804      	ldr	r0, [pc, #16]	; (80062d4 <USBD_CDC_InterfaceStrDescriptor+0x18>)
 80062c2:	460a      	mov	r2, r1
 80062c4:	4621      	mov	r1, r4
 80062c6:	f7ff f8ab 	bl	8005420 <USBD_GetString>
}
 80062ca:	4620      	mov	r0, r4
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	bf00      	nop
 80062d0:	20001c78 	.word	0x20001c78
 80062d4:	080084cb 	.word	0x080084cb

080062d8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80062d8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062da:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062dc:	3304      	adds	r3, #4

080062de <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062de:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062e0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80062e2:	d3f9      	bcc.n	80062d8 <CopyDataInit>
  bx lr
 80062e4:	4770      	bx	lr

080062e6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80062e6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80062e8:	3004      	adds	r0, #4

080062ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80062ea:	4288      	cmp	r0, r1
  bcc FillZerobss
 80062ec:	d3fb      	bcc.n	80062e6 <FillZerobss>
  bx lr
 80062ee:	4770      	bx	lr

080062f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80062f0:	480c      	ldr	r0, [pc, #48]	; (8006324 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80062f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80062f4:	480c      	ldr	r0, [pc, #48]	; (8006328 <LoopForever+0x8>)
 80062f6:	490d      	ldr	r1, [pc, #52]	; (800632c <LoopForever+0xc>)
 80062f8:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <LoopForever+0x10>)
 80062fa:	2300      	movs	r3, #0
 80062fc:	f7ff ffef 	bl	80062de <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006300:	480c      	ldr	r0, [pc, #48]	; (8006334 <LoopForever+0x14>)
 8006302:	490d      	ldr	r1, [pc, #52]	; (8006338 <LoopForever+0x18>)
 8006304:	2300      	movs	r3, #0
 8006306:	f7ff fff0 	bl	80062ea <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800630a:	480c      	ldr	r0, [pc, #48]	; (800633c <LoopForever+0x1c>)
 800630c:	490c      	ldr	r1, [pc, #48]	; (8006340 <LoopForever+0x20>)
 800630e:	2300      	movs	r3, #0
 8006310:	f7ff ffeb 	bl	80062ea <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006314:	f7ff fd12 	bl	8005d3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006318:	f000 f81c 	bl	8006354 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800631c:	f7ff fa80 	bl	8005820 <main>

08006320 <LoopForever>:

LoopForever:
  b LoopForever
 8006320:	e7fe      	b.n	8006320 <LoopForever>
 8006322:	0000      	.short	0x0000
  ldr   r0, =_estack
 8006324:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006328:	20000004 	.word	0x20000004
 800632c:	200001ec 	.word	0x200001ec
 8006330:	080085f0 	.word	0x080085f0
  INIT_BSS _sbss, _ebss
 8006334:	200001ec 	.word	0x200001ec
 8006338:	20001e7c 	.word	0x20001e7c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800633c:	20030000 	.word	0x20030000
 8006340:	20030000 	.word	0x20030000

08006344 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006344:	e7fe      	b.n	8006344 <ADC1_IRQHandler>
	...

08006348 <__errno>:
 8006348:	4b01      	ldr	r3, [pc, #4]	; (8006350 <__errno+0x8>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000184 	.word	0x20000184

08006354 <__libc_init_array>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4e0d      	ldr	r6, [pc, #52]	; (800638c <__libc_init_array+0x38>)
 8006358:	4c0d      	ldr	r4, [pc, #52]	; (8006390 <__libc_init_array+0x3c>)
 800635a:	1ba4      	subs	r4, r4, r6
 800635c:	10a4      	asrs	r4, r4, #2
 800635e:	2500      	movs	r5, #0
 8006360:	42a5      	cmp	r5, r4
 8006362:	d109      	bne.n	8006378 <__libc_init_array+0x24>
 8006364:	4e0b      	ldr	r6, [pc, #44]	; (8006394 <__libc_init_array+0x40>)
 8006366:	4c0c      	ldr	r4, [pc, #48]	; (8006398 <__libc_init_array+0x44>)
 8006368:	f001 ffe2 	bl	8008330 <_init>
 800636c:	1ba4      	subs	r4, r4, r6
 800636e:	10a4      	asrs	r4, r4, #2
 8006370:	2500      	movs	r5, #0
 8006372:	42a5      	cmp	r5, r4
 8006374:	d105      	bne.n	8006382 <__libc_init_array+0x2e>
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800637c:	4798      	blx	r3
 800637e:	3501      	adds	r5, #1
 8006380:	e7ee      	b.n	8006360 <__libc_init_array+0xc>
 8006382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006386:	4798      	blx	r3
 8006388:	3501      	adds	r5, #1
 800638a:	e7f2      	b.n	8006372 <__libc_init_array+0x1e>
 800638c:	080085e8 	.word	0x080085e8
 8006390:	080085e8 	.word	0x080085e8
 8006394:	080085e8 	.word	0x080085e8
 8006398:	080085ec 	.word	0x080085ec

0800639c <memset>:
 800639c:	4402      	add	r2, r0
 800639e:	4603      	mov	r3, r0
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d100      	bne.n	80063a6 <memset+0xa>
 80063a4:	4770      	bx	lr
 80063a6:	f803 1b01 	strb.w	r1, [r3], #1
 80063aa:	e7f9      	b.n	80063a0 <memset+0x4>

080063ac <iprintf>:
 80063ac:	b40f      	push	{r0, r1, r2, r3}
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <iprintf+0x2c>)
 80063b0:	b513      	push	{r0, r1, r4, lr}
 80063b2:	681c      	ldr	r4, [r3, #0]
 80063b4:	b124      	cbz	r4, 80063c0 <iprintf+0x14>
 80063b6:	69a3      	ldr	r3, [r4, #24]
 80063b8:	b913      	cbnz	r3, 80063c0 <iprintf+0x14>
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fa24 	bl	8006808 <__sinit>
 80063c0:	ab05      	add	r3, sp, #20
 80063c2:	9a04      	ldr	r2, [sp, #16]
 80063c4:	68a1      	ldr	r1, [r4, #8]
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fbe1 	bl	8006b90 <_vfiprintf_r>
 80063ce:	b002      	add	sp, #8
 80063d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d4:	b004      	add	sp, #16
 80063d6:	4770      	bx	lr
 80063d8:	20000184 	.word	0x20000184

080063dc <_puts_r>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	460e      	mov	r6, r1
 80063e0:	4605      	mov	r5, r0
 80063e2:	b118      	cbz	r0, 80063ec <_puts_r+0x10>
 80063e4:	6983      	ldr	r3, [r0, #24]
 80063e6:	b90b      	cbnz	r3, 80063ec <_puts_r+0x10>
 80063e8:	f000 fa0e 	bl	8006808 <__sinit>
 80063ec:	69ab      	ldr	r3, [r5, #24]
 80063ee:	68ac      	ldr	r4, [r5, #8]
 80063f0:	b913      	cbnz	r3, 80063f8 <_puts_r+0x1c>
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 fa08 	bl	8006808 <__sinit>
 80063f8:	4b23      	ldr	r3, [pc, #140]	; (8006488 <_puts_r+0xac>)
 80063fa:	429c      	cmp	r4, r3
 80063fc:	d117      	bne.n	800642e <_puts_r+0x52>
 80063fe:	686c      	ldr	r4, [r5, #4]
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	071b      	lsls	r3, r3, #28
 8006404:	d51d      	bpl.n	8006442 <_puts_r+0x66>
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	b1db      	cbz	r3, 8006442 <_puts_r+0x66>
 800640a:	3e01      	subs	r6, #1
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006412:	3b01      	subs	r3, #1
 8006414:	60a3      	str	r3, [r4, #8]
 8006416:	b9e9      	cbnz	r1, 8006454 <_puts_r+0x78>
 8006418:	2b00      	cmp	r3, #0
 800641a:	da2e      	bge.n	800647a <_puts_r+0x9e>
 800641c:	4622      	mov	r2, r4
 800641e:	210a      	movs	r1, #10
 8006420:	4628      	mov	r0, r5
 8006422:	f000 f83f 	bl	80064a4 <__swbuf_r>
 8006426:	3001      	adds	r0, #1
 8006428:	d011      	beq.n	800644e <_puts_r+0x72>
 800642a:	200a      	movs	r0, #10
 800642c:	bd70      	pop	{r4, r5, r6, pc}
 800642e:	4b17      	ldr	r3, [pc, #92]	; (800648c <_puts_r+0xb0>)
 8006430:	429c      	cmp	r4, r3
 8006432:	d101      	bne.n	8006438 <_puts_r+0x5c>
 8006434:	68ac      	ldr	r4, [r5, #8]
 8006436:	e7e3      	b.n	8006400 <_puts_r+0x24>
 8006438:	4b15      	ldr	r3, [pc, #84]	; (8006490 <_puts_r+0xb4>)
 800643a:	429c      	cmp	r4, r3
 800643c:	bf08      	it	eq
 800643e:	68ec      	ldreq	r4, [r5, #12]
 8006440:	e7de      	b.n	8006400 <_puts_r+0x24>
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
 8006446:	f000 f87f 	bl	8006548 <__swsetup_r>
 800644a:	2800      	cmp	r0, #0
 800644c:	d0dd      	beq.n	800640a <_puts_r+0x2e>
 800644e:	f04f 30ff 	mov.w	r0, #4294967295
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	2b00      	cmp	r3, #0
 8006456:	da04      	bge.n	8006462 <_puts_r+0x86>
 8006458:	69a2      	ldr	r2, [r4, #24]
 800645a:	4293      	cmp	r3, r2
 800645c:	db06      	blt.n	800646c <_puts_r+0x90>
 800645e:	290a      	cmp	r1, #10
 8006460:	d004      	beq.n	800646c <_puts_r+0x90>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	6022      	str	r2, [r4, #0]
 8006468:	7019      	strb	r1, [r3, #0]
 800646a:	e7cf      	b.n	800640c <_puts_r+0x30>
 800646c:	4622      	mov	r2, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f000 f818 	bl	80064a4 <__swbuf_r>
 8006474:	3001      	adds	r0, #1
 8006476:	d1c9      	bne.n	800640c <_puts_r+0x30>
 8006478:	e7e9      	b.n	800644e <_puts_r+0x72>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	200a      	movs	r0, #10
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	7018      	strb	r0, [r3, #0]
 8006484:	bd70      	pop	{r4, r5, r6, pc}
 8006486:	bf00      	nop
 8006488:	08008528 	.word	0x08008528
 800648c:	08008548 	.word	0x08008548
 8006490:	08008508 	.word	0x08008508

08006494 <puts>:
 8006494:	4b02      	ldr	r3, [pc, #8]	; (80064a0 <puts+0xc>)
 8006496:	4601      	mov	r1, r0
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	f7ff bf9f 	b.w	80063dc <_puts_r>
 800649e:	bf00      	nop
 80064a0:	20000184 	.word	0x20000184

080064a4 <__swbuf_r>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	460e      	mov	r6, r1
 80064a8:	4614      	mov	r4, r2
 80064aa:	4605      	mov	r5, r0
 80064ac:	b118      	cbz	r0, 80064b6 <__swbuf_r+0x12>
 80064ae:	6983      	ldr	r3, [r0, #24]
 80064b0:	b90b      	cbnz	r3, 80064b6 <__swbuf_r+0x12>
 80064b2:	f000 f9a9 	bl	8006808 <__sinit>
 80064b6:	4b21      	ldr	r3, [pc, #132]	; (800653c <__swbuf_r+0x98>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d12a      	bne.n	8006512 <__swbuf_r+0x6e>
 80064bc:	686c      	ldr	r4, [r5, #4]
 80064be:	69a3      	ldr	r3, [r4, #24]
 80064c0:	60a3      	str	r3, [r4, #8]
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	071a      	lsls	r2, r3, #28
 80064c6:	d52e      	bpl.n	8006526 <__swbuf_r+0x82>
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	b363      	cbz	r3, 8006526 <__swbuf_r+0x82>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	1ac0      	subs	r0, r0, r3
 80064d2:	6963      	ldr	r3, [r4, #20]
 80064d4:	b2f6      	uxtb	r6, r6
 80064d6:	4298      	cmp	r0, r3
 80064d8:	4637      	mov	r7, r6
 80064da:	db04      	blt.n	80064e6 <__swbuf_r+0x42>
 80064dc:	4621      	mov	r1, r4
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f928 	bl	8006734 <_fflush_r>
 80064e4:	bb28      	cbnz	r0, 8006532 <__swbuf_r+0x8e>
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	60a3      	str	r3, [r4, #8]
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	6022      	str	r2, [r4, #0]
 80064f2:	701e      	strb	r6, [r3, #0]
 80064f4:	6963      	ldr	r3, [r4, #20]
 80064f6:	3001      	adds	r0, #1
 80064f8:	4298      	cmp	r0, r3
 80064fa:	d004      	beq.n	8006506 <__swbuf_r+0x62>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	07db      	lsls	r3, r3, #31
 8006500:	d519      	bpl.n	8006536 <__swbuf_r+0x92>
 8006502:	2e0a      	cmp	r6, #10
 8006504:	d117      	bne.n	8006536 <__swbuf_r+0x92>
 8006506:	4621      	mov	r1, r4
 8006508:	4628      	mov	r0, r5
 800650a:	f000 f913 	bl	8006734 <_fflush_r>
 800650e:	b190      	cbz	r0, 8006536 <__swbuf_r+0x92>
 8006510:	e00f      	b.n	8006532 <__swbuf_r+0x8e>
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <__swbuf_r+0x9c>)
 8006514:	429c      	cmp	r4, r3
 8006516:	d101      	bne.n	800651c <__swbuf_r+0x78>
 8006518:	68ac      	ldr	r4, [r5, #8]
 800651a:	e7d0      	b.n	80064be <__swbuf_r+0x1a>
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <__swbuf_r+0xa0>)
 800651e:	429c      	cmp	r4, r3
 8006520:	bf08      	it	eq
 8006522:	68ec      	ldreq	r4, [r5, #12]
 8006524:	e7cb      	b.n	80064be <__swbuf_r+0x1a>
 8006526:	4621      	mov	r1, r4
 8006528:	4628      	mov	r0, r5
 800652a:	f000 f80d 	bl	8006548 <__swsetup_r>
 800652e:	2800      	cmp	r0, #0
 8006530:	d0cc      	beq.n	80064cc <__swbuf_r+0x28>
 8006532:	f04f 37ff 	mov.w	r7, #4294967295
 8006536:	4638      	mov	r0, r7
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653a:	bf00      	nop
 800653c:	08008528 	.word	0x08008528
 8006540:	08008548 	.word	0x08008548
 8006544:	08008508 	.word	0x08008508

08006548 <__swsetup_r>:
 8006548:	4b32      	ldr	r3, [pc, #200]	; (8006614 <__swsetup_r+0xcc>)
 800654a:	b570      	push	{r4, r5, r6, lr}
 800654c:	681d      	ldr	r5, [r3, #0]
 800654e:	4606      	mov	r6, r0
 8006550:	460c      	mov	r4, r1
 8006552:	b125      	cbz	r5, 800655e <__swsetup_r+0x16>
 8006554:	69ab      	ldr	r3, [r5, #24]
 8006556:	b913      	cbnz	r3, 800655e <__swsetup_r+0x16>
 8006558:	4628      	mov	r0, r5
 800655a:	f000 f955 	bl	8006808 <__sinit>
 800655e:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <__swsetup_r+0xd0>)
 8006560:	429c      	cmp	r4, r3
 8006562:	d10f      	bne.n	8006584 <__swsetup_r+0x3c>
 8006564:	686c      	ldr	r4, [r5, #4]
 8006566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656a:	b29a      	uxth	r2, r3
 800656c:	0715      	lsls	r5, r2, #28
 800656e:	d42c      	bmi.n	80065ca <__swsetup_r+0x82>
 8006570:	06d0      	lsls	r0, r2, #27
 8006572:	d411      	bmi.n	8006598 <__swsetup_r+0x50>
 8006574:	2209      	movs	r2, #9
 8006576:	6032      	str	r2, [r6, #0]
 8006578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657c:	81a3      	strh	r3, [r4, #12]
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	4b25      	ldr	r3, [pc, #148]	; (800661c <__swsetup_r+0xd4>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d101      	bne.n	800658e <__swsetup_r+0x46>
 800658a:	68ac      	ldr	r4, [r5, #8]
 800658c:	e7eb      	b.n	8006566 <__swsetup_r+0x1e>
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <__swsetup_r+0xd8>)
 8006590:	429c      	cmp	r4, r3
 8006592:	bf08      	it	eq
 8006594:	68ec      	ldreq	r4, [r5, #12]
 8006596:	e7e6      	b.n	8006566 <__swsetup_r+0x1e>
 8006598:	0751      	lsls	r1, r2, #29
 800659a:	d512      	bpl.n	80065c2 <__swsetup_r+0x7a>
 800659c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800659e:	b141      	cbz	r1, 80065b2 <__swsetup_r+0x6a>
 80065a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065a4:	4299      	cmp	r1, r3
 80065a6:	d002      	beq.n	80065ae <__swsetup_r+0x66>
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 fa1b 	bl	80069e4 <_free_r>
 80065ae:	2300      	movs	r3, #0
 80065b0:	6363      	str	r3, [r4, #52]	; 0x34
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065b8:	81a3      	strh	r3, [r4, #12]
 80065ba:	2300      	movs	r3, #0
 80065bc:	6063      	str	r3, [r4, #4]
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f043 0308 	orr.w	r3, r3, #8
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	b94b      	cbnz	r3, 80065e2 <__swsetup_r+0x9a>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d8:	d003      	beq.n	80065e2 <__swsetup_r+0x9a>
 80065da:	4621      	mov	r1, r4
 80065dc:	4630      	mov	r0, r6
 80065de:	f000 f9c1 	bl	8006964 <__smakebuf_r>
 80065e2:	89a2      	ldrh	r2, [r4, #12]
 80065e4:	f012 0301 	ands.w	r3, r2, #1
 80065e8:	d00c      	beq.n	8006604 <__swsetup_r+0xbc>
 80065ea:	2300      	movs	r3, #0
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	6963      	ldr	r3, [r4, #20]
 80065f0:	425b      	negs	r3, r3
 80065f2:	61a3      	str	r3, [r4, #24]
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	b953      	cbnz	r3, 800660e <__swsetup_r+0xc6>
 80065f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006600:	d1ba      	bne.n	8006578 <__swsetup_r+0x30>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	0792      	lsls	r2, r2, #30
 8006606:	bf58      	it	pl
 8006608:	6963      	ldrpl	r3, [r4, #20]
 800660a:	60a3      	str	r3, [r4, #8]
 800660c:	e7f2      	b.n	80065f4 <__swsetup_r+0xac>
 800660e:	2000      	movs	r0, #0
 8006610:	e7f7      	b.n	8006602 <__swsetup_r+0xba>
 8006612:	bf00      	nop
 8006614:	20000184 	.word	0x20000184
 8006618:	08008528 	.word	0x08008528
 800661c:	08008548 	.word	0x08008548
 8006620:	08008508 	.word	0x08008508

08006624 <__sflush_r>:
 8006624:	898a      	ldrh	r2, [r1, #12]
 8006626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	4605      	mov	r5, r0
 800662c:	0710      	lsls	r0, r2, #28
 800662e:	460c      	mov	r4, r1
 8006630:	d45a      	bmi.n	80066e8 <__sflush_r+0xc4>
 8006632:	684b      	ldr	r3, [r1, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc05      	bgt.n	8006644 <__sflush_r+0x20>
 8006638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	dc02      	bgt.n	8006644 <__sflush_r+0x20>
 800663e:	2000      	movs	r0, #0
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006646:	2e00      	cmp	r6, #0
 8006648:	d0f9      	beq.n	800663e <__sflush_r+0x1a>
 800664a:	2300      	movs	r3, #0
 800664c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006650:	682f      	ldr	r7, [r5, #0]
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	d033      	beq.n	80066be <__sflush_r+0x9a>
 8006656:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	075a      	lsls	r2, r3, #29
 800665c:	d505      	bpl.n	800666a <__sflush_r+0x46>
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	1ac0      	subs	r0, r0, r3
 8006662:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006664:	b10b      	cbz	r3, 800666a <__sflush_r+0x46>
 8006666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006668:	1ac0      	subs	r0, r0, r3
 800666a:	2300      	movs	r3, #0
 800666c:	4602      	mov	r2, r0
 800666e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006670:	6a21      	ldr	r1, [r4, #32]
 8006672:	4628      	mov	r0, r5
 8006674:	47b0      	blx	r6
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	d106      	bne.n	800668a <__sflush_r+0x66>
 800667c:	6829      	ldr	r1, [r5, #0]
 800667e:	291d      	cmp	r1, #29
 8006680:	d84b      	bhi.n	800671a <__sflush_r+0xf6>
 8006682:	4a2b      	ldr	r2, [pc, #172]	; (8006730 <__sflush_r+0x10c>)
 8006684:	40ca      	lsrs	r2, r1
 8006686:	07d6      	lsls	r6, r2, #31
 8006688:	d547      	bpl.n	800671a <__sflush_r+0xf6>
 800668a:	2200      	movs	r2, #0
 800668c:	6062      	str	r2, [r4, #4]
 800668e:	04d9      	lsls	r1, r3, #19
 8006690:	6922      	ldr	r2, [r4, #16]
 8006692:	6022      	str	r2, [r4, #0]
 8006694:	d504      	bpl.n	80066a0 <__sflush_r+0x7c>
 8006696:	1c42      	adds	r2, r0, #1
 8006698:	d101      	bne.n	800669e <__sflush_r+0x7a>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	b903      	cbnz	r3, 80066a0 <__sflush_r+0x7c>
 800669e:	6560      	str	r0, [r4, #84]	; 0x54
 80066a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a2:	602f      	str	r7, [r5, #0]
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d0ca      	beq.n	800663e <__sflush_r+0x1a>
 80066a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ac:	4299      	cmp	r1, r3
 80066ae:	d002      	beq.n	80066b6 <__sflush_r+0x92>
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f997 	bl	80069e4 <_free_r>
 80066b6:	2000      	movs	r0, #0
 80066b8:	6360      	str	r0, [r4, #52]	; 0x34
 80066ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066be:	6a21      	ldr	r1, [r4, #32]
 80066c0:	2301      	movs	r3, #1
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b0      	blx	r6
 80066c6:	1c41      	adds	r1, r0, #1
 80066c8:	d1c6      	bne.n	8006658 <__sflush_r+0x34>
 80066ca:	682b      	ldr	r3, [r5, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0c3      	beq.n	8006658 <__sflush_r+0x34>
 80066d0:	2b1d      	cmp	r3, #29
 80066d2:	d001      	beq.n	80066d8 <__sflush_r+0xb4>
 80066d4:	2b16      	cmp	r3, #22
 80066d6:	d101      	bne.n	80066dc <__sflush_r+0xb8>
 80066d8:	602f      	str	r7, [r5, #0]
 80066da:	e7b0      	b.n	800663e <__sflush_r+0x1a>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	690f      	ldr	r7, [r1, #16]
 80066ea:	2f00      	cmp	r7, #0
 80066ec:	d0a7      	beq.n	800663e <__sflush_r+0x1a>
 80066ee:	0793      	lsls	r3, r2, #30
 80066f0:	680e      	ldr	r6, [r1, #0]
 80066f2:	bf08      	it	eq
 80066f4:	694b      	ldreq	r3, [r1, #20]
 80066f6:	600f      	str	r7, [r1, #0]
 80066f8:	bf18      	it	ne
 80066fa:	2300      	movne	r3, #0
 80066fc:	eba6 0807 	sub.w	r8, r6, r7
 8006700:	608b      	str	r3, [r1, #8]
 8006702:	f1b8 0f00 	cmp.w	r8, #0
 8006706:	dd9a      	ble.n	800663e <__sflush_r+0x1a>
 8006708:	4643      	mov	r3, r8
 800670a:	463a      	mov	r2, r7
 800670c:	6a21      	ldr	r1, [r4, #32]
 800670e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006710:	4628      	mov	r0, r5
 8006712:	47b0      	blx	r6
 8006714:	2800      	cmp	r0, #0
 8006716:	dc07      	bgt.n	8006728 <__sflush_r+0x104>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	4407      	add	r7, r0
 800672a:	eba8 0800 	sub.w	r8, r8, r0
 800672e:	e7e8      	b.n	8006702 <__sflush_r+0xde>
 8006730:	20400001 	.word	0x20400001

08006734 <_fflush_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	690b      	ldr	r3, [r1, #16]
 8006738:	4605      	mov	r5, r0
 800673a:	460c      	mov	r4, r1
 800673c:	b1db      	cbz	r3, 8006776 <_fflush_r+0x42>
 800673e:	b118      	cbz	r0, 8006748 <_fflush_r+0x14>
 8006740:	6983      	ldr	r3, [r0, #24]
 8006742:	b90b      	cbnz	r3, 8006748 <_fflush_r+0x14>
 8006744:	f000 f860 	bl	8006808 <__sinit>
 8006748:	4b0c      	ldr	r3, [pc, #48]	; (800677c <_fflush_r+0x48>)
 800674a:	429c      	cmp	r4, r3
 800674c:	d109      	bne.n	8006762 <_fflush_r+0x2e>
 800674e:	686c      	ldr	r4, [r5, #4]
 8006750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006754:	b17b      	cbz	r3, 8006776 <_fflush_r+0x42>
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800675e:	f7ff bf61 	b.w	8006624 <__sflush_r>
 8006762:	4b07      	ldr	r3, [pc, #28]	; (8006780 <_fflush_r+0x4c>)
 8006764:	429c      	cmp	r4, r3
 8006766:	d101      	bne.n	800676c <_fflush_r+0x38>
 8006768:	68ac      	ldr	r4, [r5, #8]
 800676a:	e7f1      	b.n	8006750 <_fflush_r+0x1c>
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <_fflush_r+0x50>)
 800676e:	429c      	cmp	r4, r3
 8006770:	bf08      	it	eq
 8006772:	68ec      	ldreq	r4, [r5, #12]
 8006774:	e7ec      	b.n	8006750 <_fflush_r+0x1c>
 8006776:	2000      	movs	r0, #0
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	bf00      	nop
 800677c:	08008528 	.word	0x08008528
 8006780:	08008548 	.word	0x08008548
 8006784:	08008508 	.word	0x08008508

08006788 <_cleanup_r>:
 8006788:	4901      	ldr	r1, [pc, #4]	; (8006790 <_cleanup_r+0x8>)
 800678a:	f000 b8a9 	b.w	80068e0 <_fwalk_reent>
 800678e:	bf00      	nop
 8006790:	08006735 	.word	0x08006735

08006794 <std.isra.0>:
 8006794:	2300      	movs	r3, #0
 8006796:	b510      	push	{r4, lr}
 8006798:	4604      	mov	r4, r0
 800679a:	6003      	str	r3, [r0, #0]
 800679c:	6043      	str	r3, [r0, #4]
 800679e:	6083      	str	r3, [r0, #8]
 80067a0:	8181      	strh	r1, [r0, #12]
 80067a2:	6643      	str	r3, [r0, #100]	; 0x64
 80067a4:	81c2      	strh	r2, [r0, #14]
 80067a6:	6103      	str	r3, [r0, #16]
 80067a8:	6143      	str	r3, [r0, #20]
 80067aa:	6183      	str	r3, [r0, #24]
 80067ac:	4619      	mov	r1, r3
 80067ae:	2208      	movs	r2, #8
 80067b0:	305c      	adds	r0, #92	; 0x5c
 80067b2:	f7ff fdf3 	bl	800639c <memset>
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <std.isra.0+0x38>)
 80067b8:	6263      	str	r3, [r4, #36]	; 0x24
 80067ba:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <std.isra.0+0x3c>)
 80067bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <std.isra.0+0x40>)
 80067c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <std.isra.0+0x44>)
 80067c4:	6224      	str	r4, [r4, #32]
 80067c6:	6323      	str	r3, [r4, #48]	; 0x30
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	08007109 	.word	0x08007109
 80067d0:	0800712b 	.word	0x0800712b
 80067d4:	08007163 	.word	0x08007163
 80067d8:	08007187 	.word	0x08007187

080067dc <__sfmoreglue>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	1e4a      	subs	r2, r1, #1
 80067e0:	2568      	movs	r5, #104	; 0x68
 80067e2:	4355      	muls	r5, r2
 80067e4:	460e      	mov	r6, r1
 80067e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067ea:	f000 f949 	bl	8006a80 <_malloc_r>
 80067ee:	4604      	mov	r4, r0
 80067f0:	b140      	cbz	r0, 8006804 <__sfmoreglue+0x28>
 80067f2:	2100      	movs	r1, #0
 80067f4:	e880 0042 	stmia.w	r0, {r1, r6}
 80067f8:	300c      	adds	r0, #12
 80067fa:	60a0      	str	r0, [r4, #8]
 80067fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006800:	f7ff fdcc 	bl	800639c <memset>
 8006804:	4620      	mov	r0, r4
 8006806:	bd70      	pop	{r4, r5, r6, pc}

08006808 <__sinit>:
 8006808:	6983      	ldr	r3, [r0, #24]
 800680a:	b510      	push	{r4, lr}
 800680c:	4604      	mov	r4, r0
 800680e:	bb33      	cbnz	r3, 800685e <__sinit+0x56>
 8006810:	6483      	str	r3, [r0, #72]	; 0x48
 8006812:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006814:	6503      	str	r3, [r0, #80]	; 0x50
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <__sinit+0x58>)
 8006818:	4a12      	ldr	r2, [pc, #72]	; (8006864 <__sinit+0x5c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6282      	str	r2, [r0, #40]	; 0x28
 800681e:	4298      	cmp	r0, r3
 8006820:	bf04      	itt	eq
 8006822:	2301      	moveq	r3, #1
 8006824:	6183      	streq	r3, [r0, #24]
 8006826:	f000 f81f 	bl	8006868 <__sfp>
 800682a:	6060      	str	r0, [r4, #4]
 800682c:	4620      	mov	r0, r4
 800682e:	f000 f81b 	bl	8006868 <__sfp>
 8006832:	60a0      	str	r0, [r4, #8]
 8006834:	4620      	mov	r0, r4
 8006836:	f000 f817 	bl	8006868 <__sfp>
 800683a:	2200      	movs	r2, #0
 800683c:	60e0      	str	r0, [r4, #12]
 800683e:	2104      	movs	r1, #4
 8006840:	6860      	ldr	r0, [r4, #4]
 8006842:	f7ff ffa7 	bl	8006794 <std.isra.0>
 8006846:	2201      	movs	r2, #1
 8006848:	2109      	movs	r1, #9
 800684a:	68a0      	ldr	r0, [r4, #8]
 800684c:	f7ff ffa2 	bl	8006794 <std.isra.0>
 8006850:	2202      	movs	r2, #2
 8006852:	2112      	movs	r1, #18
 8006854:	68e0      	ldr	r0, [r4, #12]
 8006856:	f7ff ff9d 	bl	8006794 <std.isra.0>
 800685a:	2301      	movs	r3, #1
 800685c:	61a3      	str	r3, [r4, #24]
 800685e:	bd10      	pop	{r4, pc}
 8006860:	08008504 	.word	0x08008504
 8006864:	08006789 	.word	0x08006789

08006868 <__sfp>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	4b1c      	ldr	r3, [pc, #112]	; (80068dc <__sfp+0x74>)
 800686c:	681e      	ldr	r6, [r3, #0]
 800686e:	69b3      	ldr	r3, [r6, #24]
 8006870:	4607      	mov	r7, r0
 8006872:	b913      	cbnz	r3, 800687a <__sfp+0x12>
 8006874:	4630      	mov	r0, r6
 8006876:	f7ff ffc7 	bl	8006808 <__sinit>
 800687a:	3648      	adds	r6, #72	; 0x48
 800687c:	68b4      	ldr	r4, [r6, #8]
 800687e:	6873      	ldr	r3, [r6, #4]
 8006880:	3b01      	subs	r3, #1
 8006882:	d503      	bpl.n	800688c <__sfp+0x24>
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	b133      	cbz	r3, 8006896 <__sfp+0x2e>
 8006888:	6836      	ldr	r6, [r6, #0]
 800688a:	e7f7      	b.n	800687c <__sfp+0x14>
 800688c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006890:	b16d      	cbz	r5, 80068ae <__sfp+0x46>
 8006892:	3468      	adds	r4, #104	; 0x68
 8006894:	e7f4      	b.n	8006880 <__sfp+0x18>
 8006896:	2104      	movs	r1, #4
 8006898:	4638      	mov	r0, r7
 800689a:	f7ff ff9f 	bl	80067dc <__sfmoreglue>
 800689e:	6030      	str	r0, [r6, #0]
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d1f1      	bne.n	8006888 <__sfp+0x20>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4604      	mov	r4, r0
 80068aa:	4620      	mov	r0, r4
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068b2:	81e3      	strh	r3, [r4, #14]
 80068b4:	2301      	movs	r3, #1
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	6665      	str	r5, [r4, #100]	; 0x64
 80068ba:	6025      	str	r5, [r4, #0]
 80068bc:	60a5      	str	r5, [r4, #8]
 80068be:	6065      	str	r5, [r4, #4]
 80068c0:	6125      	str	r5, [r4, #16]
 80068c2:	6165      	str	r5, [r4, #20]
 80068c4:	61a5      	str	r5, [r4, #24]
 80068c6:	2208      	movs	r2, #8
 80068c8:	4629      	mov	r1, r5
 80068ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068ce:	f7ff fd65 	bl	800639c <memset>
 80068d2:	6365      	str	r5, [r4, #52]	; 0x34
 80068d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80068d6:	64a5      	str	r5, [r4, #72]	; 0x48
 80068d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80068da:	e7e6      	b.n	80068aa <__sfp+0x42>
 80068dc:	08008504 	.word	0x08008504

080068e0 <_fwalk_reent>:
 80068e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e4:	4680      	mov	r8, r0
 80068e6:	4689      	mov	r9, r1
 80068e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068ec:	2600      	movs	r6, #0
 80068ee:	b914      	cbnz	r4, 80068f6 <_fwalk_reent+0x16>
 80068f0:	4630      	mov	r0, r6
 80068f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f6:	68a5      	ldr	r5, [r4, #8]
 80068f8:	6867      	ldr	r7, [r4, #4]
 80068fa:	3f01      	subs	r7, #1
 80068fc:	d501      	bpl.n	8006902 <_fwalk_reent+0x22>
 80068fe:	6824      	ldr	r4, [r4, #0]
 8006900:	e7f5      	b.n	80068ee <_fwalk_reent+0xe>
 8006902:	89ab      	ldrh	r3, [r5, #12]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d907      	bls.n	8006918 <_fwalk_reent+0x38>
 8006908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800690c:	3301      	adds	r3, #1
 800690e:	d003      	beq.n	8006918 <_fwalk_reent+0x38>
 8006910:	4629      	mov	r1, r5
 8006912:	4640      	mov	r0, r8
 8006914:	47c8      	blx	r9
 8006916:	4306      	orrs	r6, r0
 8006918:	3568      	adds	r5, #104	; 0x68
 800691a:	e7ee      	b.n	80068fa <_fwalk_reent+0x1a>

0800691c <__swhatbuf_r>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	460e      	mov	r6, r1
 8006920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006924:	2900      	cmp	r1, #0
 8006926:	b090      	sub	sp, #64	; 0x40
 8006928:	4614      	mov	r4, r2
 800692a:	461d      	mov	r5, r3
 800692c:	da07      	bge.n	800693e <__swhatbuf_r+0x22>
 800692e:	2300      	movs	r3, #0
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	89b3      	ldrh	r3, [r6, #12]
 8006934:	061a      	lsls	r2, r3, #24
 8006936:	d410      	bmi.n	800695a <__swhatbuf_r+0x3e>
 8006938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800693c:	e00e      	b.n	800695c <__swhatbuf_r+0x40>
 800693e:	aa01      	add	r2, sp, #4
 8006940:	f000 fc48 	bl	80071d4 <_fstat_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	dbf2      	blt.n	800692e <__swhatbuf_r+0x12>
 8006948:	9a02      	ldr	r2, [sp, #8]
 800694a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800694e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006952:	425a      	negs	r2, r3
 8006954:	415a      	adcs	r2, r3
 8006956:	602a      	str	r2, [r5, #0]
 8006958:	e7ee      	b.n	8006938 <__swhatbuf_r+0x1c>
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	2000      	movs	r0, #0
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	b010      	add	sp, #64	; 0x40
 8006962:	bd70      	pop	{r4, r5, r6, pc}

08006964 <__smakebuf_r>:
 8006964:	898b      	ldrh	r3, [r1, #12]
 8006966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006968:	079d      	lsls	r5, r3, #30
 800696a:	4606      	mov	r6, r0
 800696c:	460c      	mov	r4, r1
 800696e:	d507      	bpl.n	8006980 <__smakebuf_r+0x1c>
 8006970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	2301      	movs	r3, #1
 800697a:	6163      	str	r3, [r4, #20]
 800697c:	b002      	add	sp, #8
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	ab01      	add	r3, sp, #4
 8006982:	466a      	mov	r2, sp
 8006984:	f7ff ffca 	bl	800691c <__swhatbuf_r>
 8006988:	9900      	ldr	r1, [sp, #0]
 800698a:	4605      	mov	r5, r0
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f877 	bl	8006a80 <_malloc_r>
 8006992:	b948      	cbnz	r0, 80069a8 <__smakebuf_r+0x44>
 8006994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006998:	059a      	lsls	r2, r3, #22
 800699a:	d4ef      	bmi.n	800697c <__smakebuf_r+0x18>
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	e7e3      	b.n	8006970 <__smakebuf_r+0xc>
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <__smakebuf_r+0x7c>)
 80069aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	6020      	str	r0, [r4, #0]
 80069b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	9b00      	ldr	r3, [sp, #0]
 80069b8:	6163      	str	r3, [r4, #20]
 80069ba:	9b01      	ldr	r3, [sp, #4]
 80069bc:	6120      	str	r0, [r4, #16]
 80069be:	b15b      	cbz	r3, 80069d8 <__smakebuf_r+0x74>
 80069c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069c4:	4630      	mov	r0, r6
 80069c6:	f000 fc17 	bl	80071f8 <_isatty_r>
 80069ca:	b128      	cbz	r0, 80069d8 <__smakebuf_r+0x74>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	f043 0301 	orr.w	r3, r3, #1
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	431d      	orrs	r5, r3
 80069dc:	81a5      	strh	r5, [r4, #12]
 80069de:	e7cd      	b.n	800697c <__smakebuf_r+0x18>
 80069e0:	08006789 	.word	0x08006789

080069e4 <_free_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4605      	mov	r5, r0
 80069e8:	2900      	cmp	r1, #0
 80069ea:	d045      	beq.n	8006a78 <_free_r+0x94>
 80069ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f0:	1f0c      	subs	r4, r1, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bfb8      	it	lt
 80069f6:	18e4      	addlt	r4, r4, r3
 80069f8:	f000 fc20 	bl	800723c <__malloc_lock>
 80069fc:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <_free_r+0x98>)
 80069fe:	6813      	ldr	r3, [r2, #0]
 8006a00:	4610      	mov	r0, r2
 8006a02:	b933      	cbnz	r3, 8006a12 <_free_r+0x2e>
 8006a04:	6063      	str	r3, [r4, #4]
 8006a06:	6014      	str	r4, [r2, #0]
 8006a08:	4628      	mov	r0, r5
 8006a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a0e:	f000 bc16 	b.w	800723e <__malloc_unlock>
 8006a12:	42a3      	cmp	r3, r4
 8006a14:	d90c      	bls.n	8006a30 <_free_r+0x4c>
 8006a16:	6821      	ldr	r1, [r4, #0]
 8006a18:	1862      	adds	r2, r4, r1
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	bf04      	itt	eq
 8006a1e:	681a      	ldreq	r2, [r3, #0]
 8006a20:	685b      	ldreq	r3, [r3, #4]
 8006a22:	6063      	str	r3, [r4, #4]
 8006a24:	bf04      	itt	eq
 8006a26:	1852      	addeq	r2, r2, r1
 8006a28:	6022      	streq	r2, [r4, #0]
 8006a2a:	6004      	str	r4, [r0, #0]
 8006a2c:	e7ec      	b.n	8006a08 <_free_r+0x24>
 8006a2e:	4613      	mov	r3, r2
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	b10a      	cbz	r2, 8006a38 <_free_r+0x54>
 8006a34:	42a2      	cmp	r2, r4
 8006a36:	d9fa      	bls.n	8006a2e <_free_r+0x4a>
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	1858      	adds	r0, r3, r1
 8006a3c:	42a0      	cmp	r0, r4
 8006a3e:	d10b      	bne.n	8006a58 <_free_r+0x74>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	4401      	add	r1, r0
 8006a44:	1858      	adds	r0, r3, r1
 8006a46:	4282      	cmp	r2, r0
 8006a48:	6019      	str	r1, [r3, #0]
 8006a4a:	d1dd      	bne.n	8006a08 <_free_r+0x24>
 8006a4c:	6810      	ldr	r0, [r2, #0]
 8006a4e:	6852      	ldr	r2, [r2, #4]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	4401      	add	r1, r0
 8006a54:	6019      	str	r1, [r3, #0]
 8006a56:	e7d7      	b.n	8006a08 <_free_r+0x24>
 8006a58:	d902      	bls.n	8006a60 <_free_r+0x7c>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	e7d3      	b.n	8006a08 <_free_r+0x24>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	1821      	adds	r1, r4, r0
 8006a64:	428a      	cmp	r2, r1
 8006a66:	bf04      	itt	eq
 8006a68:	6811      	ldreq	r1, [r2, #0]
 8006a6a:	6852      	ldreq	r2, [r2, #4]
 8006a6c:	6062      	str	r2, [r4, #4]
 8006a6e:	bf04      	itt	eq
 8006a70:	1809      	addeq	r1, r1, r0
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	605c      	str	r4, [r3, #4]
 8006a76:	e7c7      	b.n	8006a08 <_free_r+0x24>
 8006a78:	bd38      	pop	{r3, r4, r5, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000430 	.word	0x20000430

08006a80 <_malloc_r>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	1ccd      	adds	r5, r1, #3
 8006a84:	f025 0503 	bic.w	r5, r5, #3
 8006a88:	3508      	adds	r5, #8
 8006a8a:	2d0c      	cmp	r5, #12
 8006a8c:	bf38      	it	cc
 8006a8e:	250c      	movcc	r5, #12
 8006a90:	2d00      	cmp	r5, #0
 8006a92:	4606      	mov	r6, r0
 8006a94:	db01      	blt.n	8006a9a <_malloc_r+0x1a>
 8006a96:	42a9      	cmp	r1, r5
 8006a98:	d903      	bls.n	8006aa2 <_malloc_r+0x22>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	6033      	str	r3, [r6, #0]
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}
 8006aa2:	f000 fbcb 	bl	800723c <__malloc_lock>
 8006aa6:	4a23      	ldr	r2, [pc, #140]	; (8006b34 <_malloc_r+0xb4>)
 8006aa8:	6814      	ldr	r4, [r2, #0]
 8006aaa:	4621      	mov	r1, r4
 8006aac:	b991      	cbnz	r1, 8006ad4 <_malloc_r+0x54>
 8006aae:	4c22      	ldr	r4, [pc, #136]	; (8006b38 <_malloc_r+0xb8>)
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	b91b      	cbnz	r3, 8006abc <_malloc_r+0x3c>
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f000 fb17 	bl	80070e8 <_sbrk_r>
 8006aba:	6020      	str	r0, [r4, #0]
 8006abc:	4629      	mov	r1, r5
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f000 fb12 	bl	80070e8 <_sbrk_r>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d126      	bne.n	8006b16 <_malloc_r+0x96>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	4630      	mov	r0, r6
 8006ace:	f000 fbb6 	bl	800723e <__malloc_unlock>
 8006ad2:	e7e4      	b.n	8006a9e <_malloc_r+0x1e>
 8006ad4:	680b      	ldr	r3, [r1, #0]
 8006ad6:	1b5b      	subs	r3, r3, r5
 8006ad8:	d41a      	bmi.n	8006b10 <_malloc_r+0x90>
 8006ada:	2b0b      	cmp	r3, #11
 8006adc:	d90f      	bls.n	8006afe <_malloc_r+0x7e>
 8006ade:	600b      	str	r3, [r1, #0]
 8006ae0:	50cd      	str	r5, [r1, r3]
 8006ae2:	18cc      	adds	r4, r1, r3
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f000 fbaa 	bl	800723e <__malloc_unlock>
 8006aea:	f104 000b 	add.w	r0, r4, #11
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	f020 0007 	bic.w	r0, r0, #7
 8006af4:	1ac3      	subs	r3, r0, r3
 8006af6:	d01b      	beq.n	8006b30 <_malloc_r+0xb0>
 8006af8:	425a      	negs	r2, r3
 8006afa:	50e2      	str	r2, [r4, r3]
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	428c      	cmp	r4, r1
 8006b00:	bf0d      	iteet	eq
 8006b02:	6863      	ldreq	r3, [r4, #4]
 8006b04:	684b      	ldrne	r3, [r1, #4]
 8006b06:	6063      	strne	r3, [r4, #4]
 8006b08:	6013      	streq	r3, [r2, #0]
 8006b0a:	bf18      	it	ne
 8006b0c:	460c      	movne	r4, r1
 8006b0e:	e7e9      	b.n	8006ae4 <_malloc_r+0x64>
 8006b10:	460c      	mov	r4, r1
 8006b12:	6849      	ldr	r1, [r1, #4]
 8006b14:	e7ca      	b.n	8006aac <_malloc_r+0x2c>
 8006b16:	1cc4      	adds	r4, r0, #3
 8006b18:	f024 0403 	bic.w	r4, r4, #3
 8006b1c:	42a0      	cmp	r0, r4
 8006b1e:	d005      	beq.n	8006b2c <_malloc_r+0xac>
 8006b20:	1a21      	subs	r1, r4, r0
 8006b22:	4630      	mov	r0, r6
 8006b24:	f000 fae0 	bl	80070e8 <_sbrk_r>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d0cd      	beq.n	8006ac8 <_malloc_r+0x48>
 8006b2c:	6025      	str	r5, [r4, #0]
 8006b2e:	e7d9      	b.n	8006ae4 <_malloc_r+0x64>
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
 8006b32:	bf00      	nop
 8006b34:	20000430 	.word	0x20000430
 8006b38:	20000434 	.word	0x20000434

08006b3c <__sfputc_r>:
 8006b3c:	6893      	ldr	r3, [r2, #8]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	b410      	push	{r4}
 8006b44:	6093      	str	r3, [r2, #8]
 8006b46:	da09      	bge.n	8006b5c <__sfputc_r+0x20>
 8006b48:	6994      	ldr	r4, [r2, #24]
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	db02      	blt.n	8006b54 <__sfputc_r+0x18>
 8006b4e:	b2cb      	uxtb	r3, r1
 8006b50:	2b0a      	cmp	r3, #10
 8006b52:	d103      	bne.n	8006b5c <__sfputc_r+0x20>
 8006b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b58:	f7ff bca4 	b.w	80064a4 <__swbuf_r>
 8006b5c:	6813      	ldr	r3, [r2, #0]
 8006b5e:	1c58      	adds	r0, r3, #1
 8006b60:	6010      	str	r0, [r2, #0]
 8006b62:	7019      	strb	r1, [r3, #0]
 8006b64:	b2c8      	uxtb	r0, r1
 8006b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <__sfputs_r>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460f      	mov	r7, r1
 8006b72:	4614      	mov	r4, r2
 8006b74:	18d5      	adds	r5, r2, r3
 8006b76:	42ac      	cmp	r4, r5
 8006b78:	d101      	bne.n	8006b7e <__sfputs_r+0x12>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	e007      	b.n	8006b8e <__sfputs_r+0x22>
 8006b7e:	463a      	mov	r2, r7
 8006b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7ff ffd9 	bl	8006b3c <__sfputc_r>
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	d1f3      	bne.n	8006b76 <__sfputs_r+0xa>
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b90 <_vfiprintf_r>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	b09d      	sub	sp, #116	; 0x74
 8006b96:	460c      	mov	r4, r1
 8006b98:	4617      	mov	r7, r2
 8006b9a:	9303      	str	r3, [sp, #12]
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	b118      	cbz	r0, 8006ba8 <_vfiprintf_r+0x18>
 8006ba0:	6983      	ldr	r3, [r0, #24]
 8006ba2:	b90b      	cbnz	r3, 8006ba8 <_vfiprintf_r+0x18>
 8006ba4:	f7ff fe30 	bl	8006808 <__sinit>
 8006ba8:	4b7c      	ldr	r3, [pc, #496]	; (8006d9c <_vfiprintf_r+0x20c>)
 8006baa:	429c      	cmp	r4, r3
 8006bac:	d157      	bne.n	8006c5e <_vfiprintf_r+0xce>
 8006bae:	6874      	ldr	r4, [r6, #4]
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	0718      	lsls	r0, r3, #28
 8006bb4:	d55d      	bpl.n	8006c72 <_vfiprintf_r+0xe2>
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d05a      	beq.n	8006c72 <_vfiprintf_r+0xe2>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bc6:	2330      	movs	r3, #48	; 0x30
 8006bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bcc:	f04f 0b01 	mov.w	fp, #1
 8006bd0:	46b8      	mov	r8, r7
 8006bd2:	4645      	mov	r5, r8
 8006bd4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d155      	bne.n	8006c88 <_vfiprintf_r+0xf8>
 8006bdc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006be0:	d00b      	beq.n	8006bfa <_vfiprintf_r+0x6a>
 8006be2:	4653      	mov	r3, sl
 8006be4:	463a      	mov	r2, r7
 8006be6:	4621      	mov	r1, r4
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff ffbf 	bl	8006b6c <__sfputs_r>
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f000 80c4 	beq.w	8006d7c <_vfiprintf_r+0x1ec>
 8006bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf6:	4453      	add	r3, sl
 8006bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfa:	f898 3000 	ldrb.w	r3, [r8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80bc 	beq.w	8006d7c <_vfiprintf_r+0x1ec>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	9307      	str	r3, [sp, #28]
 8006c0e:	9205      	str	r2, [sp, #20]
 8006c10:	9306      	str	r3, [sp, #24]
 8006c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c16:	931a      	str	r3, [sp, #104]	; 0x68
 8006c18:	2205      	movs	r2, #5
 8006c1a:	7829      	ldrb	r1, [r5, #0]
 8006c1c:	4860      	ldr	r0, [pc, #384]	; (8006da0 <_vfiprintf_r+0x210>)
 8006c1e:	f7f9 faaf 	bl	8000180 <memchr>
 8006c22:	f105 0801 	add.w	r8, r5, #1
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d131      	bne.n	8006c90 <_vfiprintf_r+0x100>
 8006c2c:	06d9      	lsls	r1, r3, #27
 8006c2e:	bf44      	itt	mi
 8006c30:	2220      	movmi	r2, #32
 8006c32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c36:	071a      	lsls	r2, r3, #28
 8006c38:	bf44      	itt	mi
 8006c3a:	222b      	movmi	r2, #43	; 0x2b
 8006c3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c40:	782a      	ldrb	r2, [r5, #0]
 8006c42:	2a2a      	cmp	r2, #42	; 0x2a
 8006c44:	d02c      	beq.n	8006ca0 <_vfiprintf_r+0x110>
 8006c46:	9a07      	ldr	r2, [sp, #28]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	200a      	movs	r0, #10
 8006c4c:	46a8      	mov	r8, r5
 8006c4e:	3501      	adds	r5, #1
 8006c50:	f898 3000 	ldrb.w	r3, [r8]
 8006c54:	3b30      	subs	r3, #48	; 0x30
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	d96d      	bls.n	8006d36 <_vfiprintf_r+0x1a6>
 8006c5a:	b371      	cbz	r1, 8006cba <_vfiprintf_r+0x12a>
 8006c5c:	e026      	b.n	8006cac <_vfiprintf_r+0x11c>
 8006c5e:	4b51      	ldr	r3, [pc, #324]	; (8006da4 <_vfiprintf_r+0x214>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d101      	bne.n	8006c68 <_vfiprintf_r+0xd8>
 8006c64:	68b4      	ldr	r4, [r6, #8]
 8006c66:	e7a3      	b.n	8006bb0 <_vfiprintf_r+0x20>
 8006c68:	4b4f      	ldr	r3, [pc, #316]	; (8006da8 <_vfiprintf_r+0x218>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	bf08      	it	eq
 8006c6e:	68f4      	ldreq	r4, [r6, #12]
 8006c70:	e79e      	b.n	8006bb0 <_vfiprintf_r+0x20>
 8006c72:	4621      	mov	r1, r4
 8006c74:	4630      	mov	r0, r6
 8006c76:	f7ff fc67 	bl	8006548 <__swsetup_r>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d09e      	beq.n	8006bbc <_vfiprintf_r+0x2c>
 8006c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c82:	b01d      	add	sp, #116	; 0x74
 8006c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c88:	2b25      	cmp	r3, #37	; 0x25
 8006c8a:	d0a7      	beq.n	8006bdc <_vfiprintf_r+0x4c>
 8006c8c:	46a8      	mov	r8, r5
 8006c8e:	e7a0      	b.n	8006bd2 <_vfiprintf_r+0x42>
 8006c90:	4a43      	ldr	r2, [pc, #268]	; (8006da0 <_vfiprintf_r+0x210>)
 8006c92:	1a80      	subs	r0, r0, r2
 8006c94:	fa0b f000 	lsl.w	r0, fp, r0
 8006c98:	4318      	orrs	r0, r3
 8006c9a:	9004      	str	r0, [sp, #16]
 8006c9c:	4645      	mov	r5, r8
 8006c9e:	e7bb      	b.n	8006c18 <_vfiprintf_r+0x88>
 8006ca0:	9a03      	ldr	r2, [sp, #12]
 8006ca2:	1d11      	adds	r1, r2, #4
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	9103      	str	r1, [sp, #12]
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	db01      	blt.n	8006cb0 <_vfiprintf_r+0x120>
 8006cac:	9207      	str	r2, [sp, #28]
 8006cae:	e004      	b.n	8006cba <_vfiprintf_r+0x12a>
 8006cb0:	4252      	negs	r2, r2
 8006cb2:	f043 0302 	orr.w	r3, r3, #2
 8006cb6:	9207      	str	r2, [sp, #28]
 8006cb8:	9304      	str	r3, [sp, #16]
 8006cba:	f898 3000 	ldrb.w	r3, [r8]
 8006cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc0:	d110      	bne.n	8006ce4 <_vfiprintf_r+0x154>
 8006cc2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc8:	f108 0101 	add.w	r1, r8, #1
 8006ccc:	d137      	bne.n	8006d3e <_vfiprintf_r+0x1ae>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	1d1a      	adds	r2, r3, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	9203      	str	r2, [sp, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfb8      	it	lt
 8006cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cde:	f108 0802 	add.w	r8, r8, #2
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	4d31      	ldr	r5, [pc, #196]	; (8006dac <_vfiprintf_r+0x21c>)
 8006ce6:	f898 1000 	ldrb.w	r1, [r8]
 8006cea:	2203      	movs	r2, #3
 8006cec:	4628      	mov	r0, r5
 8006cee:	f7f9 fa47 	bl	8000180 <memchr>
 8006cf2:	b140      	cbz	r0, 8006d06 <_vfiprintf_r+0x176>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	1b40      	subs	r0, r0, r5
 8006cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfc:	9b04      	ldr	r3, [sp, #16]
 8006cfe:	4303      	orrs	r3, r0
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	f108 0801 	add.w	r8, r8, #1
 8006d06:	f898 1000 	ldrb.w	r1, [r8]
 8006d0a:	4829      	ldr	r0, [pc, #164]	; (8006db0 <_vfiprintf_r+0x220>)
 8006d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d10:	2206      	movs	r2, #6
 8006d12:	f108 0701 	add.w	r7, r8, #1
 8006d16:	f7f9 fa33 	bl	8000180 <memchr>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d034      	beq.n	8006d88 <_vfiprintf_r+0x1f8>
 8006d1e:	4b25      	ldr	r3, [pc, #148]	; (8006db4 <_vfiprintf_r+0x224>)
 8006d20:	bb03      	cbnz	r3, 8006d64 <_vfiprintf_r+0x1d4>
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	3307      	adds	r3, #7
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	444b      	add	r3, r9
 8006d32:	9309      	str	r3, [sp, #36]	; 0x24
 8006d34:	e74c      	b.n	8006bd0 <_vfiprintf_r+0x40>
 8006d36:	fb00 3202 	mla	r2, r0, r2, r3
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	e786      	b.n	8006c4c <_vfiprintf_r+0xbc>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	4618      	mov	r0, r3
 8006d44:	250a      	movs	r5, #10
 8006d46:	4688      	mov	r8, r1
 8006d48:	3101      	adds	r1, #1
 8006d4a:	f898 2000 	ldrb.w	r2, [r8]
 8006d4e:	3a30      	subs	r2, #48	; 0x30
 8006d50:	2a09      	cmp	r2, #9
 8006d52:	d903      	bls.n	8006d5c <_vfiprintf_r+0x1cc>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0c5      	beq.n	8006ce4 <_vfiprintf_r+0x154>
 8006d58:	9005      	str	r0, [sp, #20]
 8006d5a:	e7c3      	b.n	8006ce4 <_vfiprintf_r+0x154>
 8006d5c:	fb05 2000 	mla	r0, r5, r0, r2
 8006d60:	2301      	movs	r3, #1
 8006d62:	e7f0      	b.n	8006d46 <_vfiprintf_r+0x1b6>
 8006d64:	ab03      	add	r3, sp, #12
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <_vfiprintf_r+0x228>)
 8006d6c:	a904      	add	r1, sp, #16
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f3af 8000 	nop.w
 8006d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d78:	4681      	mov	r9, r0
 8006d7a:	d1d8      	bne.n	8006d2e <_vfiprintf_r+0x19e>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	065b      	lsls	r3, r3, #25
 8006d80:	f53f af7d 	bmi.w	8006c7e <_vfiprintf_r+0xee>
 8006d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d86:	e77c      	b.n	8006c82 <_vfiprintf_r+0xf2>
 8006d88:	ab03      	add	r3, sp, #12
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <_vfiprintf_r+0x228>)
 8006d90:	a904      	add	r1, sp, #16
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f888 	bl	8006ea8 <_printf_i>
 8006d98:	e7ec      	b.n	8006d74 <_vfiprintf_r+0x1e4>
 8006d9a:	bf00      	nop
 8006d9c:	08008528 	.word	0x08008528
 8006da0:	08008568 	.word	0x08008568
 8006da4:	08008548 	.word	0x08008548
 8006da8:	08008508 	.word	0x08008508
 8006dac:	0800856e 	.word	0x0800856e
 8006db0:	08008572 	.word	0x08008572
 8006db4:	00000000 	.word	0x00000000
 8006db8:	08006b6d 	.word	0x08006b6d

08006dbc <_printf_common>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	4691      	mov	r9, r2
 8006dc2:	461f      	mov	r7, r3
 8006dc4:	688a      	ldr	r2, [r1, #8]
 8006dc6:	690b      	ldr	r3, [r1, #16]
 8006dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	bfb8      	it	lt
 8006dd0:	4613      	movlt	r3, r2
 8006dd2:	f8c9 3000 	str.w	r3, [r9]
 8006dd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460c      	mov	r4, r1
 8006dde:	b112      	cbz	r2, 8006de6 <_printf_common+0x2a>
 8006de0:	3301      	adds	r3, #1
 8006de2:	f8c9 3000 	str.w	r3, [r9]
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	0699      	lsls	r1, r3, #26
 8006dea:	bf42      	ittt	mi
 8006dec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006df0:	3302      	addmi	r3, #2
 8006df2:	f8c9 3000 	strmi.w	r3, [r9]
 8006df6:	6825      	ldr	r5, [r4, #0]
 8006df8:	f015 0506 	ands.w	r5, r5, #6
 8006dfc:	d107      	bne.n	8006e0e <_printf_common+0x52>
 8006dfe:	f104 0a19 	add.w	sl, r4, #25
 8006e02:	68e3      	ldr	r3, [r4, #12]
 8006e04:	f8d9 2000 	ldr.w	r2, [r9]
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	429d      	cmp	r5, r3
 8006e0c:	db29      	blt.n	8006e62 <_printf_common+0xa6>
 8006e0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	3300      	adds	r3, #0
 8006e16:	bf18      	it	ne
 8006e18:	2301      	movne	r3, #1
 8006e1a:	0692      	lsls	r2, r2, #26
 8006e1c:	d42e      	bmi.n	8006e7c <_printf_common+0xc0>
 8006e1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e22:	4639      	mov	r1, r7
 8006e24:	4630      	mov	r0, r6
 8006e26:	47c0      	blx	r8
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d021      	beq.n	8006e70 <_printf_common+0xb4>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	68e5      	ldr	r5, [r4, #12]
 8006e30:	f8d9 2000 	ldr.w	r2, [r9]
 8006e34:	f003 0306 	and.w	r3, r3, #6
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	bf08      	it	eq
 8006e3c:	1aad      	subeq	r5, r5, r2
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	6922      	ldr	r2, [r4, #16]
 8006e42:	bf0c      	ite	eq
 8006e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e48:	2500      	movne	r5, #0
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bfc4      	itt	gt
 8006e4e:	1a9b      	subgt	r3, r3, r2
 8006e50:	18ed      	addgt	r5, r5, r3
 8006e52:	f04f 0900 	mov.w	r9, #0
 8006e56:	341a      	adds	r4, #26
 8006e58:	454d      	cmp	r5, r9
 8006e5a:	d11b      	bne.n	8006e94 <_printf_common+0xd8>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	2301      	movs	r3, #1
 8006e64:	4652      	mov	r2, sl
 8006e66:	4639      	mov	r1, r7
 8006e68:	4630      	mov	r0, r6
 8006e6a:	47c0      	blx	r8
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	d103      	bne.n	8006e78 <_printf_common+0xbc>
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e78:	3501      	adds	r5, #1
 8006e7a:	e7c2      	b.n	8006e02 <_printf_common+0x46>
 8006e7c:	18e1      	adds	r1, r4, r3
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	2030      	movs	r0, #48	; 0x30
 8006e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e86:	4422      	add	r2, r4
 8006e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e90:	3302      	adds	r3, #2
 8006e92:	e7c4      	b.n	8006e1e <_printf_common+0x62>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4622      	mov	r2, r4
 8006e98:	4639      	mov	r1, r7
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	47c0      	blx	r8
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d0e6      	beq.n	8006e70 <_printf_common+0xb4>
 8006ea2:	f109 0901 	add.w	r9, r9, #1
 8006ea6:	e7d7      	b.n	8006e58 <_printf_common+0x9c>

08006ea8 <_printf_i>:
 8006ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eac:	4617      	mov	r7, r2
 8006eae:	7e0a      	ldrb	r2, [r1, #24]
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	2a6e      	cmp	r2, #110	; 0x6e
 8006eb4:	4698      	mov	r8, r3
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ebc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006ec0:	f000 80bc 	beq.w	800703c <_printf_i+0x194>
 8006ec4:	d81a      	bhi.n	8006efc <_printf_i+0x54>
 8006ec6:	2a63      	cmp	r2, #99	; 0x63
 8006ec8:	d02e      	beq.n	8006f28 <_printf_i+0x80>
 8006eca:	d80a      	bhi.n	8006ee2 <_printf_i+0x3a>
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	f000 80c8 	beq.w	8007062 <_printf_i+0x1ba>
 8006ed2:	2a58      	cmp	r2, #88	; 0x58
 8006ed4:	f000 808a 	beq.w	8006fec <_printf_i+0x144>
 8006ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006edc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006ee0:	e02a      	b.n	8006f38 <_printf_i+0x90>
 8006ee2:	2a64      	cmp	r2, #100	; 0x64
 8006ee4:	d001      	beq.n	8006eea <_printf_i+0x42>
 8006ee6:	2a69      	cmp	r2, #105	; 0x69
 8006ee8:	d1f6      	bne.n	8006ed8 <_printf_i+0x30>
 8006eea:	6821      	ldr	r1, [r4, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ef2:	d023      	beq.n	8006f3c <_printf_i+0x94>
 8006ef4:	1d11      	adds	r1, r2, #4
 8006ef6:	6019      	str	r1, [r3, #0]
 8006ef8:	6813      	ldr	r3, [r2, #0]
 8006efa:	e027      	b.n	8006f4c <_printf_i+0xa4>
 8006efc:	2a73      	cmp	r2, #115	; 0x73
 8006efe:	f000 80b4 	beq.w	800706a <_printf_i+0x1c2>
 8006f02:	d808      	bhi.n	8006f16 <_printf_i+0x6e>
 8006f04:	2a6f      	cmp	r2, #111	; 0x6f
 8006f06:	d02a      	beq.n	8006f5e <_printf_i+0xb6>
 8006f08:	2a70      	cmp	r2, #112	; 0x70
 8006f0a:	d1e5      	bne.n	8006ed8 <_printf_i+0x30>
 8006f0c:	680a      	ldr	r2, [r1, #0]
 8006f0e:	f042 0220 	orr.w	r2, r2, #32
 8006f12:	600a      	str	r2, [r1, #0]
 8006f14:	e003      	b.n	8006f1e <_printf_i+0x76>
 8006f16:	2a75      	cmp	r2, #117	; 0x75
 8006f18:	d021      	beq.n	8006f5e <_printf_i+0xb6>
 8006f1a:	2a78      	cmp	r2, #120	; 0x78
 8006f1c:	d1dc      	bne.n	8006ed8 <_printf_i+0x30>
 8006f1e:	2278      	movs	r2, #120	; 0x78
 8006f20:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006f24:	496e      	ldr	r1, [pc, #440]	; (80070e0 <_printf_i+0x238>)
 8006f26:	e064      	b.n	8006ff2 <_printf_i+0x14a>
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006f2e:	1d11      	adds	r1, r2, #4
 8006f30:	6019      	str	r1, [r3, #0]
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e0a3      	b.n	8007084 <_printf_i+0x1dc>
 8006f3c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006f40:	f102 0104 	add.w	r1, r2, #4
 8006f44:	6019      	str	r1, [r3, #0]
 8006f46:	d0d7      	beq.n	8006ef8 <_printf_i+0x50>
 8006f48:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da03      	bge.n	8006f58 <_printf_i+0xb0>
 8006f50:	222d      	movs	r2, #45	; 0x2d
 8006f52:	425b      	negs	r3, r3
 8006f54:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f58:	4962      	ldr	r1, [pc, #392]	; (80070e4 <_printf_i+0x23c>)
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	e017      	b.n	8006f8e <_printf_i+0xe6>
 8006f5e:	6820      	ldr	r0, [r4, #0]
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006f66:	d003      	beq.n	8006f70 <_printf_i+0xc8>
 8006f68:	1d08      	adds	r0, r1, #4
 8006f6a:	6018      	str	r0, [r3, #0]
 8006f6c:	680b      	ldr	r3, [r1, #0]
 8006f6e:	e006      	b.n	8006f7e <_printf_i+0xd6>
 8006f70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f74:	f101 0004 	add.w	r0, r1, #4
 8006f78:	6018      	str	r0, [r3, #0]
 8006f7a:	d0f7      	beq.n	8006f6c <_printf_i+0xc4>
 8006f7c:	880b      	ldrh	r3, [r1, #0]
 8006f7e:	4959      	ldr	r1, [pc, #356]	; (80070e4 <_printf_i+0x23c>)
 8006f80:	2a6f      	cmp	r2, #111	; 0x6f
 8006f82:	bf14      	ite	ne
 8006f84:	220a      	movne	r2, #10
 8006f86:	2208      	moveq	r2, #8
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006f8e:	6865      	ldr	r5, [r4, #4]
 8006f90:	60a5      	str	r5, [r4, #8]
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	f2c0 809c 	blt.w	80070d0 <_printf_i+0x228>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	f020 0004 	bic.w	r0, r0, #4
 8006f9e:	6020      	str	r0, [r4, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d13f      	bne.n	8007024 <_printf_i+0x17c>
 8006fa4:	2d00      	cmp	r5, #0
 8006fa6:	f040 8095 	bne.w	80070d4 <_printf_i+0x22c>
 8006faa:	4675      	mov	r5, lr
 8006fac:	2a08      	cmp	r2, #8
 8006fae:	d10b      	bne.n	8006fc8 <_printf_i+0x120>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	07da      	lsls	r2, r3, #31
 8006fb4:	d508      	bpl.n	8006fc8 <_printf_i+0x120>
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	6862      	ldr	r2, [r4, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bfde      	ittt	le
 8006fbe:	2330      	movle	r3, #48	; 0x30
 8006fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fc8:	ebae 0305 	sub.w	r3, lr, r5
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	f8cd 8000 	str.w	r8, [sp]
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	aa03      	add	r2, sp, #12
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7ff feef 	bl	8006dbc <_printf_common>
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d155      	bne.n	800708e <_printf_i+0x1e6>
 8006fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe6:	b005      	add	sp, #20
 8006fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006ff0:	493c      	ldr	r1, [pc, #240]	; (80070e4 <_printf_i+0x23c>)
 8006ff2:	6822      	ldr	r2, [r4, #0]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ffa:	f100 0504 	add.w	r5, r0, #4
 8006ffe:	601d      	str	r5, [r3, #0]
 8007000:	d001      	beq.n	8007006 <_printf_i+0x15e>
 8007002:	6803      	ldr	r3, [r0, #0]
 8007004:	e002      	b.n	800700c <_printf_i+0x164>
 8007006:	0655      	lsls	r5, r2, #25
 8007008:	d5fb      	bpl.n	8007002 <_printf_i+0x15a>
 800700a:	8803      	ldrh	r3, [r0, #0]
 800700c:	07d0      	lsls	r0, r2, #31
 800700e:	bf44      	itt	mi
 8007010:	f042 0220 	orrmi.w	r2, r2, #32
 8007014:	6022      	strmi	r2, [r4, #0]
 8007016:	b91b      	cbnz	r3, 8007020 <_printf_i+0x178>
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	f022 0220 	bic.w	r2, r2, #32
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	2210      	movs	r2, #16
 8007022:	e7b1      	b.n	8006f88 <_printf_i+0xe0>
 8007024:	4675      	mov	r5, lr
 8007026:	fbb3 f0f2 	udiv	r0, r3, r2
 800702a:	fb02 3310 	mls	r3, r2, r0, r3
 800702e:	5ccb      	ldrb	r3, [r1, r3]
 8007030:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007034:	4603      	mov	r3, r0
 8007036:	2800      	cmp	r0, #0
 8007038:	d1f5      	bne.n	8007026 <_printf_i+0x17e>
 800703a:	e7b7      	b.n	8006fac <_printf_i+0x104>
 800703c:	6808      	ldr	r0, [r1, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	6949      	ldr	r1, [r1, #20]
 8007042:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007046:	d004      	beq.n	8007052 <_printf_i+0x1aa>
 8007048:	1d10      	adds	r0, r2, #4
 800704a:	6018      	str	r0, [r3, #0]
 800704c:	6813      	ldr	r3, [r2, #0]
 800704e:	6019      	str	r1, [r3, #0]
 8007050:	e007      	b.n	8007062 <_printf_i+0x1ba>
 8007052:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007056:	f102 0004 	add.w	r0, r2, #4
 800705a:	6018      	str	r0, [r3, #0]
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	d0f6      	beq.n	800704e <_printf_i+0x1a6>
 8007060:	8019      	strh	r1, [r3, #0]
 8007062:	2300      	movs	r3, #0
 8007064:	6123      	str	r3, [r4, #16]
 8007066:	4675      	mov	r5, lr
 8007068:	e7b1      	b.n	8006fce <_printf_i+0x126>
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	1d11      	adds	r1, r2, #4
 800706e:	6019      	str	r1, [r3, #0]
 8007070:	6815      	ldr	r5, [r2, #0]
 8007072:	6862      	ldr	r2, [r4, #4]
 8007074:	2100      	movs	r1, #0
 8007076:	4628      	mov	r0, r5
 8007078:	f7f9 f882 	bl	8000180 <memchr>
 800707c:	b108      	cbz	r0, 8007082 <_printf_i+0x1da>
 800707e:	1b40      	subs	r0, r0, r5
 8007080:	6060      	str	r0, [r4, #4]
 8007082:	6863      	ldr	r3, [r4, #4]
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	2300      	movs	r3, #0
 8007088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800708c:	e79f      	b.n	8006fce <_printf_i+0x126>
 800708e:	6923      	ldr	r3, [r4, #16]
 8007090:	462a      	mov	r2, r5
 8007092:	4639      	mov	r1, r7
 8007094:	4630      	mov	r0, r6
 8007096:	47c0      	blx	r8
 8007098:	3001      	adds	r0, #1
 800709a:	d0a2      	beq.n	8006fe2 <_printf_i+0x13a>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	079b      	lsls	r3, r3, #30
 80070a0:	d507      	bpl.n	80070b2 <_printf_i+0x20a>
 80070a2:	2500      	movs	r5, #0
 80070a4:	f104 0919 	add.w	r9, r4, #25
 80070a8:	68e3      	ldr	r3, [r4, #12]
 80070aa:	9a03      	ldr	r2, [sp, #12]
 80070ac:	1a9b      	subs	r3, r3, r2
 80070ae:	429d      	cmp	r5, r3
 80070b0:	db05      	blt.n	80070be <_printf_i+0x216>
 80070b2:	68e0      	ldr	r0, [r4, #12]
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	4298      	cmp	r0, r3
 80070b8:	bfb8      	it	lt
 80070ba:	4618      	movlt	r0, r3
 80070bc:	e793      	b.n	8006fe6 <_printf_i+0x13e>
 80070be:	2301      	movs	r3, #1
 80070c0:	464a      	mov	r2, r9
 80070c2:	4639      	mov	r1, r7
 80070c4:	4630      	mov	r0, r6
 80070c6:	47c0      	blx	r8
 80070c8:	3001      	adds	r0, #1
 80070ca:	d08a      	beq.n	8006fe2 <_printf_i+0x13a>
 80070cc:	3501      	adds	r5, #1
 80070ce:	e7eb      	b.n	80070a8 <_printf_i+0x200>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1a7      	bne.n	8007024 <_printf_i+0x17c>
 80070d4:	780b      	ldrb	r3, [r1, #0]
 80070d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070de:	e765      	b.n	8006fac <_printf_i+0x104>
 80070e0:	0800858a 	.word	0x0800858a
 80070e4:	08008579 	.word	0x08008579

080070e8 <_sbrk_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4c06      	ldr	r4, [pc, #24]	; (8007104 <_sbrk_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4605      	mov	r5, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	f7fe fdfc 	bl	8005cf0 <_sbrk>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_sbrk_r+0x1a>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_sbrk_r+0x1a>
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20001e78 	.word	0x20001e78

08007108 <__sread>:
 8007108:	b510      	push	{r4, lr}
 800710a:	460c      	mov	r4, r1
 800710c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007110:	f000 f896 	bl	8007240 <_read_r>
 8007114:	2800      	cmp	r0, #0
 8007116:	bfab      	itete	ge
 8007118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800711a:	89a3      	ldrhlt	r3, [r4, #12]
 800711c:	181b      	addge	r3, r3, r0
 800711e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007122:	bfac      	ite	ge
 8007124:	6563      	strge	r3, [r4, #84]	; 0x54
 8007126:	81a3      	strhlt	r3, [r4, #12]
 8007128:	bd10      	pop	{r4, pc}

0800712a <__swrite>:
 800712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712e:	461f      	mov	r7, r3
 8007130:	898b      	ldrh	r3, [r1, #12]
 8007132:	05db      	lsls	r3, r3, #23
 8007134:	4605      	mov	r5, r0
 8007136:	460c      	mov	r4, r1
 8007138:	4616      	mov	r6, r2
 800713a:	d505      	bpl.n	8007148 <__swrite+0x1e>
 800713c:	2302      	movs	r3, #2
 800713e:	2200      	movs	r2, #0
 8007140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007144:	f000 f868 	bl	8007218 <_lseek_r>
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007152:	81a3      	strh	r3, [r4, #12]
 8007154:	4632      	mov	r2, r6
 8007156:	463b      	mov	r3, r7
 8007158:	4628      	mov	r0, r5
 800715a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800715e:	f000 b817 	b.w	8007190 <_write_r>

08007162 <__sseek>:
 8007162:	b510      	push	{r4, lr}
 8007164:	460c      	mov	r4, r1
 8007166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716a:	f000 f855 	bl	8007218 <_lseek_r>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	bf15      	itete	ne
 8007174:	6560      	strne	r0, [r4, #84]	; 0x54
 8007176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800717a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800717e:	81a3      	strheq	r3, [r4, #12]
 8007180:	bf18      	it	ne
 8007182:	81a3      	strhne	r3, [r4, #12]
 8007184:	bd10      	pop	{r4, pc}

08007186 <__sclose>:
 8007186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718a:	f000 b813 	b.w	80071b4 <_close_r>
	...

08007190 <_write_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4c07      	ldr	r4, [pc, #28]	; (80071b0 <_write_r+0x20>)
 8007194:	4605      	mov	r5, r0
 8007196:	4608      	mov	r0, r1
 8007198:	4611      	mov	r1, r2
 800719a:	2200      	movs	r2, #0
 800719c:	6022      	str	r2, [r4, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7fe fabe 	bl	8005720 <_write>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_write_r+0x1e>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_write_r+0x1e>
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	20001e78 	.word	0x20001e78

080071b4 <_close_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4c06      	ldr	r4, [pc, #24]	; (80071d0 <_close_r+0x1c>)
 80071b8:	2300      	movs	r3, #0
 80071ba:	4605      	mov	r5, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	f7fe fdb0 	bl	8005d24 <_close>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_close_r+0x1a>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_close_r+0x1a>
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20001e78 	.word	0x20001e78

080071d4 <_fstat_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4c07      	ldr	r4, [pc, #28]	; (80071f4 <_fstat_r+0x20>)
 80071d8:	2300      	movs	r3, #0
 80071da:	4605      	mov	r5, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	f7fe fda2 	bl	8005d2a <_fstat>
 80071e6:	1c43      	adds	r3, r0, #1
 80071e8:	d102      	bne.n	80071f0 <_fstat_r+0x1c>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	b103      	cbz	r3, 80071f0 <_fstat_r+0x1c>
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	bd38      	pop	{r3, r4, r5, pc}
 80071f2:	bf00      	nop
 80071f4:	20001e78 	.word	0x20001e78

080071f8 <_isatty_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4c06      	ldr	r4, [pc, #24]	; (8007214 <_isatty_r+0x1c>)
 80071fc:	2300      	movs	r3, #0
 80071fe:	4605      	mov	r5, r0
 8007200:	4608      	mov	r0, r1
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	f7fe fd96 	bl	8005d34 <_isatty>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_isatty_r+0x1a>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	b103      	cbz	r3, 8007212 <_isatty_r+0x1a>
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	20001e78 	.word	0x20001e78

08007218 <_lseek_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4c07      	ldr	r4, [pc, #28]	; (8007238 <_lseek_r+0x20>)
 800721c:	4605      	mov	r5, r0
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	2200      	movs	r2, #0
 8007224:	6022      	str	r2, [r4, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f7fe fd86 	bl	8005d38 <_lseek>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_lseek_r+0x1e>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	b103      	cbz	r3, 8007236 <_lseek_r+0x1e>
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20001e78 	.word	0x20001e78

0800723c <__malloc_lock>:
 800723c:	4770      	bx	lr

0800723e <__malloc_unlock>:
 800723e:	4770      	bx	lr

08007240 <_read_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4c07      	ldr	r4, [pc, #28]	; (8007260 <_read_r+0x20>)
 8007244:	4605      	mov	r5, r0
 8007246:	4608      	mov	r0, r1
 8007248:	4611      	mov	r1, r2
 800724a:	2200      	movs	r2, #0
 800724c:	6022      	str	r2, [r4, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7fe fd40 	bl	8005cd4 <_read>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_read_r+0x1e>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	b103      	cbz	r3, 800725e <_read_r+0x1e>
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	20001e78 	.word	0x20001e78

08007264 <pow>:
 8007264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	ed2d 8b04 	vpush	{d8-d9}
 800726c:	b08d      	sub	sp, #52	; 0x34
 800726e:	ec57 6b10 	vmov	r6, r7, d0
 8007272:	ec55 4b11 	vmov	r4, r5, d1
 8007276:	f000 f96f 	bl	8007558 <__ieee754_pow>
 800727a:	4bae      	ldr	r3, [pc, #696]	; (8007534 <pow+0x2d0>)
 800727c:	eeb0 8a40 	vmov.f32	s16, s0
 8007280:	eef0 8a60 	vmov.f32	s17, s1
 8007284:	f993 9000 	ldrsb.w	r9, [r3]
 8007288:	f1b9 3fff 	cmp.w	r9, #4294967295
 800728c:	4698      	mov	r8, r3
 800728e:	d05f      	beq.n	8007350 <pow+0xec>
 8007290:	4622      	mov	r2, r4
 8007292:	462b      	mov	r3, r5
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f7f9 fc14 	bl	8000ac4 <__aeabi_dcmpun>
 800729c:	4683      	mov	fp, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d156      	bne.n	8007350 <pow+0xec>
 80072a2:	4632      	mov	r2, r6
 80072a4:	463b      	mov	r3, r7
 80072a6:	4630      	mov	r0, r6
 80072a8:	4639      	mov	r1, r7
 80072aa:	f7f9 fc0b 	bl	8000ac4 <__aeabi_dcmpun>
 80072ae:	9001      	str	r0, [sp, #4]
 80072b0:	b1e8      	cbz	r0, 80072ee <pow+0x8a>
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f9 fbd1 	bl	8000a60 <__aeabi_dcmpeq>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d046      	beq.n	8007350 <pow+0xec>
 80072c2:	2301      	movs	r3, #1
 80072c4:	9302      	str	r3, [sp, #8]
 80072c6:	4b9c      	ldr	r3, [pc, #624]	; (8007538 <pow+0x2d4>)
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	4b9c      	ldr	r3, [pc, #624]	; (800753c <pow+0x2d8>)
 80072cc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80072d0:	2200      	movs	r2, #0
 80072d2:	f1b9 0f02 	cmp.w	r9, #2
 80072d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80072de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072e2:	d033      	beq.n	800734c <pow+0xe8>
 80072e4:	a802      	add	r0, sp, #8
 80072e6:	f000 ff08 	bl	80080fa <matherr>
 80072ea:	bb48      	cbnz	r0, 8007340 <pow+0xdc>
 80072ec:	e05e      	b.n	80073ac <pow+0x148>
 80072ee:	f04f 0a00 	mov.w	sl, #0
 80072f2:	f04f 0b00 	mov.w	fp, #0
 80072f6:	4652      	mov	r2, sl
 80072f8:	465b      	mov	r3, fp
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f9 fbaf 	bl	8000a60 <__aeabi_dcmpeq>
 8007302:	ec4b ab19 	vmov	d9, sl, fp
 8007306:	2800      	cmp	r0, #0
 8007308:	d055      	beq.n	80073b6 <pow+0x152>
 800730a:	4652      	mov	r2, sl
 800730c:	465b      	mov	r3, fp
 800730e:	4620      	mov	r0, r4
 8007310:	4629      	mov	r1, r5
 8007312:	f7f9 fba5 	bl	8000a60 <__aeabi_dcmpeq>
 8007316:	4680      	mov	r8, r0
 8007318:	b318      	cbz	r0, 8007362 <pow+0xfe>
 800731a:	2301      	movs	r3, #1
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	4b86      	ldr	r3, [pc, #536]	; (8007538 <pow+0x2d4>)
 8007320:	9303      	str	r3, [sp, #12]
 8007322:	9b01      	ldr	r3, [sp, #4]
 8007324:	930a      	str	r3, [sp, #40]	; 0x28
 8007326:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800732a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800732e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007332:	f1b9 0f00 	cmp.w	r9, #0
 8007336:	d0d5      	beq.n	80072e4 <pow+0x80>
 8007338:	4b80      	ldr	r3, [pc, #512]	; (800753c <pow+0x2d8>)
 800733a:	2200      	movs	r2, #0
 800733c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007342:	b11b      	cbz	r3, 800734c <pow+0xe8>
 8007344:	f7ff f800 	bl	8006348 <__errno>
 8007348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800734a:	6003      	str	r3, [r0, #0]
 800734c:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007350:	eeb0 0a48 	vmov.f32	s0, s16
 8007354:	eef0 0a68 	vmov.f32	s1, s17
 8007358:	b00d      	add	sp, #52	; 0x34
 800735a:	ecbd 8b04 	vpop	{d8-d9}
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	ec45 4b10 	vmov	d0, r4, r5
 8007366:	f000 fec0 	bl	80080ea <finite>
 800736a:	2800      	cmp	r0, #0
 800736c:	d0f0      	beq.n	8007350 <pow+0xec>
 800736e:	4652      	mov	r2, sl
 8007370:	465b      	mov	r3, fp
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f9 fb7d 	bl	8000a74 <__aeabi_dcmplt>
 800737a:	2800      	cmp	r0, #0
 800737c:	d0e8      	beq.n	8007350 <pow+0xec>
 800737e:	2301      	movs	r3, #1
 8007380:	9302      	str	r3, [sp, #8]
 8007382:	4b6d      	ldr	r3, [pc, #436]	; (8007538 <pow+0x2d4>)
 8007384:	9303      	str	r3, [sp, #12]
 8007386:	4b6b      	ldr	r3, [pc, #428]	; (8007534 <pow+0x2d0>)
 8007388:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800738c:	f993 3000 	ldrsb.w	r3, [r3]
 8007390:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007394:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007398:	b913      	cbnz	r3, 80073a0 <pow+0x13c>
 800739a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800739e:	e7a1      	b.n	80072e4 <pow+0x80>
 80073a0:	4967      	ldr	r1, [pc, #412]	; (8007540 <pow+0x2dc>)
 80073a2:	2000      	movs	r0, #0
 80073a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d19b      	bne.n	80072e4 <pow+0x80>
 80073ac:	f7fe ffcc 	bl	8006348 <__errno>
 80073b0:	2321      	movs	r3, #33	; 0x21
 80073b2:	6003      	str	r3, [r0, #0]
 80073b4:	e7c4      	b.n	8007340 <pow+0xdc>
 80073b6:	eeb0 0a48 	vmov.f32	s0, s16
 80073ba:	eef0 0a68 	vmov.f32	s1, s17
 80073be:	f000 fe94 	bl	80080ea <finite>
 80073c2:	9001      	str	r0, [sp, #4]
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f040 808a 	bne.w	80074de <pow+0x27a>
 80073ca:	ec47 6b10 	vmov	d0, r6, r7
 80073ce:	f000 fe8c 	bl	80080ea <finite>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f000 8083 	beq.w	80074de <pow+0x27a>
 80073d8:	ec45 4b10 	vmov	d0, r4, r5
 80073dc:	f000 fe85 	bl	80080ea <finite>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d07c      	beq.n	80074de <pow+0x27a>
 80073e4:	ec53 2b18 	vmov	r2, r3, d8
 80073e8:	ee18 0a10 	vmov	r0, s16
 80073ec:	4619      	mov	r1, r3
 80073ee:	f7f9 fb69 	bl	8000ac4 <__aeabi_dcmpun>
 80073f2:	f998 9000 	ldrsb.w	r9, [r8]
 80073f6:	4b50      	ldr	r3, [pc, #320]	; (8007538 <pow+0x2d4>)
 80073f8:	b1b0      	cbz	r0, 8007428 <pow+0x1c4>
 80073fa:	2201      	movs	r2, #1
 80073fc:	9303      	str	r3, [sp, #12]
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	9202      	str	r2, [sp, #8]
 8007402:	930a      	str	r3, [sp, #40]	; 0x28
 8007404:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007408:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800740c:	f1b9 0f00 	cmp.w	r9, #0
 8007410:	d0c3      	beq.n	800739a <pow+0x136>
 8007412:	4652      	mov	r2, sl
 8007414:	465b      	mov	r3, fp
 8007416:	4650      	mov	r0, sl
 8007418:	4659      	mov	r1, fp
 800741a:	f7f9 f9e3 	bl	80007e4 <__aeabi_ddiv>
 800741e:	f1b9 0f02 	cmp.w	r9, #2
 8007422:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007426:	e7c0      	b.n	80073aa <pow+0x146>
 8007428:	2203      	movs	r2, #3
 800742a:	9202      	str	r2, [sp, #8]
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	900a      	str	r0, [sp, #40]	; 0x28
 8007430:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007434:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007438:	f1b9 0f00 	cmp.w	r9, #0
 800743c:	d12c      	bne.n	8007498 <pow+0x234>
 800743e:	4b41      	ldr	r3, [pc, #260]	; (8007544 <pow+0x2e0>)
 8007440:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007444:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007448:	4630      	mov	r0, r6
 800744a:	4652      	mov	r2, sl
 800744c:	465b      	mov	r3, fp
 800744e:	4639      	mov	r1, r7
 8007450:	f7f9 fb10 	bl	8000a74 <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	d066      	beq.n	8007526 <pow+0x2c2>
 8007458:	2200      	movs	r2, #0
 800745a:	4b3b      	ldr	r3, [pc, #236]	; (8007548 <pow+0x2e4>)
 800745c:	4620      	mov	r0, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7f9 f896 	bl	8000590 <__aeabi_dmul>
 8007464:	4604      	mov	r4, r0
 8007466:	460d      	mov	r5, r1
 8007468:	ec45 4b10 	vmov	d0, r4, r5
 800746c:	f000 fe50 	bl	8008110 <rint>
 8007470:	4620      	mov	r0, r4
 8007472:	ec53 2b10 	vmov	r2, r3, d0
 8007476:	4629      	mov	r1, r5
 8007478:	f7f9 faf2 	bl	8000a60 <__aeabi_dcmpeq>
 800747c:	b920      	cbnz	r0, 8007488 <pow+0x224>
 800747e:	4b33      	ldr	r3, [pc, #204]	; (800754c <pow+0x2e8>)
 8007480:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007484:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007488:	f998 3000 	ldrsb.w	r3, [r8]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d14a      	bne.n	8007526 <pow+0x2c2>
 8007490:	f7fe ff5a 	bl	8006348 <__errno>
 8007494:	2322      	movs	r3, #34	; 0x22
 8007496:	e78c      	b.n	80073b2 <pow+0x14e>
 8007498:	4b2d      	ldr	r3, [pc, #180]	; (8007550 <pow+0x2ec>)
 800749a:	2200      	movs	r2, #0
 800749c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80074a0:	4630      	mov	r0, r6
 80074a2:	4652      	mov	r2, sl
 80074a4:	465b      	mov	r3, fp
 80074a6:	4639      	mov	r1, r7
 80074a8:	f7f9 fae4 	bl	8000a74 <__aeabi_dcmplt>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0eb      	beq.n	8007488 <pow+0x224>
 80074b0:	2200      	movs	r2, #0
 80074b2:	4b25      	ldr	r3, [pc, #148]	; (8007548 <pow+0x2e4>)
 80074b4:	4620      	mov	r0, r4
 80074b6:	4629      	mov	r1, r5
 80074b8:	f7f9 f86a 	bl	8000590 <__aeabi_dmul>
 80074bc:	4604      	mov	r4, r0
 80074be:	460d      	mov	r5, r1
 80074c0:	ec45 4b10 	vmov	d0, r4, r5
 80074c4:	f000 fe24 	bl	8008110 <rint>
 80074c8:	4620      	mov	r0, r4
 80074ca:	ec53 2b10 	vmov	r2, r3, d0
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f9 fac6 	bl	8000a60 <__aeabi_dcmpeq>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d1d7      	bne.n	8007488 <pow+0x224>
 80074d8:	2200      	movs	r2, #0
 80074da:	4b19      	ldr	r3, [pc, #100]	; (8007540 <pow+0x2dc>)
 80074dc:	e7d2      	b.n	8007484 <pow+0x220>
 80074de:	2200      	movs	r2, #0
 80074e0:	2300      	movs	r3, #0
 80074e2:	ec51 0b18 	vmov	r0, r1, d8
 80074e6:	f7f9 fabb 	bl	8000a60 <__aeabi_dcmpeq>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f af30 	beq.w	8007350 <pow+0xec>
 80074f0:	ec47 6b10 	vmov	d0, r6, r7
 80074f4:	f000 fdf9 	bl	80080ea <finite>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f43f af29 	beq.w	8007350 <pow+0xec>
 80074fe:	ec45 4b10 	vmov	d0, r4, r5
 8007502:	f000 fdf2 	bl	80080ea <finite>
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f af22 	beq.w	8007350 <pow+0xec>
 800750c:	2304      	movs	r3, #4
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	4b09      	ldr	r3, [pc, #36]	; (8007538 <pow+0x2d4>)
 8007512:	9303      	str	r3, [sp, #12]
 8007514:	2300      	movs	r3, #0
 8007516:	930a      	str	r3, [sp, #40]	; 0x28
 8007518:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800751c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007520:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007524:	e7b0      	b.n	8007488 <pow+0x224>
 8007526:	a802      	add	r0, sp, #8
 8007528:	f000 fde7 	bl	80080fa <matherr>
 800752c:	2800      	cmp	r0, #0
 800752e:	f47f af07 	bne.w	8007340 <pow+0xdc>
 8007532:	e7ad      	b.n	8007490 <pow+0x22c>
 8007534:	200001e8 	.word	0x200001e8
 8007538:	0800859b 	.word	0x0800859b
 800753c:	3ff00000 	.word	0x3ff00000
 8007540:	fff00000 	.word	0xfff00000
 8007544:	47efffff 	.word	0x47efffff
 8007548:	3fe00000 	.word	0x3fe00000
 800754c:	c7efffff 	.word	0xc7efffff
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	00000000 	.word	0x00000000

08007558 <__ieee754_pow>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	b091      	sub	sp, #68	; 0x44
 800755e:	ed8d 1b00 	vstr	d1, [sp]
 8007562:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8007566:	ec57 6b10 	vmov	r6, r7, d0
 800756a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800756e:	ea58 0302 	orrs.w	r3, r8, r2
 8007572:	ee10 aa10 	vmov	sl, s0
 8007576:	463d      	mov	r5, r7
 8007578:	f000 84bd 	beq.w	8007ef6 <__ieee754_pow+0x99e>
 800757c:	4b78      	ldr	r3, [pc, #480]	; (8007760 <__ieee754_pow+0x208>)
 800757e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007582:	429c      	cmp	r4, r3
 8007584:	dc09      	bgt.n	800759a <__ieee754_pow+0x42>
 8007586:	d103      	bne.n	8007590 <__ieee754_pow+0x38>
 8007588:	b93e      	cbnz	r6, 800759a <__ieee754_pow+0x42>
 800758a:	45a0      	cmp	r8, r4
 800758c:	dc0d      	bgt.n	80075aa <__ieee754_pow+0x52>
 800758e:	e001      	b.n	8007594 <__ieee754_pow+0x3c>
 8007590:	4598      	cmp	r8, r3
 8007592:	dc02      	bgt.n	800759a <__ieee754_pow+0x42>
 8007594:	4598      	cmp	r8, r3
 8007596:	d10e      	bne.n	80075b6 <__ieee754_pow+0x5e>
 8007598:	b16a      	cbz	r2, 80075b6 <__ieee754_pow+0x5e>
 800759a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800759e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075a2:	ea54 030a 	orrs.w	r3, r4, sl
 80075a6:	f000 84a6 	beq.w	8007ef6 <__ieee754_pow+0x99e>
 80075aa:	486e      	ldr	r0, [pc, #440]	; (8007764 <__ieee754_pow+0x20c>)
 80075ac:	b011      	add	sp, #68	; 0x44
 80075ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b2:	f000 bda5 	b.w	8008100 <nan>
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	da53      	bge.n	8007662 <__ieee754_pow+0x10a>
 80075ba:	4b6b      	ldr	r3, [pc, #428]	; (8007768 <__ieee754_pow+0x210>)
 80075bc:	4598      	cmp	r8, r3
 80075be:	dc4d      	bgt.n	800765c <__ieee754_pow+0x104>
 80075c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80075c4:	4598      	cmp	r8, r3
 80075c6:	dd4c      	ble.n	8007662 <__ieee754_pow+0x10a>
 80075c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80075cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80075d0:	2b14      	cmp	r3, #20
 80075d2:	dd26      	ble.n	8007622 <__ieee754_pow+0xca>
 80075d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80075d8:	fa22 f103 	lsr.w	r1, r2, r3
 80075dc:	fa01 f303 	lsl.w	r3, r1, r3
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d13e      	bne.n	8007662 <__ieee754_pow+0x10a>
 80075e4:	f001 0101 	and.w	r1, r1, #1
 80075e8:	f1c1 0b02 	rsb	fp, r1, #2
 80075ec:	2a00      	cmp	r2, #0
 80075ee:	d15b      	bne.n	80076a8 <__ieee754_pow+0x150>
 80075f0:	4b5b      	ldr	r3, [pc, #364]	; (8007760 <__ieee754_pow+0x208>)
 80075f2:	4598      	cmp	r8, r3
 80075f4:	d124      	bne.n	8007640 <__ieee754_pow+0xe8>
 80075f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80075fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80075fe:	ea53 030a 	orrs.w	r3, r3, sl
 8007602:	f000 8478 	beq.w	8007ef6 <__ieee754_pow+0x99e>
 8007606:	4b59      	ldr	r3, [pc, #356]	; (800776c <__ieee754_pow+0x214>)
 8007608:	429c      	cmp	r4, r3
 800760a:	dd2d      	ble.n	8007668 <__ieee754_pow+0x110>
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	f280 8475 	bge.w	8007efe <__ieee754_pow+0x9a6>
 8007614:	2000      	movs	r0, #0
 8007616:	2100      	movs	r1, #0
 8007618:	ec41 0b10 	vmov	d0, r0, r1
 800761c:	b011      	add	sp, #68	; 0x44
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	2a00      	cmp	r2, #0
 8007624:	d13e      	bne.n	80076a4 <__ieee754_pow+0x14c>
 8007626:	f1c3 0314 	rsb	r3, r3, #20
 800762a:	fa48 f103 	asr.w	r1, r8, r3
 800762e:	fa01 f303 	lsl.w	r3, r1, r3
 8007632:	4598      	cmp	r8, r3
 8007634:	f040 846b 	bne.w	8007f0e <__ieee754_pow+0x9b6>
 8007638:	f001 0101 	and.w	r1, r1, #1
 800763c:	f1c1 0b02 	rsb	fp, r1, #2
 8007640:	4b4b      	ldr	r3, [pc, #300]	; (8007770 <__ieee754_pow+0x218>)
 8007642:	4598      	cmp	r8, r3
 8007644:	d118      	bne.n	8007678 <__ieee754_pow+0x120>
 8007646:	f1b9 0f00 	cmp.w	r9, #0
 800764a:	f280 845c 	bge.w	8007f06 <__ieee754_pow+0x9ae>
 800764e:	4948      	ldr	r1, [pc, #288]	; (8007770 <__ieee754_pow+0x218>)
 8007650:	4632      	mov	r2, r6
 8007652:	463b      	mov	r3, r7
 8007654:	2000      	movs	r0, #0
 8007656:	f7f9 f8c5 	bl	80007e4 <__aeabi_ddiv>
 800765a:	e7dd      	b.n	8007618 <__ieee754_pow+0xc0>
 800765c:	f04f 0b02 	mov.w	fp, #2
 8007660:	e7c4      	b.n	80075ec <__ieee754_pow+0x94>
 8007662:	f04f 0b00 	mov.w	fp, #0
 8007666:	e7c1      	b.n	80075ec <__ieee754_pow+0x94>
 8007668:	f1b9 0f00 	cmp.w	r9, #0
 800766c:	dad2      	bge.n	8007614 <__ieee754_pow+0xbc>
 800766e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8007672:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007676:	e7cf      	b.n	8007618 <__ieee754_pow+0xc0>
 8007678:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800767c:	d106      	bne.n	800768c <__ieee754_pow+0x134>
 800767e:	4632      	mov	r2, r6
 8007680:	463b      	mov	r3, r7
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	f7f8 ff83 	bl	8000590 <__aeabi_dmul>
 800768a:	e7c5      	b.n	8007618 <__ieee754_pow+0xc0>
 800768c:	4b39      	ldr	r3, [pc, #228]	; (8007774 <__ieee754_pow+0x21c>)
 800768e:	4599      	cmp	r9, r3
 8007690:	d10a      	bne.n	80076a8 <__ieee754_pow+0x150>
 8007692:	2d00      	cmp	r5, #0
 8007694:	db08      	blt.n	80076a8 <__ieee754_pow+0x150>
 8007696:	ec47 6b10 	vmov	d0, r6, r7
 800769a:	b011      	add	sp, #68	; 0x44
 800769c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	f000 bc6c 	b.w	8007f7c <__ieee754_sqrt>
 80076a4:	f04f 0b00 	mov.w	fp, #0
 80076a8:	ec47 6b10 	vmov	d0, r6, r7
 80076ac:	f000 fd16 	bl	80080dc <fabs>
 80076b0:	ec51 0b10 	vmov	r0, r1, d0
 80076b4:	f1ba 0f00 	cmp.w	sl, #0
 80076b8:	d127      	bne.n	800770a <__ieee754_pow+0x1b2>
 80076ba:	b124      	cbz	r4, 80076c6 <__ieee754_pow+0x16e>
 80076bc:	4b2c      	ldr	r3, [pc, #176]	; (8007770 <__ieee754_pow+0x218>)
 80076be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d121      	bne.n	800770a <__ieee754_pow+0x1b2>
 80076c6:	f1b9 0f00 	cmp.w	r9, #0
 80076ca:	da05      	bge.n	80076d8 <__ieee754_pow+0x180>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	2000      	movs	r0, #0
 80076d2:	4927      	ldr	r1, [pc, #156]	; (8007770 <__ieee754_pow+0x218>)
 80076d4:	f7f9 f886 	bl	80007e4 <__aeabi_ddiv>
 80076d8:	2d00      	cmp	r5, #0
 80076da:	da9d      	bge.n	8007618 <__ieee754_pow+0xc0>
 80076dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80076e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80076e4:	ea54 030b 	orrs.w	r3, r4, fp
 80076e8:	d108      	bne.n	80076fc <__ieee754_pow+0x1a4>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4610      	mov	r0, r2
 80076f0:	4619      	mov	r1, r3
 80076f2:	f7f8 fd99 	bl	8000228 <__aeabi_dsub>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e7ac      	b.n	8007656 <__ieee754_pow+0xfe>
 80076fc:	f1bb 0f01 	cmp.w	fp, #1
 8007700:	d18a      	bne.n	8007618 <__ieee754_pow+0xc0>
 8007702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007706:	4619      	mov	r1, r3
 8007708:	e786      	b.n	8007618 <__ieee754_pow+0xc0>
 800770a:	0fed      	lsrs	r5, r5, #31
 800770c:	1e6b      	subs	r3, r5, #1
 800770e:	930d      	str	r3, [sp, #52]	; 0x34
 8007710:	ea5b 0303 	orrs.w	r3, fp, r3
 8007714:	d102      	bne.n	800771c <__ieee754_pow+0x1c4>
 8007716:	4632      	mov	r2, r6
 8007718:	463b      	mov	r3, r7
 800771a:	e7e8      	b.n	80076ee <__ieee754_pow+0x196>
 800771c:	4b16      	ldr	r3, [pc, #88]	; (8007778 <__ieee754_pow+0x220>)
 800771e:	4598      	cmp	r8, r3
 8007720:	f340 80fe 	ble.w	8007920 <__ieee754_pow+0x3c8>
 8007724:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007728:	4598      	cmp	r8, r3
 800772a:	dd0a      	ble.n	8007742 <__ieee754_pow+0x1ea>
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <__ieee754_pow+0x214>)
 800772e:	429c      	cmp	r4, r3
 8007730:	dc0d      	bgt.n	800774e <__ieee754_pow+0x1f6>
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	f6bf af6d 	bge.w	8007614 <__ieee754_pow+0xbc>
 800773a:	a307      	add	r3, pc, #28	; (adr r3, 8007758 <__ieee754_pow+0x200>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	e79f      	b.n	8007682 <__ieee754_pow+0x12a>
 8007742:	4b0e      	ldr	r3, [pc, #56]	; (800777c <__ieee754_pow+0x224>)
 8007744:	429c      	cmp	r4, r3
 8007746:	ddf4      	ble.n	8007732 <__ieee754_pow+0x1da>
 8007748:	4b09      	ldr	r3, [pc, #36]	; (8007770 <__ieee754_pow+0x218>)
 800774a:	429c      	cmp	r4, r3
 800774c:	dd18      	ble.n	8007780 <__ieee754_pow+0x228>
 800774e:	f1b9 0f00 	cmp.w	r9, #0
 8007752:	dcf2      	bgt.n	800773a <__ieee754_pow+0x1e2>
 8007754:	e75e      	b.n	8007614 <__ieee754_pow+0xbc>
 8007756:	bf00      	nop
 8007758:	8800759c 	.word	0x8800759c
 800775c:	7e37e43c 	.word	0x7e37e43c
 8007760:	7ff00000 	.word	0x7ff00000
 8007764:	0800839f 	.word	0x0800839f
 8007768:	433fffff 	.word	0x433fffff
 800776c:	3fefffff 	.word	0x3fefffff
 8007770:	3ff00000 	.word	0x3ff00000
 8007774:	3fe00000 	.word	0x3fe00000
 8007778:	41e00000 	.word	0x41e00000
 800777c:	3feffffe 	.word	0x3feffffe
 8007780:	2200      	movs	r2, #0
 8007782:	4b63      	ldr	r3, [pc, #396]	; (8007910 <__ieee754_pow+0x3b8>)
 8007784:	f7f8 fd50 	bl	8000228 <__aeabi_dsub>
 8007788:	a355      	add	r3, pc, #340	; (adr r3, 80078e0 <__ieee754_pow+0x388>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	4604      	mov	r4, r0
 8007790:	460d      	mov	r5, r1
 8007792:	f7f8 fefd 	bl	8000590 <__aeabi_dmul>
 8007796:	a354      	add	r3, pc, #336	; (adr r3, 80078e8 <__ieee754_pow+0x390>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	4606      	mov	r6, r0
 800779e:	460f      	mov	r7, r1
 80077a0:	4620      	mov	r0, r4
 80077a2:	4629      	mov	r1, r5
 80077a4:	f7f8 fef4 	bl	8000590 <__aeabi_dmul>
 80077a8:	2200      	movs	r2, #0
 80077aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ae:	4b59      	ldr	r3, [pc, #356]	; (8007914 <__ieee754_pow+0x3bc>)
 80077b0:	4620      	mov	r0, r4
 80077b2:	4629      	mov	r1, r5
 80077b4:	f7f8 feec 	bl	8000590 <__aeabi_dmul>
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	a14c      	add	r1, pc, #304	; (adr r1, 80078f0 <__ieee754_pow+0x398>)
 80077be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c2:	f7f8 fd31 	bl	8000228 <__aeabi_dsub>
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	f7f8 fee1 	bl	8000590 <__aeabi_dmul>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	2000      	movs	r0, #0
 80077d4:	4950      	ldr	r1, [pc, #320]	; (8007918 <__ieee754_pow+0x3c0>)
 80077d6:	f7f8 fd27 	bl	8000228 <__aeabi_dsub>
 80077da:	4622      	mov	r2, r4
 80077dc:	462b      	mov	r3, r5
 80077de:	4680      	mov	r8, r0
 80077e0:	4689      	mov	r9, r1
 80077e2:	4620      	mov	r0, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	f7f8 fed3 	bl	8000590 <__aeabi_dmul>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	f7f8 fecd 	bl	8000590 <__aeabi_dmul>
 80077f6:	a340      	add	r3, pc, #256	; (adr r3, 80078f8 <__ieee754_pow+0x3a0>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f8 fec8 	bl	8000590 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007808:	f7f8 fd0e 	bl	8000228 <__aeabi_dsub>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f8 fd08 	bl	800022c <__adddf3>
 800781c:	2000      	movs	r0, #0
 800781e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007822:	4632      	mov	r2, r6
 8007824:	463b      	mov	r3, r7
 8007826:	f7f8 fcff 	bl	8000228 <__aeabi_dsub>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4620      	mov	r0, r4
 8007830:	4629      	mov	r1, r5
 8007832:	f7f8 fcf9 	bl	8000228 <__aeabi_dsub>
 8007836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007838:	f10b 33ff 	add.w	r3, fp, #4294967295
 800783c:	4313      	orrs	r3, r2
 800783e:	4606      	mov	r6, r0
 8007840:	460f      	mov	r7, r1
 8007842:	f040 81eb 	bne.w	8007c1c <__ieee754_pow+0x6c4>
 8007846:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007900 <__ieee754_pow+0x3a8>
 800784a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800784e:	2400      	movs	r4, #0
 8007850:	4622      	mov	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007858:	ed8d 7b02 	vstr	d7, [sp, #8]
 800785c:	f7f8 fce4 	bl	8000228 <__aeabi_dsub>
 8007860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007864:	f7f8 fe94 	bl	8000590 <__aeabi_dmul>
 8007868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786c:	4680      	mov	r8, r0
 800786e:	4689      	mov	r9, r1
 8007870:	4630      	mov	r0, r6
 8007872:	4639      	mov	r1, r7
 8007874:	f7f8 fe8c 	bl	8000590 <__aeabi_dmul>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4640      	mov	r0, r8
 800787e:	4649      	mov	r1, r9
 8007880:	f7f8 fcd4 	bl	800022c <__adddf3>
 8007884:	4622      	mov	r2, r4
 8007886:	462b      	mov	r3, r5
 8007888:	4680      	mov	r8, r0
 800788a:	4689      	mov	r9, r1
 800788c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007890:	f7f8 fe7e 	bl	8000590 <__aeabi_dmul>
 8007894:	460b      	mov	r3, r1
 8007896:	4604      	mov	r4, r0
 8007898:	460d      	mov	r5, r1
 800789a:	4602      	mov	r2, r0
 800789c:	4649      	mov	r1, r9
 800789e:	4640      	mov	r0, r8
 80078a0:	e9cd 4500 	strd	r4, r5, [sp]
 80078a4:	f7f8 fcc2 	bl	800022c <__adddf3>
 80078a8:	4b1c      	ldr	r3, [pc, #112]	; (800791c <__ieee754_pow+0x3c4>)
 80078aa:	4299      	cmp	r1, r3
 80078ac:	4606      	mov	r6, r0
 80078ae:	460f      	mov	r7, r1
 80078b0:	468b      	mov	fp, r1
 80078b2:	f340 82f7 	ble.w	8007ea4 <__ieee754_pow+0x94c>
 80078b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80078ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80078be:	4303      	orrs	r3, r0
 80078c0:	f000 81ea 	beq.w	8007c98 <__ieee754_pow+0x740>
 80078c4:	a310      	add	r3, pc, #64	; (adr r3, 8007908 <__ieee754_pow+0x3b0>)
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ce:	f7f8 fe5f 	bl	8000590 <__aeabi_dmul>
 80078d2:	a30d      	add	r3, pc, #52	; (adr r3, 8007908 <__ieee754_pow+0x3b0>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	e6d5      	b.n	8007686 <__ieee754_pow+0x12e>
 80078da:	bf00      	nop
 80078dc:	f3af 8000 	nop.w
 80078e0:	60000000 	.word	0x60000000
 80078e4:	3ff71547 	.word	0x3ff71547
 80078e8:	f85ddf44 	.word	0xf85ddf44
 80078ec:	3e54ae0b 	.word	0x3e54ae0b
 80078f0:	55555555 	.word	0x55555555
 80078f4:	3fd55555 	.word	0x3fd55555
 80078f8:	652b82fe 	.word	0x652b82fe
 80078fc:	3ff71547 	.word	0x3ff71547
 8007900:	00000000 	.word	0x00000000
 8007904:	bff00000 	.word	0xbff00000
 8007908:	8800759c 	.word	0x8800759c
 800790c:	7e37e43c 	.word	0x7e37e43c
 8007910:	3ff00000 	.word	0x3ff00000
 8007914:	3fd00000 	.word	0x3fd00000
 8007918:	3fe00000 	.word	0x3fe00000
 800791c:	408fffff 	.word	0x408fffff
 8007920:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	da05      	bge.n	8007936 <__ieee754_pow+0x3de>
 800792a:	4bd3      	ldr	r3, [pc, #844]	; (8007c78 <__ieee754_pow+0x720>)
 800792c:	f7f8 fe30 	bl	8000590 <__aeabi_dmul>
 8007930:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007934:	460c      	mov	r4, r1
 8007936:	1523      	asrs	r3, r4, #20
 8007938:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800793c:	4413      	add	r3, r2
 800793e:	9307      	str	r3, [sp, #28]
 8007940:	4bce      	ldr	r3, [pc, #824]	; (8007c7c <__ieee754_pow+0x724>)
 8007942:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007946:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800794a:	429c      	cmp	r4, r3
 800794c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007950:	dd08      	ble.n	8007964 <__ieee754_pow+0x40c>
 8007952:	4bcb      	ldr	r3, [pc, #812]	; (8007c80 <__ieee754_pow+0x728>)
 8007954:	429c      	cmp	r4, r3
 8007956:	f340 815e 	ble.w	8007c16 <__ieee754_pow+0x6be>
 800795a:	9b07      	ldr	r3, [sp, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007964:	f04f 0a00 	mov.w	sl, #0
 8007968:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800796c:	930c      	str	r3, [sp, #48]	; 0x30
 800796e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007970:	4bc4      	ldr	r3, [pc, #784]	; (8007c84 <__ieee754_pow+0x72c>)
 8007972:	4413      	add	r3, r2
 8007974:	ed93 7b00 	vldr	d7, [r3]
 8007978:	4629      	mov	r1, r5
 800797a:	ec53 2b17 	vmov	r2, r3, d7
 800797e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007982:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007986:	f7f8 fc4f 	bl	8000228 <__aeabi_dsub>
 800798a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007996:	f7f8 fc49 	bl	800022c <__adddf3>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	2000      	movs	r0, #0
 80079a0:	49b9      	ldr	r1, [pc, #740]	; (8007c88 <__ieee754_pow+0x730>)
 80079a2:	f7f8 ff1f 	bl	80007e4 <__aeabi_ddiv>
 80079a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4630      	mov	r0, r6
 80079b0:	4639      	mov	r1, r7
 80079b2:	f7f8 fded 	bl	8000590 <__aeabi_dmul>
 80079b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80079be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80079c2:	2300      	movs	r3, #0
 80079c4:	9302      	str	r3, [sp, #8]
 80079c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80079ca:	106d      	asrs	r5, r5, #1
 80079cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80079d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80079d4:	2200      	movs	r2, #0
 80079d6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	4614      	mov	r4, r2
 80079e0:	461d      	mov	r5, r3
 80079e2:	f7f8 fdd5 	bl	8000590 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f8 fc1b 	bl	8000228 <__aeabi_dsub>
 80079f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079f6:	4606      	mov	r6, r0
 80079f8:	460f      	mov	r7, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7f8 fc13 	bl	8000228 <__aeabi_dsub>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a0a:	f7f8 fc0d 	bl	8000228 <__aeabi_dsub>
 8007a0e:	4642      	mov	r2, r8
 8007a10:	464b      	mov	r3, r9
 8007a12:	f7f8 fdbd 	bl	8000590 <__aeabi_dmul>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	f7f8 fc03 	bl	8000228 <__aeabi_dsub>
 8007a22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007a26:	f7f8 fdb3 	bl	8000590 <__aeabi_dmul>
 8007a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a32:	4610      	mov	r0, r2
 8007a34:	4619      	mov	r1, r3
 8007a36:	f7f8 fdab 	bl	8000590 <__aeabi_dmul>
 8007a3a:	a37b      	add	r3, pc, #492	; (adr r3, 8007c28 <__ieee754_pow+0x6d0>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	f7f8 fda4 	bl	8000590 <__aeabi_dmul>
 8007a48:	a379      	add	r3, pc, #484	; (adr r3, 8007c30 <__ieee754_pow+0x6d8>)
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	f7f8 fbed 	bl	800022c <__adddf3>
 8007a52:	4622      	mov	r2, r4
 8007a54:	462b      	mov	r3, r5
 8007a56:	f7f8 fd9b 	bl	8000590 <__aeabi_dmul>
 8007a5a:	a377      	add	r3, pc, #476	; (adr r3, 8007c38 <__ieee754_pow+0x6e0>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f7f8 fbe4 	bl	800022c <__adddf3>
 8007a64:	4622      	mov	r2, r4
 8007a66:	462b      	mov	r3, r5
 8007a68:	f7f8 fd92 	bl	8000590 <__aeabi_dmul>
 8007a6c:	a374      	add	r3, pc, #464	; (adr r3, 8007c40 <__ieee754_pow+0x6e8>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fbdb 	bl	800022c <__adddf3>
 8007a76:	4622      	mov	r2, r4
 8007a78:	462b      	mov	r3, r5
 8007a7a:	f7f8 fd89 	bl	8000590 <__aeabi_dmul>
 8007a7e:	a372      	add	r3, pc, #456	; (adr r3, 8007c48 <__ieee754_pow+0x6f0>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f8 fbd2 	bl	800022c <__adddf3>
 8007a88:	4622      	mov	r2, r4
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	f7f8 fd80 	bl	8000590 <__aeabi_dmul>
 8007a90:	a36f      	add	r3, pc, #444	; (adr r3, 8007c50 <__ieee754_pow+0x6f8>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 fbc9 	bl	800022c <__adddf3>
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	460f      	mov	r7, r1
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 fd73 	bl	8000590 <__aeabi_dmul>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	f7f8 fd6d 	bl	8000590 <__aeabi_dmul>
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	4604      	mov	r4, r0
 8007aba:	460d      	mov	r5, r1
 8007abc:	464b      	mov	r3, r9
 8007abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ac2:	f7f8 fbb3 	bl	800022c <__adddf3>
 8007ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007aca:	f7f8 fd61 	bl	8000590 <__aeabi_dmul>
 8007ace:	4622      	mov	r2, r4
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	f7f8 fbab 	bl	800022c <__adddf3>
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	4606      	mov	r6, r0
 8007ada:	460f      	mov	r7, r1
 8007adc:	464b      	mov	r3, r9
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f8 fd55 	bl	8000590 <__aeabi_dmul>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4b68      	ldr	r3, [pc, #416]	; (8007c8c <__ieee754_pow+0x734>)
 8007aea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007aee:	f7f8 fb9d 	bl	800022c <__adddf3>
 8007af2:	4632      	mov	r2, r6
 8007af4:	463b      	mov	r3, r7
 8007af6:	f7f8 fb99 	bl	800022c <__adddf3>
 8007afa:	9802      	ldr	r0, [sp, #8]
 8007afc:	460d      	mov	r5, r1
 8007afe:	4604      	mov	r4, r0
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	f7f8 fd42 	bl	8000590 <__aeabi_dmul>
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4680      	mov	r8, r0
 8007b10:	4689      	mov	r9, r1
 8007b12:	4b5e      	ldr	r3, [pc, #376]	; (8007c8c <__ieee754_pow+0x734>)
 8007b14:	4620      	mov	r0, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7f8 fb86 	bl	8000228 <__aeabi_dsub>
 8007b1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b20:	f7f8 fb82 	bl	8000228 <__aeabi_dsub>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 fb7c 	bl	8000228 <__aeabi_dsub>
 8007b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b34:	f7f8 fd2c 	bl	8000590 <__aeabi_dmul>
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	460f      	mov	r7, r1
 8007b3e:	462b      	mov	r3, r5
 8007b40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b44:	f7f8 fd24 	bl	8000590 <__aeabi_dmul>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	4639      	mov	r1, r7
 8007b50:	f7f8 fb6c 	bl	800022c <__adddf3>
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4649      	mov	r1, r9
 8007b60:	f7f8 fb64 	bl	800022c <__adddf3>
 8007b64:	9802      	ldr	r0, [sp, #8]
 8007b66:	a33c      	add	r3, pc, #240	; (adr r3, 8007c58 <__ieee754_pow+0x700>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	f7f8 fd0e 	bl	8000590 <__aeabi_dmul>
 8007b74:	4642      	mov	r2, r8
 8007b76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 fb52 	bl	8000228 <__aeabi_dsub>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 fb4c 	bl	8000228 <__aeabi_dsub>
 8007b90:	a333      	add	r3, pc, #204	; (adr r3, 8007c60 <__ieee754_pow+0x708>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fcfb 	bl	8000590 <__aeabi_dmul>
 8007b9a:	a333      	add	r3, pc, #204	; (adr r3, 8007c68 <__ieee754_pow+0x710>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fcf2 	bl	8000590 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f7f8 fb3a 	bl	800022c <__adddf3>
 8007bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bba:	4b35      	ldr	r3, [pc, #212]	; (8007c90 <__ieee754_pow+0x738>)
 8007bbc:	4413      	add	r3, r2
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	f7f8 fb33 	bl	800022c <__adddf3>
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	9807      	ldr	r0, [sp, #28]
 8007bca:	460d      	mov	r5, r1
 8007bcc:	f7f8 fc7a 	bl	80004c4 <__aeabi_i2d>
 8007bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bd2:	4b30      	ldr	r3, [pc, #192]	; (8007c94 <__ieee754_pow+0x73c>)
 8007bd4:	4413      	add	r3, r2
 8007bd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460f      	mov	r7, r1
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007be6:	f7f8 fb21 	bl	800022c <__adddf3>
 8007bea:	4642      	mov	r2, r8
 8007bec:	464b      	mov	r3, r9
 8007bee:	f7f8 fb1d 	bl	800022c <__adddf3>
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	f7f8 fb19 	bl	800022c <__adddf3>
 8007bfa:	9802      	ldr	r0, [sp, #8]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	463b      	mov	r3, r7
 8007c00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c04:	f7f8 fb10 	bl	8000228 <__aeabi_dsub>
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	f7f8 fb0c 	bl	8000228 <__aeabi_dsub>
 8007c10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c14:	e607      	b.n	8007826 <__ieee754_pow+0x2ce>
 8007c16:	f04f 0a01 	mov.w	sl, #1
 8007c1a:	e6a5      	b.n	8007968 <__ieee754_pow+0x410>
 8007c1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007c70 <__ieee754_pow+0x718>
 8007c20:	e613      	b.n	800784a <__ieee754_pow+0x2f2>
 8007c22:	bf00      	nop
 8007c24:	f3af 8000 	nop.w
 8007c28:	4a454eef 	.word	0x4a454eef
 8007c2c:	3fca7e28 	.word	0x3fca7e28
 8007c30:	93c9db65 	.word	0x93c9db65
 8007c34:	3fcd864a 	.word	0x3fcd864a
 8007c38:	a91d4101 	.word	0xa91d4101
 8007c3c:	3fd17460 	.word	0x3fd17460
 8007c40:	518f264d 	.word	0x518f264d
 8007c44:	3fd55555 	.word	0x3fd55555
 8007c48:	db6fabff 	.word	0xdb6fabff
 8007c4c:	3fdb6db6 	.word	0x3fdb6db6
 8007c50:	33333303 	.word	0x33333303
 8007c54:	3fe33333 	.word	0x3fe33333
 8007c58:	e0000000 	.word	0xe0000000
 8007c5c:	3feec709 	.word	0x3feec709
 8007c60:	dc3a03fd 	.word	0xdc3a03fd
 8007c64:	3feec709 	.word	0x3feec709
 8007c68:	145b01f5 	.word	0x145b01f5
 8007c6c:	be3e2fe0 	.word	0xbe3e2fe0
 8007c70:	00000000 	.word	0x00000000
 8007c74:	3ff00000 	.word	0x3ff00000
 8007c78:	43400000 	.word	0x43400000
 8007c7c:	0003988e 	.word	0x0003988e
 8007c80:	000bb679 	.word	0x000bb679
 8007c84:	080085a0 	.word	0x080085a0
 8007c88:	3ff00000 	.word	0x3ff00000
 8007c8c:	40080000 	.word	0x40080000
 8007c90:	080085c0 	.word	0x080085c0
 8007c94:	080085b0 	.word	0x080085b0
 8007c98:	a3b6      	add	r3, pc, #728	; (adr r3, 8007f74 <__ieee754_pow+0xa1c>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 fac3 	bl	800022c <__adddf3>
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cac:	462b      	mov	r3, r5
 8007cae:	4630      	mov	r0, r6
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	f7f8 fab9 	bl	8000228 <__aeabi_dsub>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cbe:	f7f8 fef7 	bl	8000ab0 <__aeabi_dcmpgt>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f47f adfe 	bne.w	80078c4 <__ieee754_pow+0x36c>
 8007cc8:	4aa5      	ldr	r2, [pc, #660]	; (8007f60 <__ieee754_pow+0xa08>)
 8007cca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	f340 810c 	ble.w	8007eec <__ieee754_pow+0x994>
 8007cd4:	151b      	asrs	r3, r3, #20
 8007cd6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007cda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007cde:	fa4a f303 	asr.w	r3, sl, r3
 8007ce2:	445b      	add	r3, fp
 8007ce4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007ce8:	4e9e      	ldr	r6, [pc, #632]	; (8007f64 <__ieee754_pow+0xa0c>)
 8007cea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007cee:	4116      	asrs	r6, r2
 8007cf0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	ea23 0106 	bic.w	r1, r3, r6
 8007cfa:	f1c2 0214 	rsb	r2, r2, #20
 8007cfe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007d02:	fa4a fa02 	asr.w	sl, sl, r2
 8007d06:	f1bb 0f00 	cmp.w	fp, #0
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4620      	mov	r0, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	bfb8      	it	lt
 8007d14:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d18:	f7f8 fa86 	bl	8000228 <__aeabi_dsub>
 8007d1c:	e9cd 0100 	strd	r0, r1, [sp]
 8007d20:	4642      	mov	r2, r8
 8007d22:	464b      	mov	r3, r9
 8007d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d28:	f7f8 fa80 	bl	800022c <__adddf3>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	a37a      	add	r3, pc, #488	; (adr r3, 8007f18 <__ieee754_pow+0x9c0>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	4604      	mov	r4, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	f7f8 fc2a 	bl	8000590 <__aeabi_dmul>
 8007d3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d40:	4606      	mov	r6, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fa6e 	bl	8000228 <__aeabi_dsub>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 fa68 	bl	8000228 <__aeabi_dsub>
 8007d58:	a371      	add	r3, pc, #452	; (adr r3, 8007f20 <__ieee754_pow+0x9c8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fc17 	bl	8000590 <__aeabi_dmul>
 8007d62:	a371      	add	r3, pc, #452	; (adr r3, 8007f28 <__ieee754_pow+0x9d0>)
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	4680      	mov	r8, r0
 8007d6a:	4689      	mov	r9, r1
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 fc0e 	bl	8000590 <__aeabi_dmul>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	f7f8 fa56 	bl	800022c <__adddf3>
 8007d80:	4604      	mov	r4, r0
 8007d82:	460d      	mov	r5, r1
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fa4e 	bl	800022c <__adddf3>
 8007d90:	4632      	mov	r2, r6
 8007d92:	463b      	mov	r3, r7
 8007d94:	4680      	mov	r8, r0
 8007d96:	4689      	mov	r9, r1
 8007d98:	f7f8 fa46 	bl	8000228 <__aeabi_dsub>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4620      	mov	r0, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	f7f8 fa40 	bl	8000228 <__aeabi_dsub>
 8007da8:	4642      	mov	r2, r8
 8007daa:	4606      	mov	r6, r0
 8007dac:	460f      	mov	r7, r1
 8007dae:	464b      	mov	r3, r9
 8007db0:	4640      	mov	r0, r8
 8007db2:	4649      	mov	r1, r9
 8007db4:	f7f8 fbec 	bl	8000590 <__aeabi_dmul>
 8007db8:	a35d      	add	r3, pc, #372	; (adr r3, 8007f30 <__ieee754_pow+0x9d8>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	f7f8 fbe5 	bl	8000590 <__aeabi_dmul>
 8007dc6:	a35c      	add	r3, pc, #368	; (adr r3, 8007f38 <__ieee754_pow+0x9e0>)
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f7f8 fa2c 	bl	8000228 <__aeabi_dsub>
 8007dd0:	4622      	mov	r2, r4
 8007dd2:	462b      	mov	r3, r5
 8007dd4:	f7f8 fbdc 	bl	8000590 <__aeabi_dmul>
 8007dd8:	a359      	add	r3, pc, #356	; (adr r3, 8007f40 <__ieee754_pow+0x9e8>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fa25 	bl	800022c <__adddf3>
 8007de2:	4622      	mov	r2, r4
 8007de4:	462b      	mov	r3, r5
 8007de6:	f7f8 fbd3 	bl	8000590 <__aeabi_dmul>
 8007dea:	a357      	add	r3, pc, #348	; (adr r3, 8007f48 <__ieee754_pow+0x9f0>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fa1a 	bl	8000228 <__aeabi_dsub>
 8007df4:	4622      	mov	r2, r4
 8007df6:	462b      	mov	r3, r5
 8007df8:	f7f8 fbca 	bl	8000590 <__aeabi_dmul>
 8007dfc:	a354      	add	r3, pc, #336	; (adr r3, 8007f50 <__ieee754_pow+0x9f8>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	f7f8 fa13 	bl	800022c <__adddf3>
 8007e06:	4622      	mov	r2, r4
 8007e08:	462b      	mov	r3, r5
 8007e0a:	f7f8 fbc1 	bl	8000590 <__aeabi_dmul>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f7f8 fa07 	bl	8000228 <__aeabi_dsub>
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	460d      	mov	r5, r1
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	f7f8 fbb3 	bl	8000590 <__aeabi_dmul>
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e34:	4620      	mov	r0, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	f7f8 f9f6 	bl	8000228 <__aeabi_dsub>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e44:	f7f8 fcce 	bl	80007e4 <__aeabi_ddiv>
 8007e48:	4632      	mov	r2, r6
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	463b      	mov	r3, r7
 8007e50:	4640      	mov	r0, r8
 8007e52:	4649      	mov	r1, r9
 8007e54:	f7f8 fb9c 	bl	8000590 <__aeabi_dmul>
 8007e58:	4632      	mov	r2, r6
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	f7f8 f9e6 	bl	800022c <__adddf3>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 f9de 	bl	8000228 <__aeabi_dsub>
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	464b      	mov	r3, r9
 8007e70:	f7f8 f9da 	bl	8000228 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	2000      	movs	r0, #0
 8007e7a:	493b      	ldr	r1, [pc, #236]	; (8007f68 <__ieee754_pow+0xa10>)
 8007e7c:	f7f8 f9d4 	bl	8000228 <__aeabi_dsub>
 8007e80:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007e84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	da31      	bge.n	8007ef2 <__ieee754_pow+0x99a>
 8007e8e:	4650      	mov	r0, sl
 8007e90:	ec43 2b10 	vmov	d0, r2, r3
 8007e94:	f000 f9c4 	bl	8008220 <scalbn>
 8007e98:	ec51 0b10 	vmov	r0, r1, d0
 8007e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ea0:	f7ff bbf1 	b.w	8007686 <__ieee754_pow+0x12e>
 8007ea4:	4b31      	ldr	r3, [pc, #196]	; (8007f6c <__ieee754_pow+0xa14>)
 8007ea6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007eaa:	429e      	cmp	r6, r3
 8007eac:	f77f af0c 	ble.w	8007cc8 <__ieee754_pow+0x770>
 8007eb0:	4b2f      	ldr	r3, [pc, #188]	; (8007f70 <__ieee754_pow+0xa18>)
 8007eb2:	440b      	add	r3, r1
 8007eb4:	4303      	orrs	r3, r0
 8007eb6:	d00b      	beq.n	8007ed0 <__ieee754_pow+0x978>
 8007eb8:	a327      	add	r3, pc, #156	; (adr r3, 8007f58 <__ieee754_pow+0xa00>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ec2:	f7f8 fb65 	bl	8000590 <__aeabi_dmul>
 8007ec6:	a324      	add	r3, pc, #144	; (adr r3, 8007f58 <__ieee754_pow+0xa00>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7ff bbdb 	b.w	8007686 <__ieee754_pow+0x12e>
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	f7f8 f9a8 	bl	8000228 <__aeabi_dsub>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4640      	mov	r0, r8
 8007ede:	4649      	mov	r1, r9
 8007ee0:	f7f8 fdd2 	bl	8000a88 <__aeabi_dcmple>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f43f aeef 	beq.w	8007cc8 <__ieee754_pow+0x770>
 8007eea:	e7e5      	b.n	8007eb8 <__ieee754_pow+0x960>
 8007eec:	f04f 0a00 	mov.w	sl, #0
 8007ef0:	e716      	b.n	8007d20 <__ieee754_pow+0x7c8>
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	e7d2      	b.n	8007e9c <__ieee754_pow+0x944>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	491b      	ldr	r1, [pc, #108]	; (8007f68 <__ieee754_pow+0xa10>)
 8007efa:	f7ff bb8d 	b.w	8007618 <__ieee754_pow+0xc0>
 8007efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f02:	f7ff bb89 	b.w	8007618 <__ieee754_pow+0xc0>
 8007f06:	4630      	mov	r0, r6
 8007f08:	4639      	mov	r1, r7
 8007f0a:	f7ff bb85 	b.w	8007618 <__ieee754_pow+0xc0>
 8007f0e:	4693      	mov	fp, r2
 8007f10:	f7ff bb96 	b.w	8007640 <__ieee754_pow+0xe8>
 8007f14:	f3af 8000 	nop.w
 8007f18:	00000000 	.word	0x00000000
 8007f1c:	3fe62e43 	.word	0x3fe62e43
 8007f20:	fefa39ef 	.word	0xfefa39ef
 8007f24:	3fe62e42 	.word	0x3fe62e42
 8007f28:	0ca86c39 	.word	0x0ca86c39
 8007f2c:	be205c61 	.word	0xbe205c61
 8007f30:	72bea4d0 	.word	0x72bea4d0
 8007f34:	3e663769 	.word	0x3e663769
 8007f38:	c5d26bf1 	.word	0xc5d26bf1
 8007f3c:	3ebbbd41 	.word	0x3ebbbd41
 8007f40:	af25de2c 	.word	0xaf25de2c
 8007f44:	3f11566a 	.word	0x3f11566a
 8007f48:	16bebd93 	.word	0x16bebd93
 8007f4c:	3f66c16c 	.word	0x3f66c16c
 8007f50:	5555553e 	.word	0x5555553e
 8007f54:	3fc55555 	.word	0x3fc55555
 8007f58:	c2f8f359 	.word	0xc2f8f359
 8007f5c:	01a56e1f 	.word	0x01a56e1f
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	000fffff 	.word	0x000fffff
 8007f68:	3ff00000 	.word	0x3ff00000
 8007f6c:	4090cbff 	.word	0x4090cbff
 8007f70:	3f6f3400 	.word	0x3f6f3400
 8007f74:	652b82fe 	.word	0x652b82fe
 8007f78:	3c971547 	.word	0x3c971547

08007f7c <__ieee754_sqrt>:
 8007f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f80:	ec55 4b10 	vmov	r4, r5, d0
 8007f84:	4e54      	ldr	r6, [pc, #336]	; (80080d8 <__ieee754_sqrt+0x15c>)
 8007f86:	43ae      	bics	r6, r5
 8007f88:	ee10 0a10 	vmov	r0, s0
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4621      	mov	r1, r4
 8007f92:	d113      	bne.n	8007fbc <__ieee754_sqrt+0x40>
 8007f94:	ee10 2a10 	vmov	r2, s0
 8007f98:	462b      	mov	r3, r5
 8007f9a:	ee10 0a10 	vmov	r0, s0
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 faf6 	bl	8000590 <__aeabi_dmul>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4620      	mov	r0, r4
 8007faa:	4629      	mov	r1, r5
 8007fac:	f7f8 f93e 	bl	800022c <__adddf3>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	ec45 4b10 	vmov	d0, r4, r5
 8007fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	dc10      	bgt.n	8007fe2 <__ieee754_sqrt+0x66>
 8007fc0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fc4:	4330      	orrs	r0, r6
 8007fc6:	d0f5      	beq.n	8007fb4 <__ieee754_sqrt+0x38>
 8007fc8:	b15d      	cbz	r5, 8007fe2 <__ieee754_sqrt+0x66>
 8007fca:	ee10 2a10 	vmov	r2, s0
 8007fce:	462b      	mov	r3, r5
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7f8 f928 	bl	8000228 <__aeabi_dsub>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	f7f8 fc02 	bl	80007e4 <__aeabi_ddiv>
 8007fe0:	e7e6      	b.n	8007fb0 <__ieee754_sqrt+0x34>
 8007fe2:	151b      	asrs	r3, r3, #20
 8007fe4:	d10c      	bne.n	8008000 <__ieee754_sqrt+0x84>
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	d06d      	beq.n	80080c6 <__ieee754_sqrt+0x14a>
 8007fea:	2000      	movs	r0, #0
 8007fec:	02d6      	lsls	r6, r2, #11
 8007fee:	d56e      	bpl.n	80080ce <__ieee754_sqrt+0x152>
 8007ff0:	1e44      	subs	r4, r0, #1
 8007ff2:	1b1b      	subs	r3, r3, r4
 8007ff4:	f1c0 0420 	rsb	r4, r0, #32
 8007ff8:	fa21 f404 	lsr.w	r4, r1, r4
 8007ffc:	4322      	orrs	r2, r4
 8007ffe:	4081      	lsls	r1, r0
 8008000:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008004:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008008:	07dd      	lsls	r5, r3, #31
 800800a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800800e:	bf42      	ittt	mi
 8008010:	0052      	lslmi	r2, r2, #1
 8008012:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8008016:	0049      	lslmi	r1, r1, #1
 8008018:	1058      	asrs	r0, r3, #1
 800801a:	2500      	movs	r5, #0
 800801c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8008020:	441a      	add	r2, r3
 8008022:	0049      	lsls	r1, r1, #1
 8008024:	2316      	movs	r3, #22
 8008026:	462c      	mov	r4, r5
 8008028:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800802c:	19a7      	adds	r7, r4, r6
 800802e:	4297      	cmp	r7, r2
 8008030:	bfde      	ittt	le
 8008032:	1bd2      	suble	r2, r2, r7
 8008034:	19bc      	addle	r4, r7, r6
 8008036:	19ad      	addle	r5, r5, r6
 8008038:	0052      	lsls	r2, r2, #1
 800803a:	3b01      	subs	r3, #1
 800803c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008040:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008044:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008048:	d1f0      	bne.n	800802c <__ieee754_sqrt+0xb0>
 800804a:	f04f 0e20 	mov.w	lr, #32
 800804e:	469c      	mov	ip, r3
 8008050:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008054:	42a2      	cmp	r2, r4
 8008056:	eb06 070c 	add.w	r7, r6, ip
 800805a:	dc02      	bgt.n	8008062 <__ieee754_sqrt+0xe6>
 800805c:	d112      	bne.n	8008084 <__ieee754_sqrt+0x108>
 800805e:	428f      	cmp	r7, r1
 8008060:	d810      	bhi.n	8008084 <__ieee754_sqrt+0x108>
 8008062:	2f00      	cmp	r7, #0
 8008064:	eb07 0c06 	add.w	ip, r7, r6
 8008068:	da34      	bge.n	80080d4 <__ieee754_sqrt+0x158>
 800806a:	f1bc 0f00 	cmp.w	ip, #0
 800806e:	db31      	blt.n	80080d4 <__ieee754_sqrt+0x158>
 8008070:	f104 0801 	add.w	r8, r4, #1
 8008074:	1b12      	subs	r2, r2, r4
 8008076:	428f      	cmp	r7, r1
 8008078:	bf88      	it	hi
 800807a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800807e:	1bc9      	subs	r1, r1, r7
 8008080:	4433      	add	r3, r6
 8008082:	4644      	mov	r4, r8
 8008084:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8008088:	f1be 0e01 	subs.w	lr, lr, #1
 800808c:	443a      	add	r2, r7
 800808e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008092:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008096:	d1dd      	bne.n	8008054 <__ieee754_sqrt+0xd8>
 8008098:	430a      	orrs	r2, r1
 800809a:	d006      	beq.n	80080aa <__ieee754_sqrt+0x12e>
 800809c:	1c5c      	adds	r4, r3, #1
 800809e:	bf13      	iteet	ne
 80080a0:	3301      	addne	r3, #1
 80080a2:	3501      	addeq	r5, #1
 80080a4:	4673      	moveq	r3, lr
 80080a6:	f023 0301 	bicne.w	r3, r3, #1
 80080aa:	106a      	asrs	r2, r5, #1
 80080ac:	085b      	lsrs	r3, r3, #1
 80080ae:	07e9      	lsls	r1, r5, #31
 80080b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80080b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80080b8:	bf48      	it	mi
 80080ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80080be:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80080c2:	461c      	mov	r4, r3
 80080c4:	e776      	b.n	8007fb4 <__ieee754_sqrt+0x38>
 80080c6:	0aca      	lsrs	r2, r1, #11
 80080c8:	3b15      	subs	r3, #21
 80080ca:	0549      	lsls	r1, r1, #21
 80080cc:	e78b      	b.n	8007fe6 <__ieee754_sqrt+0x6a>
 80080ce:	0052      	lsls	r2, r2, #1
 80080d0:	3001      	adds	r0, #1
 80080d2:	e78b      	b.n	8007fec <__ieee754_sqrt+0x70>
 80080d4:	46a0      	mov	r8, r4
 80080d6:	e7cd      	b.n	8008074 <__ieee754_sqrt+0xf8>
 80080d8:	7ff00000 	.word	0x7ff00000

080080dc <fabs>:
 80080dc:	ec53 2b10 	vmov	r2, r3, d0
 80080e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080e4:	ec43 2b10 	vmov	d0, r2, r3
 80080e8:	4770      	bx	lr

080080ea <finite>:
 80080ea:	ee10 3a90 	vmov	r3, s1
 80080ee:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80080f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80080f6:	0fc0      	lsrs	r0, r0, #31
 80080f8:	4770      	bx	lr

080080fa <matherr>:
 80080fa:	2000      	movs	r0, #0
 80080fc:	4770      	bx	lr
	...

08008100 <nan>:
 8008100:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008108 <nan+0x8>
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	00000000 	.word	0x00000000
 800810c:	7ff80000 	.word	0x7ff80000

08008110 <rint>:
 8008110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008112:	ec51 0b10 	vmov	r0, r1, d0
 8008116:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800811a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800811e:	2e13      	cmp	r6, #19
 8008120:	ee10 7a10 	vmov	r7, s0
 8008124:	460b      	mov	r3, r1
 8008126:	4602      	mov	r2, r0
 8008128:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800812c:	dc58      	bgt.n	80081e0 <rint+0xd0>
 800812e:	2e00      	cmp	r6, #0
 8008130:	da2b      	bge.n	800818a <rint+0x7a>
 8008132:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008136:	4302      	orrs	r2, r0
 8008138:	d023      	beq.n	8008182 <rint+0x72>
 800813a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800813e:	4302      	orrs	r2, r0
 8008140:	4251      	negs	r1, r2
 8008142:	4311      	orrs	r1, r2
 8008144:	0b09      	lsrs	r1, r1, #12
 8008146:	0c5b      	lsrs	r3, r3, #17
 8008148:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800814c:	045b      	lsls	r3, r3, #17
 800814e:	ea41 0703 	orr.w	r7, r1, r3
 8008152:	4b31      	ldr	r3, [pc, #196]	; (8008218 <rint+0x108>)
 8008154:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008158:	4639      	mov	r1, r7
 800815a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800815e:	ee10 0a10 	vmov	r0, s0
 8008162:	4632      	mov	r2, r6
 8008164:	463b      	mov	r3, r7
 8008166:	f7f8 f861 	bl	800022c <__adddf3>
 800816a:	e9cd 0100 	strd	r0, r1, [sp]
 800816e:	463b      	mov	r3, r7
 8008170:	4632      	mov	r2, r6
 8008172:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008176:	f7f8 f857 	bl	8000228 <__aeabi_dsub>
 800817a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800817e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8008182:	ec41 0b10 	vmov	d0, r0, r1
 8008186:	b003      	add	sp, #12
 8008188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818a:	4c24      	ldr	r4, [pc, #144]	; (800821c <rint+0x10c>)
 800818c:	4134      	asrs	r4, r6
 800818e:	ea01 0704 	and.w	r7, r1, r4
 8008192:	4307      	orrs	r7, r0
 8008194:	d0f5      	beq.n	8008182 <rint+0x72>
 8008196:	0861      	lsrs	r1, r4, #1
 8008198:	ea03 0001 	and.w	r0, r3, r1
 800819c:	4302      	orrs	r2, r0
 800819e:	d00b      	beq.n	80081b8 <rint+0xa8>
 80081a0:	ea23 0101 	bic.w	r1, r3, r1
 80081a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081a8:	2e13      	cmp	r6, #19
 80081aa:	fa43 f306 	asr.w	r3, r3, r6
 80081ae:	bf0c      	ite	eq
 80081b0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80081b4:	2200      	movne	r2, #0
 80081b6:	430b      	orrs	r3, r1
 80081b8:	4619      	mov	r1, r3
 80081ba:	4b17      	ldr	r3, [pc, #92]	; (8008218 <rint+0x108>)
 80081bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80081c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081c4:	4610      	mov	r0, r2
 80081c6:	462b      	mov	r3, r5
 80081c8:	4622      	mov	r2, r4
 80081ca:	f7f8 f82f 	bl	800022c <__adddf3>
 80081ce:	e9cd 0100 	strd	r0, r1, [sp]
 80081d2:	4622      	mov	r2, r4
 80081d4:	462b      	mov	r3, r5
 80081d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081da:	f7f8 f825 	bl	8000228 <__aeabi_dsub>
 80081de:	e7d0      	b.n	8008182 <rint+0x72>
 80081e0:	2e33      	cmp	r6, #51	; 0x33
 80081e2:	dd08      	ble.n	80081f6 <rint+0xe6>
 80081e4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081e8:	d1cb      	bne.n	8008182 <rint+0x72>
 80081ea:	ee10 2a10 	vmov	r2, s0
 80081ee:	460b      	mov	r3, r1
 80081f0:	f7f8 f81c 	bl	800022c <__adddf3>
 80081f4:	e7c5      	b.n	8008182 <rint+0x72>
 80081f6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80081fa:	f04f 34ff 	mov.w	r4, #4294967295
 80081fe:	40f4      	lsrs	r4, r6
 8008200:	4220      	tst	r0, r4
 8008202:	d0be      	beq.n	8008182 <rint+0x72>
 8008204:	0861      	lsrs	r1, r4, #1
 8008206:	420f      	tst	r7, r1
 8008208:	bf1f      	itttt	ne
 800820a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800820e:	ea27 0101 	bicne.w	r1, r7, r1
 8008212:	4132      	asrne	r2, r6
 8008214:	430a      	orrne	r2, r1
 8008216:	e7cf      	b.n	80081b8 <rint+0xa8>
 8008218:	080085d0 	.word	0x080085d0
 800821c:	000fffff 	.word	0x000fffff

08008220 <scalbn>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	ec55 4b10 	vmov	r4, r5, d0
 8008226:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800822a:	4606      	mov	r6, r0
 800822c:	462b      	mov	r3, r5
 800822e:	b9b2      	cbnz	r2, 800825e <scalbn+0x3e>
 8008230:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008234:	4323      	orrs	r3, r4
 8008236:	d03c      	beq.n	80082b2 <scalbn+0x92>
 8008238:	2200      	movs	r2, #0
 800823a:	4b33      	ldr	r3, [pc, #204]	; (8008308 <scalbn+0xe8>)
 800823c:	4629      	mov	r1, r5
 800823e:	ee10 0a10 	vmov	r0, s0
 8008242:	f7f8 f9a5 	bl	8000590 <__aeabi_dmul>
 8008246:	4a31      	ldr	r2, [pc, #196]	; (800830c <scalbn+0xec>)
 8008248:	4296      	cmp	r6, r2
 800824a:	4604      	mov	r4, r0
 800824c:	460d      	mov	r5, r1
 800824e:	460b      	mov	r3, r1
 8008250:	da13      	bge.n	800827a <scalbn+0x5a>
 8008252:	a329      	add	r3, pc, #164	; (adr r3, 80082f8 <scalbn+0xd8>)
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	f7f8 f99a 	bl	8000590 <__aeabi_dmul>
 800825c:	e00a      	b.n	8008274 <scalbn+0x54>
 800825e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008262:	428a      	cmp	r2, r1
 8008264:	d10c      	bne.n	8008280 <scalbn+0x60>
 8008266:	ee10 2a10 	vmov	r2, s0
 800826a:	462b      	mov	r3, r5
 800826c:	4620      	mov	r0, r4
 800826e:	4629      	mov	r1, r5
 8008270:	f7f7 ffdc 	bl	800022c <__adddf3>
 8008274:	4604      	mov	r4, r0
 8008276:	460d      	mov	r5, r1
 8008278:	e01b      	b.n	80082b2 <scalbn+0x92>
 800827a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800827e:	3a36      	subs	r2, #54	; 0x36
 8008280:	4432      	add	r2, r6
 8008282:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008286:	428a      	cmp	r2, r1
 8008288:	dd0b      	ble.n	80082a2 <scalbn+0x82>
 800828a:	ec45 4b11 	vmov	d1, r4, r5
 800828e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008300 <scalbn+0xe0>
 8008292:	f000 f83f 	bl	8008314 <copysign>
 8008296:	a31a      	add	r3, pc, #104	; (adr r3, 8008300 <scalbn+0xe0>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	ec51 0b10 	vmov	r0, r1, d0
 80082a0:	e7da      	b.n	8008258 <scalbn+0x38>
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	dd08      	ble.n	80082b8 <scalbn+0x98>
 80082a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082b2:	ec45 4b10 	vmov	d0, r4, r5
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082bc:	da0d      	bge.n	80082da <scalbn+0xba>
 80082be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082c2:	429e      	cmp	r6, r3
 80082c4:	ec45 4b11 	vmov	d1, r4, r5
 80082c8:	dce1      	bgt.n	800828e <scalbn+0x6e>
 80082ca:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80082f8 <scalbn+0xd8>
 80082ce:	f000 f821 	bl	8008314 <copysign>
 80082d2:	a309      	add	r3, pc, #36	; (adr r3, 80082f8 <scalbn+0xd8>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	e7e0      	b.n	800829c <scalbn+0x7c>
 80082da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082de:	3236      	adds	r2, #54	; 0x36
 80082e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082e8:	4620      	mov	r0, r4
 80082ea:	4629      	mov	r1, r5
 80082ec:	2200      	movs	r2, #0
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <scalbn+0xf0>)
 80082f0:	e7b2      	b.n	8008258 <scalbn+0x38>
 80082f2:	bf00      	nop
 80082f4:	f3af 8000 	nop.w
 80082f8:	c2f8f359 	.word	0xc2f8f359
 80082fc:	01a56e1f 	.word	0x01a56e1f
 8008300:	8800759c 	.word	0x8800759c
 8008304:	7e37e43c 	.word	0x7e37e43c
 8008308:	43500000 	.word	0x43500000
 800830c:	ffff3cb0 	.word	0xffff3cb0
 8008310:	3c900000 	.word	0x3c900000

08008314 <copysign>:
 8008314:	ec53 2b10 	vmov	r2, r3, d0
 8008318:	ee11 0a90 	vmov	r0, s3
 800831c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008320:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008324:	ea41 0300 	orr.w	r3, r1, r0
 8008328:	ec43 2b10 	vmov	d0, r2, r3
 800832c:	4770      	bx	lr
	...

08008330 <_init>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr

0800833c <_fini>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

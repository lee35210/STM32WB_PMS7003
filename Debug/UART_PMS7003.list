
UART_PMS7003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006330  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000004  080066f4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001bc4  200001f0  080068e0  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00001504  20001db4  080068e0  00021db4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027299  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005115  00000000  00000000  000474b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e401  00000000  00000000  0004c5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014d8  00000000  00000000  0005a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ff8  00000000  00000000  0005bea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b4ed  00000000  00000000  0005dea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008596  00000000  00000000  0006938d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00071923  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003fb8  00000000  00000000  000719a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	08006458 	.word	0x08006458

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	08006458 	.word	0x08006458

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b97a 	b.w	800054c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	468c      	mov	ip, r1
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	9e08      	ldr	r6, [sp, #32]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d151      	bne.n	8000324 <__udivmoddi4+0xb4>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d96d      	bls.n	8000362 <__udivmoddi4+0xf2>
 8000286:	fab2 fe82 	clz	lr, r2
 800028a:	f1be 0f00 	cmp.w	lr, #0
 800028e:	d00b      	beq.n	80002a8 <__udivmoddi4+0x38>
 8000290:	f1ce 0c20 	rsb	ip, lr, #32
 8000294:	fa01 f50e 	lsl.w	r5, r1, lr
 8000298:	fa20 fc0c 	lsr.w	ip, r0, ip
 800029c:	fa02 f70e 	lsl.w	r7, r2, lr
 80002a0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002a4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ac:	0c25      	lsrs	r5, r4, #16
 80002ae:	fbbc f8fa 	udiv	r8, ip, sl
 80002b2:	fa1f f987 	uxth.w	r9, r7
 80002b6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002be:	fb08 f309 	mul.w	r3, r8, r9
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x6c>
 80002c6:	19ed      	adds	r5, r5, r7
 80002c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002cc:	f080 8123 	bcs.w	8000516 <__udivmoddi4+0x2a6>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	f240 8120 	bls.w	8000516 <__udivmoddi4+0x2a6>
 80002d6:	f1a8 0802 	sub.w	r8, r8, #2
 80002da:	443d      	add	r5, r7
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002e4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	fb00 f909 	mul.w	r9, r0, r9
 80002f0:	45a1      	cmp	r9, r4
 80002f2:	d909      	bls.n	8000308 <__udivmoddi4+0x98>
 80002f4:	19e4      	adds	r4, r4, r7
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	f080 810a 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 80002fe:	45a1      	cmp	r9, r4
 8000300:	f240 8107 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000304:	3802      	subs	r0, #2
 8000306:	443c      	add	r4, r7
 8000308:	eba4 0409 	sub.w	r4, r4, r9
 800030c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000310:	2100      	movs	r1, #0
 8000312:	2e00      	cmp	r6, #0
 8000314:	d061      	beq.n	80003da <__udivmoddi4+0x16a>
 8000316:	fa24 f40e 	lsr.w	r4, r4, lr
 800031a:	2300      	movs	r3, #0
 800031c:	6034      	str	r4, [r6, #0]
 800031e:	6073      	str	r3, [r6, #4]
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	428b      	cmp	r3, r1
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0xc8>
 8000328:	2e00      	cmp	r6, #0
 800032a:	d054      	beq.n	80003d6 <__udivmoddi4+0x166>
 800032c:	2100      	movs	r1, #0
 800032e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000332:	4608      	mov	r0, r1
 8000334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000338:	fab3 f183 	clz	r1, r3
 800033c:	2900      	cmp	r1, #0
 800033e:	f040 808e 	bne.w	800045e <__udivmoddi4+0x1ee>
 8000342:	42ab      	cmp	r3, r5
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xdc>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80fa 	bhi.w	8000540 <__udivmoddi4+0x2d0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb65 0503 	sbc.w	r5, r5, r3
 8000352:	2001      	movs	r0, #1
 8000354:	46ac      	mov	ip, r5
 8000356:	2e00      	cmp	r6, #0
 8000358:	d03f      	beq.n	80003da <__udivmoddi4+0x16a>
 800035a:	e886 1010 	stmia.w	r6, {r4, ip}
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	b912      	cbnz	r2, 800036a <__udivmoddi4+0xfa>
 8000364:	2701      	movs	r7, #1
 8000366:	fbb7 f7f2 	udiv	r7, r7, r2
 800036a:	fab7 fe87 	clz	lr, r7
 800036e:	f1be 0f00 	cmp.w	lr, #0
 8000372:	d134      	bne.n	80003de <__udivmoddi4+0x16e>
 8000374:	1beb      	subs	r3, r5, r7
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	2101      	movs	r1, #1
 800037e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000382:	0c25      	lsrs	r5, r4, #16
 8000384:	fb02 3318 	mls	r3, r2, r8, r3
 8000388:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038c:	fb0c f308 	mul.w	r3, ip, r8
 8000390:	42ab      	cmp	r3, r5
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x134>
 8000394:	19ed      	adds	r5, r5, r7
 8000396:	f108 30ff 	add.w	r0, r8, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x132>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f200 80d1 	bhi.w	8000544 <__udivmoddi4+0x2d4>
 80003a2:	4680      	mov	r8, r0
 80003a4:	1aed      	subs	r5, r5, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ac:	fb02 5510 	mls	r5, r2, r0, r5
 80003b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003b4:	fb0c fc00 	mul.w	ip, ip, r0
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x15c>
 80003bc:	19e4      	adds	r4, r4, r7
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x15a>
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	f200 80b8 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 040c 	sub.w	r4, r4, ip
 80003d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003d4:	e79d      	b.n	8000312 <__udivmoddi4+0xa2>
 80003d6:	4631      	mov	r1, r6
 80003d8:	4630      	mov	r0, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	f1ce 0420 	rsb	r4, lr, #32
 80003e2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ea:	fa20 f804 	lsr.w	r8, r0, r4
 80003ee:	0c3a      	lsrs	r2, r7, #16
 80003f0:	fa25 f404 	lsr.w	r4, r5, r4
 80003f4:	ea48 0803 	orr.w	r8, r8, r3
 80003f8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003fc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000400:	fb02 4411 	mls	r4, r2, r1, r4
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800040c:	fb01 f30c 	mul.w	r3, r1, ip
 8000410:	42ab      	cmp	r3, r5
 8000412:	fa00 f40e 	lsl.w	r4, r0, lr
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x1bc>
 8000418:	19ed      	adds	r5, r5, r7
 800041a:	f101 30ff 	add.w	r0, r1, #4294967295
 800041e:	f080 808a 	bcs.w	8000536 <__udivmoddi4+0x2c6>
 8000422:	42ab      	cmp	r3, r5
 8000424:	f240 8087 	bls.w	8000536 <__udivmoddi4+0x2c6>
 8000428:	3902      	subs	r1, #2
 800042a:	443d      	add	r5, r7
 800042c:	1aeb      	subs	r3, r5, r3
 800042e:	fa1f f588 	uxth.w	r5, r8
 8000432:	fbb3 f0f2 	udiv	r0, r3, r2
 8000436:	fb02 3310 	mls	r3, r2, r0, r3
 800043a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043e:	fb00 f30c 	mul.w	r3, r0, ip
 8000442:	42ab      	cmp	r3, r5
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x1e6>
 8000446:	19ed      	adds	r5, r5, r7
 8000448:	f100 38ff 	add.w	r8, r0, #4294967295
 800044c:	d26f      	bcs.n	800052e <__udivmoddi4+0x2be>
 800044e:	42ab      	cmp	r3, r5
 8000450:	d96d      	bls.n	800052e <__udivmoddi4+0x2be>
 8000452:	3802      	subs	r0, #2
 8000454:	443d      	add	r5, r7
 8000456:	1aeb      	subs	r3, r5, r3
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	e78f      	b.n	800037e <__udivmoddi4+0x10e>
 800045e:	f1c1 0720 	rsb	r7, r1, #32
 8000462:	fa22 f807 	lsr.w	r8, r2, r7
 8000466:	408b      	lsls	r3, r1
 8000468:	fa05 f401 	lsl.w	r4, r5, r1
 800046c:	ea48 0303 	orr.w	r3, r8, r3
 8000470:	fa20 fe07 	lsr.w	lr, r0, r7
 8000474:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000478:	40fd      	lsrs	r5, r7
 800047a:	ea4e 0e04 	orr.w	lr, lr, r4
 800047e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000482:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000486:	fb0c 5519 	mls	r5, ip, r9, r5
 800048a:	fa1f f883 	uxth.w	r8, r3
 800048e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000492:	fb09 f408 	mul.w	r4, r9, r8
 8000496:	42ac      	cmp	r4, r5
 8000498:	fa02 f201 	lsl.w	r2, r2, r1
 800049c:	fa00 fa01 	lsl.w	sl, r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x244>
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d243      	bcs.n	8000532 <__udivmoddi4+0x2c2>
 80004aa:	42ac      	cmp	r4, r5
 80004ac:	d941      	bls.n	8000532 <__udivmoddi4+0x2c2>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	441d      	add	r5, r3
 80004b4:	1b2d      	subs	r5, r5, r4
 80004b6:	fa1f fe8e 	uxth.w	lr, lr
 80004ba:	fbb5 f0fc 	udiv	r0, r5, ip
 80004be:	fb0c 5510 	mls	r5, ip, r0, r5
 80004c2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45a0      	cmp	r8, r4
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x26e>
 80004ce:	18e4      	adds	r4, r4, r3
 80004d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004d4:	d229      	bcs.n	800052a <__udivmoddi4+0x2ba>
 80004d6:	45a0      	cmp	r8, r4
 80004d8:	d927      	bls.n	800052a <__udivmoddi4+0x2ba>
 80004da:	3802      	subs	r0, #2
 80004dc:	441c      	add	r4, r3
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba4 0408 	sub.w	r4, r4, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454c      	cmp	r4, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	464d      	mov	r5, r9
 80004f0:	d315      	bcc.n	800051e <__udivmoddi4+0x2ae>
 80004f2:	d012      	beq.n	800051a <__udivmoddi4+0x2aa>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x29c>
 80004f6:	ebba 030e 	subs.w	r3, sl, lr
 80004fa:	eb64 0405 	sbc.w	r4, r4, r5
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40cb      	lsrs	r3, r1
 8000504:	431f      	orrs	r7, r3
 8000506:	40cc      	lsrs	r4, r1
 8000508:	6037      	str	r7, [r6, #0]
 800050a:	6074      	str	r4, [r6, #4]
 800050c:	2100      	movs	r1, #0
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	4618      	mov	r0, r3
 8000514:	e6f8      	b.n	8000308 <__udivmoddi4+0x98>
 8000516:	4690      	mov	r8, r2
 8000518:	e6e0      	b.n	80002dc <__udivmoddi4+0x6c>
 800051a:	45c2      	cmp	sl, r8
 800051c:	d2ea      	bcs.n	80004f4 <__udivmoddi4+0x284>
 800051e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000522:	eb69 0503 	sbc.w	r5, r9, r3
 8000526:	3801      	subs	r0, #1
 8000528:	e7e4      	b.n	80004f4 <__udivmoddi4+0x284>
 800052a:	4628      	mov	r0, r5
 800052c:	e7d7      	b.n	80004de <__udivmoddi4+0x26e>
 800052e:	4640      	mov	r0, r8
 8000530:	e791      	b.n	8000456 <__udivmoddi4+0x1e6>
 8000532:	4681      	mov	r9, r0
 8000534:	e7be      	b.n	80004b4 <__udivmoddi4+0x244>
 8000536:	4601      	mov	r1, r0
 8000538:	e778      	b.n	800042c <__udivmoddi4+0x1bc>
 800053a:	3802      	subs	r0, #2
 800053c:	443c      	add	r4, r7
 800053e:	e745      	b.n	80003cc <__udivmoddi4+0x15c>
 8000540:	4608      	mov	r0, r1
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xe6>
 8000544:	f1a8 0802 	sub.w	r8, r8, #2
 8000548:	443d      	add	r5, r7
 800054a:	e72b      	b.n	80003a4 <__udivmoddi4+0x134>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000550:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000552:	4c10      	ldr	r4, [pc, #64]	; (8000594 <HAL_InitTick+0x44>)
 8000554:	7823      	ldrb	r3, [r4, #0]
{
 8000556:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000558:	b90b      	cbnz	r3, 800055e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800055a:	2001      	movs	r0, #1
 800055c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800055e:	f001 fb8d 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8000562:	7822      	ldrb	r2, [r4, #0]
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	fbb3 f3f2 	udiv	r3, r3, r2
 800056c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000570:	f000 f896 	bl	80006a0 <HAL_SYSTICK_Config>
 8000574:	4604      	mov	r4, r0
 8000576:	2800      	cmp	r0, #0
 8000578:	d1ef      	bne.n	800055a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	2d0f      	cmp	r5, #15
 800057c:	d8ed      	bhi.n	800055a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057e:	4602      	mov	r2, r0
 8000580:	4629      	mov	r1, r5
 8000582:	f04f 30ff 	mov.w	r0, #4294967295
 8000586:	f000 f849 	bl	800061c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058a:	4b03      	ldr	r3, [pc, #12]	; (8000598 <HAL_InitTick+0x48>)
 800058c:	4620      	mov	r0, r4
 800058e:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000590:	bd38      	pop	{r3, r4, r5, pc}
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004
 8000598:	20000008 	.word	0x20000008

0800059c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <HAL_Init+0x28>)
 800059e:	6813      	ldr	r3, [r2, #0]
 80005a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80005a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005aa:	f000 f825 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff ffce 	bl	8000550 <HAL_InitTick>
 80005b4:	4604      	mov	r4, r0
 80005b6:	b918      	cbnz	r0, 80005c0 <HAL_Init+0x24>
    HAL_MspInit();
 80005b8:	f004 fba9 	bl	8004d0e <HAL_MspInit>
}
 80005bc:	4620      	mov	r0, r4
 80005be:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005c0:	2401      	movs	r4, #1
 80005c2:	e7fb      	b.n	80005bc <HAL_Init+0x20>
 80005c4:	58004000 	.word	0x58004000

080005c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <HAL_IncTick+0x10>)
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_IncTick+0x14>)
 80005cc:	6811      	ldr	r1, [r2, #0]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	440b      	add	r3, r1
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000043c 	.word	0x2000043c
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_GetTick+0x8>)
 80005e2:	6818      	ldr	r0, [r3, #0]
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000043c 	.word	0x2000043c

080005ec <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTickPrio+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000008 	.word	0x20000008

080005f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	0200      	lsls	r0, r0, #8
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000612:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000614:	60d3      	str	r3, [r2, #12]
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	68dc      	ldr	r4, [r3, #12]
 8000622:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000626:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062c:	2b04      	cmp	r3, #4
 800062e:	bf28      	it	cs
 8000630:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	f04f 0501 	mov.w	r5, #1
 8000638:	fa05 f303 	lsl.w	r3, r5, r3
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000640:	bf8c      	ite	hi
 8000642:	3c03      	subhi	r4, #3
 8000644:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000646:	4019      	ands	r1, r3
 8000648:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800064a:	fa05 f404 	lsl.w	r4, r5, r4
 800064e:	3c01      	subs	r4, #1
 8000650:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000652:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	bfad      	iteet	ge
 800065e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	f000 000f 	andlt.w	r0, r0, #15
 8000666:	4b06      	ldrlt	r3, [pc, #24]	; (8000680 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	bfb5      	itete	lt
 800066e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000684:	2800      	cmp	r0, #0
 8000686:	db08      	blt.n	800069a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000688:	0942      	lsrs	r2, r0, #5
 800068a:	2301      	movs	r3, #1
 800068c:	f000 001f 	and.w	r0, r0, #31
 8000690:	fa03 f000 	lsl.w	r0, r3, r0
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <HAL_NVIC_EnableIRQ+0x18>)
 8000696:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a0:	3801      	subs	r0, #1
 80006a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006a6:	d20a      	bcs.n	80006be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	21f0      	movs	r1, #240	; 0xf0
 80006b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e010 	.word	0xe000e010
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	4a10      	ldr	r2, [pc, #64]	; (8000710 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006d4:	bf88      	it	hi
 80006d6:	490f      	ldrhi	r1, [pc, #60]	; (8000714 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006d8:	f022 0203 	bic.w	r2, r2, #3
 80006dc:	bf9b      	ittet	ls
 80006de:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 80006e2:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006e6:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006e8:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006ea:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80006ee:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006f0:	f1a3 0308 	sub.w	r3, r3, #8
 80006f4:	f04f 0214 	mov.w	r2, #20
 80006f8:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80006fc:	f04f 0201 	mov.w	r2, #1
 8000700:	f003 031c 	and.w	r3, r3, #28
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000708:	bf88      	it	hi
 800070a:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800070c:	6503      	str	r3, [r0, #80]	; 0x50
 800070e:	4770      	bx	lr
 8000710:	40020407 	.word	0x40020407
 8000714:	4002081c 	.word	0x4002081c
 8000718:	40020880 	.word	0x40020880

0800071c <HAL_DMA_Init>:
{
 800071c:	b510      	push	{r4, lr}
  if (hdma == NULL)
 800071e:	4604      	mov	r4, r0
 8000720:	2800      	cmp	r0, #0
 8000722:	d05d      	beq.n	80007e0 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000724:	6801      	ldr	r1, [r0, #0]
 8000726:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <HAL_DMA_Init+0xc8>)
 8000728:	4299      	cmp	r1, r3
 800072a:	f04f 0014 	mov.w	r0, #20
 800072e:	d84a      	bhi.n	80007c6 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000730:	4a2d      	ldr	r2, [pc, #180]	; (80007e8 <HAL_DMA_Init+0xcc>)
 8000732:	440a      	add	r2, r1
 8000734:	fbb2 f2f0 	udiv	r2, r2, r0
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800073c:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8000740:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000742:	2302      	movs	r3, #2
 8000744:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8000748:	68e0      	ldr	r0, [r4, #12]
 800074a:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 800074c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800074e:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000750:	6920      	ldr	r0, [r4, #16]
 8000752:	4303      	orrs	r3, r0
 8000754:	6960      	ldr	r0, [r4, #20]
 8000756:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000758:	69a0      	ldr	r0, [r4, #24]
 800075a:	4303      	orrs	r3, r0
 800075c:	69e0      	ldr	r0, [r4, #28]
 800075e:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000760:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000762:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000766:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800076a:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800076c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800076e:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000770:	4620      	mov	r0, r4
 8000772:	f7ff ffab 	bl	80006cc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000776:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000778:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800077a:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800077c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000780:	bf04      	itt	eq
 8000782:	2300      	moveq	r3, #0
 8000784:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000786:	6862      	ldr	r2, [r4, #4]
 8000788:	b2d3      	uxtb	r3, r2
 800078a:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800078c:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800078e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000790:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000792:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000794:	d81f      	bhi.n	80007d6 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000796:	4a15      	ldr	r2, [pc, #84]	; (80007ec <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000798:	4815      	ldr	r0, [pc, #84]	; (80007f0 <HAL_DMA_Init+0xd4>)
 800079a:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800079c:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800079e:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007a0:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007a2:	2101      	movs	r1, #1
 80007a4:	f003 0303 	and.w	r3, r3, #3
 80007a8:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007ac:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007ae:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007b0:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007b2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007b4:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007b6:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80007b8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ba:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80007bc:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80007c0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 80007c4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_DMA_Init+0xd8>)
 80007c8:	440b      	add	r3, r1
 80007ca:	fbb3 f3f0 	udiv	r3, r3, r0
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_DMA_Init+0xdc>)
 80007d4:	e7b4      	b.n	8000740 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80007da:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80007dc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80007de:	e7ea      	b.n	80007b6 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
}
 80007e2:	bd10      	pop	{r4, pc}
 80007e4:	40020407 	.word	0x40020407
 80007e8:	bffdfff8 	.word	0xbffdfff8
 80007ec:	1000823f 	.word	0x1000823f
 80007f0:	40020940 	.word	0x40020940
 80007f4:	bffdfbf8 	.word	0xbffdfbf8
 80007f8:	40020400 	.word	0x40020400

080007fc <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80007fc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000800:	2b02      	cmp	r3, #2
{
 8000802:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000804:	d003      	beq.n	800080e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000806:	2304      	movs	r3, #4
 8000808:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800080a:	2001      	movs	r0, #1
 800080c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800080e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000810:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	f022 020e 	bic.w	r2, r2, #14
 8000818:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	f022 0201 	bic.w	r2, r2, #1
 8000820:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000822:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000824:	6813      	ldr	r3, [r2, #0]
 8000826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800082a:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800082c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800082e:	f003 021c 	and.w	r2, r3, #28
 8000832:	2301      	movs	r3, #1
 8000834:	4093      	lsls	r3, r2
 8000836:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000838:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800083a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800083c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800083e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000840:	b133      	cbz	r3, 8000850 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000848:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800084a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800084c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800084e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000850:	2301      	movs	r3, #1
 8000852:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 8000856:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000858:	2400      	movs	r4, #0
 800085a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800085e:	b113      	cbz	r3, 8000866 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8000860:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000862:	4620      	mov	r0, r4
 8000864:	bd10      	pop	{r4, pc}
 8000866:	4618      	mov	r0, r3
}
 8000868:	bd10      	pop	{r4, pc}

0800086a <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800086a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800086c:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800086e:	6803      	ldr	r3, [r0, #0]
{
 8000870:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000872:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000876:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000878:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800087a:	2404      	movs	r4, #4
 800087c:	4094      	lsls	r4, r2
 800087e:	4226      	tst	r6, r4
 8000880:	d00e      	beq.n	80008a0 <HAL_DMA_IRQHandler+0x36>
 8000882:	f015 0f04 	tst.w	r5, #4
 8000886:	d00b      	beq.n	80008a0 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800088c:	bf5e      	ittt	pl
 800088e:	681a      	ldrpl	r2, [r3, #0]
 8000890:	f022 0204 	bicpl.w	r2, r2, #4
 8000894:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8000896:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8000898:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800089a:	b373      	cbz	r3, 80008fa <HAL_DMA_IRQHandler+0x90>
}
 800089c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800089e:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80008a0:	2402      	movs	r4, #2
 80008a2:	4094      	lsls	r4, r2
 80008a4:	4226      	tst	r6, r4
 80008a6:	d012      	beq.n	80008ce <HAL_DMA_IRQHandler+0x64>
 80008a8:	f015 0f02 	tst.w	r5, #2
 80008ac:	d00f      	beq.n	80008ce <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	0695      	lsls	r5, r2, #26
 80008b2:	d406      	bmi.n	80008c2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	f022 020a 	bic.w	r2, r2, #10
 80008ba:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80008bc:	2301      	movs	r3, #1
 80008be:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80008c2:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80008c4:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80008c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80008ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80008cc:	e7e5      	b.n	800089a <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80008ce:	2408      	movs	r4, #8
 80008d0:	4094      	lsls	r4, r2
 80008d2:	4234      	tst	r4, r6
 80008d4:	d011      	beq.n	80008fa <HAL_DMA_IRQHandler+0x90>
 80008d6:	072c      	lsls	r4, r5, #28
 80008d8:	d50f      	bpl.n	80008fa <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008da:	681c      	ldr	r4, [r3, #0]
 80008dc:	f024 040e 	bic.w	r4, r4, #14
 80008e0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80008e2:	2301      	movs	r3, #1
 80008e4:	fa03 f202 	lsl.w	r2, r3, r2
 80008e8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80008ea:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80008ec:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80008f0:	2300      	movs	r3, #0
 80008f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80008f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80008f8:	e7cf      	b.n	800089a <HAL_DMA_IRQHandler+0x30>
}
 80008fa:	bc70      	pop	{r4, r5, r6}
 80008fc:	4770      	bx	lr
	...

08000900 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000904:	680b      	ldr	r3, [r1, #0]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000906:	4a59      	ldr	r2, [pc, #356]	; (8000a6c <HAL_GPIO_Init+0x16c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000908:	9301      	str	r3, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800090a:	f04f 0803 	mov.w	r8, #3
  uint32_t position = 0x00u;
 800090e:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000910:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000914:	9c01      	ldr	r4, [sp, #4]
 8000916:	40dc      	lsrs	r4, r3
 8000918:	d102      	bne.n	8000920 <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  }
}
 800091a:	b003      	add	sp, #12
 800091c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000920:	2401      	movs	r4, #1
 8000922:	fa04 fe03 	lsl.w	lr, r4, r3
    if (iocurrent != 0x00u)
 8000926:	9c01      	ldr	r4, [sp, #4]
 8000928:	ea14 050e 	ands.w	r5, r4, lr
 800092c:	f000 8094 	beq.w	8000a58 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000930:	684c      	ldr	r4, [r1, #4]
 8000932:	f024 0c10 	bic.w	ip, r4, #16
 8000936:	f10c 36ff 	add.w	r6, ip, #4294967295
 800093a:	2e01      	cmp	r6, #1
 800093c:	ea4f 0643 	mov.w	r6, r3, lsl #1
 8000940:	d812      	bhi.n	8000968 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 8000942:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000944:	fa08 fa06 	lsl.w	sl, r8, r6
 8000948:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 800094c:	68cf      	ldr	r7, [r1, #12]
 800094e:	40b7      	lsls	r7, r6
 8000950:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000954:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000956:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000958:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800095c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000960:	409f      	lsls	r7, r3
 8000962:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000966:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000968:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800096a:	fa08 fe06 	lsl.w	lr, r8, r6
 800096e:	ea6f 0e0e 	mvn.w	lr, lr
 8000972:	ea07 0a0e 	and.w	sl, r7, lr
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000976:	688f      	ldr	r7, [r1, #8]
 8000978:	40b7      	lsls	r7, r6
 800097a:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097e:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000982:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000984:	d114      	bne.n	80009b0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8000986:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800098a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800098e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000992:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000996:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800099a:	fa09 fb0a 	lsl.w	fp, r9, sl
 800099e:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a2:	690f      	ldr	r7, [r1, #16]
 80009a4:	fa07 f70a 	lsl.w	r7, r7, sl
 80009a8:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80009ac:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 80009b0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009b2:	ea0e 0e07 	and.w	lr, lr, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b6:	f004 0703 	and.w	r7, r4, #3
 80009ba:	fa07 f606 	lsl.w	r6, r7, r6
 80009be:	ea46 060e 	orr.w	r6, r6, lr
      GPIOx->MODER = temp;
 80009c2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c4:	00e6      	lsls	r6, r4, #3
 80009c6:	d547      	bpl.n	8000a58 <HAL_GPIO_Init+0x158>
 80009c8:	f023 0703 	bic.w	r7, r3, #3
 80009cc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009d0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d4:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80009d8:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80009de:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009e6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ea:	d037      	beq.n	8000a5c <HAL_GPIO_Init+0x15c>
 80009ec:	4e20      	ldr	r6, [pc, #128]	; (8000a70 <HAL_GPIO_Init+0x170>)
 80009ee:	42b0      	cmp	r0, r6
 80009f0:	d036      	beq.n	8000a60 <HAL_GPIO_Init+0x160>
 80009f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009f6:	42b0      	cmp	r0, r6
 80009f8:	d034      	beq.n	8000a64 <HAL_GPIO_Init+0x164>
 80009fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009fe:	42b0      	cmp	r0, r6
 8000a00:	d032      	beq.n	8000a68 <HAL_GPIO_Init+0x168>
 8000a02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a06:	42b0      	cmp	r0, r6
 8000a08:	bf14      	ite	ne
 8000a0a:	2607      	movne	r6, #7
 8000a0c:	2604      	moveq	r6, #4
 8000a0e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a12:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a16:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000a18:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8000a1c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a1e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000a22:	bf0c      	ite	eq
 8000a24:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a26:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000a28:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8000a2c:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a30:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000a34:	bf0c      	ite	eq
 8000a36:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a38:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000a3a:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000a3e:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a40:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000a44:	bf0c      	ite	eq
 8000a46:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a48:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000a4a:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8000a4c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4e:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000a50:	bf54      	ite	pl
 8000a52:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000a54:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000a56:	6056      	str	r6, [r2, #4]
    position++;
 8000a58:	3301      	adds	r3, #1
 8000a5a:	e75b      	b.n	8000914 <HAL_GPIO_Init+0x14>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	e7d6      	b.n	8000a0e <HAL_GPIO_Init+0x10e>
 8000a60:	2601      	movs	r6, #1
 8000a62:	e7d4      	b.n	8000a0e <HAL_GPIO_Init+0x10e>
 8000a64:	2602      	movs	r6, #2
 8000a66:	e7d2      	b.n	8000a0e <HAL_GPIO_Init+0x10e>
 8000a68:	2603      	movs	r6, #3
 8000a6a:	e7d0      	b.n	8000a0e <HAL_GPIO_Init+0x10e>
 8000a6c:	58000800 	.word	0x58000800
 8000a70:	48000400 	.word	0x48000400

08000a74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a74:	b10a      	cbz	r2, 8000a7a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a76:	6181      	str	r1, [r0, #24]
 8000a78:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a7a:	6281      	str	r1, [r0, #40]	; 0x28
 8000a7c:	4770      	bx	lr

08000a7e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000a7e:	6943      	ldr	r3, [r0, #20]
 8000a80:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a82:	bf14      	ite	ne
 8000a84:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a86:	6181      	streq	r1, [r0, #24]
 8000a88:	4770      	bx	lr

08000a8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a8a:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a8c:	4604      	mov	r4, r0
{
 8000a8e:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d057      	beq.n	8000b44 <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a94:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000a98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a9c:	b91b      	cbnz	r3, 8000aa6 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a9e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000aa2:	f004 fb1d 	bl	80050e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000aac:	6820      	ldr	r0, [r4, #0]
 8000aae:	f002 fdd6 	bl	800365e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ab6:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ab8:	4615      	mov	r5, r2
 8000aba:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000abc:	4298      	cmp	r0, r3
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	d820      	bhi.n	8000b06 <HAL_PCD_Init+0x7c>
 8000ac4:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aca:	4298      	cmp	r0, r3
 8000acc:	f102 0201 	add.w	r2, r2, #1
 8000ad0:	d828      	bhi.n	8000b24 <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000ad2:	f104 0610 	add.w	r6, r4, #16
 8000ad6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ad8:	466d      	mov	r5, sp
 8000ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000adc:	6833      	ldr	r3, [r6, #0]
 8000ade:	602b      	str	r3, [r5, #0]
 8000ae0:	1d23      	adds	r3, r4, #4
 8000ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	f002 fdc4 	bl	8003672 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000aea:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8000aec:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000aee:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000af2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000af6:	69e3      	ldr	r3, [r4, #28]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d102      	bne.n	8000b02 <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000afc:	4620      	mov	r0, r4
 8000afe:	f000 fbbc 	bl	800127a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000b02:	4628      	mov	r0, r5
 8000b04:	e01f      	b.n	8000b46 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 8000b06:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8000b0a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b0e:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b10:	3302      	adds	r3, #2
 8000b12:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8000b14:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b18:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b1c:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000b1e:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b20:	50e5      	str	r5, [r4, r3]
 8000b22:	e7ca      	b.n	8000aba <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8000b24:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8000b28:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b2c:	330a      	adds	r3, #10
 8000b2e:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000b30:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b34:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b38:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b3c:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b40:	50e1      	str	r1, [r4, r3]
 8000b42:	e7c1      	b.n	8000ac8 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000b44:	2001      	movs	r0, #1
}
 8000b46:	b006      	add	sp, #24
 8000b48:	bd70      	pop	{r4, r5, r6, pc}

08000b4a <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000b4a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8000b4e:	2b01      	cmp	r3, #1
{
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000b54:	d00c      	beq.n	8000b70 <HAL_PCD_Start+0x26>
 8000b56:	2301      	movs	r3, #1
 8000b58:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8000b5c:	6800      	ldr	r0, [r0, #0]
 8000b5e:	f003 f86a 	bl	8003c36 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000b62:	6820      	ldr	r0, [r4, #0]
 8000b64:	f002 fd70 	bl	8003648 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000b6e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000b70:	2002      	movs	r0, #2
}
 8000b72:	bd10      	pop	{r4, pc}

08000b74 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000b74:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8000b78:	2a01      	cmp	r2, #1
{
 8000b7a:	b510      	push	{r4, lr}
 8000b7c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000b7e:	d00b      	beq.n	8000b98 <HAL_PCD_SetAddress+0x24>
 8000b80:	2201      	movs	r2, #1
 8000b82:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8000b86:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b8a:	6800      	ldr	r0, [r0, #0]
 8000b8c:	f003 f84d 	bl	8003c2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8000b96:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000b98:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	f001 0007 	and.w	r0, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ba4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000ba8:	b2c5      	uxtb	r5, r0
 8000baa:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bae:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8000bb2:	bf15      	itete	ne
 8000bb4:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8000bb8:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bbc:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000bbe:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 1U;
 8000bc2:	bf15      	itete	ne
 8000bc4:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000bc6:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000bc8:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8000bcc:	f885 6129 	strbeq.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8000bd0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000bd2:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000bd4:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000bd6:	b2c0      	uxtb	r0, r0
 8000bd8:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000bda:	b102      	cbz	r2, 8000bde <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000bdc:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000bde:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8000be0:	bf04      	itt	eq
 8000be2:	2300      	moveq	r3, #0
 8000be4:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000be6:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d009      	beq.n	8000c02 <HAL_PCD_EP_Open+0x66>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000bf4:	6820      	ldr	r0, [r4, #0]
 8000bf6:	f002 fd59 	bl	80036ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000c02:	2002      	movs	r0, #2
}
 8000c04:	bd70      	pop	{r4, r5, r6, pc}

08000c06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c06:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c14:	fb01 0102 	mla	r1, r1, r2, r0
{
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8000c1c:	bf19      	ittee	ne
 8000c1e:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c22:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c24:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 8000c28:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 8000c2c:	bf15      	itete	ne
 8000c2e:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8000c30:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8000c32:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 8000c36:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000c3a:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8000c3c:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d009      	beq.n	8000c58 <HAL_PCD_EP_Close+0x52>
 8000c44:	2301      	movs	r3, #1
 8000c46:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000c4a:	6820      	ldr	r0, [r4, #0]
 8000c4c:	f002 fea0 	bl	8003990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000c56:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c58:	2002      	movs	r0, #2
}
 8000c5a:	bd10      	pop	{r4, pc}

08000c5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000c62:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8000c66:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000c68:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c6a:	f886 1128 	strb.w	r1, [r6, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c6e:	f504 7194 	add.w	r1, r4, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000c72:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000c74:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
  ep->xfer_len = len;
 8000c78:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
  ep->xfer_count = 0U;
 8000c7c:	f8c6 5144 	str.w	r5, [r6, #324]	; 0x144
  ep->is_in = 0U;
 8000c80:	f886 5129 	strb.w	r5, [r6, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000c84:	6800      	ldr	r0, [r0, #0]
 8000c86:	f002 fff7 	bl	8003c78 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}

08000c8e <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000c8e:	f001 0107 	and.w	r1, r1, #7
 8000c92:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000c96:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8000c9a:	4770      	bx	lr

08000c9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ca2:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8000ca6:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8000ca8:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8000caa:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000cac:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cae:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cb2:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cb6:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000cb8:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000cba:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8000cbc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cc0:	6800      	ldr	r0, [r0, #0]
 8000cc2:	f002 ffd9 	bl	8003c78 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ccc <HAL_PCD_IRQHandler>:
{
 8000ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000cd2:	6800      	ldr	r0, [r0, #0]
 8000cd4:	f002 ffba 	bl	8003c4c <USB_ReadInterrupts>
 8000cd8:	0402      	lsls	r2, r0, #16
 8000cda:	f100 823a 	bmi.w	8001152 <HAL_PCD_IRQHandler+0x486>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000cde:	6820      	ldr	r0, [r4, #0]
 8000ce0:	f002 ffb4 	bl	8003c4c <USB_ReadInterrupts>
 8000ce4:	0543      	lsls	r3, r0, #21
 8000ce6:	d50f      	bpl.n	8000d08 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ce8:	6822      	ldr	r2, [r4, #0]
 8000cea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000cf6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000cf8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000cfc:	f004 fa41 	bl	8005182 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d00:	2100      	movs	r1, #0
 8000d02:	4620      	mov	r0, r4
 8000d04:	f7ff ff36 	bl	8000b74 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d08:	6820      	ldr	r0, [r4, #0]
 8000d0a:	f002 ff9f 	bl	8003c4c <USB_ReadInterrupts>
 8000d0e:	0443      	lsls	r3, r0, #17
 8000d10:	d508      	bpl.n	8000d24 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000d12:	6822      	ldr	r2, [r4, #0]
 8000d14:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	0c1b      	lsrs	r3, r3, #16
 8000d20:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000d24:	6820      	ldr	r0, [r4, #0]
 8000d26:	f002 ff91 	bl	8003c4c <USB_ReadInterrupts>
 8000d2a:	0487      	lsls	r7, r0, #18
 8000d2c:	d508      	bpl.n	8000d40 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d38:	041b      	lsls	r3, r3, #16
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d40:	6820      	ldr	r0, [r4, #0]
 8000d42:	f002 ff83 	bl	8003c4c <USB_ReadInterrupts>
 8000d46:	04c6      	lsls	r6, r0, #19
 8000d48:	d526      	bpl.n	8000d98 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000d4a:	6822      	ldr	r2, [r4, #0]
 8000d4c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	041b      	lsls	r3, r3, #16
 8000d56:	0c1b      	lsrs	r3, r3, #16
 8000d58:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d5c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000d60:	f023 0308 	bic.w	r3, r3, #8
 8000d64:	041b      	lsls	r3, r3, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8000d6c:	f894 3260 	ldrb.w	r3, [r4, #608]	; 0x260
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d105      	bne.n	8000d80 <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8000d74:	2100      	movs	r1, #0
 8000d76:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f004 fb04 	bl	8005388 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8000d80:	4620      	mov	r0, r4
 8000d82:	f004 fa21 	bl	80051c8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d86:	6822      	ldr	r2, [r4, #0]
 8000d88:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d90:	041b      	lsls	r3, r3, #16
 8000d92:	0c1b      	lsrs	r3, r3, #16
 8000d94:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	f002 ff57 	bl	8003c4c <USB_ReadInterrupts>
 8000d9e:	0505      	lsls	r5, r0, #20
 8000da0:	d51d      	bpl.n	8000dde <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000da2:	6820      	ldr	r0, [r4, #0]
 8000da4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000db2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dba:	041b      	lsls	r3, r3, #16
 8000dbc:	0c1b      	lsrs	r3, r3, #16
 8000dbe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000dc2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000dd0:	f002 ff3c 	bl	8003c4c <USB_ReadInterrupts>
 8000dd4:	04c0      	lsls	r0, r0, #19
 8000dd6:	d402      	bmi.n	8000dde <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f004 f9e5 	bl	80051a8 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000dde:	6820      	ldr	r0, [r4, #0]
 8000de0:	f002 ff34 	bl	8003c4c <USB_ReadInterrupts>
 8000de4:	0601      	lsls	r1, r0, #24
 8000de6:	d529      	bpl.n	8000e3c <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df2:	0412      	lsls	r2, r2, #16
 8000df4:	0c12      	lsrs	r2, r2, #16
 8000df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000dfa:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
 8000dfe:	2a00      	cmp	r2, #0
 8000e00:	f040 81ac 	bne.w	800115c <HAL_PCD_IRQHandler+0x490>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e04:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	f042 0204 	orr.w	r2, r2, #4
 8000e0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e12:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e16:	b292      	uxth	r2, r2
 8000e18:	f042 0208 	orr.w	r2, r2, #8
 8000e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e20:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000e24:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8000e28:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e2a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8000e2e:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e32:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e36:	4620      	mov	r0, r4
 8000e38:	f004 faa6 	bl	8005388 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000e3c:	6820      	ldr	r0, [r4, #0]
 8000e3e:	f002 ff05 	bl	8003c4c <USB_ReadInterrupts>
 8000e42:	0582      	lsls	r2, r0, #22
 8000e44:	d50b      	bpl.n	8000e5e <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e46:	6822      	ldr	r2, [r4, #0]
 8000e48:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e50:	041b      	lsls	r3, r3, #16
 8000e52:	0c1b      	lsrs	r3, r3, #16
 8000e54:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f004 f98e 	bl	800517a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000e5e:	6820      	ldr	r0, [r4, #0]
 8000e60:	f002 fef4 	bl	8003c4c <USB_ReadInterrupts>
 8000e64:	05c3      	lsls	r3, r0, #23
 8000e66:	d508      	bpl.n	8000e7a <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	0c1b      	lsrs	r3, r3, #16
 8000e76:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000e7e:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000e82:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000e84:	f011 070f 	ands.w	r7, r1, #15
 8000e88:	f040 80ab 	bne.w	8000fe2 <HAL_PCD_IRQHandler+0x316>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e8c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000e8e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e92:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000e94:	d12b      	bne.n	8000eee <HAL_PCD_IRQHandler+0x222>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e96:	ea03 030a 	and.w	r3, r3, sl
 8000e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9e:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ea0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ea4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000ea8:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000eac:	fa10 f083 	uxtah	r0, r0, r3
 8000eb0:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8000eb4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eba:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000ebc:	4413      	add	r3, r2
 8000ebe:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f004 f953 	bl	800516c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000ec6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000eca:	b153      	cbz	r3, 8000ee2 <HAL_PCD_IRQHandler+0x216>
 8000ecc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ece:	b942      	cbnz	r2, 8000ee2 <HAL_PCD_IRQHandler+0x216>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000ed0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000ed4:	6821      	ldr	r1, [r4, #0]
 8000ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eda:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000ede:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ee2:	6820      	ldr	r0, [r4, #0]
 8000ee4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	d4c8      	bmi.n	8000e7e <HAL_PCD_IRQHandler+0x1b2>
 8000eec:	e6f7      	b.n	8000cde <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000eee:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8000ef2:	d020      	beq.n	8000f36 <HAL_PCD_IRQHandler+0x26a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ef4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ef8:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000efc:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000f00:	fa11 f383 	uxtah	r3, r1, r3

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f04:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000f08:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000f0c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f14:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f18:	f002 ff90 	bl	8003e3c <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	8813      	ldrh	r3, [r2, #0]
 8000f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f24:	051b      	lsls	r3, r3, #20
 8000f26:	0d1b      	lsrs	r3, r3, #20
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f004 f90e 	bl	8005150 <HAL_PCD_SetupStageCallback>
 8000f34:	e7d5      	b.n	8000ee2 <HAL_PCD_IRQHandler+0x216>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f36:	041f      	lsls	r7, r3, #16
 8000f38:	d5d3      	bpl.n	8000ee2 <HAL_PCD_IRQHandler+0x216>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f3a:	8803      	ldrh	r3, [r0, #0]
 8000f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f40:	051b      	lsls	r3, r3, #20
 8000f42:	0d1b      	lsrs	r3, r3, #20
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f4a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f4e:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000f52:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000f56:	fa11 f383 	uxtah	r3, r1, r3
 8000f5a:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f62:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000f66:	b18b      	cbz	r3, 8000f8c <HAL_PCD_IRQHandler+0x2c0>
 8000f68:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8000f6c:	b171      	cbz	r1, 8000f8c <HAL_PCD_IRQHandler+0x2c0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000f6e:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000f72:	f002 ff63 	bl	8003e3c <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8000f76:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8000f7a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8000f7e:	4413      	add	r3, r2
 8000f80:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000f84:	4629      	mov	r1, r5
 8000f86:	4620      	mov	r0, r4
 8000f88:	f004 f8e8 	bl	800515c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8000f92:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f96:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	b933      	cbnz	r3, 8000fac <HAL_PCD_IRQHandler+0x2e0>
 8000f9e:	5aab      	ldrh	r3, [r5, r2]
 8000fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8000fa4:	ea43 030b 	orr.w	r3, r3, fp
 8000fa8:	52ab      	strh	r3, [r5, r2]
 8000faa:	e007      	b.n	8000fbc <HAL_PCD_IRQHandler+0x2f0>
 8000fac:	2b3d      	cmp	r3, #61	; 0x3d
 8000fae:	d814      	bhi.n	8000fda <HAL_PCD_IRQHandler+0x30e>
 8000fb0:	0859      	lsrs	r1, r3, #1
 8000fb2:	07de      	lsls	r6, r3, #31
 8000fb4:	bf48      	it	mi
 8000fb6:	3101      	addmi	r1, #1
 8000fb8:	0289      	lsls	r1, r1, #10
 8000fba:	52a9      	strh	r1, [r5, r2]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000fbc:	8803      	ldrh	r3, [r0, #0]
 8000fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fc6:	041b      	lsls	r3, r3, #16
 8000fc8:	0c1b      	lsrs	r3, r3, #16
 8000fca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd6:	8003      	strh	r3, [r0, #0]
 8000fd8:	e783      	b.n	8000ee2 <HAL_PCD_IRQHandler+0x216>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	ea4b 2383 	orr.w	r3, fp, r3, lsl #10
 8000fe0:	e7e2      	b.n	8000fa8 <HAL_PCD_IRQHandler+0x2dc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000fe2:	b23e      	sxth	r6, r7
 8000fe4:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 8000fe8:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fec:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8000ff0:	d040      	beq.n	8001074 <HAL_PCD_IRQHandler+0x3a8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ff2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8000ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ffa:	051b      	lsls	r3, r3, #20
 8000ffc:	0d1b      	lsrs	r3, r3, #20
 8000ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001002:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001006:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800100a:	eb04 0108 	add.w	r1, r4, r8
 800100e:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8001012:	2b00      	cmp	r3, #0
 8001014:	d159      	bne.n	80010ca <HAL_PCD_IRQHandler+0x3fe>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001016:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800101a:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 800101e:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001022:	fa15 f383 	uxtah	r3, r5, r3
 8001026:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 800102a:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800102e:	b135      	cbz	r5, 800103e <HAL_PCD_IRQHandler+0x372>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001030:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8001034:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001038:	462b      	mov	r3, r5
 800103a:	f002 feff 	bl	8003e3c <USB_ReadPMA>
 800103e:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 8001042:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 8001046:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800104a:	442a      	add	r2, r5
 800104c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        ep->xfer_buff += count;
 8001050:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 8001054:	442a      	add	r2, r5
 8001056:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800105a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105e:	b11b      	cbz	r3, 8001068 <HAL_PCD_IRQHandler+0x39c>
 8001060:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001064:	4285      	cmp	r5, r0
 8001066:	d26b      	bcs.n	8001140 <HAL_PCD_IRQHandler+0x474>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001068:	44a0      	add	r8, r4
 800106a:	4620      	mov	r0, r4
 800106c:	f898 1128 	ldrb.w	r1, [r8, #296]	; 0x128
 8001070:	f004 f874 	bl	800515c <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001074:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001078:	f43f af33 	beq.w	8000ee2 <HAL_PCD_IRQHandler+0x216>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 8001082:	b29b      	uxth	r3, r3
 8001084:	ea03 030a 	and.w	r3, r3, sl
 8001088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108c:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001090:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8001094:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001098:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800109c:	f202 4202 	addw	r2, r2, #1026	; 0x402
 80010a0:	fa12 f283 	uxtah	r2, r2, r3
 80010a4:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80010a8:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
 80010ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80010b0:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80010b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80010b8:	441a      	add	r2, r3
 80010ba:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80010bc:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80010be:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d143      	bne.n	800114c <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80010c4:	f004 f852 	bl	800516c <HAL_PCD_DataInStageCallback>
 80010c8:	e70b      	b.n	8000ee2 <HAL_PCD_IRQHandler+0x216>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80010ca:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 80010ce:	b213      	sxth	r3, r2
 80010d0:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80010d4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80010dc:	d022      	beq.n	8001124 <HAL_PCD_IRQHandler+0x458>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010de:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80010e2:	fa15 f383 	uxtah	r3, r5, r3
 80010e6:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80010ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80010ee:	b135      	cbz	r5, 80010fe <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80010f0:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 80010f4:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010f6:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80010fa:	f002 fe9f 	bl	8003e3c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80010fe:	eb04 0308 	add.w	r3, r4, r8
 8001102:	6822      	ldr	r2, [r4, #0]
 8001104:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8001108:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800111e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001122:	e78c      	b.n	800103e <HAL_PCD_IRQHandler+0x372>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001124:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001128:	fa15 f383 	uxtah	r3, r5, r3
 800112c:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001130:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001134:	2d00      	cmp	r5, #0
 8001136:	d0e2      	beq.n	80010fe <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001138:	462b      	mov	r3, r5
 800113a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800113e:	e7da      	b.n	80010f6 <HAL_PCD_IRQHandler+0x42a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001140:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fd89 	bl	8000c5c <HAL_PCD_EP_Receive>
 800114a:	e793      	b.n	8001074 <HAL_PCD_IRQHandler+0x3a8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800114c:	f7ff fda6 	bl	8000c9c <HAL_PCD_EP_Transmit>
 8001150:	e6c7      	b.n	8000ee2 <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001152:	f8df a010 	ldr.w	sl, [pc, #16]	; 8001164 <HAL_PCD_IRQHandler+0x498>
 8001156:	f8df b010 	ldr.w	fp, [pc, #16]	; 8001168 <HAL_PCD_IRQHandler+0x49c>
 800115a:	e6c2      	b.n	8000ee2 <HAL_PCD_IRQHandler+0x216>
      HAL_PCD_SuspendCallback(hpcd);
 800115c:	4620      	mov	r0, r4
 800115e:	f004 f823 	bl	80051a8 <HAL_PCD_SuspendCallback>
 8001162:	e66b      	b.n	8000e3c <HAL_PCD_IRQHandler+0x170>
 8001164:	ffff8f0f 	.word	0xffff8f0f
 8001168:	ffff8000 	.word	0xffff8000

0800116c <HAL_PCD_EP_SetStall>:
{
 800116c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800116e:	6843      	ldr	r3, [r0, #4]
 8001170:	f001 0507 	and.w	r5, r1, #7
 8001174:	429d      	cmp	r5, r3
{
 8001176:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001178:	d82d      	bhi.n	80011d6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800117a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800117e:	f04f 0320 	mov.w	r3, #32
 8001182:	d01e      	beq.n	80011c2 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8001184:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001188:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 800118c:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800118e:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8001190:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 8001194:	2201      	movs	r2, #1
 8001196:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001198:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 800119a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
 800119e:	4291      	cmp	r1, r2
 80011a0:	d01b      	beq.n	80011da <HAL_PCD_EP_SetStall+0x6e>
 80011a2:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011a6:	4619      	mov	r1, r3
 80011a8:	6820      	ldr	r0, [r4, #0]
 80011aa:	f002 fcd1 	bl	8003b50 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011ae:	b925      	cbnz	r5, 80011ba <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80011b0:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80011b4:	6820      	ldr	r0, [r4, #0]
 80011b6:	f002 fd4d 	bl	8003c54 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80011c0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80011c2:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 80011c6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80011ca:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80011cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 80011d0:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
 80011d4:	e7de      	b.n	8001194 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80011d6:	2001      	movs	r0, #1
 80011d8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80011da:	2002      	movs	r0, #2
}
 80011dc:	bd38      	pop	{r3, r4, r5, pc}

080011de <HAL_PCD_EP_ClrStall>:
{
 80011de:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80011e0:	6843      	ldr	r3, [r0, #4]
 80011e2:	f001 020f 	and.w	r2, r1, #15
 80011e6:	429a      	cmp	r2, r3
{
 80011e8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80011ea:	d82a      	bhi.n	8001242 <HAL_PCD_EP_ClrStall+0x64>
 80011ec:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80011f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011fa:	fb01 0102 	mla	r1, r1, r2, r0
 80011fe:	bf19      	ittee	ne
 8001200:	3128      	addne	r1, #40	; 0x28
    ep->is_in = 1U;
 8001202:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001206:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 800120a:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 800120e:	bf14      	ite	ne
 8001210:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001212:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8001214:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001218:	bf14      	ite	ne
 800121a:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 800121e:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 8001222:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001224:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001226:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800122a:	2b01      	cmp	r3, #1
 800122c:	d00b      	beq.n	8001246 <HAL_PCD_EP_ClrStall+0x68>
 800122e:	2301      	movs	r3, #1
 8001230:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001234:	6820      	ldr	r0, [r4, #0]
 8001236:	f002 fcac 	bl	8003b92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800123a:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 800123e:	4628      	mov	r0, r5
 8001240:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
 8001244:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001246:	2002      	movs	r0, #2
}
 8001248:	bd38      	pop	{r3, r4, r5, pc}

0800124a <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800124a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800124e:	bf1b      	ittet	ne
 8001250:	f001 0107 	andne.w	r1, r1, #7
 8001254:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001258:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125c:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800125e:	bf08      	it	eq
 8001260:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001264:	b91a      	cbnz	r2, 800126e <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001266:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001268:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800126a:	2000      	movs	r0, #0
 800126c:	4770      	bx	lr
    ep->doublebuffer = 1U;
 800126e:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001270:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001272:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001274:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001276:	8143      	strh	r3, [r0, #10]
 8001278:	e7f7      	b.n	800126a <HAL_PCDEx_PMAConfig+0x20>

0800127a <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800127a:	6802      	ldr	r2, [r0, #0]
{
 800127c:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 800127e:	2101      	movs	r1, #1
 8001280:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001284:	2000      	movs	r0, #0
 8001286:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800128a:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800128e:	b29b      	uxth	r3, r3
 8001290:	430b      	orrs	r3, r1
 8001292:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001296:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800129a:	b29b      	uxth	r3, r3
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012a8:	4a02      	ldr	r2, [pc, #8]	; (80012b4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80012aa:	6813      	ldr	r3, [r2, #0]
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4770      	bx	lr
 80012b4:	58000400 	.word	0x58000400

080012b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <HAL_PWREx_GetVoltageRange+0xc>)
 80012ba:	6818      	ldr	r0, [r3, #0]
}
 80012bc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	58000400 	.word	0x58000400

080012c8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80012c8:	4a02      	ldr	r2, [pc, #8]	; (80012d4 <HAL_PWREx_EnableVddUSB+0xc>)
 80012ca:	6853      	ldr	r3, [r2, #4]
 80012cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d0:	6053      	str	r3, [r2, #4]
 80012d2:	4770      	bx	lr
 80012d4:	58000400 	.word	0x58000400

080012d8 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	6818      	ldr	r0, [r3, #0]
}
 80012de:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80012e2:	4770      	bx	lr

080012e4 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	6818      	ldr	r0, [r3, #0]
}
 80012ea:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80012ee:	4770      	bx	lr

080012f0 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80012f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80012fc:	4770      	bx	lr

080012fe <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001302:	6818      	ldr	r0, [r3, #0]
}
 8001304:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001308:	4770      	bx	lr

0800130a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800130a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001314:	4318      	orrs	r0, r3
 8001316:	6010      	str	r0, [r2, #0]
 8001318:	4770      	bx	lr

0800131a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 8001324:	28b0      	cmp	r0, #176	; 0xb0
 8001326:	bf28      	it	cs
 8001328:	20b0      	movcs	r0, #176	; 0xb0
 800132a:	4770      	bx	lr

0800132c <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800132c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001330:	6853      	ldr	r3, [r2, #4]
 8001332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001336:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800133a:	6050      	str	r0, [r2, #4]
 800133c:	4770      	bx	lr
	...

08001340 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001340:	28b0      	cmp	r0, #176	; 0xb0
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001346:	bf98      	it	ls
 8001348:	0900      	lsrls	r0, r0, #4
{
 800134a:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800134c:	bf8c      	ite	hi
 800134e:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001350:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001354:	4c2f      	ldr	r4, [pc, #188]	; (8001414 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800135a:	b08d      	sub	sp, #52	; 0x34
 800135c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001360:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001364:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8001370:	fbb5 f5f3 	udiv	r5, r5, r3
 8001374:	f7ff ffa0 	bl	80012b8 <HAL_PWREx_GetVoltageRange>
 8001378:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800137a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800137e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001382:	f104 0210 	add.w	r2, r4, #16
 8001386:	ca07      	ldmia	r2, {r0, r1, r2}
 8001388:	ab01      	add	r3, sp, #4
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800138a:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800138c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001390:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001394:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001398:	ac0c      	add	r4, sp, #48	; 0x30
 800139a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800139e:	d11f      	bne.n	80013e0 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 80013a0:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80013a2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80013a6:	4295      	cmp	r5, r2
 80013a8:	d815      	bhi.n	80013d6 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 80013aa:	aa0c      	add	r2, sp, #48	; 0x30
 80013ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80013b0:	f853 4c10 	ldr.w	r4, [r3, #-16]
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80013b4:	4d19      	ldr	r5, [pc, #100]	; (800141c <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 80013b6:	682b      	ldr	r3, [r5, #0]
 80013b8:	f023 0307 	bic.w	r3, r3, #7
 80013bc:	4323      	orrs	r3, r4
 80013be:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80013c0:	f7ff f90e 	bl	80005e0 <HAL_GetTick>
 80013c4:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	429c      	cmp	r4, r3
 80013ce:	d116      	bne.n	80013fe <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80013d0:	2000      	movs	r0, #0
}
 80013d2:	b00d      	add	sp, #52	; 0x34
 80013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80013d6:	3301      	adds	r3, #1
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d1e2      	bne.n	80013a2 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80013dc:	2400      	movs	r4, #0
 80013de:	e7e9      	b.n	80013b4 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80013e0:	9b01      	ldr	r3, [sp, #4]
 80013e2:	429d      	cmp	r5, r3
 80013e4:	d907      	bls.n	80013f6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
 80013e6:	9b02      	ldr	r3, [sp, #8]
 80013e8:	429d      	cmp	r5, r3
 80013ea:	d906      	bls.n	80013fa <RCC_SetFlashLatencyFromMSIRange+0xba>
 80013ec:	9b03      	ldr	r3, [sp, #12]
 80013ee:	429d      	cmp	r5, r3
 80013f0:	d8f4      	bhi.n	80013dc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80013f2:	2302      	movs	r3, #2
 80013f4:	e7d9      	b.n	80013aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80013f6:	2300      	movs	r3, #0
 80013f8:	e7d7      	b.n	80013aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80013fa:	2301      	movs	r3, #1
 80013fc:	e7d5      	b.n	80013aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80013fe:	f7ff f8ef 	bl	80005e0 <HAL_GetTick>
 8001402:	1b80      	subs	r0, r0, r6
 8001404:	2802      	cmp	r0, #2
 8001406:	d9de      	bls.n	80013c6 <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 8001408:	2003      	movs	r0, #3
 800140a:	e7e2      	b.n	80013d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
 800140c:	080065c4 	.word	0x080065c4
 8001410:	08006564 	.word	0x08006564
 8001414:	08006470 	.word	0x08006470
 8001418:	000f4240 	.word	0x000f4240
 800141c:	58004000 	.word	0x58004000

08001420 <HAL_RCC_OscConfig>:
{
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 8001422:	4604      	mov	r4, r0
 8001424:	b908      	cbnz	r0, 800142a <HAL_RCC_OscConfig+0xa>
    return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800142a:	6803      	ldr	r3, [r0, #0]
 800142c:	069f      	lsls	r7, r3, #26
 800142e:	d52a      	bpl.n	8001486 <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001434:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001436:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001438:	f013 030c 	ands.w	r3, r3, #12
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x2a>
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d146      	bne.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 8001442:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001446:	2b01      	cmp	r3, #1
 8001448:	d142      	bne.n	80014d0 <HAL_RCC_OscConfig+0xb0>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144a:	f7ff ff58 	bl	80012fe <LL_RCC_MSI_IsReady>
 800144e:	b110      	cbz	r0, 8001456 <HAL_RCC_OscConfig+0x36>
 8001450:	69e3      	ldr	r3, [r4, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0e7      	beq.n	8001426 <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001456:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001458:	f7ff ff5f 	bl	800131a <LL_RCC_MSI_GetRange>
 800145c:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800145e:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001460:	d92b      	bls.n	80014ba <HAL_RCC_OscConfig+0x9a>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001462:	f7ff ff6d 	bl	8001340 <RCC_SetFlashLatencyFromMSIRange>
 8001466:	2800      	cmp	r0, #0
 8001468:	d1dd      	bne.n	8001426 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800146c:	f7ff ff4d 	bl	800130a <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001470:	6a20      	ldr	r0, [r4, #32]
 8001472:	f7ff ff5b 	bl	800132c <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 8001476:	f003 fd8f 	bl	8004f98 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800147a:	4bb8      	ldr	r3, [pc, #736]	; (800175c <HAL_RCC_OscConfig+0x33c>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	f7ff f867 	bl	8000550 <HAL_InitTick>
 8001482:	2800      	cmp	r0, #0
 8001484:	d1cf      	bne.n	8001426 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	07de      	lsls	r6, r3, #31
 800148a:	d44e      	bmi.n	800152a <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	079d      	lsls	r5, r3, #30
 8001490:	f100 8098 	bmi.w	80015c4 <HAL_RCC_OscConfig+0x1a4>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	f013 0f18 	tst.w	r3, #24
 800149a:	f040 80d9 	bne.w	8001650 <HAL_RCC_OscConfig+0x230>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	0758      	lsls	r0, r3, #29
 80014a2:	f100 8168 	bmi.w	8001776 <HAL_RCC_OscConfig+0x356>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	0658      	lsls	r0, r3, #25
 80014aa:	f100 81ba 	bmi.w	8001822 <HAL_RCC_OscConfig+0x402>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014b0:	2900      	cmp	r1, #0
 80014b2:	f040 81e2 	bne.w	800187a <HAL_RCC_OscConfig+0x45a>
  return HAL_OK;
 80014b6:	2000      	movs	r0, #0
 80014b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ba:	f7ff ff26 	bl	800130a <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014be:	6a20      	ldr	r0, [r4, #32]
 80014c0:	f7ff ff34 	bl	800132c <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014c6:	f7ff ff3b 	bl	8001340 <RCC_SetFlashLatencyFromMSIRange>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d0d3      	beq.n	8001476 <HAL_RCC_OscConfig+0x56>
 80014ce:	e7aa      	b.n	8001426 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d0:	69e2      	ldr	r2, [r4, #28]
 80014d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d6:	b1ba      	cbz	r2, 8001508 <HAL_RCC_OscConfig+0xe8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014e0:	f7ff f87e 	bl	80005e0 <HAL_GetTick>
 80014e4:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 80014e6:	f7ff ff0a 	bl	80012fe <LL_RCC_MSI_IsReady>
 80014ea:	b130      	cbz	r0, 80014fa <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014ee:	f7ff ff0c 	bl	800130a <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f2:	6a20      	ldr	r0, [r4, #32]
 80014f4:	f7ff ff1a 	bl	800132c <LL_RCC_MSI_SetCalibTrimming>
 80014f8:	e7c5      	b.n	8001486 <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fa:	f7ff f871 	bl	80005e0 <HAL_GetTick>
 80014fe:	1b40      	subs	r0, r0, r5
 8001500:	2802      	cmp	r0, #2
 8001502:	d9f0      	bls.n	80014e6 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001504:	2003      	movs	r0, #3
 8001506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001510:	f7ff f866 	bl	80005e0 <HAL_GetTick>
 8001514:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8001516:	f7ff fef2 	bl	80012fe <LL_RCC_MSI_IsReady>
 800151a:	2800      	cmp	r0, #0
 800151c:	d0b3      	beq.n	8001486 <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800151e:	f7ff f85f 	bl	80005e0 <HAL_GetTick>
 8001522:	1b40      	subs	r0, r0, r5
 8001524:	2802      	cmp	r0, #2
 8001526:	d9f6      	bls.n	8001516 <HAL_RCC_OscConfig+0xf6>
 8001528:	e7ec      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001530:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001532:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001536:	2b08      	cmp	r3, #8
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x126>
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d10b      	bne.n	8001556 <HAL_RCC_OscConfig+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800153e:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001542:	2b03      	cmp	r3, #3
 8001544:	d107      	bne.n	8001556 <HAL_RCC_OscConfig+0x136>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001546:	f7ff fec7 	bl	80012d8 <LL_RCC_HSE_IsReady>
 800154a:	2800      	cmp	r0, #0
 800154c:	d09e      	beq.n	800148c <HAL_RCC_OscConfig+0x6c>
 800154e:	6863      	ldr	r3, [r4, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d19b      	bne.n	800148c <HAL_RCC_OscConfig+0x6c>
 8001554:	e767      	b.n	8001426 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	6862      	ldr	r2, [r4, #4]
 8001558:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	d110      	bne.n	8001584 <HAL_RCC_OscConfig+0x164>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001568:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800156a:	f7ff f839 	bl	80005e0 <HAL_GetTick>
 800156e:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8001570:	f7ff feb2 	bl	80012d8 <LL_RCC_HSE_IsReady>
 8001574:	2800      	cmp	r0, #0
 8001576:	d189      	bne.n	800148c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff f832 	bl	80005e0 <HAL_GetTick>
 800157c:	1b40      	subs	r0, r0, r5
 800157e:	2864      	cmp	r0, #100	; 0x64
 8001580:	d9f6      	bls.n	8001570 <HAL_RCC_OscConfig+0x150>
 8001582:	e7bf      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001588:	d104      	bne.n	8001594 <HAL_RCC_OscConfig+0x174>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e7e6      	b.n	8001562 <HAL_RCC_OscConfig+0x142>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800159a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80015a2:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a4:	2a00      	cmp	r2, #0
 80015a6:	d1e0      	bne.n	800156a <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 80015a8:	f7ff f81a 	bl	80005e0 <HAL_GetTick>
 80015ac:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 80015ae:	f7ff fe93 	bl	80012d8 <LL_RCC_HSE_IsReady>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	f43f af6a 	beq.w	800148c <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff f812 	bl	80005e0 <HAL_GetTick>
 80015bc:	1b40      	subs	r0, r0, r5
 80015be:	2864      	cmp	r0, #100	; 0x64
 80015c0:	d9f5      	bls.n	80015ae <HAL_RCC_OscConfig+0x18e>
 80015c2:	e79f      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c8:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015ca:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015cc:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1c0>
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d114      	bne.n	8001602 <HAL_RCC_OscConfig+0x1e2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015d8:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d110      	bne.n	8001602 <HAL_RCC_OscConfig+0x1e2>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	f7ff fe80 	bl	80012e4 <LL_RCC_HSI_IsReady>
 80015e4:	b118      	cbz	r0, 80015ee <HAL_RCC_OscConfig+0x1ce>
 80015e6:	68e3      	ldr	r3, [r4, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f43f af1c 	beq.w	8001426 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f2:	6921      	ldr	r1, [r4, #16]
 80015f4:	6853      	ldr	r3, [r2, #4]
 80015f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80015fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80015fe:	6053      	str	r3, [r2, #4]
 8001600:	e748      	b.n	8001494 <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001602:	68e2      	ldr	r2, [r4, #12]
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001608:	b182      	cbz	r2, 800162c <HAL_RCC_OscConfig+0x20c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001610:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001612:	f7fe ffe5 	bl	80005e0 <HAL_GetTick>
 8001616:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8001618:	f7ff fe64 	bl	80012e4 <LL_RCC_HSI_IsReady>
 800161c:	2800      	cmp	r0, #0
 800161e:	d1e6      	bne.n	80015ee <HAL_RCC_OscConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7fe ffde 	bl	80005e0 <HAL_GetTick>
 8001624:	1b40      	subs	r0, r0, r5
 8001626:	2802      	cmp	r0, #2
 8001628:	d9f6      	bls.n	8001618 <HAL_RCC_OscConfig+0x1f8>
 800162a:	e76b      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001632:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001634:	f7fe ffd4 	bl	80005e0 <HAL_GetTick>
 8001638:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 800163a:	f7ff fe53 	bl	80012e4 <LL_RCC_HSI_IsReady>
 800163e:	2800      	cmp	r0, #0
 8001640:	f43f af28 	beq.w	8001494 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7fe ffcc 	bl	80005e0 <HAL_GetTick>
 8001648:	1b40      	subs	r0, r0, r5
 800164a:	2802      	cmp	r0, #2
 800164c:	d9f5      	bls.n	800163a <HAL_RCC_OscConfig+0x21a>
 800164e:	e759      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001650:	6962      	ldr	r2, [r4, #20]
 8001652:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001656:	2a00      	cmp	r2, #0
 8001658:	d06b      	beq.n	8001732 <HAL_RCC_OscConfig+0x312>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800165a:	06d9      	lsls	r1, r3, #27
 800165c:	d543      	bpl.n	80016e6 <HAL_RCC_OscConfig+0x2c6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 800165e:	f7ff fe47 	bl	80012f0 <LL_RCC_LSI1_IsReady>
 8001662:	b310      	cbz	r0, 80016aa <HAL_RCC_OscConfig+0x28a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001664:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001668:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001674:	f7fe ffb4 	bl	80005e0 <HAL_GetTick>
 8001678:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800167a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800167e:	071a      	lsls	r2, r3, #28
 8001680:	f140 8199 	bpl.w	80019b6 <HAL_RCC_OscConfig+0x596>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001684:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001688:	69a2      	ldr	r2, [r4, #24]
 800168a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800168e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001692:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001696:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80016a2:	f7fe ff9d 	bl	80005e0 <HAL_GetTick>
 80016a6:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x2bc>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 80016b6:	f7fe ff93 	bl	80005e0 <HAL_GetTick>
 80016ba:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 80016bc:	f7ff fe18 	bl	80012f0 <LL_RCC_LSI1_IsReady>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d1cf      	bne.n	8001664 <HAL_RCC_OscConfig+0x244>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80016c4:	f7fe ff8c 	bl	80005e0 <HAL_GetTick>
 80016c8:	1b40      	subs	r0, r0, r5
 80016ca:	2802      	cmp	r0, #2
 80016cc:	d9f6      	bls.n	80016bc <HAL_RCC_OscConfig+0x29c>
 80016ce:	e719      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80016d0:	f7fe ff86 	bl	80005e0 <HAL_GetTick>
 80016d4:	1b40      	subs	r0, r0, r5
 80016d6:	2802      	cmp	r0, #2
 80016d8:	f63f af14 	bhi.w	8001504 <HAL_RCC_OscConfig+0xe4>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80016dc:	f7ff fe08 	bl	80012f0 <LL_RCC_LSI1_IsReady>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d1f5      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2b0>
 80016e4:	e6db      	b.n	800149e <HAL_RCC_OscConfig+0x7e>
 80016e6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 80016f2:	f7fe ff75 	bl	80005e0 <HAL_GetTick>
 80016f6:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 80016f8:	f7ff fdfa 	bl	80012f0 <LL_RCC_LSI1_IsReady>
 80016fc:	b198      	cbz	r0, 8001726 <HAL_RCC_OscConfig+0x306>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001702:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001704:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001708:	f022 0204 	bic.w	r2, r2, #4
 800170c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001710:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001714:	071b      	lsls	r3, r3, #28
 8001716:	f57f aec2 	bpl.w	800149e <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800171a:	f7fe ff61 	bl	80005e0 <HAL_GetTick>
 800171e:	1b80      	subs	r0, r0, r6
 8001720:	2803      	cmp	r0, #3
 8001722:	d9f5      	bls.n	8001710 <HAL_RCC_OscConfig+0x2f0>
 8001724:	e6ee      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001726:	f7fe ff5b 	bl	80005e0 <HAL_GetTick>
 800172a:	1b80      	subs	r0, r0, r6
 800172c:	2802      	cmp	r0, #2
 800172e:	d9e3      	bls.n	80016f8 <HAL_RCC_OscConfig+0x2d8>
 8001730:	e6e8      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001732:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800173e:	f7fe ff4f 	bl	80005e0 <HAL_GetTick>
 8001742:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001744:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001748:	071f      	lsls	r7, r3, #28
 800174a:	f140 813b 	bpl.w	80019c4 <HAL_RCC_OscConfig+0x5a4>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800174e:	f7fe ff47 	bl	80005e0 <HAL_GetTick>
 8001752:	1b80      	subs	r0, r0, r6
 8001754:	2803      	cmp	r0, #3
 8001756:	d9f5      	bls.n	8001744 <HAL_RCC_OscConfig+0x324>
 8001758:	e6d4      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001760:	f7fe ff3e 	bl	80005e0 <HAL_GetTick>
 8001764:	1b40      	subs	r0, r0, r5
 8001766:	2802      	cmp	r0, #2
 8001768:	f63f aecc 	bhi.w	8001504 <HAL_RCC_OscConfig+0xe4>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800176c:	f7ff fdc0 	bl	80012f0 <LL_RCC_LSI1_IsReady>
 8001770:	2800      	cmp	r0, #0
 8001772:	d1f5      	bne.n	8001760 <HAL_RCC_OscConfig+0x340>
 8001774:	e693      	b.n	800149e <HAL_RCC_OscConfig+0x7e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001776:	4d98      	ldr	r5, [pc, #608]	; (80019d8 <HAL_RCC_OscConfig+0x5b8>)
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	05d9      	lsls	r1, r3, #23
 800177c:	d51c      	bpl.n	80017b8 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177e:	68a3      	ldr	r3, [r4, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001786:	d125      	bne.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001788:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001794:	f7fe ff24 	bl	80005e0 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001798:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800179c:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f241 3588 	movw	r5, #5000	; 0x1388
 80017a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017a6:	079b      	lsls	r3, r3, #30
 80017a8:	f53f ae7d 	bmi.w	80014a6 <HAL_RCC_OscConfig+0x86>
 80017ac:	f7fe ff18 	bl	80005e0 <HAL_GetTick>
 80017b0:	1b80      	subs	r0, r0, r6
 80017b2:	42a8      	cmp	r0, r5
 80017b4:	d9f5      	bls.n	80017a2 <HAL_RCC_OscConfig+0x382>
 80017b6:	e6a5      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
      HAL_PWR_EnableBkUpAccess();
 80017b8:	f7ff fd76 	bl	80012a8 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80017bc:	f7fe ff10 	bl	80005e0 <HAL_GetTick>
 80017c0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	682b      	ldr	r3, [r5, #0]
 80017c4:	05da      	lsls	r2, r3, #23
 80017c6:	d4da      	bmi.n	800177e <HAL_RCC_OscConfig+0x35e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c8:	f7fe ff0a 	bl	80005e0 <HAL_GetTick>
 80017cc:	1b80      	subs	r0, r0, r6
 80017ce:	2802      	cmp	r0, #2
 80017d0:	d9f7      	bls.n	80017c2 <HAL_RCC_OscConfig+0x3a2>
 80017d2:	e697      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3c6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017d8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80017e4:	e7d0      	b.n	8001788 <HAL_RCC_OscConfig+0x368>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017e6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017f2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1c8      	bne.n	8001794 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8001802:	f7fe feed 	bl	80005e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800180a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800180c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001810:	0798      	lsls	r0, r3, #30
 8001812:	f57f ae48 	bpl.w	80014a6 <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7fe fee3 	bl	80005e0 <HAL_GetTick>
 800181a:	1bc0      	subs	r0, r0, r7
 800181c:	42b0      	cmp	r0, r6
 800181e:	d9f5      	bls.n	800180c <HAL_RCC_OscConfig+0x3ec>
 8001820:	e670      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001824:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001828:	b19b      	cbz	r3, 8001852 <HAL_RCC_OscConfig+0x432>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800182a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001836:	f7fe fed3 	bl	80005e0 <HAL_GetTick>
 800183a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800183c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001840:	0799      	lsls	r1, r3, #30
 8001842:	f53f ae34 	bmi.w	80014ae <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001846:	f7fe fecb 	bl	80005e0 <HAL_GetTick>
 800184a:	1b80      	subs	r0, r0, r6
 800184c:	2802      	cmp	r0, #2
 800184e:	d9f5      	bls.n	800183c <HAL_RCC_OscConfig+0x41c>
 8001850:	e658      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001852:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800185e:	f7fe febf 	bl	80005e0 <HAL_GetTick>
 8001862:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001864:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001868:	079a      	lsls	r2, r3, #30
 800186a:	f57f ae20 	bpl.w	80014ae <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186e:	f7fe feb7 	bl	80005e0 <HAL_GetTick>
 8001872:	1b80      	subs	r0, r0, r6
 8001874:	2802      	cmp	r0, #2
 8001876:	d9f5      	bls.n	8001864 <HAL_RCC_OscConfig+0x444>
 8001878:	e644      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800187a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800187e:	2902      	cmp	r1, #2
 8001880:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001882:	68eb      	ldr	r3, [r5, #12]
 8001884:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001888:	d177      	bne.n	800197a <HAL_RCC_OscConfig+0x55a>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800188c:	f003 0103 	and.w	r1, r3, #3
 8001890:	4281      	cmp	r1, r0
 8001892:	d118      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4a6>
 8001894:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001896:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	4281      	cmp	r1, r0
 800189c:	d113      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800189e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a0:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a4:	4281      	cmp	r1, r0
 80018a6:	d10e      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4a6>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018aa:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018ae:	4281      	cmp	r1, r0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018b4:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b8:	4281      	cmp	r1, r0
 80018ba:	d104      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018be:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018c2:	428b      	cmp	r3, r1
 80018c4:	d040      	beq.n	8001948 <HAL_RCC_OscConfig+0x528>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c6:	2a0c      	cmp	r2, #12
 80018c8:	f43f adad 	beq.w	8001426 <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018cc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	f53f ada7 	bmi.w	8001426 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018de:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80018e0:	f7fe fe7e 	bl	80005e0 <HAL_GetTick>
 80018e4:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	019f      	lsls	r7, r3, #6
 80018ea:	d427      	bmi.n	800193c <HAL_RCC_OscConfig+0x51c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80018ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018f0:	68e9      	ldr	r1, [r5, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	4a39      	ldr	r2, [pc, #228]	; (80019dc <HAL_RCC_OscConfig+0x5bc>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	4313      	orrs	r3, r2
 80018fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80018fc:	4313      	orrs	r3, r2
 80018fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001900:	4313      	orrs	r3, r2
 8001902:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001904:	4313      	orrs	r3, r2
 8001906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800190c:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800190e:	682b      	ldr	r3, [r5, #0]
 8001910:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001914:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001916:	68eb      	ldr	r3, [r5, #12]
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800191e:	f7fe fe5f 	bl	80005e0 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 8001926:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	0198      	lsls	r0, r3, #6
 800192c:	f53f adc3 	bmi.w	80014b6 <HAL_RCC_OscConfig+0x96>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7fe fe56 	bl	80005e0 <HAL_GetTick>
 8001934:	1b40      	subs	r0, r0, r5
 8001936:	2802      	cmp	r0, #2
 8001938:	d9f6      	bls.n	8001928 <HAL_RCC_OscConfig+0x508>
 800193a:	e5e3      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7fe fe50 	bl	80005e0 <HAL_GetTick>
 8001940:	1b80      	subs	r0, r0, r6
 8001942:	2802      	cmp	r0, #2
 8001944:	d9cf      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4c6>
 8001946:	e5dd      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	0199      	lsls	r1, r3, #6
 800194c:	f53f adb3 	bmi.w	80014b6 <HAL_RCC_OscConfig+0x96>
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	68eb      	ldr	r3, [r5, #12]
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 8001960:	f7fe fe3e 	bl	80005e0 <HAL_GetTick>
 8001964:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	019a      	lsls	r2, r3, #6
 800196a:	f53f ada4 	bmi.w	80014b6 <HAL_RCC_OscConfig+0x96>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7fe fe37 	bl	80005e0 <HAL_GetTick>
 8001972:	1b00      	subs	r0, r0, r4
 8001974:	2802      	cmp	r0, #2
 8001976:	d9f6      	bls.n	8001966 <HAL_RCC_OscConfig+0x546>
 8001978:	e5c4      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197a:	2a0c      	cmp	r2, #12
 800197c:	f43f ad53 	beq.w	8001426 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001986:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001988:	68eb      	ldr	r3, [r5, #12]
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001990:	68eb      	ldr	r3, [r5, #12]
 8001992:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800199c:	f7fe fe20 	bl	80005e0 <HAL_GetTick>
 80019a0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	f57f ad86 	bpl.w	80014b6 <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7fe fe19 	bl	80005e0 <HAL_GetTick>
 80019ae:	1b00      	subs	r0, r0, r4
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d9f6      	bls.n	80019a2 <HAL_RCC_OscConfig+0x582>
 80019b4:	e5a6      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80019b6:	f7fe fe13 	bl	80005e0 <HAL_GetTick>
 80019ba:	1b80      	subs	r0, r0, r6
 80019bc:	2803      	cmp	r0, #3
 80019be:	f67f ae5c 	bls.w	800167a <HAL_RCC_OscConfig+0x25a>
 80019c2:	e59f      	b.n	8001504 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019c4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80019d0:	f7fe fe06 	bl	80005e0 <HAL_GetTick>
 80019d4:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 80019d6:	e6c9      	b.n	800176c <HAL_RCC_OscConfig+0x34c>
 80019d8:	58000400 	.word	0x58000400
 80019dc:	11c1808c 	.word	0x11c1808c

080019e0 <HAL_RCC_ClockConfig>:
{
 80019e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80019e6:	4604      	mov	r4, r0
 80019e8:	b910      	cbnz	r0, 80019f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4e7a      	ldr	r6, [pc, #488]	; (8001bdc <HAL_RCC_ClockConfig+0x1fc>)
 80019f2:	6833      	ldr	r3, [r6, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d372      	bcc.n	8001ae2 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	0799      	lsls	r1, r3, #30
 8001a00:	d50e      	bpl.n	8001a20 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a02:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001a06:	68a2      	ldr	r2, [r4, #8]
 8001a08:	68b3      	ldr	r3, [r6, #8]
 8001a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a12:	f7fe fde5 	bl	80005e0 <HAL_GetTick>
 8001a16:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a18:	68b3      	ldr	r3, [r6, #8]
 8001a1a:	03db      	lsls	r3, r3, #15
 8001a1c:	f140 80ba 	bpl.w	8001b94 <HAL_RCC_ClockConfig+0x1b4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	069a      	lsls	r2, r3, #26
 8001a24:	d511      	bpl.n	8001a4a <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a26:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001a2a:	6962      	ldr	r2, [r4, #20]
 8001a2c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001a3a:	f7fe fdd1 	bl	80005e0 <HAL_GetTick>
 8001a3e:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001a40:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001a44:	0399      	lsls	r1, r3, #14
 8001a46:	f140 80ac 	bpl.w	8001ba2 <HAL_RCC_ClockConfig+0x1c2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	0658      	lsls	r0, r3, #25
 8001a4e:	d512      	bpl.n	8001a76 <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a50:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001a54:	69a2      	ldr	r2, [r4, #24]
 8001a56:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001a5a:	f023 030f 	bic.w	r3, r3, #15
 8001a5e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001a62:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001a66:	f7fe fdbb 	bl	80005e0 <HAL_GetTick>
 8001a6a:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a6c:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001a70:	03db      	lsls	r3, r3, #15
 8001a72:	f140 809d 	bpl.w	8001bb0 <HAL_RCC_ClockConfig+0x1d0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	075a      	lsls	r2, r3, #29
 8001a7a:	d50e      	bpl.n	8001a9a <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a7c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001a80:	68e2      	ldr	r2, [r4, #12]
 8001a82:	68b3      	ldr	r3, [r6, #8]
 8001a84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a8c:	f7fe fda8 	bl	80005e0 <HAL_GetTick>
 8001a90:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a92:	68b3      	ldr	r3, [r6, #8]
 8001a94:	0398      	lsls	r0, r3, #14
 8001a96:	f140 8092 	bpl.w	8001bbe <HAL_RCC_ClockConfig+0x1de>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	071e      	lsls	r6, r3, #28
 8001a9e:	d50f      	bpl.n	8001ac0 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001aa0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001aa4:	6922      	ldr	r2, [r4, #16]
 8001aa6:	68b3      	ldr	r3, [r6, #8]
 8001aa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001aac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ab0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ab2:	f7fe fd95 	bl	80005e0 <HAL_GetTick>
 8001ab6:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001ab8:	68b3      	ldr	r3, [r6, #8]
 8001aba:	035a      	lsls	r2, r3, #13
 8001abc:	f140 8086 	bpl.w	8001bcc <HAL_RCC_ClockConfig+0x1ec>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	07d9      	lsls	r1, r3, #31
 8001ac4:	d423      	bmi.n	8001b0e <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac6:	4c45      	ldr	r4, [pc, #276]	; (8001bdc <HAL_RCC_ClockConfig+0x1fc>)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	429d      	cmp	r5, r3
 8001ad0:	d34d      	bcc.n	8001b6e <HAL_RCC_ClockConfig+0x18e>
  SystemCoreClockUpdate();
 8001ad2:	f003 fa61 	bl	8004f98 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8001ad6:	f7fe fd89 	bl	80005ec <HAL_GetTickPrio>
}
 8001ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8001ade:	f7fe bd37 	b.w	8000550 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	6833      	ldr	r3, [r6, #0]
 8001ae4:	f023 0307 	bic.w	r3, r3, #7
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001aec:	f7fe fd78 	bl	80005e0 <HAL_GetTick>
 8001af0:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	6833      	ldr	r3, [r6, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	429d      	cmp	r5, r3
 8001afa:	f43f af7f 	beq.w	80019fc <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001afe:	f7fe fd6f 	bl	80005e0 <HAL_GetTick>
 8001b02:	1bc0      	subs	r0, r0, r7
 8001b04:	2802      	cmp	r0, #2
 8001b06:	d9f4      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8001b08:	2003      	movs	r0, #3
 8001b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	6863      	ldr	r3, [r4, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d103      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x13c>
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b14:	f7ff fbe0 	bl	80012d8 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b18:	b940      	cbnz	r0, 8001b2c <HAL_RCC_ClockConfig+0x14c>
 8001b1a:	e766      	b.n	80019ea <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d11f      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	019b      	lsls	r3, r3, #6
 8001b28:	f57f af5f 	bpl.w	80019ea <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b2c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001b30:	6862      	ldr	r2, [r4, #4]
 8001b32:	68b3      	ldr	r3, [r6, #8]
 8001b34:	f023 0303 	bic.w	r3, r3, #3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b3c:	f7fe fd50 	bl	80005e0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b44:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b46:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	6862      	ldr	r2, [r4, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b52:	d0b8      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7fe fd44 	bl	80005e0 <HAL_GetTick>
 8001b58:	1bc0      	subs	r0, r0, r7
 8001b5a:	4540      	cmp	r0, r8
 8001b5c:	d9f3      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x166>
 8001b5e:	e7d3      	b.n	8001b08 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b60:	b913      	cbnz	r3, 8001b68 <HAL_RCC_ClockConfig+0x188>
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b62:	f7ff fbcc 	bl	80012fe <LL_RCC_MSI_IsReady>
 8001b66:	e7d7      	b.n	8001b18 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b68:	f7ff fbbc 	bl	80012e4 <LL_RCC_HSI_IsReady>
 8001b6c:	e7d4      	b.n	8001b18 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f023 0307 	bic.w	r3, r3, #7
 8001b74:	432b      	orrs	r3, r5
 8001b76:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001b78:	f7fe fd32 	bl	80005e0 <HAL_GetTick>
 8001b7c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	429d      	cmp	r5, r3
 8001b86:	d0a4      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b88:	f7fe fd2a 	bl	80005e0 <HAL_GetTick>
 8001b8c:	1b80      	subs	r0, r0, r6
 8001b8e:	2802      	cmp	r0, #2
 8001b90:	d9f5      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x19e>
 8001b92:	e7b9      	b.n	8001b08 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b94:	f7fe fd24 	bl	80005e0 <HAL_GetTick>
 8001b98:	1bc0      	subs	r0, r0, r7
 8001b9a:	2802      	cmp	r0, #2
 8001b9c:	f67f af3c 	bls.w	8001a18 <HAL_RCC_ClockConfig+0x38>
 8001ba0:	e7b2      	b.n	8001b08 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ba2:	f7fe fd1d 	bl	80005e0 <HAL_GetTick>
 8001ba6:	1bc0      	subs	r0, r0, r7
 8001ba8:	2802      	cmp	r0, #2
 8001baa:	f67f af49 	bls.w	8001a40 <HAL_RCC_ClockConfig+0x60>
 8001bae:	e7ab      	b.n	8001b08 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bb0:	f7fe fd16 	bl	80005e0 <HAL_GetTick>
 8001bb4:	1bc0      	subs	r0, r0, r7
 8001bb6:	2802      	cmp	r0, #2
 8001bb8:	f67f af58 	bls.w	8001a6c <HAL_RCC_ClockConfig+0x8c>
 8001bbc:	e7a4      	b.n	8001b08 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bbe:	f7fe fd0f 	bl	80005e0 <HAL_GetTick>
 8001bc2:	1bc0      	subs	r0, r0, r7
 8001bc4:	2802      	cmp	r0, #2
 8001bc6:	f67f af64 	bls.w	8001a92 <HAL_RCC_ClockConfig+0xb2>
 8001bca:	e79d      	b.n	8001b08 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bcc:	f7fe fd08 	bl	80005e0 <HAL_GetTick>
 8001bd0:	1bc0      	subs	r0, r0, r7
 8001bd2:	2802      	cmp	r0, #2
 8001bd4:	f67f af70 	bls.w	8001ab8 <HAL_RCC_ClockConfig+0xd8>
 8001bd8:	e796      	b.n	8001b08 <HAL_RCC_ClockConfig+0x128>
 8001bda:	bf00      	nop
 8001bdc:	58004000 	.word	0x58004000

08001be0 <HAL_RCC_GetSysClockFreq>:
 8001be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001be4:	b508      	push	{r3, lr}
 8001be6:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001be8:	f013 030c 	ands.w	r3, r3, #12
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001bee:	f7ff fb94 	bl	800131a <LL_RCC_MSI_GetRange>
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x90>)
 8001bf4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001bf8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001bfc:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d033      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c06:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8001c08:	481a      	ldr	r0, [pc, #104]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c0a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c10:	bf08      	it	eq
 8001c12:	4618      	moveq	r0, r3
 8001c14:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c16:	68d3      	ldr	r3, [r2, #12]
 8001c18:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d022      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x86>
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d118      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c24:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE;
 8001c26:	4814      	ldr	r0, [pc, #80]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c2e:	bf08      	it	eq
 8001c30:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c36:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c38:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c3a:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001c3c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001c40:	4358      	muls	r0, r3
 8001c42:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8001c46:	3301      	adds	r3, #1
 8001c48:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c4c:	0f53      	lsrs	r3, r2, #29
 8001c4e:	3301      	adds	r3, #1
 8001c50:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c54:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c56:	f7ff fb60 	bl	800131a <LL_RCC_MSI_GetRange>
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x90>)
 8001c5c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001c60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001c64:	e7e5      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8001c66:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c68:	e7e3      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8001c6a:	4802      	ldr	r0, [pc, #8]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
}
 8001c6c:	bd08      	pop	{r3, pc}
 8001c6e:	bf00      	nop
 8001c70:	080065c4 	.word	0x080065c4
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	01e84800 	.word	0x01e84800

08001c7c <HAL_RCC_GetHCLKFreq>:
{
 8001c7c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c7e:	f7ff ffaf 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x1c>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001c92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c96:	bd08      	pop	{r3, pc}
 8001c98:	08006564 	.word	0x08006564

08001c9c <HAL_RCC_GetPCLK1Freq>:
{
 8001c9c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c9e:	f7ff ffed 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
}
 8001cb6:	40d8      	lsrs	r0, r3
 8001cb8:	bd08      	pop	{r3, pc}
 8001cba:	bf00      	nop
 8001cbc:	080065a4 	.word	0x080065a4

08001cc0 <HAL_RCC_GetPCLK2Freq>:
{
 8001cc0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001cc2:	f7ff ffdb 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	f003 031f 	and.w	r3, r3, #31
}
 8001cda:	40d8      	lsrs	r0, r3
 8001cdc:	bd08      	pop	{r3, pc}
 8001cde:	bf00      	nop
 8001ce0:	080065a4 	.word	0x080065a4

08001ce4 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8001cec:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf6:	0902      	lsrs	r2, r0, #4
 8001cf8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cfc:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8001d00:	0100      	lsls	r0, r0, #4
 8001d02:	ea23 0302 	bic.w	r3, r3, r2
 8001d06:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8001d0a:	4318      	orrs	r0, r3
 8001d0c:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4770      	bx	lr

08001d20 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d24:	6813      	ldr	r3, [r2, #0]
 8001d26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	6818      	ldr	r0, [r3, #0]
}
 8001d34:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8001d38:	4770      	bx	lr

08001d3a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d3c:	6805      	ldr	r5, [r0, #0]
 8001d3e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8001d42:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d44:	d043      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001d46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4c:	d015      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d4e:	d802      	bhi.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d50:	b1d3      	cbz	r3, 8001d88 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001d52:	2501      	movs	r5, #1
 8001d54:	e03b      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d5a:	d002      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d60:	d1f7      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d6c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d70:	430b      	orrs	r3, r1
 8001d72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d76:	2500      	movs	r5, #0
 8001d78:	e029      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7e:	68d3      	ldr	r3, [r2, #12]
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	60d3      	str	r3, [r2, #12]
        break;
 8001d86:	e7ec      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001d88:	f7ff ffca 	bl	8001d20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001d8c:	f7fe fc28 	bl	80005e0 <HAL_GetTick>
 8001d90:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001d92:	f7ff ffcc 	bl	8001d2e <LL_RCC_PLLSAI1_IsReady>
 8001d96:	b9a0      	cbnz	r0, 8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9c:	6861      	ldr	r1, [r4, #4]
 8001d9e:	6913      	ldr	r3, [r2, #16]
 8001da0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001da4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001da8:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8001daa:	6913      	ldr	r3, [r2, #16]
 8001dac:	68a1      	ldr	r1, [r4, #8]
 8001dae:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001db6:	f7ff ffac 	bl	8001d12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dba:	f7fe fc11 	bl	80005e0 <HAL_GetTick>
 8001dbe:	4605      	mov	r5, r0
 8001dc0:	e0cd      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001dc2:	f7fe fc0d 	bl	80005e0 <HAL_GetTick>
 8001dc6:	1b40      	subs	r0, r0, r5
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	d9e2      	bls.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001dcc:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	051a      	lsls	r2, r3, #20
 8001dd2:	d515      	bpl.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001dd4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dda:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8001dde:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001de2:	42bb      	cmp	r3, r7
 8001de4:	d00c      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8001de6:	f7ff fa5f 	bl	80012a8 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001dea:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001dee:	2f00      	cmp	r7, #0
 8001df0:	f040 80c0 	bne.w	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8001df4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	07df      	lsls	r7, r3, #31
 8001e04:	d509      	bpl.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0a:	69a0      	ldr	r0, [r4, #24]
 8001e0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e10:	f022 0203 	bic.w	r2, r2, #3
 8001e14:	4302      	orrs	r2, r0
 8001e16:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e1a:	079e      	lsls	r6, r3, #30
 8001e1c:	d509      	bpl.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e22:	69e0      	ldr	r0, [r4, #28]
 8001e24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e2c:	4302      	orrs	r2, r0
 8001e2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e32:	06d8      	lsls	r0, r3, #27
 8001e34:	d50c      	bpl.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001e38:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001e3c:	0c31      	lsrs	r1, r6, #16
 8001e3e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	ea22 0201 	bic.w	r2, r2, r1
 8001e48:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001e4c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e50:	0699      	lsls	r1, r3, #26
 8001e52:	d50c      	bpl.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e56:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001e5a:	0c31      	lsrs	r1, r6, #16
 8001e5c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001e60:	0409      	lsls	r1, r1, #16
 8001e62:	ea22 0201 	bic.w	r2, r2, r1
 8001e66:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001e6a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e6e:	075a      	lsls	r2, r3, #29
 8001e70:	d502      	bpl.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e72:	6a20      	ldr	r0, [r4, #32]
 8001e74:	f7ff ff3d 	bl	8001cf2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	071b      	lsls	r3, r3, #28
 8001e7c:	d502      	bpl.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e80:	f7ff ff37 	bl	8001cf2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	05df      	lsls	r7, r3, #23
 8001e88:	d511      	bpl.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e90:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e94:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e98:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e9a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001e9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ea2:	f040 8090 	bne.w	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001ea6:	68d3      	ldr	r3, [r2, #12]
 8001ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eac:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	059e      	lsls	r6, r3, #22
 8001eb2:	d51a      	bpl.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001eb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001eb6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	d003      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8001ec0:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8001ec4:	f040 80b7 	bne.w	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001ec8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001ecc:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001ed0:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ed2:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8001ed6:	bf08      	it	eq
 8001ed8:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001edc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8001ee0:	bf02      	ittt	eq
 8001ee2:	68d3      	ldreq	r3, [r2, #12]
 8001ee4:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	0558      	lsls	r0, r3, #21
 8001eee:	d511      	bpl.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ef4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001ef6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001efa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001efe:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001f00:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f08:	f040 80a3 	bne.w	8002052 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f0c:	68d3      	ldr	r3, [r2, #12]
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001f14:	6822      	ldr	r2, [r4, #0]
 8001f16:	04d1      	lsls	r1, r2, #19
 8001f18:	d509      	bpl.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001f20:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001f24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001f2e:	0493      	lsls	r3, r2, #18
 8001f30:	d50d      	bpl.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f36:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001f38:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001f3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001f42:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001f44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001f4e:	4628      	mov	r0, r5
 8001f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f52:	f7fe fb45 	bl	80005e0 <HAL_GetTick>
 8001f56:	1b40      	subs	r0, r0, r5
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	f63f af37 	bhi.w	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001f5e:	f7ff fee6 	bl	8001d2e <LL_RCC_PLLSAI1_IsReady>
 8001f62:	2801      	cmp	r0, #1
 8001f64:	d1f5      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f6a:	6961      	ldr	r1, [r4, #20]
 8001f6c:	6913      	ldr	r3, [r2, #16]
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	6113      	str	r3, [r2, #16]
 8001f72:	e6f6      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001f74:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001f78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f7c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001f80:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001f84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f88:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8001f8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f92:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8001f94:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001f98:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001f9c:	07db      	lsls	r3, r3, #31
 8001f9e:	f57f af2f 	bpl.w	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8001fa2:	f7fe fb1d 	bl	80005e0 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8001faa:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8001fac:	e004      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x27e>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fb17 	bl	80005e0 <HAL_GetTick>
 8001fb2:	1bc0      	subs	r0, r0, r7
 8001fb4:	42b0      	cmp	r0, r6
 8001fb6:	d804      	bhi.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x288>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001fb8:	f7ff fe94 	bl	8001ce4 <LL_RCC_LSE_IsReady>
 8001fbc:	2801      	cmp	r0, #1
 8001fbe:	d1f6      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001fc0:	e71e      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8001fc2:	2503      	movs	r5, #3
 8001fc4:	e71c      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fc6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001fca:	f47f af70 	bne.w	8001eae <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001fce:	f7ff fea7 	bl	8001d20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001fd2:	f7fe fb05 	bl	80005e0 <HAL_GetTick>
 8001fd6:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001fd8:	f7ff fea9 	bl	8001d2e <LL_RCC_PLLSAI1_IsReady>
 8001fdc:	b9a0      	cbnz	r0, 8002008 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe2:	6861      	ldr	r1, [r4, #4]
 8001fe4:	6913      	ldr	r3, [r2, #16]
 8001fe6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fee:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8001ff0:	6913      	ldr	r3, [r2, #16]
 8001ff2:	68e1      	ldr	r1, [r4, #12]
 8001ff4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001ffc:	f7ff fe89 	bl	8001d12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002000:	f7fe faee 	bl	80005e0 <HAL_GetTick>
 8002004:	4606      	mov	r6, r0
 8002006:	e00b      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002008:	f7fe faea 	bl	80005e0 <HAL_GetTick>
 800200c:	1b80      	subs	r0, r0, r6
 800200e:	2802      	cmp	r0, #2
 8002010:	d9e2      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x29e>
              ret = HAL_TIMEOUT;
 8002012:	2503      	movs	r5, #3
 8002014:	e74b      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002016:	f7fe fae3 	bl	80005e0 <HAL_GetTick>
 800201a:	1b80      	subs	r0, r0, r6
 800201c:	2802      	cmp	r0, #2
 800201e:	d8f8      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002020:	f7ff fe85 	bl	8001d2e <LL_RCC_PLLSAI1_IsReady>
 8002024:	2801      	cmp	r0, #1
 8002026:	d1f6      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202c:	6961      	ldr	r1, [r4, #20]
 800202e:	6913      	ldr	r3, [r2, #16]
 8002030:	430b      	orrs	r3, r1
 8002032:	6113      	str	r3, [r2, #16]
 8002034:	e73b      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002036:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800203a:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800203e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002042:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002046:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800204a:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 800204e:	4301      	orrs	r1, r0
 8002050:	e73f      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x198>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002052:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002056:	f47f af5d 	bne.w	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800205a:	f7ff fe61 	bl	8001d20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800205e:	f7fe fabf 	bl	80005e0 <HAL_GetTick>
 8002062:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002064:	f7ff fe63 	bl	8001d2e <LL_RCC_PLLSAI1_IsReady>
 8002068:	b9a0      	cbnz	r0, 8002094 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800206a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206e:	6861      	ldr	r1, [r4, #4]
 8002070:	6913      	ldr	r3, [r2, #16]
 8002072:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002076:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800207a:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800207c:	6913      	ldr	r3, [r2, #16]
 800207e:	6921      	ldr	r1, [r4, #16]
 8002080:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002084:	430b      	orrs	r3, r1
 8002086:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002088:	f7ff fe43 	bl	8001d12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208c:	f7fe faa8 	bl	80005e0 <HAL_GetTick>
 8002090:	4606      	mov	r6, r0
 8002092:	e00b      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x372>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002094:	f7fe faa4 	bl	80005e0 <HAL_GetTick>
 8002098:	1b80      	subs	r0, r0, r6
 800209a:	2802      	cmp	r0, #2
 800209c:	d9e2      	bls.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x32a>
              ret = HAL_TIMEOUT;
 800209e:	2503      	movs	r5, #3
 80020a0:	e738      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020a2:	f7fe fa9d 	bl	80005e0 <HAL_GetTick>
 80020a6:	1b80      	subs	r0, r0, r6
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d8f8      	bhi.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x364>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80020ac:	f7ff fe3f 	bl	8001d2e <LL_RCC_PLLSAI1_IsReady>
 80020b0:	2801      	cmp	r0, #1
 80020b2:	d1f6      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80020b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b8:	6961      	ldr	r1, [r4, #20]
 80020ba:	6913      	ldr	r3, [r2, #16]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6113      	str	r3, [r2, #16]
 80020c0:	e728      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1da>

080020c2 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d0:	6803      	ldr	r3, [r0, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_TIM_Base_Start_IT+0x28>)
 80020de:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e0:	2a06      	cmp	r2, #6
 80020e2:	d006      	beq.n	80020f2 <HAL_TIM_Base_Start_IT+0x22>
 80020e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80020e8:	bf1e      	ittt	ne
 80020ea:	681a      	ldrne	r2, [r3, #0]
 80020ec:	f042 0201 	orrne.w	r2, r2, #1
 80020f0:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80020f2:	2000      	movs	r0, #0
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	00010007 	.word	0x00010007

080020fc <HAL_TIM_OC_DelayElapsedCallback>:
 80020fc:	4770      	bx	lr

080020fe <HAL_TIM_IC_CaptureCallback>:
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_TriggerCallback>:
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002104:	6803      	ldr	r3, [r0, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	0791      	lsls	r1, r2, #30
{
 800210a:	b510      	push	{r4, lr}
 800210c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210e:	d50f      	bpl.n	8002130 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	0792      	lsls	r2, r2, #30
 8002114:	d50c      	bpl.n	8002130 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002116:	f06f 0202 	mvn.w	r2, #2
 800211a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800211c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002120:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002122:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002124:	f000 8085 	beq.w	8002232 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002128:	f7ff ffe9 	bl	80020fe <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212c:	2300      	movs	r3, #0
 800212e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	0752      	lsls	r2, r2, #29
 8002136:	d510      	bpl.n	800215a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	0750      	lsls	r0, r2, #29
 800213c:	d50d      	bpl.n	800215a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800213e:	f06f 0204 	mvn.w	r2, #4
 8002142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002144:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002148:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002150:	d075      	beq.n	800223e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	f7ff ffd4 	bl	80020fe <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	2300      	movs	r3, #0
 8002158:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	0711      	lsls	r1, r2, #28
 8002160:	d50f      	bpl.n	8002182 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	0712      	lsls	r2, r2, #28
 8002166:	d50c      	bpl.n	8002182 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002168:	f06f 0208 	mvn.w	r2, #8
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800216e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002170:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002172:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002174:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002178:	d067      	beq.n	800224a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	f7ff ffc0 	bl	80020fe <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	2300      	movs	r3, #0
 8002180:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	06d0      	lsls	r0, r2, #27
 8002188:	d510      	bpl.n	80021ac <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	06d1      	lsls	r1, r2, #27
 800218e:	d50d      	bpl.n	80021ac <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002190:	f06f 0210 	mvn.w	r2, #16
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002196:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002198:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800219a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a2:	d058      	beq.n	8002256 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80021a4:	f7ff ffab 	bl	80020fe <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a8:	2300      	movs	r3, #0
 80021aa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	07d2      	lsls	r2, r2, #31
 80021b2:	d508      	bpl.n	80021c6 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	07d0      	lsls	r0, r2, #31
 80021b8:	d505      	bpl.n	80021c6 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ba:	f06f 0201 	mvn.w	r2, #1
 80021be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f002 fd97 	bl	8004cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	0611      	lsls	r1, r2, #24
 80021cc:	d508      	bpl.n	80021e0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	0612      	lsls	r2, r2, #24
 80021d2:	d505      	bpl.n	80021e0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021da:	4620      	mov	r0, r4
 80021dc:	f000 f897 	bl	800230e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	05d0      	lsls	r0, r2, #23
 80021e6:	d508      	bpl.n	80021fa <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	0611      	lsls	r1, r2, #24
 80021ec:	d505      	bpl.n	80021fa <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021f4:	4620      	mov	r0, r4
 80021f6:	f000 f88b 	bl	8002310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	0652      	lsls	r2, r2, #25
 8002200:	d508      	bpl.n	8002214 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	0650      	lsls	r0, r2, #25
 8002206:	d505      	bpl.n	8002214 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800220e:	4620      	mov	r0, r4
 8002210:	f7ff ff77 	bl	8002102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	0691      	lsls	r1, r2, #26
 800221a:	d522      	bpl.n	8002262 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	0692      	lsls	r2, r2, #26
 8002220:	d51f      	bpl.n	8002262 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002222:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002226:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002228:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800222a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800222e:	f000 b86d 	b.w	800230c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	f7ff ff63 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff62 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 800223c:	e776      	b.n	800212c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	f7ff ff5d 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff ff5c 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 8002248:	e785      	b.n	8002156 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	f7ff ff57 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff56 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 8002254:	e793      	b.n	800217e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	f7ff ff51 	bl	80020fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff ff50 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
 8002260:	e7a2      	b.n	80021a8 <HAL_TIM_IRQHandler+0xa4>
 8002262:	bd10      	pop	{r4, pc}

08002264 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002266:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002268:	4290      	cmp	r0, r2
{
 800226a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	d002      	beq.n	8002274 <TIM_Base_SetConfig+0x10>
 800226e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002272:	d109      	bne.n	8002288 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002274:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227a:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800227c:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002280:	d009      	beq.n	8002296 <TIM_Base_SetConfig+0x32>
 8002282:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002286:	d006      	beq.n	8002296 <TIM_Base_SetConfig+0x32>
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <TIM_Base_SetConfig+0x70>)
 800228a:	4290      	cmp	r0, r2
 800228c:	d003      	beq.n	8002296 <TIM_Base_SetConfig+0x32>
 800228e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002292:	4290      	cmp	r0, r2
 8002294:	d103      	bne.n	800229e <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002296:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800229e:	694a      	ldr	r2, [r1, #20]
 80022a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80022a6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a8:	688b      	ldr	r3, [r1, #8]
 80022aa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ac:	680b      	ldr	r3, [r1, #0]
 80022ae:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <TIM_Base_SetConfig+0x6c>)
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022b6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80022ba:	4298      	cmp	r0, r3
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0x62>
 80022be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c2:	4298      	cmp	r0, r3
 80022c4:	d101      	bne.n	80022ca <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c6:	690b      	ldr	r3, [r1, #16]
 80022c8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ca:	2301      	movs	r3, #1
 80022cc:	6143      	str	r3, [r0, #20]
 80022ce:	bd10      	pop	{r4, pc}
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40014400 	.word	0x40014400

080022d8 <HAL_TIM_Base_Init>:
{
 80022d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80022da:	4604      	mov	r4, r0
 80022dc:	b1a0      	cbz	r0, 8002308 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80022de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022e6:	b91b      	cbnz	r3, 80022f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022ec:	f002 fda6 	bl	8004e3c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	2302      	movs	r3, #2
 80022f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	1d21      	adds	r1, r4, #4
 80022fa:	f7ff ffb3 	bl	8002264 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80022fe:	2301      	movs	r3, #1
 8002300:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002304:	2000      	movs	r0, #0
 8002306:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
}
 800230a:	bd10      	pop	{r4, pc}

0800230c <HAL_TIMEx_CommutCallback>:
 800230c:	4770      	bx	lr

0800230e <HAL_TIMEx_BreakCallback>:
 800230e:	4770      	bx	lr

08002310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002310:	4770      	bx	lr

08002312 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002312:	6802      	ldr	r2, [r0, #0]
 8002314:	6813      	ldr	r3, [r2, #0]
 8002316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800231a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800231c:	6893      	ldr	r3, [r2, #8]
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002328:	2320      	movs	r3, #32
 800232a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002332:	4770      	bx	lr

08002334 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002334:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002338:	2b21      	cmp	r3, #33	; 0x21
 800233a:	d11a      	bne.n	8002372 <UART_TxISR_16BIT+0x3e>
  {
    if (huart->TxXferCount == 0U)
 800233c:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8002340:	6803      	ldr	r3, [r0, #0]
 8002342:	b292      	uxth	r2, r2
 8002344:	b942      	cbnz	r2, 8002358 <UART_TxISR_16BIT+0x24>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800234c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	4770      	bx	lr
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002358:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800235a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800235e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002362:	6299      	str	r1, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
 8002364:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr += 2U;
 8002368:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800236a:	3b01      	subs	r3, #1
 800236c:	b29b      	uxth	r3, r3
 800236e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
 8002372:	4770      	bx	lr

08002374 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002374:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002378:	2b21      	cmp	r3, #33	; 0x21
{
 800237a:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800237c:	d102      	bne.n	8002384 <UART_TxISR_16BIT_FIFOEN+0x10>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800237e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8002382:	b902      	cbnz	r2, 8002386 <UART_TxISR_16BIT_FIFOEN+0x12>
 8002384:	bd10      	pop	{r4, pc}
    {
      if (huart->TxXferCount == 0U)
 8002386:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
 800238a:	6803      	ldr	r3, [r0, #0]
 800238c:	b289      	uxth	r1, r1
 800238e:	b941      	cbnz	r1, 80023a2 <UART_TxISR_16BIT_FIFOEN+0x2e>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002396:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	bd10      	pop	{r4, pc}

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80023a2:	69d9      	ldr	r1, [r3, #28]
 80023a4:	0609      	lsls	r1, r1, #24
 80023a6:	d50c      	bpl.n	80023c2 <UART_TxISR_16BIT_FIFOEN+0x4e>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80023a8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80023aa:	f831 4b02 	ldrh.w	r4, [r1], #2
 80023ae:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80023b2:	629c      	str	r4, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
        huart->TxXferCount--;
 80023b4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr += 2U;
 80023b8:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80023c2:	3a01      	subs	r2, #1
 80023c4:	b292      	uxth	r2, r2
 80023c6:	e7dc      	b.n	8002382 <UART_TxISR_16BIT_FIFOEN+0xe>

080023c8 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023c8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80023cc:	2b21      	cmp	r3, #33	; 0x21
 80023ce:	d118      	bne.n	8002402 <UART_TxISR_8BIT+0x3a>
    if (huart->TxXferCount == 0U)
 80023d0:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	b292      	uxth	r2, r2
 80023d8:	b942      	cbnz	r2, 80023ec <UART_TxISR_8BIT+0x24>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e0:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80023ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80023ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 80023f2:	6299      	str	r1, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80023f4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr++;
 80023f8:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
 8002402:	4770      	bx	lr

08002404 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002404:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002408:	2b21      	cmp	r3, #33	; 0x21
{
 800240a:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800240c:	d102      	bne.n	8002414 <UART_TxISR_8BIT_FIFOEN+0x10>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800240e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8002412:	b902      	cbnz	r2, 8002416 <UART_TxISR_8BIT_FIFOEN+0x12>
 8002414:	bd10      	pop	{r4, pc}
      if (huart->TxXferCount == 0U)
 8002416:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	b289      	uxth	r1, r1
 800241e:	b941      	cbnz	r1, 8002432 <UART_TxISR_8BIT_FIFOEN+0x2e>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002426:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	bd10      	pop	{r4, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002432:	69d9      	ldr	r1, [r3, #28]
 8002434:	0609      	lsls	r1, r1, #24
 8002436:	d50a      	bpl.n	800244e <UART_TxISR_8BIT_FIFOEN+0x4a>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002438:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800243a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800243e:	629c      	str	r4, [r3, #40]	; 0x28
        huart->TxXferCount--;
 8002440:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
        huart->pTxBuffPtr++;
 8002444:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8002446:	3b01      	subs	r3, #1
 8002448:	b29b      	uxth	r3, r3
 800244a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800244e:	3a01      	subs	r2, #1
 8002450:	b292      	uxth	r2, r2
 8002452:	e7de      	b.n	8002412 <UART_TxISR_8BIT_FIFOEN+0xe>

08002454 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002454:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002458:	2b20      	cmp	r3, #32
 800245a:	d141      	bne.n	80024e0 <HAL_UART_Transmit_IT+0x8c>
    if ((pData == NULL) || (Size == 0U))
 800245c:	2900      	cmp	r1, #0
 800245e:	d03d      	beq.n	80024dc <HAL_UART_Transmit_IT+0x88>
 8002460:	2a00      	cmp	r2, #0
 8002462:	d03b      	beq.n	80024dc <HAL_UART_Transmit_IT+0x88>
    __HAL_LOCK(huart);
 8002464:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d039      	beq.n	80024e0 <HAL_UART_Transmit_IT+0x8c>
 800246c:	2301      	movs	r3, #1
 800246e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->TxISR       = NULL;
 8002472:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 8002474:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->TxISR       = NULL;
 8002478:	6703      	str	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247e:	2321      	movs	r3, #33	; 0x21
 8002480:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002484:	6e43      	ldr	r3, [r0, #100]	; 0x64
    huart->TxXferSize  = Size;
 8002486:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800248a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    huart->pTxBuffPtr  = pData;
 800248e:	6501      	str	r1, [r0, #80]	; 0x50
 8002490:	6883      	ldr	r3, [r0, #8]
 8002492:	6802      	ldr	r2, [r0, #0]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002494:	d111      	bne.n	80024ba <HAL_UART_Transmit_IT+0x66>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d10c      	bne.n	80024b6 <HAL_UART_Transmit_IT+0x62>
 800249c:	6903      	ldr	r3, [r0, #16]
 800249e:	b953      	cbnz	r3, 80024b6 <HAL_UART_Transmit_IT+0x62>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_UART_Transmit_IT+0x90>)
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80024a2:	6891      	ldr	r1, [r2, #8]
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80024a4:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80024a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
      __HAL_UNLOCK(huart);
 80024aa:	2300      	movs	r3, #0
 80024ac:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80024b0:	6091      	str	r1, [r2, #8]
    return HAL_OK;
 80024b2:	4618      	mov	r0, r3
 80024b4:	4770      	bx	lr
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_UART_Transmit_IT+0x94>)
 80024b8:	e7f3      	b.n	80024a2 <HAL_UART_Transmit_IT+0x4e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d10b      	bne.n	80024d8 <HAL_UART_Transmit_IT+0x84>
 80024c0:	6903      	ldr	r3, [r0, #16]
 80024c2:	b94b      	cbnz	r3, 80024d8 <HAL_UART_Transmit_IT+0x84>
        huart->TxISR = UART_TxISR_16BIT;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_UART_Transmit_IT+0x98>)
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80024c6:	6811      	ldr	r1, [r2, #0]
        huart->TxISR = UART_TxISR_8BIT;
 80024c8:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80024ca:	f041 0180 	orr.w	r1, r1, #128	; 0x80
      __HAL_UNLOCK(huart);
 80024ce:	2300      	movs	r3, #0
 80024d0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80024d4:	6011      	str	r1, [r2, #0]
 80024d6:	e7ec      	b.n	80024b2 <HAL_UART_Transmit_IT+0x5e>
        huart->TxISR = UART_TxISR_8BIT;
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_UART_Transmit_IT+0x9c>)
 80024da:	e7f4      	b.n	80024c6 <HAL_UART_Transmit_IT+0x72>
      return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
 80024de:	4770      	bx	lr
    return HAL_BUSY;
 80024e0:	2002      	movs	r0, #2
}
 80024e2:	4770      	bx	lr
 80024e4:	08002375 	.word	0x08002375
 80024e8:	08002405 	.word	0x08002405
 80024ec:	08002335 	.word	0x08002335
 80024f0:	080023c9 	.word	0x080023c9

080024f4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80024f4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80024f8:	2b20      	cmp	r3, #32
{
 80024fa:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80024fc:	d168      	bne.n	80025d0 <HAL_UART_Receive_IT+0xdc>
    if ((pData == NULL) || (Size == 0U))
 80024fe:	2900      	cmp	r1, #0
 8002500:	d064      	beq.n	80025cc <HAL_UART_Receive_IT+0xd8>
 8002502:	2a00      	cmp	r2, #0
 8002504:	d062      	beq.n	80025cc <HAL_UART_Receive_IT+0xd8>
    __HAL_LOCK(huart);
 8002506:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d060      	beq.n	80025d0 <HAL_UART_Receive_IT+0xdc>
 800250e:	2301      	movs	r3, #1
 8002510:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 8002514:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8002516:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 800251c:	f04f 0100 	mov.w	r1, #0
    huart->RxXferSize  = Size;
 8002520:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002524:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8002528:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800252a:	d12e      	bne.n	800258a <HAL_UART_Receive_IT+0x96>
 800252c:	6901      	ldr	r1, [r0, #16]
 800252e:	bb51      	cbnz	r1, 8002586 <HAL_UART_Receive_IT+0x92>
 8002530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002534:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	2100      	movs	r1, #0
 800253a:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800253e:	2122      	movs	r1, #34	; 0x22
 8002540:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002544:	6801      	ldr	r1, [r0, #0]
 8002546:	688c      	ldr	r4, [r1, #8]
 8002548:	f044 0401 	orr.w	r4, r4, #1
 800254c:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800254e:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8002550:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8002554:	d129      	bne.n	80025aa <HAL_UART_Receive_IT+0xb6>
 8002556:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800255a:	4294      	cmp	r4, r2
 800255c:	d825      	bhi.n	80025aa <HAL_UART_Receive_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d120      	bne.n	80025a6 <HAL_UART_Receive_IT+0xb2>
 8002564:	6903      	ldr	r3, [r0, #16]
 8002566:	b9f3      	cbnz	r3, 80025a6 <HAL_UART_Receive_IT+0xb2>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800256a:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800256c:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800256e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8002572:	2300      	movs	r3, #0
 8002574:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002578:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800257a:	688a      	ldr	r2, [r1, #8]
 800257c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002580:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8002582:	4618      	mov	r0, r3
 8002584:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8002586:	21ff      	movs	r1, #255	; 0xff
 8002588:	e7d4      	b.n	8002534 <HAL_UART_Receive_IT+0x40>
 800258a:	b923      	cbnz	r3, 8002596 <HAL_UART_Receive_IT+0xa2>
 800258c:	6901      	ldr	r1, [r0, #16]
 800258e:	2900      	cmp	r1, #0
 8002590:	d0f9      	beq.n	8002586 <HAL_UART_Receive_IT+0x92>
 8002592:	217f      	movs	r1, #127	; 0x7f
 8002594:	e7ce      	b.n	8002534 <HAL_UART_Receive_IT+0x40>
 8002596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800259a:	d1cb      	bne.n	8002534 <HAL_UART_Receive_IT+0x40>
 800259c:	6901      	ldr	r1, [r0, #16]
 800259e:	2900      	cmp	r1, #0
 80025a0:	d0f7      	beq.n	8002592 <HAL_UART_Receive_IT+0x9e>
 80025a2:	213f      	movs	r1, #63	; 0x3f
 80025a4:	e7c6      	b.n	8002534 <HAL_UART_Receive_IT+0x40>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_UART_Receive_IT+0xe4>)
 80025a8:	e7df      	b.n	800256a <HAL_UART_Receive_IT+0x76>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d10b      	bne.n	80025c8 <HAL_UART_Receive_IT+0xd4>
 80025b0:	6903      	ldr	r3, [r0, #16]
 80025b2:	b94b      	cbnz	r3, 80025c8 <HAL_UART_Receive_IT+0xd4>
        huart->RxISR = UART_RxISR_16BIT;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80025b6:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 80025b8:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80025ba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 80025be:	2300      	movs	r3, #0
 80025c0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80025c4:	600a      	str	r2, [r1, #0]
 80025c6:	e7dc      	b.n	8002582 <HAL_UART_Receive_IT+0x8e>
        huart->RxISR = UART_RxISR_8BIT;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_UART_Receive_IT+0xec>)
 80025ca:	e7f4      	b.n	80025b6 <HAL_UART_Receive_IT+0xc2>
      return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80025d0:	2002      	movs	r0, #2
}
 80025d2:	bd10      	pop	{r4, pc}
 80025d4:	08002741 	.word	0x08002741
 80025d8:	08002699 	.word	0x08002699
 80025dc:	08002641 	.word	0x08002641
 80025e0:	080025e5 	.word	0x080025e5

080025e4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025e4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80025e8:	2a22      	cmp	r2, #34	; 0x22
{
 80025ea:	b510      	push	{r4, lr}
 80025ec:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025ee:	d122      	bne.n	8002636 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80025f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80025f2:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80025f6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80025f8:	4022      	ands	r2, r4
 80025fa:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 80025fc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80025fe:	3201      	adds	r2, #1
 8002600:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002602:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8002606:	3a01      	subs	r2, #1
 8002608:	b292      	uxth	r2, r2
 800260a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800260e:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8002612:	b292      	uxth	r2, r2
 8002614:	b99a      	cbnz	r2, 800263e <UART_RxISR_8BIT+0x5a>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002616:	6801      	ldr	r1, [r0, #0]
 8002618:	680c      	ldr	r4, [r1, #0]
 800261a:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800261e:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002620:	688c      	ldr	r4, [r1, #8]
 8002622:	f024 0401 	bic.w	r4, r4, #1
 8002626:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002628:	2120      	movs	r1, #32
 800262a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800262e:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002630:	f002 fb56 	bl	8004ce0 <HAL_UART_RxCpltCallback>
 8002634:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002636:	6993      	ldr	r3, [r2, #24]
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	6193      	str	r3, [r2, #24]
 800263e:	bd10      	pop	{r4, pc}

08002640 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002640:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002644:	2a22      	cmp	r2, #34	; 0x22
{
 8002646:	b510      	push	{r4, lr}
 8002648:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800264a:	d120      	bne.n	800268e <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800264c:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800264e:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 8002652:	400c      	ands	r4, r1
 8002654:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8002656:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 800265a:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800265c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8002660:	3901      	subs	r1, #1
 8002662:	b289      	uxth	r1, r1
 8002664:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8002668:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800266c:	b289      	uxth	r1, r1
 800266e:	b991      	cbnz	r1, 8002696 <UART_RxISR_16BIT+0x56>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002670:	6814      	ldr	r4, [r2, #0]
 8002672:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002676:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002678:	6894      	ldr	r4, [r2, #8]
 800267a:	f024 0401 	bic.w	r4, r4, #1
 800267e:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002680:	2220      	movs	r2, #32
 8002682:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002686:	66c1      	str	r1, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002688:	f002 fb2a 	bl	8004ce0 <HAL_UART_RxCpltCallback>
 800268c:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800268e:	6993      	ldr	r3, [r2, #24]
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6193      	str	r3, [r2, #24]
 8002696:	bd10      	pop	{r4, pc}

08002698 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002698:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800269c:	2b22      	cmp	r3, #34	; 0x22
{
 800269e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a2:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026a4:	d140      	bne.n	8002728 <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 80026a6:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80026aa:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80026ae:	4f22      	ldr	r7, [pc, #136]	; (8002738 <UART_RxISR_8BIT_FIFOEN+0xa0>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026b0:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80026b4:	b9ad      	cbnz	r5, 80026e2 <UART_RxISR_8BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80026b6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80026ba:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d038      	beq.n	8002732 <UART_RxISR_8BIT_FIFOEN+0x9a>
 80026c0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d934      	bls.n	8002732 <UART_RxISR_8BIT_FIFOEN+0x9a>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80026d0:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80026d2:	4a1a      	ldr	r2, [pc, #104]	; (800273c <UART_RxISR_8BIT_FIFOEN+0xa4>)
 80026d4:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80026e2:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80026e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80026e8:	4033      	ands	r3, r6
 80026ea:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80026ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026ee:	3301      	adds	r3, #1
 80026f0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80026f2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80026fe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002702:	b29b      	uxth	r3, r3
 8002704:	b96b      	cbnz	r3, 8002722 <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002706:	6822      	ldr	r2, [r4, #0]
 8002708:	6811      	ldr	r1, [r2, #0]
 800270a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800270e:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002710:	6891      	ldr	r1, [r2, #8]
 8002712:	4039      	ands	r1, r7
 8002714:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 8002716:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8002718:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800271c:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800271e:	f002 fadf 	bl	8004ce0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002722:	3d01      	subs	r5, #1
 8002724:	b2ad      	uxth	r5, r5
 8002726:	e7c5      	b.n	80026b4 <UART_RxISR_8BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002728:	6802      	ldr	r2, [r0, #0]
 800272a:	6993      	ldr	r3, [r2, #24]
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6193      	str	r3, [r2, #24]
 8002732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002736:	bf00      	nop
 8002738:	effffffe 	.word	0xeffffffe
 800273c:	080025e5 	.word	0x080025e5

08002740 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002740:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002744:	2b22      	cmp	r3, #34	; 0x22
{
 8002746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800274a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800274c:	d13e      	bne.n	80027cc <UART_RxISR_16BIT_FIFOEN+0x8c>
  uint16_t  uhMask = huart->Mask;
 800274e:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002752:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002756:	4f21      	ldr	r7, [pc, #132]	; (80027dc <UART_RxISR_16BIT_FIFOEN+0x9c>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002758:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800275c:	b9ad      	cbnz	r5, 800278a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800275e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002762:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002764:	2b00      	cmp	r3, #0
 8002766:	d036      	beq.n	80027d6 <UART_RxISR_16BIT_FIFOEN+0x96>
 8002768:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800276c:	429a      	cmp	r2, r3
 800276e:	d932      	bls.n	80027d6 <UART_RxISR_16BIT_FIFOEN+0x96>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002778:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <UART_RxISR_16BIT_FIFOEN+0xa0>)
 800277c:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800278a:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800278c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800278e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8002790:	4031      	ands	r1, r6
 8002792:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8002796:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002798:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800279c:	3a01      	subs	r2, #1
 800279e:	b292      	uxth	r2, r2
 80027a0:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80027a4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80027a8:	b292      	uxth	r2, r2
 80027aa:	b962      	cbnz	r2, 80027c6 <UART_RxISR_16BIT_FIFOEN+0x86>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80027b2:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	4039      	ands	r1, r7
 80027b8:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 80027ba:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80027bc:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80027c0:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80027c2:	f002 fa8d 	bl	8004ce0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80027c6:	3d01      	subs	r5, #1
 80027c8:	b2ad      	uxth	r5, r5
 80027ca:	e7c7      	b.n	800275c <UART_RxISR_16BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80027cc:	6802      	ldr	r2, [r0, #0]
 80027ce:	6993      	ldr	r3, [r2, #24]
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	6193      	str	r3, [r2, #24]
 80027d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027da:	bf00      	nop
 80027dc:	effffffe 	.word	0xeffffffe
 80027e0:	08002641 	.word	0x08002641

080027e4 <HAL_UART_ErrorCallback>:
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027e8:	6802      	ldr	r2, [r0, #0]
 80027ea:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ec:	6811      	ldr	r1, [r2, #0]
{
 80027ee:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 80027f0:	f640 050f 	movw	r5, #2063	; 0x80f
 80027f4:	422b      	tst	r3, r5
{
 80027f6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027f8:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80027fa:	d10d      	bne.n	8002818 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027fc:	069e      	lsls	r6, r3, #26
 80027fe:	f140 8087 	bpl.w	8002910 <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002802:	068d      	lsls	r5, r1, #26
 8002804:	d402      	bmi.n	800280c <HAL_UART_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002806:	00c6      	lsls	r6, r0, #3
 8002808:	f140 8082 	bpl.w	8002910 <HAL_UART_IRQHandler+0x128>
      if (huart->RxISR != NULL)
 800280c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80b5 	beq.w	800297e <HAL_UART_IRQHandler+0x196>
      huart->TxISR(huart);
 8002814:	4620      	mov	r0, r4
 8002816:	e06f      	b.n	80028f8 <HAL_UART_IRQHandler+0x110>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002818:	4e59      	ldr	r6, [pc, #356]	; (8002980 <HAL_UART_IRQHandler+0x198>)
 800281a:	4006      	ands	r6, r0
 800281c:	d102      	bne.n	8002824 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800281e:	4d59      	ldr	r5, [pc, #356]	; (8002984 <HAL_UART_IRQHandler+0x19c>)
 8002820:	4229      	tst	r1, r5
 8002822:	d075      	beq.n	8002910 <HAL_UART_IRQHandler+0x128>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002824:	07dd      	lsls	r5, r3, #31
 8002826:	d509      	bpl.n	800283c <HAL_UART_IRQHandler+0x54>
 8002828:	05cd      	lsls	r5, r1, #23
 800282a:	d507      	bpl.n	800283c <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800282c:	2501      	movs	r5, #1
 800282e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002830:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002834:	f045 0501 	orr.w	r5, r5, #1
 8002838:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800283c:	079d      	lsls	r5, r3, #30
 800283e:	d509      	bpl.n	8002854 <HAL_UART_IRQHandler+0x6c>
 8002840:	07c5      	lsls	r5, r0, #31
 8002842:	d507      	bpl.n	8002854 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002844:	2502      	movs	r5, #2
 8002846:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002848:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800284c:	f045 0504 	orr.w	r5, r5, #4
 8002850:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002854:	075d      	lsls	r5, r3, #29
 8002856:	d509      	bpl.n	800286c <HAL_UART_IRQHandler+0x84>
 8002858:	07c5      	lsls	r5, r0, #31
 800285a:	d507      	bpl.n	800286c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800285c:	2504      	movs	r5, #4
 800285e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002860:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002864:	f045 0502 	orr.w	r5, r5, #2
 8002868:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 800286c:	071d      	lsls	r5, r3, #28
 800286e:	d50a      	bpl.n	8002886 <HAL_UART_IRQHandler+0x9e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002870:	068d      	lsls	r5, r1, #26
 8002872:	d400      	bmi.n	8002876 <HAL_UART_IRQHandler+0x8e>
 8002874:	b13e      	cbz	r6, 8002886 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002876:	2508      	movs	r5, #8
 8002878:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800287a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800287e:	f045 0508 	orr.w	r5, r5, #8
 8002882:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002886:	051e      	lsls	r6, r3, #20
 8002888:	d50a      	bpl.n	80028a0 <HAL_UART_IRQHandler+0xb8>
 800288a:	014d      	lsls	r5, r1, #5
 800288c:	d508      	bpl.n	80028a0 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800288e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002892:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002894:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002898:	f042 0220 	orr.w	r2, r2, #32
 800289c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028a0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d06a      	beq.n	800297e <HAL_UART_IRQHandler+0x196>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028a8:	069e      	lsls	r6, r3, #26
 80028aa:	d507      	bpl.n	80028bc <HAL_UART_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028ac:	068d      	lsls	r5, r1, #26
 80028ae:	d401      	bmi.n	80028b4 <HAL_UART_IRQHandler+0xcc>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028b0:	00c0      	lsls	r0, r0, #3
 80028b2:	d503      	bpl.n	80028bc <HAL_UART_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 80028b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80028b6:	b10b      	cbz	r3, 80028bc <HAL_UART_IRQHandler+0xd4>
          huart->RxISR(huart);
 80028b8:	4620      	mov	r0, r4
 80028ba:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028bc:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80028be:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 80028c6:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028c8:	d402      	bmi.n	80028d0 <HAL_UART_IRQHandler+0xe8>
 80028ca:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80028ce:	d01a      	beq.n	8002906 <HAL_UART_IRQHandler+0x11e>
        UART_EndRxTransfer(huart);
 80028d0:	f7ff fd1f 	bl	8002312 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	0652      	lsls	r2, r2, #25
 80028da:	d510      	bpl.n	80028fe <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028dc:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80028de:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e4:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80028e6:	b150      	cbz	r0, 80028fe <HAL_UART_IRQHandler+0x116>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_UART_IRQHandler+0x1a0>)
 80028ea:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ec:	f7fd ff86 	bl	80007fc <HAL_DMA_Abort_IT>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d044      	beq.n	800297e <HAL_UART_IRQHandler+0x196>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028f4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80028f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 80028f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fc:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff ff70 	bl	80027e4 <HAL_UART_ErrorCallback>
 8002904:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002906:	f7ff ff6d 	bl	80027e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800290e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002910:	02de      	lsls	r6, r3, #11
 8002912:	d509      	bpl.n	8002928 <HAL_UART_IRQHandler+0x140>
 8002914:	0245      	lsls	r5, r0, #9
 8002916:	d507      	bpl.n	8002928 <HAL_UART_IRQHandler+0x140>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002918:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800291c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800291e:	6213      	str	r3, [r2, #32]
}
 8002920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002924:	f000 be2a 	b.w	800357c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002928:	061e      	lsls	r6, r3, #24
 800292a:	d505      	bpl.n	8002938 <HAL_UART_IRQHandler+0x150>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800292c:	060d      	lsls	r5, r1, #24
 800292e:	d401      	bmi.n	8002934 <HAL_UART_IRQHandler+0x14c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002930:	0200      	lsls	r0, r0, #8
 8002932:	d501      	bpl.n	8002938 <HAL_UART_IRQHandler+0x150>
    if (huart->TxISR != NULL)
 8002934:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002936:	e76a      	b.n	800280e <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002938:	065e      	lsls	r6, r3, #25
 800293a:	d50e      	bpl.n	800295a <HAL_UART_IRQHandler+0x172>
 800293c:	064d      	lsls	r5, r1, #25
 800293e:	d50c      	bpl.n	800295a <HAL_UART_IRQHandler+0x172>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002940:	6813      	ldr	r3, [r2, #0]
 8002942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002946:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002948:	2320      	movs	r3, #32
 800294a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8002952:	4620      	mov	r0, r4
 8002954:	f002 f9c2 	bl	8004cdc <HAL_UART_TxCpltCallback>
 8002958:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800295a:	0218      	lsls	r0, r3, #8
 800295c:	d506      	bpl.n	800296c <HAL_UART_IRQHandler+0x184>
 800295e:	004a      	lsls	r2, r1, #1
 8002960:	d504      	bpl.n	800296c <HAL_UART_IRQHandler+0x184>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002962:	4620      	mov	r0, r4
}
 8002964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002968:	f000 be0a 	b.w	8003580 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800296c:	01db      	lsls	r3, r3, #7
 800296e:	d506      	bpl.n	800297e <HAL_UART_IRQHandler+0x196>
 8002970:	2900      	cmp	r1, #0
 8002972:	da04      	bge.n	800297e <HAL_UART_IRQHandler+0x196>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002974:	4620      	mov	r0, r4
}
 8002976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800297a:	f000 be00 	b.w	800357e <HAL_UARTEx_RxFifoFullCallback>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	10000001 	.word	0x10000001
 8002984:	04000120 	.word	0x04000120
 8002988:	0800298d 	.word	0x0800298d

0800298c <UART_DMAAbortOnError>:
{
 800298c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800298e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8002996:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800299a:	f7ff ff23 	bl	80027e4 <HAL_UART_ErrorCallback>
 800299e:	bd08      	pop	{r3, pc}

080029a0 <HAL_UART_GetState>:
  temp1 = huart->gState;
 80029a0:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 80029a4:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 80029a8:	4310      	orrs	r0, r2
 80029aa:	4770      	bx	lr
 80029ac:	0000      	movs	r0, r0
	...

080029b0 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 80029b0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029b2:	69c1      	ldr	r1, [r0, #28]
 80029b4:	6883      	ldr	r3, [r0, #8]
{
 80029b6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80029ba:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029bc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029be:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029c0:	4303      	orrs	r3, r0
 80029c2:	6960      	ldr	r0, [r4, #20]
 80029c4:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 80029c6:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029c8:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 80029ca:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029cc:	48ac      	ldr	r0, [pc, #688]	; (8002c80 <UART_SetConfig+0x2d0>)
 80029ce:	4028      	ands	r0, r5
 80029d0:	4303      	orrs	r3, r0
 80029d2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d4:	6853      	ldr	r3, [r2, #4]
 80029d6:	68e0      	ldr	r0, [r4, #12]
 80029d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029dc:	4303      	orrs	r3, r0
 80029de:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029e0:	4ba8      	ldr	r3, [pc, #672]	; (8002c84 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029e2:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029e4:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80029e6:	bf1c      	itt	ne
 80029e8:	6a23      	ldrne	r3, [r4, #32]
 80029ea:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ec:	6893      	ldr	r3, [r2, #8]
 80029ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80029f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80029f6:	4303      	orrs	r3, r0
 80029f8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029fa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80029fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029fe:	f020 000f 	bic.w	r0, r0, #15
 8002a02:	4318      	orrs	r0, r3
 8002a04:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a06:	48a0      	ldr	r0, [pc, #640]	; (8002c88 <UART_SetConfig+0x2d8>)
 8002a08:	4282      	cmp	r2, r0
 8002a0a:	d11a      	bne.n	8002a42 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a10:	489e      	ldr	r0, [pc, #632]	; (8002c8c <UART_SetConfig+0x2dc>)
 8002a12:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002a16:	f002 0203 	and.w	r2, r2, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a1e:	5c82      	ldrb	r2, [r0, r2]
 8002a20:	f102 32ff 	add.w	r2, r2, #4294967295
 8002a24:	f000 8220 	beq.w	8002e68 <UART_SetConfig+0x4b8>
    switch (clocksource)
 8002a28:	2a07      	cmp	r2, #7
 8002a2a:	f200 83e7 	bhi.w	80031fc <UART_SetConfig+0x84c>
 8002a2e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002a32:	0327      	.short	0x0327
 8002a34:	03e50349 	.word	0x03e50349
 8002a38:	03e5038c 	.word	0x03e5038c
 8002a3c:	03e503e5 	.word	0x03e503e5
 8002a40:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a42:	4890      	ldr	r0, [pc, #576]	; (8002c84 <UART_SetConfig+0x2d4>)
 8002a44:	4282      	cmp	r2, r0
 8002a46:	f040 83d5 	bne.w	80031f4 <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a4e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002a52:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002a56:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002a5a:	f000 8094 	beq.w	8002b86 <UART_SetConfig+0x1d6>
 8002a5e:	d80c      	bhi.n	8002a7a <UART_SetConfig+0xca>
 8002a60:	b3ca      	cbz	r2, 8002ad6 <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 8002a62:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002a6a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8002a72:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002a74:	4610      	mov	r0, r2
 8002a76:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a7a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002a7e:	d064      	beq.n	8002b4a <UART_SetConfig+0x19a>
 8002a80:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002a84:	d1ed      	bne.n	8002a62 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80e1 	beq.w	8002c4e <UART_SetConfig+0x29e>
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f000 80e1 	beq.w	8002c54 <UART_SetConfig+0x2a4>
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	f000 80e1 	beq.w	8002c5a <UART_SetConfig+0x2aa>
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	f000 80e1 	beq.w	8002c60 <UART_SetConfig+0x2b0>
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	f000 80e1 	beq.w	8002c66 <UART_SetConfig+0x2b6>
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	f000 80e1 	beq.w	8002c6c <UART_SetConfig+0x2bc>
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	f000 80e1 	beq.w	8002c72 <UART_SetConfig+0x2c2>
 8002ab0:	2b07      	cmp	r3, #7
 8002ab2:	f000 80e1 	beq.w	8002c78 <UART_SetConfig+0x2c8>
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	f000 8100 	beq.w	8002cbc <UART_SetConfig+0x30c>
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	f000 8100 	beq.w	8002cc2 <UART_SetConfig+0x312>
 8002ac2:	2b0a      	cmp	r3, #10
 8002ac4:	f000 8100 	beq.w	8002cc8 <UART_SetConfig+0x318>
 8002ac8:	2b0b      	cmp	r3, #11
 8002aca:	bf14      	ite	ne
 8002acc:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002ad0:	2080      	moveq	r0, #128	; 0x80
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	e093      	b.n	8002bfe <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ad6:	f7ff f8e1 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002adc:	b1fb      	cbz	r3, 8002b1e <UART_SetConfig+0x16e>
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d01f      	beq.n	8002b22 <UART_SetConfig+0x172>
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d01f      	beq.n	8002b26 <UART_SetConfig+0x176>
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d01f      	beq.n	8002b2a <UART_SetConfig+0x17a>
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d01f      	beq.n	8002b2e <UART_SetConfig+0x17e>
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d01f      	beq.n	8002b32 <UART_SetConfig+0x182>
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d01f      	beq.n	8002b36 <UART_SetConfig+0x186>
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	d01f      	beq.n	8002b3a <UART_SetConfig+0x18a>
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d01f      	beq.n	8002b3e <UART_SetConfig+0x18e>
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	d01f      	beq.n	8002b42 <UART_SetConfig+0x192>
 8002b02:	2b0a      	cmp	r3, #10
 8002b04:	d01f      	beq.n	8002b46 <UART_SetConfig+0x196>
 8002b06:	2b0b      	cmp	r3, #11
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002b10:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002b14:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d171      	bne.n	8002bfe <UART_SetConfig+0x24e>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	e7a2      	b.n	8002a64 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e7f6      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e7f4      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e7f2      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b2a:	2306      	movs	r3, #6
 8002b2c:	e7f0      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	e7ee      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b32:	230a      	movs	r3, #10
 8002b34:	e7ec      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b36:	230c      	movs	r3, #12
 8002b38:	e7ea      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	e7e8      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e7e6      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	e7e4      	b.n	8002b10 <UART_SetConfig+0x160>
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	e7e2      	b.n	8002b10 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d052      	beq.n	8002bf4 <UART_SetConfig+0x244>
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d052      	beq.n	8002bf8 <UART_SetConfig+0x248>
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d052      	beq.n	8002bfc <UART_SetConfig+0x24c>
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d069      	beq.n	8002c2e <UART_SetConfig+0x27e>
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d069      	beq.n	8002c32 <UART_SetConfig+0x282>
 8002b5e:	2b05      	cmp	r3, #5
 8002b60:	d069      	beq.n	8002c36 <UART_SetConfig+0x286>
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d069      	beq.n	8002c3a <UART_SetConfig+0x28a>
 8002b66:	2b07      	cmp	r3, #7
 8002b68:	d069      	beq.n	8002c3e <UART_SetConfig+0x28e>
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d069      	beq.n	8002c42 <UART_SetConfig+0x292>
 8002b6e:	2b09      	cmp	r3, #9
 8002b70:	d069      	beq.n	8002c46 <UART_SetConfig+0x296>
 8002b72:	2b0a      	cmp	r3, #10
 8002b74:	d069      	beq.n	8002c4a <UART_SetConfig+0x29a>
 8002b76:	4846      	ldr	r0, [pc, #280]	; (8002c90 <UART_SetConfig+0x2e0>)
 8002b78:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002b7c:	2b0b      	cmp	r3, #11
 8002b7e:	bf08      	it	eq
 8002b80:	4610      	moveq	r0, r2
 8002b82:	2302      	movs	r3, #2
 8002b84:	e03b      	b.n	8002bfe <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002b86:	f7ff f82b 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8002b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b8c:	b1e3      	cbz	r3, 8002bc8 <UART_SetConfig+0x218>
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d01c      	beq.n	8002bcc <UART_SetConfig+0x21c>
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d01c      	beq.n	8002bd0 <UART_SetConfig+0x220>
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d01c      	beq.n	8002bd4 <UART_SetConfig+0x224>
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d01c      	beq.n	8002bd8 <UART_SetConfig+0x228>
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d01c      	beq.n	8002bdc <UART_SetConfig+0x22c>
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d01c      	beq.n	8002be0 <UART_SetConfig+0x230>
 8002ba6:	2b07      	cmp	r3, #7
 8002ba8:	d01c      	beq.n	8002be4 <UART_SetConfig+0x234>
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d01c      	beq.n	8002be8 <UART_SetConfig+0x238>
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	d01c      	beq.n	8002bec <UART_SetConfig+0x23c>
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	d01c      	beq.n	8002bf0 <UART_SetConfig+0x240>
 8002bb6:	2b0b      	cmp	r3, #11
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002bc0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	e7a6      	b.n	8002b16 <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e7f9      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e7f7      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	e7f5      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	e7f3      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002bd8:	2308      	movs	r3, #8
 8002bda:	e7f1      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002bdc:	230a      	movs	r3, #10
 8002bde:	e7ef      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002be0:	230c      	movs	r3, #12
 8002be2:	e7ed      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002be4:	2310      	movs	r3, #16
 8002be6:	e7eb      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002be8:	2320      	movs	r3, #32
 8002bea:	e7e9      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002bec:	2340      	movs	r3, #64	; 0x40
 8002bee:	e7e7      	b.n	8002bc0 <UART_SetConfig+0x210>
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	e7e5      	b.n	8002bc0 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002bf4:	4826      	ldr	r0, [pc, #152]	; (8002c90 <UART_SetConfig+0x2e0>)
 8002bf6:	e7c4      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002bf8:	4826      	ldr	r0, [pc, #152]	; (8002c94 <UART_SetConfig+0x2e4>)
 8002bfa:	e7c2      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002bfc:	4826      	ldr	r0, [pc, #152]	; (8002c98 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bfe:	6862      	ldr	r2, [r4, #4]
 8002c00:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002c04:	4281      	cmp	r1, r0
 8002c06:	f63f af2c 	bhi.w	8002a62 <UART_SetConfig+0xb2>
 8002c0a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002c0e:	f63f af28 	bhi.w	8002a62 <UART_SetConfig+0xb2>
        switch (clocksource)
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	f200 8125 	bhi.w	8002e62 <UART_SetConfig+0x4b2>
 8002c18:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c1c:	01230059 	.word	0x01230059
 8002c20:	01230095 	.word	0x01230095
 8002c24:	012300d1 	.word	0x012300d1
 8002c28:	01230123 	.word	0x01230123
 8002c2c:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c2e:	481b      	ldr	r0, [pc, #108]	; (8002c9c <UART_SetConfig+0x2ec>)
 8002c30:	e7a7      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002c32:	481b      	ldr	r0, [pc, #108]	; (8002ca0 <UART_SetConfig+0x2f0>)
 8002c34:	e7a5      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002c36:	481b      	ldr	r0, [pc, #108]	; (8002ca4 <UART_SetConfig+0x2f4>)
 8002c38:	e7a3      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002c3a:	481b      	ldr	r0, [pc, #108]	; (8002ca8 <UART_SetConfig+0x2f8>)
 8002c3c:	e7a1      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002c3e:	481b      	ldr	r0, [pc, #108]	; (8002cac <UART_SetConfig+0x2fc>)
 8002c40:	e79f      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002c42:	481b      	ldr	r0, [pc, #108]	; (8002cb0 <UART_SetConfig+0x300>)
 8002c44:	e79d      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002c46:	481b      	ldr	r0, [pc, #108]	; (8002cb4 <UART_SetConfig+0x304>)
 8002c48:	e79b      	b.n	8002b82 <UART_SetConfig+0x1d2>
 8002c4a:	481b      	ldr	r0, [pc, #108]	; (8002cb8 <UART_SetConfig+0x308>)
 8002c4c:	e799      	b.n	8002b82 <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c52:	e73e      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c58:	e73b      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c5a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c5e:	e738      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c60:	f241 5055 	movw	r0, #5461	; 0x1555
 8002c64:	e735      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c6a:	e732      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c6c:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002c70:	e72f      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c72:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8002c76:	e72c      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c7c:	e729      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002c7e:	bf00      	nop
 8002c80:	cfff69f3 	.word	0xcfff69f3
 8002c84:	40008000 	.word	0x40008000
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	0800649c 	.word	0x0800649c
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	007a1200 	.word	0x007a1200
 8002c98:	003d0900 	.word	0x003d0900
 8002c9c:	0028b0aa 	.word	0x0028b0aa
 8002ca0:	001e8480 	.word	0x001e8480
 8002ca4:	00186a00 	.word	0x00186a00
 8002ca8:	00145855 	.word	0x00145855
 8002cac:	000f4240 	.word	0x000f4240
 8002cb0:	0007a120 	.word	0x0007a120
 8002cb4:	0003d090 	.word	0x0003d090
 8002cb8:	0001e848 	.word	0x0001e848
 8002cbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002cc0:	e79d      	b.n	8002bfe <UART_SetConfig+0x24e>
 8002cc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002cc6:	e704      	b.n	8002ad2 <UART_SetConfig+0x122>
 8002cc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ccc:	e701      	b.n	8002ad2 <UART_SetConfig+0x122>
            pclk = HAL_RCC_GetPCLK1Freq();
 8002cce:	f7fe ffe5 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8089 	beq.w	8002dec <UART_SetConfig+0x43c>
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d072      	beq.n	8002dc4 <UART_SetConfig+0x414>
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d072      	beq.n	8002dc8 <UART_SetConfig+0x418>
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d072      	beq.n	8002dcc <UART_SetConfig+0x41c>
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d072      	beq.n	8002dd0 <UART_SetConfig+0x420>
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d072      	beq.n	8002dd4 <UART_SetConfig+0x424>
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d072      	beq.n	8002dd8 <UART_SetConfig+0x428>
 8002cf2:	2b07      	cmp	r3, #7
 8002cf4:	d072      	beq.n	8002ddc <UART_SetConfig+0x42c>
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d072      	beq.n	8002de0 <UART_SetConfig+0x430>
 8002cfa:	2b09      	cmp	r3, #9
 8002cfc:	d072      	beq.n	8002de4 <UART_SetConfig+0x434>
 8002cfe:	2b0a      	cmp	r3, #10
 8002d00:	d072      	beq.n	8002de8 <UART_SetConfig+0x438>
 8002d02:	2b0b      	cmp	r3, #11
 8002d04:	d172      	bne.n	8002dec <UART_SetConfig+0x43c>
 8002d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	f7fd fa97 	bl	8000240 <__aeabi_uldivmod>
 8002d12:	6865      	ldr	r5, [r4, #4]
 8002d14:	020f      	lsls	r7, r1, #8
 8002d16:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002d1a:	0206      	lsls	r6, r0, #8
 8002d1c:	0868      	lsrs	r0, r5, #1
 8002d1e:	eb16 0b00 	adds.w	fp, r6, r0
 8002d22:	f147 0c00 	adc.w	ip, r7, #0
 8002d26:	462a      	mov	r2, r5
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4658      	mov	r0, fp
 8002d2c:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d2e:	f7fd fa87 	bl	8000240 <__aeabi_uldivmod>
            break;
 8002d32:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d34:	4b9a      	ldr	r3, [pc, #616]	; (8002fa0 <UART_SetConfig+0x5f0>)
 8002d36:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002d3a:	4299      	cmp	r1, r3
 8002d3c:	f63f ae91 	bhi.w	8002a62 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	60d8      	str	r0, [r3, #12]
 8002d44:	e68e      	b.n	8002a64 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d036      	beq.n	8002dba <UART_SetConfig+0x40a>
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d016      	beq.n	8002d7e <UART_SetConfig+0x3ce>
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d016      	beq.n	8002d82 <UART_SetConfig+0x3d2>
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d016      	beq.n	8002d86 <UART_SetConfig+0x3d6>
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d01e      	beq.n	8002d9a <UART_SetConfig+0x3ea>
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d01e      	beq.n	8002d9e <UART_SetConfig+0x3ee>
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d01e      	beq.n	8002da2 <UART_SetConfig+0x3f2>
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	d020      	beq.n	8002daa <UART_SetConfig+0x3fa>
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d020      	beq.n	8002dae <UART_SetConfig+0x3fe>
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d020      	beq.n	8002db2 <UART_SetConfig+0x402>
 8002d70:	2b0a      	cmp	r3, #10
 8002d72:	d020      	beq.n	8002db6 <UART_SetConfig+0x406>
 8002d74:	2b0b      	cmp	r3, #11
 8002d76:	d120      	bne.n	8002dba <UART_SetConfig+0x40a>
 8002d78:	488a      	ldr	r0, [pc, #552]	; (8002fa4 <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	e006      	b.n	8002d8c <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d7e:	488a      	ldr	r0, [pc, #552]	; (8002fa8 <UART_SetConfig+0x5f8>)
 8002d80:	e7fb      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002d82:	488a      	ldr	r0, [pc, #552]	; (8002fac <UART_SetConfig+0x5fc>)
 8002d84:	e7f9      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002d86:	a182      	add	r1, pc, #520	; (adr r1, 8002f90 <UART_SetConfig+0x5e0>)
 8002d88:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d8c:	0855      	lsrs	r5, r2, #1
 8002d8e:	1940      	adds	r0, r0, r5
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	f141 0100 	adc.w	r1, r1, #0
 8002d98:	e7c9      	b.n	8002d2e <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d9a:	4885      	ldr	r0, [pc, #532]	; (8002fb0 <UART_SetConfig+0x600>)
 8002d9c:	e7ed      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002d9e:	4885      	ldr	r0, [pc, #532]	; (8002fb4 <UART_SetConfig+0x604>)
 8002da0:	e7eb      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002da2:	a17d      	add	r1, pc, #500	; (adr r1, 8002f98 <UART_SetConfig+0x5e8>)
 8002da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002da8:	e7f0      	b.n	8002d8c <UART_SetConfig+0x3dc>
 8002daa:	4883      	ldr	r0, [pc, #524]	; (8002fb8 <UART_SetConfig+0x608>)
 8002dac:	e7e5      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002dae:	4883      	ldr	r0, [pc, #524]	; (8002fbc <UART_SetConfig+0x60c>)
 8002db0:	e7e3      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002db2:	4883      	ldr	r0, [pc, #524]	; (8002fc0 <UART_SetConfig+0x610>)
 8002db4:	e7e1      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002db6:	4883      	ldr	r0, [pc, #524]	; (8002fc4 <UART_SetConfig+0x614>)
 8002db8:	e7df      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002dba:	4883      	ldr	r0, [pc, #524]	; (8002fc8 <UART_SetConfig+0x618>)
 8002dbc:	e7dd      	b.n	8002d7a <UART_SetConfig+0x3ca>
            pclk = HAL_RCC_GetSysClockFreq();
 8002dbe:	f7fe ff0f 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8002dc2:	e786      	b.n	8002cd2 <UART_SetConfig+0x322>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	e7a0      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002dc8:	2204      	movs	r2, #4
 8002dca:	e79e      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002dcc:	2206      	movs	r2, #6
 8002dce:	e79c      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	e79a      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002dd4:	220a      	movs	r2, #10
 8002dd6:	e798      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002dd8:	220c      	movs	r2, #12
 8002dda:	e796      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002ddc:	2210      	movs	r2, #16
 8002dde:	e794      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002de0:	2220      	movs	r2, #32
 8002de2:	e792      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	e790      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	e78e      	b.n	8002d0a <UART_SetConfig+0x35a>
 8002dec:	2201      	movs	r2, #1
 8002dee:	e78c      	b.n	8002d0a <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002df2:	b39b      	cbz	r3, 8002e5c <UART_SetConfig+0x4ac>
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d016      	beq.n	8002e26 <UART_SetConfig+0x476>
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d017      	beq.n	8002e2c <UART_SetConfig+0x47c>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d018      	beq.n	8002e32 <UART_SetConfig+0x482>
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d018      	beq.n	8002e36 <UART_SetConfig+0x486>
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d019      	beq.n	8002e3c <UART_SetConfig+0x48c>
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d019      	beq.n	8002e40 <UART_SetConfig+0x490>
 8002e0c:	2b07      	cmp	r3, #7
 8002e0e:	d019      	beq.n	8002e44 <UART_SetConfig+0x494>
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d01a      	beq.n	8002e4a <UART_SetConfig+0x49a>
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	d01b      	beq.n	8002e50 <UART_SetConfig+0x4a0>
 8002e18:	2b0a      	cmp	r3, #10
 8002e1a:	d01c      	beq.n	8002e56 <UART_SetConfig+0x4a6>
 8002e1c:	2b0b      	cmp	r3, #11
 8002e1e:	d11d      	bne.n	8002e5c <UART_SetConfig+0x4ac>
 8002e20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e24:	e7a9      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e26:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002e2a:	e7a6      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e2c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002e30:	e7a3      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e32:	4866      	ldr	r0, [pc, #408]	; (8002fcc <UART_SetConfig+0x61c>)
 8002e34:	e7a1      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e3a:	e79e      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e3c:	4864      	ldr	r0, [pc, #400]	; (8002fd0 <UART_SetConfig+0x620>)
 8002e3e:	e79c      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e40:	4864      	ldr	r0, [pc, #400]	; (8002fd4 <UART_SetConfig+0x624>)
 8002e42:	e79a      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e48:	e797      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e4a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e4e:	e794      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e54:	e791      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002e5a:	e78e      	b.n	8002d7a <UART_SetConfig+0x3ca>
 8002e5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002e60:	e78b      	b.n	8002d7a <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 8002e62:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e765      	b.n	8002d34 <UART_SetConfig+0x384>
    switch (clocksource)
 8002e68:	2a07      	cmp	r2, #7
 8002e6a:	f200 8106 	bhi.w	800307a <UART_SetConfig+0x6ca>
 8002e6e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002e72:	0008      	.short	0x0008
 8002e74:	0104003f 	.word	0x0104003f
 8002e78:	01040076 	.word	0x01040076
 8002e7c:	01040104 	.word	0x01040104
 8002e80:	00c7      	.short	0x00c7
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e82:	f7fe ff1d 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e88:	2900      	cmp	r1, #0
 8002e8a:	d06b      	beq.n	8002f64 <UART_SetConfig+0x5b4>
 8002e8c:	2901      	cmp	r1, #1
 8002e8e:	d06b      	beq.n	8002f68 <UART_SetConfig+0x5b8>
 8002e90:	2902      	cmp	r1, #2
 8002e92:	d06b      	beq.n	8002f6c <UART_SetConfig+0x5bc>
 8002e94:	2903      	cmp	r1, #3
 8002e96:	d06b      	beq.n	8002f70 <UART_SetConfig+0x5c0>
 8002e98:	2904      	cmp	r1, #4
 8002e9a:	d06b      	beq.n	8002f74 <UART_SetConfig+0x5c4>
 8002e9c:	2905      	cmp	r1, #5
 8002e9e:	d06b      	beq.n	8002f78 <UART_SetConfig+0x5c8>
 8002ea0:	2906      	cmp	r1, #6
 8002ea2:	d06b      	beq.n	8002f7c <UART_SetConfig+0x5cc>
 8002ea4:	2907      	cmp	r1, #7
 8002ea6:	d06b      	beq.n	8002f80 <UART_SetConfig+0x5d0>
 8002ea8:	2908      	cmp	r1, #8
 8002eaa:	d06b      	beq.n	8002f84 <UART_SetConfig+0x5d4>
 8002eac:	2909      	cmp	r1, #9
 8002eae:	d06b      	beq.n	8002f88 <UART_SetConfig+0x5d8>
 8002eb0:	290a      	cmp	r1, #10
 8002eb2:	d06b      	beq.n	8002f8c <UART_SetConfig+0x5dc>
 8002eb4:	290b      	cmp	r1, #11
 8002eb6:	bf14      	ite	ne
 8002eb8:	2201      	movne	r2, #1
 8002eba:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8002ebe:	6861      	ldr	r1, [r4, #4]
 8002ec0:	fbb0 f2f2 	udiv	r2, r0, r2
 8002ec4:	084b      	lsrs	r3, r1, #1
 8002ec6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ece:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ed0:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed2:	f1a3 0010 	sub.w	r0, r3, #16
 8002ed6:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002eda:	4288      	cmp	r0, r1
 8002edc:	f63f adc1 	bhi.w	8002a62 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee0:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002ee4:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ee6:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002eea:	430b      	orrs	r3, r1
 8002eec:	60c3      	str	r3, [r0, #12]
 8002eee:	e5b9      	b.n	8002a64 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ef0:	b1fb      	cbz	r3, 8002f32 <UART_SetConfig+0x582>
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d01f      	beq.n	8002f36 <UART_SetConfig+0x586>
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d01f      	beq.n	8002f3a <UART_SetConfig+0x58a>
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d01f      	beq.n	8002f3e <UART_SetConfig+0x58e>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d01f      	beq.n	8002f42 <UART_SetConfig+0x592>
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d01f      	beq.n	8002f46 <UART_SetConfig+0x596>
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d01f      	beq.n	8002f4a <UART_SetConfig+0x59a>
 8002f0a:	2b07      	cmp	r3, #7
 8002f0c:	d01f      	beq.n	8002f4e <UART_SetConfig+0x59e>
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d01f      	beq.n	8002f52 <UART_SetConfig+0x5a2>
 8002f12:	2b09      	cmp	r3, #9
 8002f14:	d01f      	beq.n	8002f56 <UART_SetConfig+0x5a6>
 8002f16:	2b0a      	cmp	r3, #10
 8002f18:	d01f      	beq.n	8002f5a <UART_SetConfig+0x5aa>
 8002f1a:	492f      	ldr	r1, [pc, #188]	; (8002fd8 <UART_SetConfig+0x628>)
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <UART_SetConfig+0x614>)
 8002f1e:	2b0b      	cmp	r3, #11
 8002f20:	bf14      	ite	ne
 8002f22:	4613      	movne	r3, r2
 8002f24:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f26:	6862      	ldr	r2, [r4, #4]
 8002f28:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f30:	e7cd      	b.n	8002ece <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <UART_SetConfig+0x614>)
 8002f34:	e7f7      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <UART_SetConfig+0x5f4>)
 8002f38:	e7f5      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <UART_SetConfig+0x62c>)
 8002f3c:	e7f3      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <UART_SetConfig+0x630>)
 8002f40:	e7f1      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f42:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <UART_SetConfig+0x634>)
 8002f44:	e7ef      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <UART_SetConfig+0x638>)
 8002f48:	e7ed      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <UART_SetConfig+0x63c>)
 8002f4c:	e7eb      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f4e:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <UART_SetConfig+0x640>)
 8002f50:	e7e9      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <UART_SetConfig+0x644>)
 8002f54:	e7e7      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f56:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <UART_SetConfig+0x648>)
 8002f58:	e7e5      	b.n	8002f26 <UART_SetConfig+0x576>
 8002f5a:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <UART_SetConfig+0x64c>)
 8002f5c:	e7e3      	b.n	8002f26 <UART_SetConfig+0x576>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5e:	f7fe fe3f 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8002f62:	e790      	b.n	8002e86 <UART_SetConfig+0x4d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f64:	2201      	movs	r2, #1
 8002f66:	e7aa      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f68:	2202      	movs	r2, #2
 8002f6a:	e7a8      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	e7a6      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f70:	2206      	movs	r2, #6
 8002f72:	e7a4      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f74:	2208      	movs	r2, #8
 8002f76:	e7a2      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f78:	220a      	movs	r2, #10
 8002f7a:	e7a0      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	e79e      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f80:	2210      	movs	r2, #16
 8002f82:	e79c      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f84:	2220      	movs	r2, #32
 8002f86:	e79a      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	e798      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	e796      	b.n	8002ebe <UART_SetConfig+0x50e>
 8002f90:	28b0aa00 	.word	0x28b0aa00
 8002f94:	00000000 	.word	0x00000000
 8002f98:	14585500 	.word	0x14585500
 8002f9c:	00000000 	.word	0x00000000
 8002fa0:	000ffcff 	.word	0x000ffcff
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	7a120000 	.word	0x7a120000
 8002fac:	3d090000 	.word	0x3d090000
 8002fb0:	1e848000 	.word	0x1e848000
 8002fb4:	186a0000 	.word	0x186a0000
 8002fb8:	0f424000 	.word	0x0f424000
 8002fbc:	07a12000 	.word	0x07a12000
 8002fc0:	03d09000 	.word	0x03d09000
 8002fc4:	01e84800 	.word	0x01e84800
 8002fc8:	f4240000 	.word	0xf4240000
 8002fcc:	00155500 	.word	0x00155500
 8002fd0:	000ccc00 	.word	0x000ccc00
 8002fd4:	000aaa00 	.word	0x000aaa00
 8002fd8:	0001e848 	.word	0x0001e848
 8002fdc:	007a1200 	.word	0x007a1200
 8002fe0:	00516154 	.word	0x00516154
 8002fe4:	003d0900 	.word	0x003d0900
 8002fe8:	0030d400 	.word	0x0030d400
 8002fec:	0028b0aa 	.word	0x0028b0aa
 8002ff0:	001e8480 	.word	0x001e8480
 8002ff4:	000f4240 	.word	0x000f4240
 8002ff8:	0007a120 	.word	0x0007a120
 8002ffc:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003000:	b1d3      	cbz	r3, 8003038 <UART_SetConfig+0x688>
 8003002:	2b01      	cmp	r3, #1
 8003004:	d01b      	beq.n	800303e <UART_SetConfig+0x68e>
 8003006:	2b02      	cmp	r3, #2
 8003008:	d01c      	beq.n	8003044 <UART_SetConfig+0x694>
 800300a:	2b03      	cmp	r3, #3
 800300c:	d01d      	beq.n	800304a <UART_SetConfig+0x69a>
 800300e:	2b04      	cmp	r3, #4
 8003010:	d01e      	beq.n	8003050 <UART_SetConfig+0x6a0>
 8003012:	2b05      	cmp	r3, #5
 8003014:	d01f      	beq.n	8003056 <UART_SetConfig+0x6a6>
 8003016:	2b06      	cmp	r3, #6
 8003018:	d020      	beq.n	800305c <UART_SetConfig+0x6ac>
 800301a:	2b07      	cmp	r3, #7
 800301c:	d021      	beq.n	8003062 <UART_SetConfig+0x6b2>
 800301e:	2b08      	cmp	r3, #8
 8003020:	d022      	beq.n	8003068 <UART_SetConfig+0x6b8>
 8003022:	2b09      	cmp	r3, #9
 8003024:	d023      	beq.n	800306e <UART_SetConfig+0x6be>
 8003026:	2b0a      	cmp	r3, #10
 8003028:	d024      	beq.n	8003074 <UART_SetConfig+0x6c4>
 800302a:	2b0b      	cmp	r3, #11
 800302c:	bf14      	ite	ne
 800302e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8003032:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003036:	e776      	b.n	8002f26 <UART_SetConfig+0x576>
 8003038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303c:	e773      	b.n	8002f26 <UART_SetConfig+0x576>
 800303e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003042:	e770      	b.n	8002f26 <UART_SetConfig+0x576>
 8003044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003048:	e76d      	b.n	8002f26 <UART_SetConfig+0x576>
 800304a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800304e:	e76a      	b.n	8002f26 <UART_SetConfig+0x576>
 8003050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003054:	e767      	b.n	8002f26 <UART_SetConfig+0x576>
 8003056:	f641 1398 	movw	r3, #6552	; 0x1998
 800305a:	e764      	b.n	8002f26 <UART_SetConfig+0x576>
 800305c:	f241 5354 	movw	r3, #5460	; 0x1554
 8003060:	e761      	b.n	8002f26 <UART_SetConfig+0x576>
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003066:	e75e      	b.n	8002f26 <UART_SetConfig+0x576>
 8003068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800306c:	e75b      	b.n	8002f26 <UART_SetConfig+0x576>
 800306e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003072:	e758      	b.n	8002f26 <UART_SetConfig+0x576>
 8003074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003078:	e755      	b.n	8002f26 <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 800307a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800307c:	2300      	movs	r3, #0
 800307e:	e728      	b.n	8002ed2 <UART_SetConfig+0x522>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7fe fe1e 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	d062      	beq.n	8003150 <UART_SetConfig+0x7a0>
 800308a:	2b01      	cmp	r3, #1
 800308c:	d062      	beq.n	8003154 <UART_SetConfig+0x7a4>
 800308e:	2b02      	cmp	r3, #2
 8003090:	d062      	beq.n	8003158 <UART_SetConfig+0x7a8>
 8003092:	2b03      	cmp	r3, #3
 8003094:	d062      	beq.n	800315c <UART_SetConfig+0x7ac>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d062      	beq.n	8003160 <UART_SetConfig+0x7b0>
 800309a:	2b05      	cmp	r3, #5
 800309c:	d062      	beq.n	8003164 <UART_SetConfig+0x7b4>
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d062      	beq.n	8003168 <UART_SetConfig+0x7b8>
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d062      	beq.n	800316c <UART_SetConfig+0x7bc>
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d062      	beq.n	8003170 <UART_SetConfig+0x7c0>
 80030aa:	2b09      	cmp	r3, #9
 80030ac:	d062      	beq.n	8003174 <UART_SetConfig+0x7c4>
 80030ae:	2b0a      	cmp	r3, #10
 80030b0:	d062      	beq.n	8003178 <UART_SetConfig+0x7c8>
 80030b2:	2b0b      	cmp	r3, #11
 80030b4:	bf14      	ite	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80030bc:	6862      	ldr	r2, [r4, #4]
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	e01c      	b.n	80030fe <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030c4:	b35b      	cbz	r3, 800311e <UART_SetConfig+0x76e>
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d02b      	beq.n	8003122 <UART_SetConfig+0x772>
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d02b      	beq.n	8003126 <UART_SetConfig+0x776>
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d02b      	beq.n	800312a <UART_SetConfig+0x77a>
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d02b      	beq.n	800312e <UART_SetConfig+0x77e>
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d02b      	beq.n	8003132 <UART_SetConfig+0x782>
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d02b      	beq.n	8003136 <UART_SetConfig+0x786>
 80030de:	2b07      	cmp	r3, #7
 80030e0:	d02b      	beq.n	800313a <UART_SetConfig+0x78a>
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d02b      	beq.n	800313e <UART_SetConfig+0x78e>
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d02b      	beq.n	8003142 <UART_SetConfig+0x792>
 80030ea:	2b0a      	cmp	r3, #10
 80030ec:	d02b      	beq.n	8003146 <UART_SetConfig+0x796>
 80030ee:	4a45      	ldr	r2, [pc, #276]	; (8003204 <UART_SetConfig+0x854>)
 80030f0:	f24f 4124 	movw	r1, #62500	; 0xf424
 80030f4:	2b0b      	cmp	r3, #11
 80030f6:	bf14      	ite	ne
 80030f8:	4613      	movne	r3, r2
 80030fa:	460b      	moveq	r3, r1
 80030fc:	6862      	ldr	r2, [r4, #4]
 80030fe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003102:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003106:	2200      	movs	r2, #0
 8003108:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310a:	f1a3 0010 	sub.w	r0, r3, #16
 800310e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003112:	4288      	cmp	r0, r1
 8003114:	f63f aca5 	bhi.w	8002a62 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	60cb      	str	r3, [r1, #12]
 800311c:	e4a2      	b.n	8002a64 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <UART_SetConfig+0x854>)
 8003120:	e7ec      	b.n	80030fc <UART_SetConfig+0x74c>
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <UART_SetConfig+0x858>)
 8003124:	e7ea      	b.n	80030fc <UART_SetConfig+0x74c>
 8003126:	4b39      	ldr	r3, [pc, #228]	; (800320c <UART_SetConfig+0x85c>)
 8003128:	e7e8      	b.n	80030fc <UART_SetConfig+0x74c>
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <UART_SetConfig+0x860>)
 800312c:	e7e6      	b.n	80030fc <UART_SetConfig+0x74c>
 800312e:	4b39      	ldr	r3, [pc, #228]	; (8003214 <UART_SetConfig+0x864>)
 8003130:	e7e4      	b.n	80030fc <UART_SetConfig+0x74c>
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <UART_SetConfig+0x868>)
 8003134:	e7e2      	b.n	80030fc <UART_SetConfig+0x74c>
 8003136:	4b39      	ldr	r3, [pc, #228]	; (800321c <UART_SetConfig+0x86c>)
 8003138:	e7e0      	b.n	80030fc <UART_SetConfig+0x74c>
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <UART_SetConfig+0x870>)
 800313c:	e7de      	b.n	80030fc <UART_SetConfig+0x74c>
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <UART_SetConfig+0x874>)
 8003140:	e7dc      	b.n	80030fc <UART_SetConfig+0x74c>
 8003142:	4b39      	ldr	r3, [pc, #228]	; (8003228 <UART_SetConfig+0x878>)
 8003144:	e7da      	b.n	80030fc <UART_SetConfig+0x74c>
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <UART_SetConfig+0x87c>)
 8003148:	e7d8      	b.n	80030fc <UART_SetConfig+0x74c>
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7fe fd49 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 800314e:	e799      	b.n	8003084 <UART_SetConfig+0x6d4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003150:	2301      	movs	r3, #1
 8003152:	e7b3      	b.n	80030bc <UART_SetConfig+0x70c>
 8003154:	2302      	movs	r3, #2
 8003156:	e7b1      	b.n	80030bc <UART_SetConfig+0x70c>
 8003158:	2304      	movs	r3, #4
 800315a:	e7af      	b.n	80030bc <UART_SetConfig+0x70c>
 800315c:	2306      	movs	r3, #6
 800315e:	e7ad      	b.n	80030bc <UART_SetConfig+0x70c>
 8003160:	2308      	movs	r3, #8
 8003162:	e7ab      	b.n	80030bc <UART_SetConfig+0x70c>
 8003164:	230a      	movs	r3, #10
 8003166:	e7a9      	b.n	80030bc <UART_SetConfig+0x70c>
 8003168:	230c      	movs	r3, #12
 800316a:	e7a7      	b.n	80030bc <UART_SetConfig+0x70c>
 800316c:	2310      	movs	r3, #16
 800316e:	e7a5      	b.n	80030bc <UART_SetConfig+0x70c>
 8003170:	2320      	movs	r3, #32
 8003172:	e7a3      	b.n	80030bc <UART_SetConfig+0x70c>
 8003174:	2340      	movs	r3, #64	; 0x40
 8003176:	e7a1      	b.n	80030bc <UART_SetConfig+0x70c>
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	e79f      	b.n	80030bc <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800317c:	b1cb      	cbz	r3, 80031b2 <UART_SetConfig+0x802>
 800317e:	2b01      	cmp	r3, #1
 8003180:	d01a      	beq.n	80031b8 <UART_SetConfig+0x808>
 8003182:	2b02      	cmp	r3, #2
 8003184:	d01b      	beq.n	80031be <UART_SetConfig+0x80e>
 8003186:	2b03      	cmp	r3, #3
 8003188:	d01c      	beq.n	80031c4 <UART_SetConfig+0x814>
 800318a:	2b04      	cmp	r3, #4
 800318c:	d01d      	beq.n	80031ca <UART_SetConfig+0x81a>
 800318e:	2b05      	cmp	r3, #5
 8003190:	d01e      	beq.n	80031d0 <UART_SetConfig+0x820>
 8003192:	2b06      	cmp	r3, #6
 8003194:	d01f      	beq.n	80031d6 <UART_SetConfig+0x826>
 8003196:	2b07      	cmp	r3, #7
 8003198:	d020      	beq.n	80031dc <UART_SetConfig+0x82c>
 800319a:	2b08      	cmp	r3, #8
 800319c:	d021      	beq.n	80031e2 <UART_SetConfig+0x832>
 800319e:	2b09      	cmp	r3, #9
 80031a0:	d022      	beq.n	80031e8 <UART_SetConfig+0x838>
 80031a2:	2b0a      	cmp	r3, #10
 80031a4:	d023      	beq.n	80031ee <UART_SetConfig+0x83e>
 80031a6:	2b0b      	cmp	r3, #11
 80031a8:	bf14      	ite	ne
 80031aa:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 80031ae:	2380      	moveq	r3, #128	; 0x80
 80031b0:	e7a4      	b.n	80030fc <UART_SetConfig+0x74c>
 80031b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b6:	e7a1      	b.n	80030fc <UART_SetConfig+0x74c>
 80031b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031bc:	e79e      	b.n	80030fc <UART_SetConfig+0x74c>
 80031be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c2:	e79b      	b.n	80030fc <UART_SetConfig+0x74c>
 80031c4:	f241 5355 	movw	r3, #5461	; 0x1555
 80031c8:	e798      	b.n	80030fc <UART_SetConfig+0x74c>
 80031ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ce:	e795      	b.n	80030fc <UART_SetConfig+0x74c>
 80031d0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80031d4:	e792      	b.n	80030fc <UART_SetConfig+0x74c>
 80031d6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80031da:	e78f      	b.n	80030fc <UART_SetConfig+0x74c>
 80031dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031e0:	e78c      	b.n	80030fc <UART_SetConfig+0x74c>
 80031e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e6:	e789      	b.n	80030fc <UART_SetConfig+0x74c>
 80031e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ec:	e786      	b.n	80030fc <UART_SetConfig+0x74c>
 80031ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031f2:	e783      	b.n	80030fc <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80031f8:	f43f af3f 	beq.w	800307a <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 80031fc:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80031fe:	2300      	movs	r3, #0
 8003200:	e783      	b.n	800310a <UART_SetConfig+0x75a>
 8003202:	bf00      	nop
 8003204:	00f42400 	.word	0x00f42400
 8003208:	007a1200 	.word	0x007a1200
 800320c:	003d0900 	.word	0x003d0900
 8003210:	0028b0aa 	.word	0x0028b0aa
 8003214:	001e8480 	.word	0x001e8480
 8003218:	00186a00 	.word	0x00186a00
 800321c:	00145855 	.word	0x00145855
 8003220:	000f4240 	.word	0x000f4240
 8003224:	0007a120 	.word	0x0007a120
 8003228:	0003d090 	.word	0x0003d090
 800322c:	0001e848 	.word	0x0001e848

08003230 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003230:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003232:	07da      	lsls	r2, r3, #31
{
 8003234:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003236:	d506      	bpl.n	8003246 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003238:	6801      	ldr	r1, [r0, #0]
 800323a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800323c:	684a      	ldr	r2, [r1, #4]
 800323e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003242:	4322      	orrs	r2, r4
 8003244:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003246:	079c      	lsls	r4, r3, #30
 8003248:	d506      	bpl.n	8003258 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800324a:	6801      	ldr	r1, [r0, #0]
 800324c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800324e:	684a      	ldr	r2, [r1, #4]
 8003250:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003254:	4322      	orrs	r2, r4
 8003256:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003258:	0759      	lsls	r1, r3, #29
 800325a:	d506      	bpl.n	800326a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800325c:	6801      	ldr	r1, [r0, #0]
 800325e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003260:	684a      	ldr	r2, [r1, #4]
 8003262:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003266:	4322      	orrs	r2, r4
 8003268:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800326a:	071a      	lsls	r2, r3, #28
 800326c:	d506      	bpl.n	800327c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800326e:	6801      	ldr	r1, [r0, #0]
 8003270:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003272:	684a      	ldr	r2, [r1, #4]
 8003274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003278:	4322      	orrs	r2, r4
 800327a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800327c:	06dc      	lsls	r4, r3, #27
 800327e:	d506      	bpl.n	800328e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003280:	6801      	ldr	r1, [r0, #0]
 8003282:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003284:	688a      	ldr	r2, [r1, #8]
 8003286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800328a:	4322      	orrs	r2, r4
 800328c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328e:	0699      	lsls	r1, r3, #26
 8003290:	d506      	bpl.n	80032a0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003292:	6801      	ldr	r1, [r0, #0]
 8003294:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003296:	688a      	ldr	r2, [r1, #8]
 8003298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800329c:	4322      	orrs	r2, r4
 800329e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a0:	065a      	lsls	r2, r3, #25
 80032a2:	d50f      	bpl.n	80032c4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a4:	6801      	ldr	r1, [r0, #0]
 80032a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80032a8:	684a      	ldr	r2, [r1, #4]
 80032aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80032ae:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b6:	d105      	bne.n	80032c4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032b8:	684a      	ldr	r2, [r1, #4]
 80032ba:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80032bc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80032c0:	4322      	orrs	r2, r4
 80032c2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	d506      	bpl.n	80032d6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032c8:	6802      	ldr	r2, [r0, #0]
 80032ca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80032cc:	6853      	ldr	r3, [r2, #4]
 80032ce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80032d2:	430b      	orrs	r3, r1
 80032d4:	6053      	str	r3, [r2, #4]
 80032d6:	bd10      	pop	{r4, pc}

080032d8 <UART_WaitOnFlagUntilTimeout>:
{
 80032d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032dc:	9d06      	ldr	r5, [sp, #24]
 80032de:	4604      	mov	r4, r0
 80032e0:	460f      	mov	r7, r1
 80032e2:	4616      	mov	r6, r2
 80032e4:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e6:	6821      	ldr	r1, [r4, #0]
 80032e8:	69ca      	ldr	r2, [r1, #28]
 80032ea:	ea37 0302 	bics.w	r3, r7, r2
 80032ee:	bf0c      	ite	eq
 80032f0:	2201      	moveq	r2, #1
 80032f2:	2200      	movne	r2, #0
 80032f4:	42b2      	cmp	r2, r6
 80032f6:	d002      	beq.n	80032fe <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80032f8:	2000      	movs	r0, #0
}
 80032fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	1c68      	adds	r0, r5, #1
 8003300:	d0f2      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7fd f96d 	bl	80005e0 <HAL_GetTick>
 8003306:	eba0 0008 	sub.w	r0, r0, r8
 800330a:	4285      	cmp	r5, r0
 800330c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800330e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	d300      	bcc.n	8003314 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003312:	b98d      	cbnz	r5, 8003338 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003318:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	6883      	ldr	r3, [r0, #8]
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003322:	2320      	movs	r3, #32
 8003324:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003328:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800332c:	2300      	movs	r3, #0
 800332e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8003332:	2003      	movs	r0, #3
 8003334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003338:	075a      	lsls	r2, r3, #29
 800333a:	d5d4      	bpl.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800333c:	69c3      	ldr	r3, [r0, #28]
 800333e:	051b      	lsls	r3, r3, #20
 8003340:	d5d1      	bpl.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003346:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003348:	6803      	ldr	r3, [r0, #0]
 800334a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800334e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003350:	6883      	ldr	r3, [r0, #8]
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003358:	2320      	movs	r3, #32
 800335a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800335e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003362:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003366:	e7e1      	b.n	800332c <UART_WaitOnFlagUntilTimeout+0x54>

08003368 <HAL_UART_Transmit>:
{
 8003368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800336c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800336e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003372:	2b20      	cmp	r3, #32
{
 8003374:	4604      	mov	r4, r0
 8003376:	460e      	mov	r6, r1
 8003378:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800337a:	d14f      	bne.n	800341c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800337c:	2900      	cmp	r1, #0
 800337e:	d04b      	beq.n	8003418 <HAL_UART_Transmit+0xb0>
 8003380:	2a00      	cmp	r2, #0
 8003382:	d049      	beq.n	8003418 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8003384:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d047      	beq.n	800341c <HAL_UART_Transmit+0xb4>
 800338c:	2301      	movs	r3, #1
 800338e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003394:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800339a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 800339e:	f7fd f91f 	bl	80005e0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80033a4:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80033ac:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80033ae:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b2:	d103      	bne.n	80033bc <HAL_UART_Transmit+0x54>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	b90b      	cbnz	r3, 80033bc <HAL_UART_Transmit+0x54>
 80033b8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80033ba:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80033bc:	2300      	movs	r3, #0
 80033be:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 80033c2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80033ca:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033cc:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 80033ce:	b942      	cbnz	r2, 80033e2 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff ff80 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 80033d8:	b948      	cbnz	r0, 80033ee <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 80033da:	2320      	movs	r3, #32
 80033dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 80033e0:	e006      	b.n	80033f0 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e2:	2200      	movs	r2, #0
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7ff ff76 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 80033ec:	b118      	cbz	r0, 80033f6 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 80033ee:	2003      	movs	r0, #3
}
 80033f0:	b003      	add	sp, #12
 80033f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033f6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80033f8:	b95e      	cbnz	r6, 8003412 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fa:	f835 3b02 	ldrh.w	r3, [r5], #2
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003402:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003404:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003408:	3b01      	subs	r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8003410:	e7d7      	b.n	80033c2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003412:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003416:	e7f4      	b.n	8003402 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8003418:	2001      	movs	r0, #1
 800341a:	e7e9      	b.n	80033f0 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800341c:	2002      	movs	r0, #2
 800341e:	e7e7      	b.n	80033f0 <HAL_UART_Transmit+0x88>

08003420 <UART_CheckIdleState>:
{
 8003420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003422:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	2600      	movs	r6, #0
 8003426:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800342a:	f7fd f8d9 	bl	80005e0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003434:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003436:	d417      	bmi.n	8003468 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	075b      	lsls	r3, r3, #29
 800343e:	d50a      	bpl.n	8003456 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	462b      	mov	r3, r5
 800344a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff42 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 8003454:	b9a0      	cbnz	r0, 8003480 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003456:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003458:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800345a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800345e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003462:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8003466:	e00c      	b.n	8003482 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	4632      	mov	r2, r6
 8003470:	4603      	mov	r3, r0
 8003472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff ff2e 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 800347c:	2800      	cmp	r0, #0
 800347e:	d0db      	beq.n	8003438 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003480:	2003      	movs	r0, #3
}
 8003482:	b002      	add	sp, #8
 8003484:	bd70      	pop	{r4, r5, r6, pc}

08003486 <HAL_UART_Init>:
{
 8003486:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003488:	4604      	mov	r4, r0
 800348a:	b350      	cbz	r0, 80034e2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800348c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003490:	b91b      	cbnz	r3, 800349a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003492:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8003496:	f001 fc3b 	bl	8004d10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800349a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800349c:	2324      	movs	r3, #36	; 0x24
 800349e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff fa80 	bl	80029b0 <UART_SetConfig>
 80034b0:	2801      	cmp	r0, #1
 80034b2:	d016      	beq.n	80034e2 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034b6:	b113      	cbz	r3, 80034be <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff feb9 	bl	8003230 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80034d6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80034d8:	601a      	str	r2, [r3, #0]
}
 80034da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80034de:	f7ff bf9f 	b.w	8003420 <UART_CheckIdleState>
}
 80034e2:	2001      	movs	r0, #1
 80034e4:	bd10      	pop	{r4, pc}

080034e6 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80034e8:	2203      	movs	r2, #3
 80034ea:	f88d 2003 	strb.w	r2, [sp, #3]
 80034ee:	2207      	movs	r2, #7
 80034f0:	f88d 2004 	strb.w	r2, [sp, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f88d 2006 	strb.w	r2, [sp, #6]
 80034fa:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80034fe:	2208      	movs	r2, #8
 8003500:	f88d 2008 	strb.w	r2, [sp, #8]
 8003504:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003508:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800350a:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800350c:	2104      	movs	r1, #4
 800350e:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003510:	f88d 3000 	strb.w	r3, [sp]
 8003514:	f88d 3001 	strb.w	r3, [sp, #1]
 8003518:	f88d 3002 	strb.w	r3, [sp, #2]
 800351c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003520:	f88d 1009 	strb.w	r1, [sp, #9]
 8003524:	f88d 400a 	strb.w	r4, [sp, #10]
 8003528:	f88d 100b 	strb.w	r1, [sp, #11]
 800352c:	f88d 300d 	strb.w	r3, [sp, #13]
 8003530:	f88d 300e 	strb.w	r3, [sp, #14]
 8003534:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003538:	b92a      	cbnz	r2, 8003546 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 800353a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800353e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8003542:	b004      	add	sp, #16
 8003544:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003546:	6802      	ldr	r2, [r0, #0]
 8003548:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800354a:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800354c:	aa04      	add	r2, sp, #16
 800354e:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003552:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003556:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800355a:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800355e:	00d2      	lsls	r2, r2, #3
 8003560:	fb92 f2f1 	sdiv	r2, r2, r1
 8003564:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003568:	aa04      	add	r2, sp, #16
 800356a:	4413      	add	r3, r2
 800356c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003570:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003574:	00d2      	lsls	r2, r2, #3
 8003576:	fb92 f3f3 	sdiv	r3, r2, r3
 800357a:	e7e0      	b.n	800353e <UARTEx_SetNbDataToProcess+0x58>

0800357c <HAL_UARTEx_WakeupCallback>:
 800357c:	4770      	bx	lr

0800357e <HAL_UARTEx_RxFifoFullCallback>:
 800357e:	4770      	bx	lr

08003580 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8003580:	4770      	bx	lr

08003582 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003582:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d014      	beq.n	80035b4 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800358a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800358c:	2324      	movs	r3, #36	; 0x24
 800358e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003592:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003594:	6813      	ldr	r3, [r2, #0]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800359c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035a4:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80035a6:	2220      	movs	r2, #32
 80035a8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80035ac:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80035b0:	4618      	mov	r0, r3
 80035b2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80035b4:	2002      	movs	r0, #2
}
 80035b6:	4770      	bx	lr

080035b8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80035b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80035ba:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80035be:	2b01      	cmp	r3, #1
{
 80035c0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80035c2:	d01b      	beq.n	80035fc <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80035c4:	2301      	movs	r3, #1
 80035c6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80035ca:	2324      	movs	r3, #36	; 0x24
 80035cc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035d0:	6803      	ldr	r3, [r0, #0]
 80035d2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80035e2:	4311      	orrs	r1, r2
 80035e4:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80035e6:	f7ff ff7e 	bl	80034e6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035ea:	6803      	ldr	r3, [r0, #0]
 80035ec:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80035ee:	2320      	movs	r3, #32
 80035f0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80035fc:	2002      	movs	r0, #2
}
 80035fe:	bd38      	pop	{r3, r4, r5, pc}

08003600 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003600:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003602:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003606:	2b01      	cmp	r3, #1
{
 8003608:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800360a:	d01b      	beq.n	8003644 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800360c:	2301      	movs	r3, #1
 800360e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003612:	2324      	movs	r3, #36	; 0x24
 8003614:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003618:	6803      	ldr	r3, [r0, #0]
 800361a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800362a:	4311      	orrs	r1, r2
 800362c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800362e:	f7ff ff5a 	bl	80034e6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003632:	6803      	ldr	r3, [r0, #0]
 8003634:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003636:	2320      	movs	r3, #32
 8003638:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800363c:	2000      	movs	r0, #0
 800363e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003642:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003644:	2002      	movs	r0, #2
}
 8003646:	bd38      	pop	{r3, r4, r5, pc}

08003648 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003648:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800364c:	b29b      	uxth	r3, r3
 800364e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003656:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800365a:	2000      	movs	r0, #0
 800365c:	4770      	bx	lr

0800365e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800365e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003662:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003666:	045b      	lsls	r3, r3, #17
 8003668:	0c5b      	lsrs	r3, r3, #17
 800366a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800366e:	2000      	movs	r0, #0
 8003670:	4770      	bx	lr

08003672 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003672:	b084      	sub	sp, #16
 8003674:	b510      	push	{r4, lr}
 8003676:	ac03      	add	r4, sp, #12
 8003678:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800367c:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 800367e:	2301      	movs	r3, #1
 8003680:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8003684:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003688:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800368c:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8003690:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8003698:	b29b      	uxth	r3, r3
 800369a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800369e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80036a6:	b004      	add	sp, #16
 80036a8:	4610      	mov	r0, r2
 80036aa:	4770      	bx	lr

080036ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036ae:	780d      	ldrb	r5, [r1, #0]
 80036b0:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80036b4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 80036b8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80036be:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036c0:	0412      	lsls	r2, r2, #16
 80036c2:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80036c4:	2803      	cmp	r0, #3
 80036c6:	d84f      	bhi.n	8003768 <USB_ActivateEndpoint+0xbc>
 80036c8:	e8df f000 	tbb	[pc, r0]
 80036cc:	48044b02 	.word	0x48044b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80036d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80036d4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80036d6:	f248 0480 	movw	r4, #32896	; 0x8080
 80036da:	4322      	orrs	r2, r4
 80036dc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036e0:	780f      	ldrb	r7, [r1, #0]
 80036e2:	4da8      	ldr	r5, [pc, #672]	; (8003984 <USB_ActivateEndpoint+0x2d8>)
 80036e4:	b23e      	sxth	r6, r7
 80036e6:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80036ea:	b292      	uxth	r2, r2
 80036ec:	402a      	ands	r2, r5
 80036ee:	433a      	orrs	r2, r7
 80036f0:	4322      	orrs	r2, r4
 80036f2:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80036f6:	7b0c      	ldrb	r4, [r1, #12]
 80036f8:	780a      	ldrb	r2, [r1, #0]
 80036fa:	2c00      	cmp	r4, #0
 80036fc:	d17f      	bne.n	80037fe <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
 80036fe:	784f      	ldrb	r7, [r1, #1]
 8003700:	88ce      	ldrh	r6, [r1, #6]
 8003702:	2408      	movs	r4, #8
 8003704:	b397      	cbz	r7, 800376c <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003706:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800370a:	fb14 3202 	smlabb	r2, r4, r2, r3
 800370e:	fa12 f287 	uxtah	r2, r2, r7
 8003712:	f026 0601 	bic.w	r6, r6, #1
 8003716:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800371a:	780a      	ldrb	r2, [r1, #0]
 800371c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003720:	0666      	lsls	r6, r4, #25
 8003722:	d509      	bpl.n	8003738 <USB_ActivateEndpoint+0x8c>
 8003724:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003728:	b2a4      	uxth	r4, r4
 800372a:	402c      	ands	r4, r5
 800372c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003730:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003734:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003738:	78ca      	ldrb	r2, [r1, #3]
 800373a:	7809      	ldrb	r1, [r1, #0]
 800373c:	4c92      	ldr	r4, [pc, #584]	; (8003988 <USB_ActivateEndpoint+0x2dc>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800373e:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003740:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003742:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003746:	b292      	uxth	r2, r2
 8003748:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800374c:	d001      	beq.n	8003752 <USB_ActivateEndpoint+0xa6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800374e:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800375a:	e0c3      	b.n	80038e4 <USB_ActivateEndpoint+0x238>
      wEpRegVal |= USB_EP_INTERRUPT;
 800375c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003760:	e7b8      	b.n	80036d4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003766:	e7b5      	b.n	80036d4 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003768:	2001      	movs	r0, #1
 800376a:	e7b4      	b.n	80036d6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800376c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003770:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003774:	fa12 f285 	uxtah	r2, r2, r5
 8003778:	f026 0601 	bic.w	r6, r6, #1
 800377c:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003780:	780a      	ldrb	r2, [r1, #0]
 8003782:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003786:	fb14 3202 	smlabb	r2, r4, r2, r3
 800378a:	690c      	ldr	r4, [r1, #16]
 800378c:	b2ad      	uxth	r5, r5
 800378e:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8003792:	b944      	cbnz	r4, 80037a6 <USB_ActivateEndpoint+0xfa>
 8003794:	5b54      	ldrh	r4, [r2, r5]
 8003796:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800379a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800379e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80037a2:	5354      	strh	r4, [r2, r5]
 80037a4:	e007      	b.n	80037b6 <USB_ActivateEndpoint+0x10a>
 80037a6:	2c3d      	cmp	r4, #61	; 0x3d
 80037a8:	d824      	bhi.n	80037f4 <USB_ActivateEndpoint+0x148>
 80037aa:	0866      	lsrs	r6, r4, #1
 80037ac:	07e4      	lsls	r4, r4, #31
 80037ae:	bf48      	it	mi
 80037b0:	3601      	addmi	r6, #1
 80037b2:	02b6      	lsls	r6, r6, #10
 80037b4:	5356      	strh	r6, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037b6:	780c      	ldrb	r4, [r1, #0]
 80037b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80037bc:	0457      	lsls	r7, r2, #17
 80037be:	d50d      	bpl.n	80037dc <USB_ActivateEndpoint+0x130>
 80037c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80037c4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80037c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037cc:	0412      	lsls	r2, r2, #16
 80037ce:	0c12      	lsrs	r2, r2, #16
 80037d0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80037d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037d8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037dc:	7809      	ldrb	r1, [r1, #0]
 80037de:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80037e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037ea:	0412      	lsls	r2, r2, #16
 80037ec:	0c12      	lsrs	r2, r2, #16
 80037ee:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80037f2:	e7ae      	b.n	8003752 <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037f4:	4e65      	ldr	r6, [pc, #404]	; (800398c <USB_ActivateEndpoint+0x2e0>)
 80037f6:	0964      	lsrs	r4, r4, #5
 80037f8:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 80037fc:	e7d1      	b.n	80037a2 <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80037fe:	b212      	sxth	r2, r2
 8003800:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003804:	b2a4      	uxth	r4, r4
 8003806:	402c      	ands	r4, r5
 8003808:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800380c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003810:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003814:	780e      	ldrb	r6, [r1, #0]
 8003816:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800381a:	2208      	movs	r2, #8
 800381c:	fb12 3606 	smlabb	r6, r2, r6, r3
 8003820:	fa16 f484 	uxtah	r4, r6, r4
 8003824:	890e      	ldrh	r6, [r1, #8]
 8003826:	f026 0601 	bic.w	r6, r6, #1
 800382a:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 800382e:	780e      	ldrb	r6, [r1, #0]
 8003830:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003834:	fb12 3206 	smlabb	r2, r2, r6, r3
 8003838:	fa12 f284 	uxtah	r2, r2, r4
 800383c:	894c      	ldrh	r4, [r1, #10]
 800383e:	f024 0401 	bic.w	r4, r4, #1
 8003842:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003846:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8003848:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800384a:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 800384c:	2c00      	cmp	r4, #0
 800384e:	d14c      	bne.n	80038ea <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003850:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003854:	0466      	lsls	r6, r4, #17
 8003856:	d509      	bpl.n	800386c <USB_ActivateEndpoint+0x1c0>
 8003858:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800385c:	b2a4      	uxth	r4, r4
 800385e:	402c      	ands	r4, r5
 8003860:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003864:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003868:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800386c:	780c      	ldrb	r4, [r1, #0]
 800386e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003872:	0655      	lsls	r5, r2, #25
 8003874:	d50d      	bpl.n	8003892 <USB_ActivateEndpoint+0x1e6>
 8003876:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800387a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800387e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003882:	0412      	lsls	r2, r2, #16
 8003884:	0c12      	lsrs	r2, r2, #16
 8003886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800388e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003892:	780c      	ldrb	r4, [r1, #0]
 8003894:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003898:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800389c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038a0:	0412      	lsls	r2, r2, #16
 80038a2:	0c12      	lsrs	r2, r2, #16
 80038a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80038ac:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038b0:	780d      	ldrb	r5, [r1, #0]
 80038b2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80038b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038be:	0412      	lsls	r2, r2, #16
 80038c0:	0c12      	lsrs	r2, r2, #16
 80038c2:	f248 0480 	movw	r4, #32896	; 0x8080
 80038c6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80038ca:	4322      	orrs	r2, r4
 80038cc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038d0:	7809      	ldrb	r1, [r1, #0]
 80038d2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80038d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80038da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038de:	0412      	lsls	r2, r2, #16
 80038e0:	0c12      	lsrs	r2, r2, #16
 80038e2:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038e4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80038e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038ea:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80038ee:	0464      	lsls	r4, r4, #17
 80038f0:	d509      	bpl.n	8003906 <USB_ActivateEndpoint+0x25a>
 80038f2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80038f6:	b2a4      	uxth	r4, r4
 80038f8:	402c      	ands	r4, r5
 80038fa:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80038fe:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003902:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003906:	780c      	ldrb	r4, [r1, #0]
 8003908:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800390c:	0652      	lsls	r2, r2, #25
 800390e:	d50d      	bpl.n	800392c <USB_ActivateEndpoint+0x280>
 8003910:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003914:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003918:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800391c:	0412      	lsls	r2, r2, #16
 800391e:	0c12      	lsrs	r2, r2, #16
 8003920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003924:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003928:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800392c:	780c      	ldrb	r4, [r1, #0]
 800392e:	4d16      	ldr	r5, [pc, #88]	; (8003988 <USB_ActivateEndpoint+0x2dc>)
 8003930:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003934:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003938:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800393c:	0412      	lsls	r2, r2, #16
 800393e:	0c12      	lsrs	r2, r2, #16
 8003940:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003948:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800394c:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 800394e:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003950:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8003952:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003954:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003958:	b292      	uxth	r2, r2
 800395a:	ea02 0205 	and.w	r2, r2, r5
 800395e:	bf18      	it	ne
 8003960:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800396c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003970:	7809      	ldrb	r1, [r1, #0]
 8003972:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003976:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800397a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800397e:	0412      	lsls	r2, r2, #16
 8003980:	0c12      	lsrs	r2, r2, #16
 8003982:	e6e6      	b.n	8003752 <USB_ActivateEndpoint+0xa6>
 8003984:	ffff8f8f 	.word	0xffff8f8f
 8003988:	ffff8fbf 	.word	0xffff8fbf
 800398c:	ffff8000 	.word	0xffff8000

08003990 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003990:	b510      	push	{r4, lr}
 8003992:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003994:	7b0c      	ldrb	r4, [r1, #12]
 8003996:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003998:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 800399a:	2c00      	cmp	r4, #0
 800399c:	d13d      	bne.n	8003a1a <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 800399e:	b312      	cbz	r2, 80039e6 <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039a0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039a4:	0652      	lsls	r2, r2, #25
 80039a6:	d50d      	bpl.n	80039c4 <USB_DeactivateEndpoint+0x34>
 80039a8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039b4:	0412      	lsls	r2, r2, #16
 80039b6:	0c12      	lsrs	r2, r2, #16
 80039b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039bc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80039c0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039c4:	780a      	ldrb	r2, [r1, #0]
 80039c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039ea:	0454      	lsls	r4, r2, #17
 80039ec:	d50d      	bpl.n	8003a0a <USB_DeactivateEndpoint+0x7a>
 80039ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039fa:	0412      	lsls	r2, r2, #16
 80039fc:	0c12      	lsrs	r2, r2, #16
 80039fe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a06:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a0a:	780a      	ldrb	r2, [r1, #0]
 8003a0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	e7db      	b.n	80039d2 <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 8003a1a:	2a00      	cmp	r2, #0
 8003a1c:	d14e      	bne.n	8003abc <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a1e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a22:	0452      	lsls	r2, r2, #17
 8003a24:	d50d      	bpl.n	8003a42 <USB_DeactivateEndpoint+0xb2>
 8003a26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a2a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a32:	0412      	lsls	r2, r2, #16
 8003a34:	0c12      	lsrs	r2, r2, #16
 8003a36:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a3e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a42:	780a      	ldrb	r2, [r1, #0]
 8003a44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a48:	065c      	lsls	r4, r3, #25
 8003a4a:	d50d      	bpl.n	8003a68 <USB_DeactivateEndpoint+0xd8>
 8003a4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003a68:	780a      	ldrb	r2, [r1, #0]
 8003a6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a86:	780c      	ldrb	r4, [r1, #0]
 8003a88:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	0c1b      	lsrs	r3, r3, #16
 8003a98:	f248 0280 	movw	r2, #32896	; 0x8080
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aa2:	7809      	ldrb	r1, [r1, #0]
 8003aa4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003aba:	e792      	b.n	80039e2 <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003abc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ac0:	0452      	lsls	r2, r2, #17
 8003ac2:	d50d      	bpl.n	8003ae0 <USB_DeactivateEndpoint+0x150>
 8003ac4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ac8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad0:	0412      	lsls	r2, r2, #16
 8003ad2:	0c12      	lsrs	r2, r2, #16
 8003ad4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003adc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ae0:	780a      	ldrb	r2, [r1, #0]
 8003ae2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ae6:	065b      	lsls	r3, r3, #25
 8003ae8:	d50d      	bpl.n	8003b06 <USB_DeactivateEndpoint+0x176>
 8003aea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003b06:	780a      	ldrb	r2, [r1, #0]
 8003b08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	0c1b      	lsrs	r3, r3, #16
 8003b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b24:	780c      	ldrb	r4, [r1, #0]
 8003b26:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f248 0280 	movw	r2, #32896	; 0x8080
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b40:	7809      	ldrb	r1, [r1, #0]
 8003b42:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	e7af      	b.n	8003ab0 <USB_DeactivateEndpoint+0x120>

08003b50 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b50:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003b52:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003b54:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 8003b56:	b18b      	cbz	r3, 8003b7c <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003b58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003b78:	2000      	movs	r0, #0
 8003b7a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b90:	e7ec      	b.n	8003b6c <USB_EPSetStall+0x1c>

08003b92 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003b92:	7b0b      	ldrb	r3, [r1, #12]
 8003b94:	bb4b      	cbnz	r3, 8003bea <USB_EPClearStall+0x58>
 8003b96:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8003b98:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b9a:	b212      	sxth	r2, r2
    if (ep->is_in != 0U)
 8003b9c:	b33b      	cbz	r3, 8003bee <USB_EPClearStall+0x5c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ba2:	065b      	lsls	r3, r3, #25
 8003ba4:	d50d      	bpl.n	8003bc2 <USB_EPClearStall+0x30>
 8003ba6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bbe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003bc2:	78cb      	ldrb	r3, [r1, #3]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d010      	beq.n	8003bea <USB_EPClearStall+0x58>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bc8:	780a      	ldrb	r2, [r1, #0]
 8003bca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003bea:	2000      	movs	r0, #0
 8003bec:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bf2:	045b      	lsls	r3, r3, #17
 8003bf4:	d50d      	bpl.n	8003c12 <USB_EPClearStall+0x80>
 8003bf6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c12:	780a      	ldrb	r2, [r1, #0]
 8003c14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003c28:	e7d9      	b.n	8003bde <USB_EPClearStall+0x4c>

08003c2a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003c2a:	b911      	cbnz	r1, 8003c32 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003c32:	2000      	movs	r0, #0
 8003c34:	4770      	bx	lr

08003c36 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003c36:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8003c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003c48:	2000      	movs	r0, #0
 8003c4a:	4770      	bx	lr

08003c4c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003c4c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003c50:	b280      	uxth	r0, r0
 8003c52:	4770      	bx	lr

08003c54 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003c54:	2000      	movs	r0, #0
 8003c56:	4770      	bx	lr

08003c58 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c5c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c5e:	4402      	add	r2, r0
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	440b      	add	r3, r1
 8003c66:	1a52      	subs	r2, r2, r1

  for (i = n; i != 0U; i--)
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	d100      	bne.n	8003c6e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003c6c:	4770      	bx	lr
 8003c6e:	8808      	ldrh	r0, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 8003c70:	5288      	strh	r0, [r1, r2]
 8003c72:	3102      	adds	r1, #2
 8003c74:	e7f8      	b.n	8003c68 <USB_WritePMA+0x10>
	...

08003c78 <USB_EPStartXfer>:
{
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8003c7c:	7848      	ldrb	r0, [r1, #1]
 8003c7e:	698a      	ldr	r2, [r1, #24]
 8003c80:	690b      	ldr	r3, [r1, #16]
 8003c82:	7b0f      	ldrb	r7, [r1, #12]
 8003c84:	2801      	cmp	r0, #1
{
 8003c86:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8003c88:	d16b      	bne.n	8003d62 <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 8003c8a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003c8c:	bf97      	itett	ls
 8003c8e:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003c90:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8003c92:	618b      	strls	r3, [r1, #24]
 8003c94:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8003c96:	bf88      	it	hi
 8003c98:	618a      	strhi	r2, [r1, #24]
 8003c9a:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8003c9c:	bb0f      	cbnz	r7, 8003ce2 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003c9e:	88ca      	ldrh	r2, [r1, #6]
 8003ca0:	6949      	ldr	r1, [r1, #20]
 8003ca2:	4633      	mov	r3, r6
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7ff ffd7 	bl	8003c58 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003caa:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8003cae:	782a      	ldrb	r2, [r5, #0]
 8003cb0:	f204 4102 	addw	r1, r4, #1026	; 0x402
 8003cb4:	fa11 f383 	uxtah	r3, r1, r3
 8003cb8:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003cbc:	782a      	ldrb	r2, [r5, #0]
 8003cbe:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cda:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8003cde:	2000      	movs	r0, #0
 8003ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ce2:	7809      	ldrb	r1, [r1, #0]
 8003ce4:	b20a      	sxth	r2, r1
 8003ce6:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8003cea:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cee:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003cf2:	bf15      	itete	ne
 8003cf4:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cf8:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cfc:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d00:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d04:	bf15      	itete	ne
 8003d06:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d0a:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 8003d0e:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8003d10:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d12:	6969      	ldr	r1, [r5, #20]
 8003d14:	4633      	mov	r3, r6
 8003d16:	4620      	mov	r0, r4
 8003d18:	f7ff ff9e 	bl	8003c58 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003d1c:	786b      	ldrb	r3, [r5, #1]
 8003d1e:	782a      	ldrb	r2, [r5, #0]
 8003d20:	b97b      	cbnz	r3, 8003d42 <USB_EPStartXfer+0xca>
 8003d22:	b212      	sxth	r2, r2
 8003d24:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d3c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003d40:	e7bc      	b.n	8003cbc <USB_EPStartXfer+0x44>
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d1ba      	bne.n	8003cbc <USB_EPStartXfer+0x44>
 8003d46:	b212      	sxth	r2, r2
 8003d48:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d60:	e7ec      	b.n	8003d3c <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8003d62:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003d64:	bf95      	itete	ls
 8003d66:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003d68:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8003d6a:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 8003d6c:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 8003d6e:	bf98      	it	ls
 8003d70:	4613      	movls	r3, r2
 8003d72:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 8003d74:	b98f      	cbnz	r7, 8003d9a <USB_EPStartXfer+0x122>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d76:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003d7a:	f204 4006 	addw	r0, r4, #1030	; 0x406
 8003d7e:	fa10 f282 	uxtah	r2, r0, r2
 8003d82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d86:	bb9b      	cbnz	r3, 8003df0 <USB_EPStartXfer+0x178>
 8003d88:	8813      	ldrh	r3, [r2, #0]
 8003d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d96:	8013      	strh	r3, [r2, #0]
 8003d98:	e032      	b.n	8003e00 <USB_EPStartXfer+0x188>
 8003d9a:	b980      	cbnz	r0, 8003dbe <USB_EPStartXfer+0x146>
 8003d9c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003da0:	f204 4002 	addw	r0, r4, #1026	; 0x402
 8003da4:	fa10 f282 	uxtah	r2, r0, r2
 8003da8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003dac:	b99b      	cbnz	r3, 8003dd6 <USB_EPStartXfer+0x15e>
 8003dae:	8811      	ldrh	r1, [r2, #0]
 8003db0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003db4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003db8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003dbc:	8011      	strh	r1, [r2, #0]
 8003dbe:	786a      	ldrb	r2, [r5, #1]
 8003dc0:	7828      	ldrb	r0, [r5, #0]
 8003dc2:	bb72      	cbnz	r2, 8003e22 <USB_EPStartXfer+0x1aa>
 8003dc4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003dc8:	f204 4106 	addw	r1, r4, #1030	; 0x406
 8003dcc:	fa11 f282 	uxtah	r2, r1, r2
 8003dd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003dd4:	e7d7      	b.n	8003d86 <USB_EPStartXfer+0x10e>
 8003dd6:	2b3d      	cmp	r3, #61	; 0x3d
 8003dd8:	d805      	bhi.n	8003de6 <USB_EPStartXfer+0x16e>
 8003dda:	0859      	lsrs	r1, r3, #1
 8003ddc:	07d8      	lsls	r0, r3, #31
 8003dde:	bf48      	it	mi
 8003de0:	3101      	addmi	r1, #1
 8003de2:	0289      	lsls	r1, r1, #10
 8003de4:	e7ea      	b.n	8003dbc <USB_EPStartXfer+0x144>
 8003de6:	4814      	ldr	r0, [pc, #80]	; (8003e38 <USB_EPStartXfer+0x1c0>)
 8003de8:	0959      	lsrs	r1, r3, #5
 8003dea:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8003dee:	e7e5      	b.n	8003dbc <USB_EPStartXfer+0x144>
 8003df0:	2b3d      	cmp	r3, #61	; 0x3d
 8003df2:	d811      	bhi.n	8003e18 <USB_EPStartXfer+0x1a0>
 8003df4:	0859      	lsrs	r1, r3, #1
 8003df6:	07db      	lsls	r3, r3, #31
 8003df8:	bf48      	it	mi
 8003dfa:	3101      	addmi	r1, #1
 8003dfc:	0289      	lsls	r1, r1, #10
 8003dfe:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e00:	782a      	ldrb	r2, [r5, #0]
 8003e02:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003e16:	e75c      	b.n	8003cd2 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003e18:	0959      	lsrs	r1, r3, #5
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <USB_EPStartXfer+0x1c0>)
 8003e1c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003e20:	e7b9      	b.n	8003d96 <USB_EPStartXfer+0x11e>
 8003e22:	2a01      	cmp	r2, #1
 8003e24:	bf01      	itttt	eq
 8003e26:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8003e2a:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8003e2e:	fa12 f181 	uxtaheq	r1, r2, r1
 8003e32:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8003e36:	e7e3      	b.n	8003e00 <USB_EPStartXfer+0x188>
 8003e38:	ffff8000 	.word	0xffff8000

08003e3c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e42:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003e44:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 8003e46:	460d      	mov	r5, r1
 8003e48:	4632      	mov	r2, r6
 8003e4a:	1a47      	subs	r7, r0, r1
 8003e4c:	197c      	adds	r4, r7, r5
 8003e4e:	3502      	adds	r5, #2
 8003e50:	b932      	cbnz	r2, 8003e60 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003e52:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003e54:	bf44      	itt	mi
 8003e56:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e5a:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
 8003e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003e60:	8824      	ldrh	r4, [r4, #0]
 8003e62:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e64:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003e68:	0a24      	lsrs	r4, r4, #8
 8003e6a:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 8003e6e:	3a01      	subs	r2, #1
 8003e70:	e7ec      	b.n	8003e4c <USB_ReadPMA+0x10>

08003e72 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e72:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003e76:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e78:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e7c:	b15b      	cbz	r3, 8003e96 <USBD_CDC_EP0_RxReady+0x24>
 8003e7e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003e82:	28ff      	cmp	r0, #255	; 0xff
 8003e84:	d007      	beq.n	8003e96 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003e90:	23ff      	movs	r3, #255	; 0xff
 8003e92:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003e96:	2000      	movs	r0, #0
 8003e98:	bd10      	pop	{r4, pc}
	...

08003e9c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003e9c:	2343      	movs	r3, #67	; 0x43
 8003e9e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003ea0:	4800      	ldr	r0, [pc, #0]	; (8003ea4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003ea2:	4770      	bx	lr
 8003ea4:	20000044 	.word	0x20000044

08003ea8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003ea8:	2343      	movs	r3, #67	; 0x43
 8003eaa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003eac:	4800      	ldr	r0, [pc, #0]	; (8003eb0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003eae:	4770      	bx	lr
 8003eb0:	20000088 	.word	0x20000088

08003eb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003eb4:	2343      	movs	r3, #67	; 0x43
 8003eb6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003eb8:	4800      	ldr	r0, [pc, #0]	; (8003ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003eba:	4770      	bx	lr
 8003ebc:	200000d8 	.word	0x200000d8

08003ec0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003ec0:	230a      	movs	r3, #10
 8003ec2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003ec4:	4800      	ldr	r0, [pc, #0]	; (8003ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003ec6:	4770      	bx	lr
 8003ec8:	200000cc 	.word	0x200000cc

08003ecc <USBD_CDC_DataOut>:
{
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ed0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ed4:	f001 fa54 	bl	8005380 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003ed8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003edc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003ee0:	b14b      	cbz	r3, 8003ef6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003ee2:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003ee6:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003ef0:	4798      	blx	r3
    return USBD_OK;
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003ef6:	2002      	movs	r0, #2
}
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}

08003efa <USBD_CDC_DataIn>:
{
 8003efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003efc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003f00:	b1ce      	cbz	r6, 8003f36 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f02:	2314      	movs	r3, #20
 8003f04:	fb03 0301 	mla	r3, r3, r1, r0
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	b182      	cbz	r2, 8003f2e <USBD_CDC_DataIn+0x34>
 8003f0c:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003f10:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003f14:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003f16:	fbb2 f4f5 	udiv	r4, r2, r5
 8003f1a:	fb05 2414 	mls	r4, r5, r4, r2
 8003f1e:	b934      	cbnz	r4, 8003f2e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8003f20:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f22:	4622      	mov	r2, r4
 8003f24:	4623      	mov	r3, r4
 8003f26:	f001 fa0f 	bl	8005348 <USBD_LL_Transmit>
    return USBD_OK;
 8003f2a:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8003f36:	2002      	movs	r0, #2
}
 8003f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f3a <USBD_CDC_Setup>:
{
 8003f3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f3e:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f40:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003f44:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f48:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8003f50:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003f54:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f58:	d028      	beq.n	8003fac <USBD_CDC_Setup+0x72>
 8003f5a:	2c20      	cmp	r4, #32
 8003f5c:	d147      	bne.n	8003fee <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8003f5e:	88cc      	ldrh	r4, [r1, #6]
 8003f60:	784b      	ldrb	r3, [r1, #1]
 8003f62:	b1e4      	cbz	r4, 8003f9e <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003f64:	0612      	lsls	r2, r2, #24
 8003f66:	d511      	bpl.n	8003f8c <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f68:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003f6c:	4639      	mov	r1, r7
 8003f6e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	4622      	mov	r2, r4
 8003f76:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f78:	88f2      	ldrh	r2, [r6, #6]
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f000 fc37 	bl	80047f0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f82:	4644      	mov	r4, r8
}
 8003f84:	4620      	mov	r0, r4
 8003f86:	b003      	add	sp, #12
 8003f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003f8c:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003f90:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f94:	4622      	mov	r2, r4
 8003f96:	4639      	mov	r1, r7
 8003f98:	f000 fc3f 	bl	800481a <USBD_CtlPrepareRx>
 8003f9c:	e7f1      	b.n	8003f82 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f9e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	6895      	ldr	r5, [r2, #8]
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	47a8      	blx	r5
 8003faa:	e7eb      	b.n	8003f84 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003fac:	784f      	ldrb	r7, [r1, #1]
 8003fae:	2f0a      	cmp	r7, #10
 8003fb0:	d00d      	beq.n	8003fce <USBD_CDC_Setup+0x94>
 8003fb2:	2f0b      	cmp	r7, #11
 8003fb4:	d015      	beq.n	8003fe2 <USBD_CDC_Setup+0xa8>
 8003fb6:	b9d7      	cbnz	r7, 8003fee <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d114      	bne.n	8003fea <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f10d 0106 	add.w	r1, sp, #6
 8003fc6:	f000 fc13 	bl	80047f0 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003fca:	463c      	mov	r4, r7
 8003fcc:	e7da      	b.n	8003f84 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d109      	bne.n	8003fea <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f10d 0105 	add.w	r1, sp, #5
 8003fdc:	f000 fc08 	bl	80047f0 <USBD_CtlSendData>
 8003fe0:	e7d0      	b.n	8003f84 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003fe2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d0cc      	beq.n	8003f84 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8003fea:	4631      	mov	r1, r6
 8003fec:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8003fee:	f000 fbd8 	bl	80047a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8003ff2:	2402      	movs	r4, #2
      break;
 8003ff4:	e7c6      	b.n	8003f84 <USBD_CDC_Setup+0x4a>

08003ff6 <USBD_CDC_DeInit>:
{
 8003ff6:	b538      	push	{r3, r4, r5, lr}
 8003ff8:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003ffa:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003ffc:	2181      	movs	r1, #129	; 0x81
 8003ffe:	f001 f95b 	bl	80052b8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004002:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004004:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004006:	4620      	mov	r0, r4
 8004008:	f001 f956 	bl	80052b8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800400c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004010:	2182      	movs	r1, #130	; 0x82
 8004012:	4620      	mov	r0, r4
 8004014:	f001 f950 	bl	80052b8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004018:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800401c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800401e:	b14b      	cbz	r3, 8004034 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004020:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004028:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800402c:	f001 f9d4 	bl	80053d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004030:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004034:	2000      	movs	r0, #0
 8004036:	bd38      	pop	{r3, r4, r5, pc}

08004038 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004038:	7c03      	ldrb	r3, [r0, #16]
{
 800403a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004040:	bbcb      	cbnz	r3, 80040b6 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004046:	2202      	movs	r2, #2
 8004048:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800404a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800404c:	f001 f924 	bl	8005298 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004050:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004052:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004056:	4629      	mov	r1, r5
 8004058:	2202      	movs	r2, #2
 800405a:	4620      	mov	r0, r4
 800405c:	f001 f91c 	bl	8005298 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004060:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004064:	2308      	movs	r3, #8
 8004066:	2203      	movs	r2, #3
 8004068:	2182      	movs	r1, #130	; 0x82
 800406a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800406c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800406e:	f001 f913 	bl	8005298 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004072:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004074:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004078:	f001 f9aa 	bl	80053d0 <USBD_static_malloc>
 800407c:	4606      	mov	r6, r0
 800407e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004082:	b358      	cbz	r0, 80040dc <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004084:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800408c:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8004090:	2700      	movs	r7, #0
 8004092:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8004096:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800409a:	f1b8 0f00 	cmp.w	r8, #0
 800409e:	d113      	bne.n	80040c8 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80040a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80040a8:	4629      	mov	r1, r5
 80040aa:	4620      	mov	r0, r4
 80040ac:	f001 f95a 	bl	8005364 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80040b0:	4640      	mov	r0, r8
 80040b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	2202      	movs	r2, #2
 80040ba:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040bc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040be:	f001 f8eb 	bl	8005298 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040c2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040c4:	2340      	movs	r3, #64	; 0x40
 80040c6:	e7c6      	b.n	8004056 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80040ce:	4629      	mov	r1, r5
 80040d0:	4620      	mov	r0, r4
 80040d2:	f001 f947 	bl	8005364 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80040d6:	4638      	mov	r0, r7
 80040d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80040dc:	4628      	mov	r0, r5
}
 80040de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040e2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80040e2:	b119      	cbz	r1, 80040ec <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80040e4:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80040ec:	2002      	movs	r0, #2
  }

  return ret;
}
 80040ee:	4770      	bx	lr

080040f0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80040f4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80040f6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80040fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80040fe:	4770      	bx	lr

08004100 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004100:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004104:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004106:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800410a:	4770      	bx	lr

0800410c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800410c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004110:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004112:	b162      	cbz	r2, 800412e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004114:	7c04      	ldrb	r4, [r0, #16]
 8004116:	b944      	cbnz	r4, 800412a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004118:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800411c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004120:	2101      	movs	r1, #1
 8004122:	f001 f91f 	bl	8005364 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004126:	2000      	movs	r0, #0
 8004128:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800412a:	2340      	movs	r3, #64	; 0x40
 800412c:	e7f6      	b.n	800411c <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800412e:	2002      	movs	r0, #2
  }
}
 8004130:	bd10      	pop	{r4, pc}

08004132 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004132:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004134:	b180      	cbz	r0, 8004158 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004136:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800413a:	b113      	cbz	r3, 8004142 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004142:	b109      	cbz	r1, 8004148 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004144:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004148:	2301      	movs	r3, #1
 800414a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800414e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004150:	f001 f84e 	bl	80051f0 <USBD_LL_Init>

  return USBD_OK;
 8004154:	2000      	movs	r0, #0
 8004156:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004158:	2002      	movs	r0, #2
}
 800415a:	bd08      	pop	{r3, pc}

0800415c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800415c:	b119      	cbz	r1, 8004166 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800415e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004162:	2000      	movs	r0, #0
 8004164:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004166:	2002      	movs	r0, #2
  }

  return status;
}
 8004168:	4770      	bx	lr

0800416a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800416a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800416c:	f001 f886 	bl	800527c <USBD_LL_Start>

  return USBD_OK;
}
 8004170:	2000      	movs	r0, #0
 8004172:	bd08      	pop	{r3, pc}

08004174 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004174:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004176:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800417a:	b90b      	cbnz	r3, 8004180 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800417c:	2002      	movs	r0, #2
 800417e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4798      	blx	r3
 8004184:	2800      	cmp	r0, #0
 8004186:	d1f9      	bne.n	800417c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004188:	bd08      	pop	{r3, pc}

0800418a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800418a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800418c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4798      	blx	r3

  return USBD_OK;
}
 8004194:	2000      	movs	r0, #0
 8004196:	bd08      	pop	{r3, pc}

08004198 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800419c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80041a0:	4628      	mov	r0, r5
 80041a2:	f000 faea 	bl	800477a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80041a6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80041a8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80041ac:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80041b0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80041b4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80041b8:	f001 031f 	and.w	r3, r1, #31
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d00e      	beq.n	80041de <USBD_LL_SetupStage+0x46>
 80041c0:	d307      	bcc.n	80041d2 <USBD_LL_SetupStage+0x3a>
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d010      	beq.n	80041e8 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80041c6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80041ca:	4620      	mov	r0, r4
 80041cc:	f001 f882 	bl	80052d4 <USBD_LL_StallEP>
      break;
 80041d0:	e003      	b.n	80041da <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80041d2:	4629      	mov	r1, r5
 80041d4:	4620      	mov	r0, r4
 80041d6:	f000 f8f7 	bl	80043c8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80041da:	2000      	movs	r0, #0
 80041dc:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80041de:	4629      	mov	r1, r5
 80041e0:	4620      	mov	r0, r4
 80041e2:	f000 fa1d 	bl	8004620 <USBD_StdItfReq>
      break;
 80041e6:	e7f8      	b.n	80041da <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80041e8:	4629      	mov	r1, r5
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 fa3d 	bl	800466a <USBD_StdEPReq>
      break;
 80041f0:	e7f3      	b.n	80041da <USBD_LL_SetupStage+0x42>

080041f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80041f2:	b570      	push	{r4, r5, r6, lr}
 80041f4:	4605      	mov	r5, r0
 80041f6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80041f8:	bb49      	cbnz	r1, 800424e <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80041fa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d11e      	bne.n	8004240 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004202:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8004206:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800420a:	4293      	cmp	r3, r2
 800420c:	d90b      	bls.n	8004226 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 800420e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004210:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004212:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004216:	bf8c      	ite	hi
 8004218:	b29a      	uxthhi	r2, r3
 800421a:	b292      	uxthls	r2, r2
 800421c:	4631      	mov	r1, r6
 800421e:	f000 fb0b 	bl	8004838 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004222:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8004224:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004226:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	b123      	cbz	r3, 8004238 <USBD_LL_DataOutStage+0x46>
 800422e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004232:	2a03      	cmp	r2, #3
 8004234:	d100      	bne.n	8004238 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004236:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004238:	4628      	mov	r0, r5
 800423a:	f000 fb05 	bl	8004848 <USBD_CtlSendStatus>
 800423e:	e7f0      	b.n	8004222 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004240:	2b05      	cmp	r3, #5
 8004242:	d1ee      	bne.n	8004222 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004244:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004248:	f001 f844 	bl	80052d4 <USBD_LL_StallEP>
 800424c:	e7e9      	b.n	8004222 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 800424e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	b12b      	cbz	r3, 8004262 <USBD_LL_DataOutStage+0x70>
 8004256:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800425a:	2a03      	cmp	r2, #3
 800425c:	d101      	bne.n	8004262 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800425e:	4798      	blx	r3
 8004260:	e7df      	b.n	8004222 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004262:	2002      	movs	r0, #2
}
 8004264:	bd70      	pop	{r4, r5, r6, pc}

08004266 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004266:	b570      	push	{r4, r5, r6, lr}
 8004268:	4613      	mov	r3, r2
 800426a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800426c:	460e      	mov	r6, r1
 800426e:	2900      	cmp	r1, #0
 8004270:	d148      	bne.n	8004304 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004272:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004276:	2a02      	cmp	r2, #2
 8004278:	d13d      	bne.n	80042f6 <USBD_LL_DataInStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800427a:	6a05      	ldr	r5, [r0, #32]
 800427c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800427e:	4295      	cmp	r5, r2
 8004280:	d914      	bls.n	80042ac <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8004282:	1aaa      	subs	r2, r5, r2
 8004284:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004286:	4619      	mov	r1, r3
 8004288:	b292      	uxth	r2, r2
 800428a:	f000 fabe 	bl	800480a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800428e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004290:	461a      	mov	r2, r3
 8004292:	4619      	mov	r1, r3
 8004294:	4620      	mov	r0, r4
 8004296:	f001 f865 	bl	8005364 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800429a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	d13a      	bne.n	800431c <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80042a6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80042ac:	69c3      	ldr	r3, [r0, #28]
 80042ae:	fbb3 f5f2 	udiv	r5, r3, r2
 80042b2:	fb02 3515 	mls	r5, r2, r5, r3
 80042b6:	b965      	cbnz	r5, 80042d2 <USBD_LL_DataInStage+0x6c>
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d80a      	bhi.n	80042d2 <USBD_LL_DataInStage+0x6c>
            (pep->total_length >= pep->maxpacket) &&
 80042bc:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d206      	bcs.n	80042d2 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80042c4:	462a      	mov	r2, r5
 80042c6:	f000 faa0 	bl	800480a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80042ca:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80042ce:	462b      	mov	r3, r5
 80042d0:	e7de      	b.n	8004290 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80042d2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	b12b      	cbz	r3, 80042e6 <USBD_LL_DataInStage+0x80>
 80042da:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80042de:	2a03      	cmp	r2, #3
 80042e0:	d101      	bne.n	80042e6 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 80042e2:	4620      	mov	r0, r4
 80042e4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	4620      	mov	r0, r4
 80042ea:	f000 fff3 	bl	80052d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80042ee:	4620      	mov	r0, r4
 80042f0:	f000 fab5 	bl	800485e <USBD_CtlReceiveStatus>
 80042f4:	e7d1      	b.n	800429a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80042f6:	f032 0304 	bics.w	r3, r2, #4
 80042fa:	d1ce      	bne.n	800429a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	f000 ffe9 	bl	80052d4 <USBD_LL_StallEP>
 8004302:	e7ca      	b.n	800429a <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004304:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	b133      	cbz	r3, 800431a <USBD_LL_DataInStage+0xb4>
 800430c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004310:	2a03      	cmp	r2, #3
 8004312:	d102      	bne.n	800431a <USBD_LL_DataInStage+0xb4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004314:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004316:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004318:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800431a:	2002      	movs	r0, #2
}
 800431c:	bd70      	pop	{r4, r5, r6, pc}

0800431e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800431e:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004320:	2200      	movs	r2, #0
{
 8004322:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004324:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004326:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004328:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800432a:	2340      	movs	r3, #64	; 0x40
 800432c:	f000 ffb4 	bl	8005298 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004330:	4633      	mov	r3, r6
 8004332:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004334:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004338:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800433c:	2200      	movs	r2, #0
 800433e:	4620      	mov	r0, r4
 8004340:	f000 ffaa 	bl	8005298 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004344:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004348:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800434a:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800434c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800434e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004352:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004356:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004358:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800435c:	b123      	cbz	r3, 8004368 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800435e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004362:	4620      	mov	r0, r4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004368:	2000      	movs	r0, #0
 800436a:	bd70      	pop	{r4, r5, r6, pc}

0800436c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800436c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800436e:	2000      	movs	r0, #0
 8004370:	4770      	bx	lr

08004372 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004372:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004376:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800437a:	2304      	movs	r3, #4
 800437c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004380:	2000      	movs	r0, #0
 8004382:	4770      	bx	lr

08004384 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004384:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004388:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800438a:	bf04      	itt	eq
 800438c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004390:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004394:	2000      	movs	r0, #0
 8004396:	4770      	bx	lr

08004398 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004398:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800439a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800439e:	2a03      	cmp	r2, #3
 80043a0:	d104      	bne.n	80043ac <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80043a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	b103      	cbz	r3, 80043ac <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80043aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80043ac:	2000      	movs	r0, #0
 80043ae:	bd08      	pop	{r3, pc}

080043b0 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80043b0:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80043b2:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80043b4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80043b6:	f000 ff8d 	bl	80052d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80043ba:	4620      	mov	r0, r4
 80043bc:	2100      	movs	r1, #0
}
 80043be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80043c2:	f000 bf87 	b.w	80052d4 <USBD_LL_StallEP>
	...

080043c8 <USBD_StdDevReq>:
{
 80043c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043ca:	780b      	ldrb	r3, [r1, #0]
 80043cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043d0:	2b20      	cmp	r3, #32
{
 80043d2:	4604      	mov	r4, r0
 80043d4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043d6:	d011      	beq.n	80043fc <USBD_StdDevReq+0x34>
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d00f      	beq.n	80043fc <USBD_StdDevReq+0x34>
 80043dc:	bb73      	cbnz	r3, 800443c <USBD_StdDevReq+0x74>
      switch (req->bRequest)
 80043de:	784b      	ldrb	r3, [r1, #1]
 80043e0:	2b09      	cmp	r3, #9
 80043e2:	d82a      	bhi.n	800443a <USBD_StdDevReq+0x72>
 80043e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043e8:	010e00f2 	.word	0x010e00f2
 80043ec:	01070029 	.word	0x01070029
 80043f0:	008b0029 	.word	0x008b0029
 80043f4:	00290013 	.word	0x00290013
 80043f8:	00a700da 	.word	0x00a700da
      pdev->pClass->Setup(pdev, req);
 80043fc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004400:	4629      	mov	r1, r5
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4620      	mov	r0, r4
 8004406:	4798      	blx	r3
}
 8004408:	2000      	movs	r0, #0
 800440a:	b003      	add	sp, #12
 800440c:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004414:	884b      	ldrh	r3, [r1, #2]
 8004416:	0a1a      	lsrs	r2, r3, #8
 8004418:	3a01      	subs	r2, #1
 800441a:	2a0e      	cmp	r2, #14
 800441c:	d80d      	bhi.n	800443a <USBD_StdDevReq+0x72>
 800441e:	e8df f002 	tbb	[pc, r2]
 8004422:	2c10      	.short	0x2c10
 8004424:	590c0c39 	.word	0x590c0c39
 8004428:	0c0c0c63 	.word	0x0c0c0c63
 800442c:	0c0c0c0c 	.word	0x0c0c0c0c
 8004430:	08          	.byte	0x08
 8004431:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004432:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004436:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004438:	b933      	cbnz	r3, 8004448 <USBD_StdDevReq+0x80>
          USBD_CtlError(pdev, req);
 800443a:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800443c:	f7ff ffb8 	bl	80043b0 <USBD_CtlError.constprop.1>
  return ret;
 8004440:	e7e2      	b.n	8004408 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004442:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004446:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004448:	7c20      	ldrb	r0, [r4, #16]
 800444a:	f10d 0106 	add.w	r1, sp, #6
 800444e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004450:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004454:	b152      	cbz	r2, 800446c <USBD_StdDevReq+0xa4>
 8004456:	88eb      	ldrh	r3, [r5, #6]
 8004458:	b143      	cbz	r3, 800446c <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 800445a:	429a      	cmp	r2, r3
 800445c:	bf28      	it	cs
 800445e:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004460:	4601      	mov	r1, r0
 8004462:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8004464:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004468:	f000 f9c2 	bl	80047f0 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800446c:	88eb      	ldrh	r3, [r5, #6]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ca      	bne.n	8004408 <USBD_StdDevReq+0x40>
        USBD_CtlSendStatus(pdev);
 8004472:	4620      	mov	r0, r4
 8004474:	f000 f9e8 	bl	8004848 <USBD_CtlSendStatus>
 8004478:	e7c6      	b.n	8004408 <USBD_StdDevReq+0x40>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800447a:	7c02      	ldrb	r2, [r0, #16]
 800447c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004480:	b932      	cbnz	r2, 8004490 <USBD_StdDevReq+0xc8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004484:	f10d 0006 	add.w	r0, sp, #6
 8004488:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800448a:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800448c:	7043      	strb	r3, [r0, #1]
 800448e:	e7df      	b.n	8004450 <USBD_StdDevReq+0x88>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	e7f7      	b.n	8004484 <USBD_StdDevReq+0xbc>
      switch ((uint8_t)(req->wValue))
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b05      	cmp	r3, #5
 8004498:	d8cf      	bhi.n	800443a <USBD_StdDevReq+0x72>
 800449a:	e8df f003 	tbb	[pc, r3]
 800449e:	0703      	.short	0x0703
 80044a0:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80044a4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	e7c5      	b.n	8004438 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80044ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	e7c1      	b.n	8004438 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80044b4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	e7bd      	b.n	8004438 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80044bc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	e7b9      	b.n	8004438 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80044c4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	e7b5      	b.n	8004438 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80044cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	e7b1      	b.n	8004438 <USBD_StdDevReq+0x70>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044d4:	7c03      	ldrb	r3, [r0, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1af      	bne.n	800443a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80044da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044de:	f10d 0006 	add.w	r0, sp, #6
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	4798      	blx	r3
 80044e6:	e7b3      	b.n	8004450 <USBD_StdDevReq+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044e8:	7c03      	ldrb	r3, [r0, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1a5      	bne.n	800443a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80044ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044f2:	f10d 0006 	add.w	r0, sp, #6
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80044fa:	2307      	movs	r3, #7
 80044fc:	e7c6      	b.n	800448c <USBD_StdDevReq+0xc4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80044fe:	888b      	ldrh	r3, [r1, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d19a      	bne.n	800443a <USBD_StdDevReq+0x72>
 8004504:	88cb      	ldrh	r3, [r1, #6]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d197      	bne.n	800443a <USBD_StdDevReq+0x72>
 800450a:	884d      	ldrh	r5, [r1, #2]
 800450c:	2d7f      	cmp	r5, #127	; 0x7f
 800450e:	d894      	bhi.n	800443a <USBD_StdDevReq+0x72>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004510:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004514:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004516:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004518:	d08f      	beq.n	800443a <USBD_StdDevReq+0x72>
      pdev->dev_address = dev_addr;
 800451a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800451e:	f000 ff05 	bl	800532c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004522:	4620      	mov	r0, r4
 8004524:	f000 f990 	bl	8004848 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004528:	b11d      	cbz	r5, 8004532 <USBD_StdDevReq+0x16a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800452a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800452c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004530:	e76a      	b.n	8004408 <USBD_StdDevReq+0x40>
 8004532:	2301      	movs	r3, #1
 8004534:	e7fa      	b.n	800452c <USBD_StdDevReq+0x164>
  cfgidx = (uint8_t)(req->wValue);
 8004536:	7889      	ldrb	r1, [r1, #2]
 8004538:	4d38      	ldr	r5, [pc, #224]	; (800461c <USBD_StdDevReq+0x254>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800453a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800453c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800453e:	f63f af7c 	bhi.w	800443a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 8004542:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004546:	2b02      	cmp	r3, #2
 8004548:	d008      	beq.n	800455c <USBD_StdDevReq+0x194>
 800454a:	2b03      	cmp	r3, #3
 800454c:	d014      	beq.n	8004578 <USBD_StdDevReq+0x1b0>
        USBD_CtlError(pdev, req);
 800454e:	f7ff ff2f 	bl	80043b0 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004552:	7829      	ldrb	r1, [r5, #0]
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff fe18 	bl	800418a <USBD_ClrClassConfig>
 800455a:	e755      	b.n	8004408 <USBD_StdDevReq+0x40>
        if (cfgidx)
 800455c:	2900      	cmp	r1, #0
 800455e:	d088      	beq.n	8004472 <USBD_StdDevReq+0xaa>
          pdev->dev_config = cfgidx;
 8004560:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004562:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004564:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004566:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800456a:	4620      	mov	r0, r4
 800456c:	f7ff fe02 	bl	8004174 <USBD_SetClassConfig>
 8004570:	2802      	cmp	r0, #2
 8004572:	f47f af7e 	bne.w	8004472 <USBD_StdDevReq+0xaa>
 8004576:	e760      	b.n	800443a <USBD_StdDevReq+0x72>
        if (cfgidx == 0U)
 8004578:	b931      	cbnz	r1, 8004588 <USBD_StdDevReq+0x1c0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800457a:	2302      	movs	r3, #2
 800457c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004580:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004582:	f7ff fe02 	bl	800418a <USBD_ClrClassConfig>
 8004586:	e774      	b.n	8004472 <USBD_StdDevReq+0xaa>
        else if (cfgidx != pdev->dev_config)
 8004588:	6841      	ldr	r1, [r0, #4]
 800458a:	2901      	cmp	r1, #1
 800458c:	f43f af71 	beq.w	8004472 <USBD_StdDevReq+0xaa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004590:	b2c9      	uxtb	r1, r1
 8004592:	f7ff fdfa 	bl	800418a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004596:	7829      	ldrb	r1, [r5, #0]
 8004598:	6061      	str	r1, [r4, #4]
 800459a:	e7e6      	b.n	800456a <USBD_StdDevReq+0x1a2>
  if (req->wLength != 1U)
 800459c:	88ca      	ldrh	r2, [r1, #6]
 800459e:	2a01      	cmp	r2, #1
 80045a0:	f47f af4b 	bne.w	800443a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 80045a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f43f af46 	beq.w	800443a <USBD_StdDevReq+0x72>
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d904      	bls.n	80045bc <USBD_StdDevReq+0x1f4>
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	f47f af41 	bne.w	800443a <USBD_StdDevReq+0x72>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80045b8:	1d01      	adds	r1, r0, #4
 80045ba:	e003      	b.n	80045c4 <USBD_StdDevReq+0x1fc>
        pdev->dev_default_config = 0U;
 80045bc:	4601      	mov	r1, r0
 80045be:	2300      	movs	r3, #0
 80045c0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80045c4:	4620      	mov	r0, r4
 80045c6:	f000 f913 	bl	80047f0 <USBD_CtlSendData>
 80045ca:	e71d      	b.n	8004408 <USBD_StdDevReq+0x40>
  switch (pdev->dev_state)
 80045cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045d0:	3b01      	subs	r3, #1
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	f63f af31 	bhi.w	800443a <USBD_StdDevReq+0x72>
      if (req->wLength != 0x2U)
 80045d8:	88cb      	ldrh	r3, [r1, #6]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	f47f af2d 	bne.w	800443a <USBD_StdDevReq+0x72>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80045e0:	2301      	movs	r3, #1
 80045e2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80045e4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80045e8:	b10b      	cbz	r3, 80045ee <USBD_StdDevReq+0x226>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80045ea:	2303      	movs	r3, #3
 80045ec:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80045ee:	2202      	movs	r2, #2
 80045f0:	f104 010c 	add.w	r1, r4, #12
 80045f4:	e7e6      	b.n	80045c4 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045f6:	884b      	ldrh	r3, [r1, #2]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	f47f af05 	bne.w	8004408 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 80045fe:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8004602:	e736      	b.n	8004472 <USBD_StdDevReq+0xaa>
  switch (pdev->dev_state)
 8004604:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004608:	3b01      	subs	r3, #1
 800460a:	2b02      	cmp	r3, #2
 800460c:	f63f af15 	bhi.w	800443a <USBD_StdDevReq+0x72>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004610:	884b      	ldrh	r3, [r1, #2]
 8004612:	2b01      	cmp	r3, #1
 8004614:	f47f aef8 	bne.w	8004408 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	e7f0      	b.n	80045fe <USBD_StdDevReq+0x236>
 800461c:	2000020c 	.word	0x2000020c

08004620 <USBD_StdItfReq>:
{
 8004620:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004622:	780b      	ldrb	r3, [r1, #0]
 8004624:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004628:	2b20      	cmp	r3, #32
{
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800462e:	d002      	beq.n	8004636 <USBD_StdItfReq+0x16>
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d000      	beq.n	8004636 <USBD_StdItfReq+0x16>
 8004634:	b9b3      	cbnz	r3, 8004664 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 8004636:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800463a:	3b01      	subs	r3, #1
 800463c:	2b02      	cmp	r3, #2
 800463e:	d810      	bhi.n	8004662 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004640:	792b      	ldrb	r3, [r5, #4]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d80d      	bhi.n	8004662 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004646:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800464a:	4629      	mov	r1, r5
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4620      	mov	r0, r4
 8004650:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004652:	88eb      	ldrh	r3, [r5, #6]
 8004654:	b91b      	cbnz	r3, 800465e <USBD_StdItfReq+0x3e>
 8004656:	b910      	cbnz	r0, 800465e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004658:	4620      	mov	r0, r4
 800465a:	f000 f8f5 	bl	8004848 <USBD_CtlSendStatus>
}
 800465e:	2000      	movs	r0, #0
 8004660:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004662:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8004664:	f7ff fea4 	bl	80043b0 <USBD_CtlError.constprop.1>
      break;
 8004668:	e7f9      	b.n	800465e <USBD_StdItfReq+0x3e>

0800466a <USBD_StdEPReq>:
{
 800466a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800466c:	780a      	ldrb	r2, [r1, #0]
 800466e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004672:	2a20      	cmp	r2, #32
{
 8004674:	4604      	mov	r4, r0
 8004676:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004678:	d013      	beq.n	80046a2 <USBD_StdEPReq+0x38>
 800467a:	2a40      	cmp	r2, #64	; 0x40
 800467c:	d011      	beq.n	80046a2 <USBD_StdEPReq+0x38>
 800467e:	b96a      	cbnz	r2, 800469c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8004680:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004682:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8004684:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004686:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004688:	d01f      	beq.n	80046ca <USBD_StdEPReq+0x60>
 800468a:	d335      	bcc.n	80046f8 <USBD_StdEPReq+0x8e>
 800468c:	2d03      	cmp	r5, #3
 800468e:	d105      	bne.n	800469c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004690:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004694:	2a02      	cmp	r2, #2
 8004696:	d026      	beq.n	80046e6 <USBD_StdEPReq+0x7c>
 8004698:	2a03      	cmp	r2, #3
 800469a:	d00a      	beq.n	80046b2 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 800469c:	f7ff fe88 	bl	80043b0 <USBD_CtlError.constprop.1>
      break;
 80046a0:	e005      	b.n	80046ae <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 80046a2:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80046a6:	4619      	mov	r1, r3
 80046a8:	6892      	ldr	r2, [r2, #8]
 80046aa:	4620      	mov	r0, r4
 80046ac:	4790      	blx	r2
}
 80046ae:	2000      	movs	r0, #0
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80046b2:	885a      	ldrh	r2, [r3, #2]
 80046b4:	b92a      	cbnz	r2, 80046c2 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 80046b6:	064a      	lsls	r2, r1, #25
 80046b8:	d003      	beq.n	80046c2 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80046ba:	88db      	ldrh	r3, [r3, #6]
 80046bc:	b90b      	cbnz	r3, 80046c2 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 80046be:	f000 fe09 	bl	80052d4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 f8c0 	bl	8004848 <USBD_CtlSendStatus>
              break;
 80046c8:	e7f1      	b.n	80046ae <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80046ca:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80046ce:	2a02      	cmp	r2, #2
 80046d0:	d009      	beq.n	80046e6 <USBD_StdEPReq+0x7c>
 80046d2:	2a03      	cmp	r2, #3
 80046d4:	d1e2      	bne.n	800469c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80046d6:	885b      	ldrh	r3, [r3, #2]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e8      	bne.n	80046ae <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 80046dc:	064d      	lsls	r5, r1, #25
 80046de:	d0f0      	beq.n	80046c2 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80046e0:	f000 fe06 	bl	80052f0 <USBD_LL_ClearStallEP>
 80046e4:	e7ed      	b.n	80046c2 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046e6:	064b      	lsls	r3, r1, #25
 80046e8:	d017      	beq.n	800471a <USBD_StdEPReq+0xb0>
                USBD_LL_StallEP(pdev, ep_addr);
 80046ea:	f000 fdf3 	bl	80052d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80046ee:	2180      	movs	r1, #128	; 0x80
 80046f0:	4620      	mov	r0, r4
 80046f2:	f000 fdef 	bl	80052d4 <USBD_LL_StallEP>
 80046f6:	e7da      	b.n	80046ae <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80046f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d00e      	beq.n	800471e <USBD_StdEPReq+0xb4>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d1cb      	bne.n	800469c <USBD_StdEPReq+0x32>
              if ((ep_addr & 0x80U) == 0x80U)
 8004704:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004708:	f04f 0314 	mov.w	r3, #20
 800470c:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004710:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004714:	d012      	beq.n	800473c <USBD_StdEPReq+0xd2>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004716:	6992      	ldr	r2, [r2, #24]
 8004718:	b9da      	cbnz	r2, 8004752 <USBD_StdEPReq+0xe8>
                USBD_CtlError(pdev, req);
 800471a:	4620      	mov	r0, r4
 800471c:	e7be      	b.n	800469c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800471e:	0649      	lsls	r1, r1, #25
 8004720:	d1fb      	bne.n	800471a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004722:	0613      	lsls	r3, r2, #24
 8004724:	bf4c      	ite	mi
 8004726:	f100 0114 	addmi.w	r1, r0, #20
 800472a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800472e:	2300      	movs	r3, #0
 8004730:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004732:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004734:	4620      	mov	r0, r4
 8004736:	f000 f85b 	bl	80047f0 <USBD_CtlSendData>
              break;
 800473a:	e7b8      	b.n	80046ae <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800473c:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004740:	2a00      	cmp	r2, #0
 8004742:	d0ea      	beq.n	800471a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004744:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004748:	fb03 0505 	mla	r5, r3, r5, r0
 800474c:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004750:	e004      	b.n	800475c <USBD_StdEPReq+0xf2>
 8004752:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004756:	fb05 3503 	mla	r5, r5, r3, r3
 800475a:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800475c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004760:	d103      	bne.n	800476a <USBD_StdEPReq+0x100>
                pep->status = 0x0001U;
 8004762:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004764:	2202      	movs	r2, #2
 8004766:	4629      	mov	r1, r5
 8004768:	e7e4      	b.n	8004734 <USBD_StdEPReq+0xca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800476a:	4620      	mov	r0, r4
 800476c:	f000 fdce 	bl	800530c <USBD_LL_IsStallEP>
 8004770:	b108      	cbz	r0, 8004776 <USBD_StdEPReq+0x10c>
                pep->status = 0x0001U;
 8004772:	2301      	movs	r3, #1
 8004774:	e7f5      	b.n	8004762 <USBD_StdEPReq+0xf8>
                pep->status = 0x0000U;
 8004776:	6028      	str	r0, [r5, #0]
 8004778:	e7f4      	b.n	8004764 <USBD_StdEPReq+0xfa>

0800477a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800477a:	780b      	ldrb	r3, [r1, #0]
 800477c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800477e:	784b      	ldrb	r3, [r1, #1]
 8004780:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004782:	78ca      	ldrb	r2, [r1, #3]
 8004784:	788b      	ldrb	r3, [r1, #2]
 8004786:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800478a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800478c:	794a      	ldrb	r2, [r1, #5]
 800478e:	790b      	ldrb	r3, [r1, #4]
 8004790:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004794:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004796:	79ca      	ldrb	r2, [r1, #7]
 8004798:	798b      	ldrb	r3, [r1, #6]
 800479a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800479e:	80c3      	strh	r3, [r0, #6]
 80047a0:	4770      	bx	lr

080047a2 <USBD_CtlError>:
{
 80047a2:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 80047a4:	2180      	movs	r1, #128	; 0x80
{
 80047a6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80047a8:	f000 fd94 	bl	80052d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80047ac:	4620      	mov	r0, r4
 80047ae:	2100      	movs	r1, #0
}
 80047b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80047b4:	f000 bd8e 	b.w	80052d4 <USBD_LL_StallEP>

080047b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80047b8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80047ba:	b188      	cbz	r0, 80047e0 <USBD_GetString+0x28>
 80047bc:	4605      	mov	r5, r0
 80047be:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80047c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2c00      	cmp	r4, #0
 80047c8:	d1f9      	bne.n	80047be <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80047ca:	3301      	adds	r3, #1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80047d0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80047d2:	2303      	movs	r3, #3
 80047d4:	704b      	strb	r3, [r1, #1]
 80047d6:	3801      	subs	r0, #1
 80047d8:	2302      	movs	r3, #2
    while (*desc != '\0')
 80047da:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80047de:	b905      	cbnz	r5, 80047e2 <USBD_GetString+0x2a>
 80047e0:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80047e8:	3302      	adds	r3, #2
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	548c      	strb	r4, [r1, r2]
 80047ee:	e7f4      	b.n	80047da <USBD_GetString+0x22>

080047f0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80047f4:	2202      	movs	r2, #2
 80047f6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80047fa:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047fc:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80047fe:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004800:	2100      	movs	r1, #0
 8004802:	f000 fda1 	bl	8005348 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004806:	2000      	movs	r0, #0
 8004808:	bd10      	pop	{r4, pc}

0800480a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800480a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800480c:	4613      	mov	r3, r2
 800480e:	460a      	mov	r2, r1
 8004810:	2100      	movs	r1, #0
 8004812:	f000 fd99 	bl	8005348 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004816:	2000      	movs	r0, #0
 8004818:	bd08      	pop	{r3, pc}

0800481a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800481a:	b510      	push	{r4, lr}
 800481c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800481e:	2203      	movs	r2, #3
 8004820:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004824:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004828:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800482a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800482e:	2100      	movs	r1, #0
 8004830:	f000 fd98 	bl	8005364 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004834:	2000      	movs	r0, #0
 8004836:	bd10      	pop	{r4, pc}

08004838 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004838:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800483a:	4613      	mov	r3, r2
 800483c:	460a      	mov	r2, r1
 800483e:	2100      	movs	r1, #0
 8004840:	f000 fd90 	bl	8005364 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004844:	2000      	movs	r0, #0
 8004846:	bd08      	pop	{r3, pc}

08004848 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004848:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800484a:	2304      	movs	r3, #4
 800484c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004850:	2300      	movs	r3, #0
 8004852:	461a      	mov	r2, r3
 8004854:	4619      	mov	r1, r3
 8004856:	f000 fd77 	bl	8005348 <USBD_LL_Transmit>

  return USBD_OK;
}
 800485a:	2000      	movs	r0, #0
 800485c:	bd08      	pop	{r3, pc}

0800485e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800485e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004860:	2305      	movs	r3, #5
 8004862:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004866:	2300      	movs	r3, #0
 8004868:	461a      	mov	r2, r3
 800486a:	4619      	mov	r1, r3
 800486c:	f000 fd7a 	bl	8005364 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004870:	2000      	movs	r0, #0
 8004872:	bd08      	pop	{r3, pc}

08004874 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8004878:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800487a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800487c:	4302      	orrs	r2, r0
 800487e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	4018      	ands	r0, r3
 8004884:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004886:	9b01      	ldr	r3, [sp, #4]
}
 8004888:	b002      	add	sp, #8
 800488a:	4770      	bx	lr

0800488c <print_PMS7003>:
static void MX_LPUART1_UART_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */

void print_PMS7003(void)
{
 800488c:	b570      	push	{r4, r5, r6, lr}
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;

	check_byte_receive=pms7003_Buffer[30]<<8|pms7003_Buffer[31];
 800488e:	4c2f      	ldr	r4, [pc, #188]	; (800494c <print_PMS7003+0xc0>)
 8004890:	7fa3      	ldrb	r3, [r4, #30]
 8004892:	7fe6      	ldrb	r6, [r4, #31]
 8004894:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8004898:	2300      	movs	r3, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 800489a:	461d      	mov	r5, r3

	for(uint8_t i=0;i<30;i++)
	{
		check_byte_calculate+=pms7003_Buffer[i];
 800489c:	5ce2      	ldrb	r2, [r4, r3]
 800489e:	3301      	adds	r3, #1
 80048a0:	4415      	add	r5, r2
	for(uint8_t i=0;i<30;i++)
 80048a2:	2b1e      	cmp	r3, #30
		check_byte_calculate+=pms7003_Buffer[i];
 80048a4:	b2ad      	uxth	r5, r5
	for(uint8_t i=0;i<30;i++)
 80048a6:	d1f9      	bne.n	800489c <print_PMS7003+0x10>
	}

	printf("pms : 0x%X	crc_cal : 0x%X\r\n",check_byte_receive,check_byte_calculate);
 80048a8:	462a      	mov	r2, r5
 80048aa:	4631      	mov	r1, r6
 80048ac:	4828      	ldr	r0, [pc, #160]	; (8004950 <print_PMS7003+0xc4>)
 80048ae:	f000 fe77 	bl	80055a0 <iprintf>

	if(check_byte_receive==check_byte_calculate)
 80048b2:	42ae      	cmp	r6, r5
 80048b4:	d144      	bne.n	8004940 <print_PMS7003+0xb4>
	{
		printf("PM1.0 : %d	",(combine_value=(pms7003_Buffer[10]<<8)|pms7003_Buffer[11]));
 80048b6:	7ae3      	ldrb	r3, [r4, #11]
 80048b8:	7aa1      	ldrb	r1, [r4, #10]
 80048ba:	4826      	ldr	r0, [pc, #152]	; (8004954 <print_PMS7003+0xc8>)
 80048bc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80048c0:	f000 fe6e 	bl	80055a0 <iprintf>
		printf("PM2.5 : %d	",(combine_value=(pms7003_Buffer[12]<<8)|pms7003_Buffer[13]));
 80048c4:	7b63      	ldrb	r3, [r4, #13]
 80048c6:	7b21      	ldrb	r1, [r4, #12]
 80048c8:	4823      	ldr	r0, [pc, #140]	; (8004958 <print_PMS7003+0xcc>)
 80048ca:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80048ce:	f000 fe67 	bl	80055a0 <iprintf>
		printf("PM10 : %d	",(combine_value=(pms7003_Buffer[14]<<8)|pms7003_Buffer[15]));
 80048d2:	7be3      	ldrb	r3, [r4, #15]
 80048d4:	7ba1      	ldrb	r1, [r4, #14]
 80048d6:	4821      	ldr	r0, [pc, #132]	; (800495c <print_PMS7003+0xd0>)
 80048d8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80048dc:	f000 fe60 	bl	80055a0 <iprintf>
		printf("0.3um : %d	",(combine_value=(pms7003_Buffer[16]<<8)|pms7003_Buffer[17]));
 80048e0:	7c63      	ldrb	r3, [r4, #17]
 80048e2:	7c21      	ldrb	r1, [r4, #16]
 80048e4:	481e      	ldr	r0, [pc, #120]	; (8004960 <print_PMS7003+0xd4>)
 80048e6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80048ea:	f000 fe59 	bl	80055a0 <iprintf>
		printf("0.5um : %d	",(combine_value=(pms7003_Buffer[18]<<8)|pms7003_Buffer[19]));
 80048ee:	7ce3      	ldrb	r3, [r4, #19]
 80048f0:	7ca1      	ldrb	r1, [r4, #18]
 80048f2:	481c      	ldr	r0, [pc, #112]	; (8004964 <print_PMS7003+0xd8>)
 80048f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80048f8:	f000 fe52 	bl	80055a0 <iprintf>
		printf("1.0um : %d	",(combine_value=(pms7003_Buffer[20]<<8)|pms7003_Buffer[21]));
 80048fc:	7d63      	ldrb	r3, [r4, #21]
 80048fe:	7d21      	ldrb	r1, [r4, #20]
 8004900:	4819      	ldr	r0, [pc, #100]	; (8004968 <print_PMS7003+0xdc>)
 8004902:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004906:	f000 fe4b 	bl	80055a0 <iprintf>
		printf("2.5um : %d	",(combine_value=(pms7003_Buffer[22]<<8)|pms7003_Buffer[23]));
 800490a:	7de3      	ldrb	r3, [r4, #23]
 800490c:	7da1      	ldrb	r1, [r4, #22]
 800490e:	4817      	ldr	r0, [pc, #92]	; (800496c <print_PMS7003+0xe0>)
 8004910:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004914:	f000 fe44 	bl	80055a0 <iprintf>
		printf("5.0um : %d	",(combine_value=(pms7003_Buffer[24]<<8)|pms7003_Buffer[25]));
 8004918:	7e63      	ldrb	r3, [r4, #25]
 800491a:	7e21      	ldrb	r1, [r4, #24]
 800491c:	4814      	ldr	r0, [pc, #80]	; (8004970 <print_PMS7003+0xe4>)
 800491e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004922:	f000 fe3d 	bl	80055a0 <iprintf>
		printf("10.0um : %d\n",(combine_value=(pms7003_Buffer[26]<<8)|pms7003_Buffer[27]));
 8004926:	7ea1      	ldrb	r1, [r4, #26]
 8004928:	7ee3      	ldrb	r3, [r4, #27]
 800492a:	4812      	ldr	r0, [pc, #72]	; (8004974 <print_PMS7003+0xe8>)
 800492c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004930:	f000 fe36 	bl	80055a0 <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004934:	2101      	movs	r1, #1
 8004936:	4810      	ldr	r0, [pc, #64]	; (8004978 <print_PMS7003+0xec>)
	}
	else
	{
		printf("Check bytes not matched\r\n");
	}
}
 8004938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800493c:	f7fc b89f 	b.w	8000a7e <HAL_GPIO_TogglePin>
		printf("Check bytes not matched\r\n");
 8004940:	480e      	ldr	r0, [pc, #56]	; (800497c <print_PMS7003+0xf0>)
}
 8004942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Check bytes not matched\r\n");
 8004946:	f000 be9f 	b.w	8005688 <puts>
 800494a:	bf00      	nop
 800494c:	20000440 	.word	0x20000440
 8004950:	080064a0 	.word	0x080064a0
 8004954:	080064bc 	.word	0x080064bc
 8004958:	080064c8 	.word	0x080064c8
 800495c:	080064d4 	.word	0x080064d4
 8004960:	080064df 	.word	0x080064df
 8004964:	080064eb 	.word	0x080064eb
 8004968:	080064f7 	.word	0x080064f7
 800496c:	08006503 	.word	0x08006503
 8004970:	0800650f 	.word	0x0800650f
 8004974:	0800651b 	.word	0x0800651b
 8004978:	48000400 	.word	0x48000400
 800497c:	08006528 	.word	0x08006528

08004980 <write_PMS7003>:

void write_PMS7003(char* cmd)
{
 8004980:	b538      	push	{r3, r4, r5, lr}
	uint16_t verify_byte=0;

	if(strcmp(cmd,"Read")==0)
 8004982:	492a      	ldr	r1, [pc, #168]	; (8004a2c <write_PMS7003+0xac>)
 8004984:	4c2a      	ldr	r4, [pc, #168]	; (8004a30 <write_PMS7003+0xb0>)
{
 8004986:	4605      	mov	r5, r0
	if(strcmp(cmd,"Read")==0)
 8004988:	f7fb fbfa 	bl	8000180 <strcmp>
 800498c:	bb58      	cbnz	r0, 80049e6 <write_PMS7003+0x66>
	{
		pms7003_send_buffer[2]=0xe2;
 800498e:	23e2      	movs	r3, #226	; 0xe2
		pms7003_send_buffer[3]=0x00;
		pms7003_send_buffer[4]=0x00;
	}
	else if(strcmp(cmd,"Passive")==0)
	{
		pms7003_send_buffer[2]=0xe1;
 8004990:	70a3      	strb	r3, [r4, #2]
		pms7003_send_buffer[3]=0x00;
 8004992:	70e0      	strb	r0, [r4, #3]
		pms7003_send_buffer[4]=0x00;
 8004994:	7120      	strb	r0, [r4, #4]
{
 8004996:	2200      	movs	r2, #0
	uint16_t verify_byte=0;
 8004998:	4613      	mov	r3, r2
		pms7003_send_buffer[3]=0x00;
		pms7003_send_buffer[4]=0x01;
	}
	for(uint8_t i=0;i<5;i++)
	{
		verify_byte+=pms7003_send_buffer[i];
 800499a:	5ca1      	ldrb	r1, [r4, r2]
 800499c:	3201      	adds	r2, #1
 800499e:	440b      	add	r3, r1
	for(uint8_t i=0;i<5;i++)
 80049a0:	2a05      	cmp	r2, #5
		verify_byte+=pms7003_send_buffer[i];
 80049a2:	b29b      	uxth	r3, r3
	for(uint8_t i=0;i<5;i++)
 80049a4:	d1f9      	bne.n	800499a <write_PMS7003+0x1a>
	}
	pms7003_send_buffer[5]=verify_byte>>8;
 80049a6:	0a1a      	lsrs	r2, r3, #8
 80049a8:	7162      	strb	r2, [r4, #5]
	pms7003_send_buffer[6]=verify_byte;
 80049aa:	71a3      	strb	r3, [r4, #6]

	while(HAL_UART_GetState(&hlpuart1)!=HAL_UART_STATE_READY)
 80049ac:	4c21      	ldr	r4, [pc, #132]	; (8004a34 <write_PMS7003+0xb4>)
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7fd fff6 	bl	80029a0 <HAL_UART_GetState>
 80049b4:	2820      	cmp	r0, #32
 80049b6:	d1fa      	bne.n	80049ae <write_PMS7003+0x2e>
	{

	}

	if(HAL_UART_Transmit_IT(&hlpuart1,(uint8_t*)pms7003_send_buffer,7)!=HAL_OK)
 80049b8:	491d      	ldr	r1, [pc, #116]	; (8004a30 <write_PMS7003+0xb0>)
 80049ba:	481e      	ldr	r0, [pc, #120]	; (8004a34 <write_PMS7003+0xb4>)
 80049bc:	2207      	movs	r2, #7
 80049be:	f7fd fd49 	bl	8002454 <HAL_UART_Transmit_IT>
	{

	}

	if(strcmp(cmd,"Read")==0)
 80049c2:	491a      	ldr	r1, [pc, #104]	; (8004a2c <write_PMS7003+0xac>)
 80049c4:	4628      	mov	r0, r5
 80049c6:	f7fb fbdb 	bl	8000180 <strcmp>
 80049ca:	bb68      	cbnz	r0, 8004a28 <write_PMS7003+0xa8>
	{
		while(HAL_UART_GetState(&hlpuart1)!=HAL_UART_STATE_READY)
 80049cc:	4c19      	ldr	r4, [pc, #100]	; (8004a34 <write_PMS7003+0xb4>)
 80049ce:	4620      	mov	r0, r4
 80049d0:	f7fd ffe6 	bl	80029a0 <HAL_UART_GetState>
 80049d4:	2820      	cmp	r0, #32
 80049d6:	4602      	mov	r2, r0
 80049d8:	d1f9      	bne.n	80049ce <write_PMS7003+0x4e>
		{

		}
		if(HAL_UART_Receive_IT(&hlpuart1,pms7003_Buffer, 32)!=HAL_OK)
 80049da:	4917      	ldr	r1, [pc, #92]	; (8004a38 <write_PMS7003+0xb8>)
 80049dc:	4815      	ldr	r0, [pc, #84]	; (8004a34 <write_PMS7003+0xb4>)
		{

		}
	}
}
 80049de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if(HAL_UART_Receive_IT(&hlpuart1,pms7003_Buffer, 32)!=HAL_OK)
 80049e2:	f7fd bd87 	b.w	80024f4 <HAL_UART_Receive_IT>
	else if(strcmp(cmd,"Passive")==0)
 80049e6:	4915      	ldr	r1, [pc, #84]	; (8004a3c <write_PMS7003+0xbc>)
 80049e8:	4628      	mov	r0, r5
 80049ea:	f7fb fbc9 	bl	8000180 <strcmp>
 80049ee:	b908      	cbnz	r0, 80049f4 <write_PMS7003+0x74>
		pms7003_send_buffer[2]=0xe1;
 80049f0:	23e1      	movs	r3, #225	; 0xe1
 80049f2:	e7cd      	b.n	8004990 <write_PMS7003+0x10>
	else if(strcmp(cmd,"Active")==0)
 80049f4:	4912      	ldr	r1, [pc, #72]	; (8004a40 <write_PMS7003+0xc0>)
 80049f6:	4628      	mov	r0, r5
 80049f8:	f7fb fbc2 	bl	8000180 <strcmp>
 80049fc:	b928      	cbnz	r0, 8004a0a <write_PMS7003+0x8a>
		pms7003_send_buffer[2]=0xe1;
 80049fe:	23e1      	movs	r3, #225	; 0xe1
		pms7003_send_buffer[2]=0xe4;
 8004a00:	70a3      	strb	r3, [r4, #2]
		pms7003_send_buffer[4]=0x01;
 8004a02:	2301      	movs	r3, #1
		pms7003_send_buffer[3]=0x00;
 8004a04:	70e0      	strb	r0, [r4, #3]
		pms7003_send_buffer[4]=0x01;
 8004a06:	7123      	strb	r3, [r4, #4]
 8004a08:	e7c5      	b.n	8004996 <write_PMS7003+0x16>
	else if(strcmp(cmd,"Sleep")==0)
 8004a0a:	490e      	ldr	r1, [pc, #56]	; (8004a44 <write_PMS7003+0xc4>)
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7fb fbb7 	bl	8000180 <strcmp>
 8004a12:	b908      	cbnz	r0, 8004a18 <write_PMS7003+0x98>
		pms7003_send_buffer[2]=0xe4;
 8004a14:	23e4      	movs	r3, #228	; 0xe4
 8004a16:	e7bb      	b.n	8004990 <write_PMS7003+0x10>
	else if(strcmp(cmd,"WakeUp")==0)
 8004a18:	490b      	ldr	r1, [pc, #44]	; (8004a48 <write_PMS7003+0xc8>)
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7fb fbb0 	bl	8000180 <strcmp>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d1b8      	bne.n	8004996 <write_PMS7003+0x16>
		pms7003_send_buffer[2]=0xe4;
 8004a24:	23e4      	movs	r3, #228	; 0xe4
 8004a26:	e7eb      	b.n	8004a00 <write_PMS7003+0x80>
 8004a28:	bd38      	pop	{r3, r4, r5, pc}
 8004a2a:	bf00      	nop
 8004a2c:	08006541 	.word	0x08006541
 8004a30:	2000011b 	.word	0x2000011b
 8004a34:	20000460 	.word	0x20000460
 8004a38:	20000440 	.word	0x20000440
 8004a3c:	08006546 	.word	0x08006546
 8004a40:	0800654e 	.word	0x0800654e
 8004a44:	08006555 	.word	0x08006555
 8004a48:	0800655b 	.word	0x0800655b

08004a4c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8004a4c:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8004a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8004a52:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <_write+0x14>)
 8004a56:	b292      	uxth	r2, r2
 8004a58:	f7fe fc86 	bl	8003368 <HAL_UART_Transmit>
  return len;
}
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	bd10      	pop	{r4, pc}
 8004a60:	200004ec 	.word	0x200004ec

08004a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a64:	b530      	push	{r4, r5, lr}
 8004a66:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a68:	2248      	movs	r2, #72	; 0x48
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8004a6e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a72:	f000 fd8d 	bl	8005590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a76:	221c      	movs	r2, #28
 8004a78:	2100      	movs	r1, #0
 8004a7a:	a801      	add	r0, sp, #4
 8004a7c:	f000 fd88 	bl	8005590 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a80:	2100      	movs	r1, #0
 8004a82:	2250      	movs	r2, #80	; 0x50
 8004a84:	a81a      	add	r0, sp, #104	; 0x68
 8004a86:	f000 fd83 	bl	8005590 <memset>
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	60e3      	str	r3, [r4, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	f023 0303 	bic.w	r3, r3, #3
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	60e3      	str	r3, [r4, #12]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8004a9e:	f7fc fc03 	bl	80012a8 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004aa2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aa6:	4a29      	ldr	r2, [pc, #164]	; (8004b4c <SystemClock_Config+0xe8>)
 8004aa8:	f023 0318 	bic.w	r3, r3, #24
 8004aac:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004ac6:	2327      	movs	r3, #39	; 0x27
 8004ac8:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ace:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ad4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ad6:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004ad8:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004ada:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004adc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ade:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004ae0:	2360      	movs	r3, #96	; 0x60
 8004ae2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004ae4:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004ae6:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004ae8:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004aea:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aec:	f7fc fc98 	bl	8001420 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004af0:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004af2:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004af4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004af6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004af8:	2302      	movs	r3, #2
 8004afa:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004afc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004afe:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b00:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004b02:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004b04:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004b06:	f7fc ff6b 	bl	80019e0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8004b0a:	f242 1303 	movw	r3, #8451	; 0x2103
 8004b0e:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8004b10:	2318      	movs	r3, #24
 8004b12:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b18:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b1e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004b20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b24:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8004b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b2a:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004b2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b30:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b32:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004b34:	2310      	movs	r3, #16
 8004b36:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b38:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004b3a:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004b3c:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b3e:	f7fd f8fc 	bl	8001d3a <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004b42:	f7fd fabe 	bl	80020c2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004b46:	b02f      	add	sp, #188	; 0xbc
 8004b48:	bd30      	pop	{r4, r5, pc}
 8004b4a:	bf00      	nop
 8004b4c:	58000400 	.word	0x58000400

08004b50 <main>:
{
 8004b50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8004b52:	f7fb fd23 	bl	800059c <HAL_Init>
  SystemClock_Config();
 8004b56:	f7ff ff85 	bl	8004a64 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5a:	2214      	movs	r2, #20
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	a801      	add	r0, sp, #4
 8004b60:	f000 fd16 	bl	8005590 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b64:	2004      	movs	r0, #4
 8004b66:	f7ff fe85 	bl	8004874 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b6a:	2002      	movs	r0, #2
 8004b6c:	f7ff fe82 	bl	8004874 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b70:	2001      	movs	r0, #1
 8004b72:	f7ff fe7f 	bl	8004874 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b76:	2008      	movs	r0, #8
 8004b78:	f7ff fe7c 	bl	8004874 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2123      	movs	r1, #35	; 0x23
 8004b80:	484b      	ldr	r0, [pc, #300]	; (8004cb0 <main+0x160>)
  huart1.Instance = USART1;
 8004b82:	4d4c      	ldr	r5, [pc, #304]	; (8004cb4 <main+0x164>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8004b84:	f7fb ff76 	bl	8000a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004b88:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b8a:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = B1_Pin;
 8004b8c:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b8e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b90:	4b49      	ldr	r3, [pc, #292]	; (8004cb8 <main+0x168>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b92:	484a      	ldr	r0, [pc, #296]	; (8004cbc <main+0x16c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b94:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b96:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004b98:	f7fb feb2 	bl	8000900 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8004b9c:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b9e:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba4:	4842      	ldr	r0, [pc, #264]	; (8004cb0 <main+0x160>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8004ba6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004baa:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bac:	f7fb fea8 	bl	8000900 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004bb0:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bb2:	a901      	add	r1, sp, #4
 8004bb4:	4842      	ldr	r0, [pc, #264]	; (8004cc0 <main+0x170>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004bb6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bb8:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bbc:	f7fb fea0 	bl	8000900 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8004bc0:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <main+0x174>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bc2:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 8004bc4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004bc8:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bca:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8004bcc:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bd0:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bd2:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004bd4:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bd6:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd8:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bda:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bdc:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bde:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004be0:	f7fe fc51 	bl	8003486 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004be4:	4621      	mov	r1, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	f7fe fce6 	bl	80035b8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bec:	4621      	mov	r1, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f7fe fd06 	bl	8003600 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f7fe fcc4 	bl	8003582 <HAL_UARTEx_DisableFifoMode>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 8004bfe:	210a      	movs	r1, #10
 8004c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  hlpuart1.Instance = LPUART1;
 8004c02:	4d31      	ldr	r5, [pc, #196]	; (8004cc8 <main+0x178>)
 8004c04:	f042 0204 	orr.w	r2, r2, #4
 8004c08:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c0c:	f002 0204 	and.w	r2, r2, #4
 8004c10:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004c12:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 8004c22:	4622      	mov	r2, r4
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	200b      	movs	r0, #11
  (void)tmpreg;
 8004c28:	9b00      	ldr	r3, [sp, #0]
 8004c2a:	f7fb fcf7 	bl	800061c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004c2e:	200b      	movs	r0, #11
 8004c30:	f7fb fd28 	bl	8000684 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 10, 0);
 8004c34:	4622      	mov	r2, r4
 8004c36:	210a      	movs	r1, #10
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f7fb fcef 	bl	800061c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f7fb fd20 	bl	8000684 <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 9600;
 8004c44:	4921      	ldr	r1, [pc, #132]	; (8004ccc <main+0x17c>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c46:	60ac      	str	r4, [r5, #8]
  hlpuart1.Init.BaudRate = 9600;
 8004c48:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004c4c:	4628      	mov	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 8004c4e:	e885 000a 	stmia.w	r5, {r1, r3}
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004c52:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004c54:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004c56:	616e      	str	r6, [r5, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c58:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c5a:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c5c:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c5e:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004c60:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004c62:	f7fe fc10 	bl	8003486 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c66:	4621      	mov	r1, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f7fe fca5 	bl	80035b8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f7fe fcc5 	bl	8003600 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004c76:	4628      	mov	r0, r5
 8004c78:	f7fe fc83 	bl	8003582 <HAL_UARTEx_DisableFifoMode>
  htim16.Instance = TIM16;
 8004c7c:	4d14      	ldr	r5, [pc, #80]	; (8004cd0 <main+0x180>)
  MX_USB_Device_Init();
 8004c7e:	f000 f9e1 	bl	8005044 <MX_USB_Device_Init>
  htim16.Init.Prescaler = 32000-1;
 8004c82:	4814      	ldr	r0, [pc, #80]	; (8004cd4 <main+0x184>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c84:	60ac      	str	r4, [r5, #8]
  htim16.Init.Prescaler = 32000-1;
 8004c86:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8004c8a:	e885 0009 	stmia.w	r5, {r0, r3}
  htim16.Init.Period = 5000-1;
 8004c8e:	f241 3387 	movw	r3, #4999	; 0x1387
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004c92:	4628      	mov	r0, r5
  htim16.Init.Period = 5000-1;
 8004c94:	60eb      	str	r3, [r5, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c96:	612c      	str	r4, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 8004c98:	616c      	str	r4, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c9a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004c9c:	f7fd fb1c 	bl	80022d8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f7fd fa15 	bl	80020d0 <HAL_TIM_Base_Start_IT>
  write_PMS7003("Passive");
 8004ca6:	480c      	ldr	r0, [pc, #48]	; (8004cd8 <main+0x188>)
 8004ca8:	f7ff fe6a 	bl	8004980 <write_PMS7003>
 8004cac:	e7fe      	b.n	8004cac <main+0x15c>
 8004cae:	bf00      	nop
 8004cb0:	48000400 	.word	0x48000400
 8004cb4:	200004ec 	.word	0x200004ec
 8004cb8:	10110000 	.word	0x10110000
 8004cbc:	48000800 	.word	0x48000800
 8004cc0:	48000c00 	.word	0x48000c00
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	20000460 	.word	0x20000460
 8004ccc:	40008000 	.word	0x40008000
 8004cd0:	20000638 	.word	0x20000638
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	08006546 	.word	0x08006546

08004cdc <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_UART_RxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==LPUART1)
 8004ce0:	6802      	ldr	r2, [r0, #0]
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_UART_RxCpltCallback+0x10>)
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_RxCpltCallback+0xc>
	{
		print_PMS7003();
 8004ce8:	f7ff bdd0 	b.w	800488c <print_PMS7003>
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40008000 	.word	0x40008000

08004cf4 <HAL_TIM_PeriodElapsedCallback>:
//  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM16)
 8004cf4:	6802      	ldr	r2, [r0, #0]
 8004cf6:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d102      	bne.n	8004d02 <HAL_TIM_PeriodElapsedCallback+0xe>
	{
		write_PMS7003("Read");
 8004cfc:	4802      	ldr	r0, [pc, #8]	; (8004d08 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004cfe:	f7ff be3f 	b.w	8004980 <write_PMS7003>
 8004d02:	4770      	bx	lr
 8004d04:	40014400 	.word	0x40014400
 8004d08:	08006541 	.word	0x08006541

08004d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d0c:	4770      	bx	lr

08004d0e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d10:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d12:	2214      	movs	r2, #20
{
 8004d14:	b08b      	sub	sp, #44	; 0x2c
 8004d16:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d18:	2100      	movs	r1, #0
 8004d1a:	eb0d 0002 	add.w	r0, sp, r2
 8004d1e:	f000 fc37 	bl	8005590 <memset>
  if(huart->Instance==LPUART1)
 8004d22:	682b      	ldr	r3, [r5, #0]
 8004d24:	4a3d      	ldr	r2, [pc, #244]	; (8004e1c <HAL_UART_MspInit+0x10c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d156      	bne.n	8004dd8 <HAL_UART_MspInit+0xc8>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d2e:	483c      	ldr	r0, [pc, #240]	; (8004e20 <HAL_UART_MspInit+0x110>)
 8004d30:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004d32:	4c3c      	ldr	r4, [pc, #240]	; (8004e24 <HAL_UART_MspInit+0x114>)
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d3c:	f002 0201 	and.w	r2, r2, #1
 8004d40:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8004d42:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d46:	f042 0204 	orr.w	r2, r2, #4
 8004d4a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004d54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d56:	2303      	movs	r3, #3
 8004d58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d5e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004d60:	2308      	movs	r3, #8
 8004d62:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d64:	f7fb fdcc 	bl	8000900 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004d68:	482f      	ldr	r0, [pc, #188]	; (8004e28 <HAL_UART_MspInit+0x118>)
 8004d6a:	2310      	movs	r3, #16
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d6c:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004d6e:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d72:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d74:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004d76:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004d78:	4620      	mov	r0, r4
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d7a:	60a3      	str	r3, [r4, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d7c:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d7e:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d80:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004d82:	61e2      	str	r2, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d84:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004d86:	f7fb fcc9 	bl	800071c <HAL_DMA_Init>
 8004d8a:	b108      	cbz	r0, 8004d90 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8004d8c:	f7ff ffbe 	bl	8004d0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d90:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <HAL_UART_MspInit+0x11c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8004d92:	67ac      	str	r4, [r5, #120]	; 0x78
 8004d94:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8004d96:	4c26      	ldr	r4, [pc, #152]	; (8004e30 <HAL_UART_MspInit+0x120>)
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d98:	f04f 0c11 	mov.w	ip, #17
 8004d9c:	f04f 0e10 	mov.w	lr, #16
 8004da0:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004da4:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004da6:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004da8:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004daa:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dac:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dae:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004db0:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004db2:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004db4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004db6:	f7fb fcb1 	bl	800071c <HAL_DMA_Init>
 8004dba:	b108      	cbz	r0, 8004dc0 <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 8004dbc:	f7ff ffa6 	bl	8004d0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8004dc4:	676c      	str	r4, [r5, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004dc6:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8004dc8:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004dca:	f7fb fc27 	bl	800061c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004dce:	2025      	movs	r0, #37	; 0x25
 8004dd0:	f7fb fc58 	bl	8000684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004dd4:	b00b      	add	sp, #44	; 0x2c
 8004dd6:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART1)
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_UART_MspInit+0x124>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d1fa      	bne.n	8004dd4 <HAL_UART_MspInit+0xc4>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de2:	a905      	add	r1, sp, #20
 8004de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004de6:	4814      	ldr	r0, [pc, #80]	; (8004e38 <HAL_UART_MspInit+0x128>)
 8004de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dec:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004df0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004df4:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8004df6:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004df8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dfa:	f042 0202 	orr.w	r2, r2, #2
 8004dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004e08:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004e0a:	23c0      	movs	r3, #192	; 0xc0
 8004e0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e12:	2307      	movs	r3, #7
 8004e14:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e16:	f7fb fd73 	bl	8000900 <HAL_GPIO_Init>
}
 8004e1a:	e7db      	b.n	8004dd4 <HAL_UART_MspInit+0xc4>
 8004e1c:	40008000 	.word	0x40008000
 8004e20:	48000800 	.word	0x48000800
 8004e24:	200005d8 	.word	0x200005d8
 8004e28:	40020008 	.word	0x40020008
 8004e2c:	4002001c 	.word	0x4002001c
 8004e30:	20000578 	.word	0x20000578
 8004e34:	40013800 	.word	0x40013800
 8004e38:	48000400 	.word	0x48000400

08004e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e3c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_TIM_Base_MspInit+0x38>)
 8004e40:	6802      	ldr	r2, [r0, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d112      	bne.n	8004e6c <HAL_TIM_Base_MspInit+0x30>
  SET_BIT(RCC->APB2ENR, Periphs);
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 6, 0);
 8004e4a:	2019      	movs	r0, #25
 8004e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e52:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2106      	movs	r1, #6
  (void)tmpreg;
 8004e60:	9b01      	ldr	r3, [sp, #4]
 8004e62:	f7fb fbdb 	bl	800061c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004e66:	2019      	movs	r0, #25
 8004e68:	f7fb fc0c 	bl	8000684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004e6c:	b003      	add	sp, #12
 8004e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e72:	bf00      	nop
 8004e74:	40014400 	.word	0x40014400

08004e78 <NMI_Handler>:
 8004e78:	4770      	bx	lr

08004e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e7a:	e7fe      	b.n	8004e7a <HardFault_Handler>

08004e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e7c:	e7fe      	b.n	8004e7c <MemManage_Handler>

08004e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e7e:	e7fe      	b.n	8004e7e <BusFault_Handler>

08004e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e80:	e7fe      	b.n	8004e80 <UsageFault_Handler>

08004e82 <SVC_Handler>:
 8004e82:	4770      	bx	lr

08004e84 <DebugMon_Handler>:
 8004e84:	4770      	bx	lr

08004e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e86:	4770      	bx	lr

08004e88 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e88:	f7fb bb9e 	b.w	80005c8 <HAL_IncTick>

08004e8c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//	printf("rx dma\r\n");
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <DMA1_Channel1_IRQHandler+0x8>)
 8004e8e:	f7fb bcec 	b.w	800086a <HAL_DMA_IRQHandler>
 8004e92:	bf00      	nop
 8004e94:	200005d8 	.word	0x200005d8

08004e98 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <DMA1_Channel2_IRQHandler+0x8>)
 8004e9a:	f7fb bce6 	b.w	800086a <HAL_DMA_IRQHandler>
 8004e9e:	bf00      	nop
 8004ea0:	20000578 	.word	0x20000578

08004ea4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <USB_LP_IRQHandler+0x8>)
 8004ea6:	f7fb bf11 	b.w	8000ccc <HAL_PCD_IRQHandler>
 8004eaa:	bf00      	nop
 8004eac:	2000193c 	.word	0x2000193c

08004eb0 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8004eb2:	f7fd b927 	b.w	8002104 <HAL_TIM_IRQHandler>
 8004eb6:	bf00      	nop
 8004eb8:	20000638 	.word	0x20000638

08004ebc <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004ebc:	4801      	ldr	r0, [pc, #4]	; (8004ec4 <LPUART1_IRQHandler+0x8>)
 8004ebe:	f7fd bc93 	b.w	80027e8 <HAL_UART_IRQHandler>
 8004ec2:	bf00      	nop
 8004ec4:	20000460 	.word	0x20000460

08004ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	460e      	mov	r6, r1
 8004ecc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ece:	460c      	mov	r4, r1
 8004ed0:	1ba3      	subs	r3, r4, r6
 8004ed2:	429d      	cmp	r5, r3
 8004ed4:	dc01      	bgt.n	8004eda <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004eda:	f3af 8000 	nop.w
 8004ede:	f804 0b01 	strb.w	r0, [r4], #1
 8004ee2:	e7f5      	b.n	8004ed0 <_read+0x8>

08004ee4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004ee4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <_sbrk+0x2c>)
 8004ee8:	6819      	ldr	r1, [r3, #0]
{
 8004eea:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004eec:	b909      	cbnz	r1, 8004ef2 <_sbrk+0xe>
		heap_end = &end;
 8004eee:	4909      	ldr	r1, [pc, #36]	; (8004f14 <_sbrk+0x30>)
 8004ef0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004ef2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004ef4:	4669      	mov	r1, sp
 8004ef6:	4402      	add	r2, r0
 8004ef8:	428a      	cmp	r2, r1
 8004efa:	d906      	bls.n	8004f0a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004efc:	f000 fb1e 	bl	800553c <__errno>
 8004f00:	230c      	movs	r3, #12
 8004f02:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004f0a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004f0c:	bd08      	pop	{r3, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000210 	.word	0x20000210
 8004f14:	20001db8 	.word	0x20001db8

08004f18 <_close>:

int _close(int file)
{
	return -1;
}
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	4770      	bx	lr

08004f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f22:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004f24:	2000      	movs	r0, #0
 8004f26:	4770      	bx	lr

08004f28 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004f28:	2001      	movs	r0, #1
 8004f2a:	4770      	bx	lr

08004f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	4770      	bx	lr

08004f30 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <SystemInit+0x60>)
 8004f32:	2100      	movs	r1, #0
 8004f34:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004f36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f3a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004f46:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8004f52:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004f56:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8004f5e:	4462      	add	r2, ip
 8004f60:	4002      	ands	r2, r0
 8004f62:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004f64:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004f68:	f022 0205 	bic.w	r2, r2, #5
 8004f6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004f70:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004f7c:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <SystemInit+0x64>)
 8004f7e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004f80:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f88:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f8a:	6199      	str	r1, [r3, #24]
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000ed00 	.word	0xe000ed00
 8004f94:	22041000 	.word	0x22041000

08004f98 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f9c:	4924      	ldr	r1, [pc, #144]	; (8005030 <SystemCoreClockUpdate+0x98>)
 8004f9e:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa0:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004fa2:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa6:	f000 000c 	and.w	r0, r0, #12
{
 8004faa:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004fac:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4a20      	ldr	r2, [pc, #128]	; (8005034 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb4:	280c      	cmp	r0, #12
 8004fb6:	d839      	bhi.n	800502c <SystemCoreClockUpdate+0x94>
 8004fb8:	e8df f000 	tbb	[pc, r0]
 8004fbc:	38383838 	.word	0x38383838
 8004fc0:	38383807 	.word	0x38383807
 8004fc4:	38383816 	.word	0x38383816
 8004fc8:	18          	.byte	0x18
 8004fc9:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8004fcc:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8004fd2:	481a      	ldr	r0, [pc, #104]	; (800503c <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004fd4:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8004fd6:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004fd8:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8004fdc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <SystemCoreClockUpdate+0xa8>)
 8004fea:	e7ef      	b.n	8004fcc <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004fec:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004fee:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004ff0:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004ff4:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004ff8:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004ffa:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004ffe:	d10e      	bne.n	800501e <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8005000:	490d      	ldr	r1, [pc, #52]	; (8005038 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 8005002:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800500a:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800500c:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800500e:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005012:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005014:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005016:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8005018:	fbb3 f3f1 	udiv	r3, r3, r1
 800501c:	e7d6      	b.n	8004fcc <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800501e:	2803      	cmp	r0, #3
 8005020:	d101      	bne.n	8005026 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 8005022:	4907      	ldr	r1, [pc, #28]	; (8005040 <SystemCoreClockUpdate+0xa8>)
 8005024:	e7ed      	b.n	8005002 <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8005026:	fbb4 f3f3 	udiv	r3, r4, r3
 800502a:	e7ec      	b.n	8005006 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 800502c:	6014      	str	r4, [r2, #0]
      break;
 800502e:	e7ce      	b.n	8004fce <SystemCoreClockUpdate+0x36>
 8005030:	080065c4 	.word	0x080065c4
 8005034:	20000124 	.word	0x20000124
 8005038:	00f42400 	.word	0x00f42400
 800503c:	08006564 	.word	0x08006564
 8005040:	01e84800 	.word	0x01e84800

08005044 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8005044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8005046:	2200      	movs	r2, #0
 8005048:	490e      	ldr	r1, [pc, #56]	; (8005084 <MX_USB_Device_Init+0x40>)
 800504a:	480f      	ldr	r0, [pc, #60]	; (8005088 <MX_USB_Device_Init+0x44>)
 800504c:	f7ff f871 	bl	8004132 <USBD_Init>
 8005050:	b108      	cbz	r0, 8005056 <MX_USB_Device_Init+0x12>
    Error_Handler();
 8005052:	f7ff fe5b 	bl	8004d0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8005056:	490d      	ldr	r1, [pc, #52]	; (800508c <MX_USB_Device_Init+0x48>)
 8005058:	480b      	ldr	r0, [pc, #44]	; (8005088 <MX_USB_Device_Init+0x44>)
 800505a:	f7ff f87f 	bl	800415c <USBD_RegisterClass>
 800505e:	b108      	cbz	r0, 8005064 <MX_USB_Device_Init+0x20>
    Error_Handler();
 8005060:	f7ff fe54 	bl	8004d0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8005064:	490a      	ldr	r1, [pc, #40]	; (8005090 <MX_USB_Device_Init+0x4c>)
 8005066:	4808      	ldr	r0, [pc, #32]	; (8005088 <MX_USB_Device_Init+0x44>)
 8005068:	f7ff f83b 	bl	80040e2 <USBD_CDC_RegisterInterface>
 800506c:	b108      	cbz	r0, 8005072 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800506e:	f7ff fe4d 	bl	8004d0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8005072:	4805      	ldr	r0, [pc, #20]	; (8005088 <MX_USB_Device_Init+0x44>)
 8005074:	f7ff f879 	bl	800416a <USBD_Start>
 8005078:	b118      	cbz	r0, 8005082 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800507a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800507e:	f7ff be45 	b.w	8004d0c <Error_Handler>
 8005082:	bd08      	pop	{r3, pc}
 8005084:	20000138 	.word	0x20000138
 8005088:	20000678 	.word	0x20000678
 800508c:	2000000c 	.word	0x2000000c
 8005090:	20000128 	.word	0x20000128

08005094 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005094:	2000      	movs	r0, #0
 8005096:	4770      	bx	lr

08005098 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005098:	2000      	movs	r0, #0
 800509a:	4770      	bx	lr

0800509c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800509c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800509e:	4c05      	ldr	r4, [pc, #20]	; (80050b4 <CDC_Receive_FS+0x18>)
 80050a0:	4601      	mov	r1, r0
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7ff f82c 	bl	8004100 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7ff f82f 	bl	800410c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80050ae:	2000      	movs	r0, #0
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	bf00      	nop
 80050b4:	20000678 	.word	0x20000678

080050b8 <CDC_Init_FS>:
{
 80050b8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80050ba:	4c06      	ldr	r4, [pc, #24]	; (80050d4 <CDC_Init_FS+0x1c>)
 80050bc:	4906      	ldr	r1, [pc, #24]	; (80050d8 <CDC_Init_FS+0x20>)
 80050be:	2200      	movs	r2, #0
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7ff f815 	bl	80040f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80050c6:	4905      	ldr	r1, [pc, #20]	; (80050dc <CDC_Init_FS+0x24>)
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7ff f819 	bl	8004100 <USBD_CDC_SetRxBuffer>
}
 80050ce:	2000      	movs	r0, #0
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	bf00      	nop
 80050d4:	20000678 	.word	0x20000678
 80050d8:	2000113c 	.word	0x2000113c
 80050dc:	2000093c 	.word	0x2000093c

080050e0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e6:	2214      	movs	r2, #20
 80050e8:	2100      	movs	r1, #0
 80050ea:	a803      	add	r0, sp, #12
 80050ec:	f000 fa50 	bl	8005590 <memset>
  if(pcdHandle->Instance==USB)
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <HAL_PCD_MspInit+0x6c>)
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d127      	bne.n	8005148 <HAL_PCD_MspInit+0x68>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80050f8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fc:	a903      	add	r1, sp, #12
 80050fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005106:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800510e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005110:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005114:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005116:	2302      	movs	r3, #2
 8005118:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800511a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800511e:	230a      	movs	r3, #10
 8005120:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005122:	f7fb fbed 	bl	8000900 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005128:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800512c:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800512e:	6da3      	ldr	r3, [r4, #88]	; 0x58

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005130:	2200      	movs	r2, #0
 8005132:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	2014      	movs	r0, #20
 800513a:	4611      	mov	r1, r2
  (void)tmpreg;
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	f7fb fa6d 	bl	800061c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8005142:	2014      	movs	r0, #20
 8005144:	f7fb fa9e 	bl	8000684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005148:	b008      	add	sp, #32
 800514a:	bd10      	pop	{r4, pc}
 800514c:	40006800 	.word	0x40006800

08005150 <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8005150:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8005154:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005158:	f7ff b81e 	b.w	8004198 <USBD_LL_SetupStage>

0800515c <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800515c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005160:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005164:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8005168:	f7ff b843 	b.w	80041f2 <USBD_LL_DataOutStage>

0800516c <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800516c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005170:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005176:	f7ff b876 	b.w	8004266 <USBD_LL_DataInStage>

0800517a <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800517a:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 800517e:	f7ff b90b 	b.w	8004398 <USBD_LL_SOF>

08005182 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005182:	6883      	ldr	r3, [r0, #8]
 8005184:	2b02      	cmp	r3, #2
{ 
 8005186:	b510      	push	{r4, lr}
 8005188:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800518a:	d001      	beq.n	8005190 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800518c:	f7ff fdbe 	bl	8004d0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005190:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
 8005194:	2101      	movs	r1, #1
 8005196:	f7ff f8e9 	bl	800436c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800519a:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800519e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80051a2:	f7ff b8bc 	b.w	800431e <USBD_LL_Reset>
	...

080051a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80051a8:	b510      	push	{r4, lr}
 80051aa:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80051ac:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 80051b0:	f7ff f8df 	bl	8004372 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80051b4:	69a3      	ldr	r3, [r4, #24]
 80051b6:	b123      	cbz	r3, 80051c2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80051b8:	4a02      	ldr	r2, [pc, #8]	; (80051c4 <HAL_PCD_SuspendCallback+0x1c>)
 80051ba:	6913      	ldr	r3, [r2, #16]
 80051bc:	f043 0306 	orr.w	r3, r3, #6
 80051c0:	6113      	str	r3, [r2, #16]
 80051c2:	bd10      	pop	{r4, pc}
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80051c8:	6983      	ldr	r3, [r0, #24]
{
 80051ca:	b510      	push	{r4, lr}
 80051cc:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80051ce:	b133      	cbz	r3, 80051de <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80051d0:	4a06      	ldr	r2, [pc, #24]	; (80051ec <HAL_PCD_ResumeCallback+0x24>)
 80051d2:	6913      	ldr	r3, [r2, #16]
 80051d4:	f023 0306 	bic.w	r3, r3, #6
 80051d8:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80051da:	f7ff fc43 	bl	8004a64 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80051de:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 80051e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80051e6:	f7ff b8cd 	b.w	8004384 <USBD_LL_Resume>
 80051ea:	bf00      	nop
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <USBD_LL_Init>:
{
 80051f0:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 80051f2:	4c20      	ldr	r4, [pc, #128]	; (8005274 <USBD_LL_Init+0x84>)
  pdev->pData = &hpcd_USB_FS;
 80051f4:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
{
 80051f8:	4605      	mov	r5, r0
  hpcd_USB_FS.pData = pdev;
 80051fa:	f8c4 0270 	str.w	r0, [r4, #624]	; 0x270
  HAL_PWREx_EnableVddUSB();
 80051fe:	f7fc f863 	bl	80012c8 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005202:	481d      	ldr	r0, [pc, #116]	; (8005278 <USBD_LL_Init+0x88>)
 8005204:	2308      	movs	r3, #8
 8005206:	e884 0009 	stmia.w	r4, {r0, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800520a:	2302      	movs	r3, #2
 800520c:	60a3      	str	r3, [r4, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800520e:	6123      	str	r3, [r4, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005210:	4620      	mov	r0, r4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8005212:	2300      	movs	r3, #0
 8005214:	6163      	str	r3, [r4, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005216:	61a3      	str	r3, [r4, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005218:	61e3      	str	r3, [r4, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800521a:	6223      	str	r3, [r4, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800521c:	f7fb fc35 	bl	8000a8a <HAL_PCD_Init>
 8005220:	b108      	cbz	r0, 8005226 <USBD_LL_Init+0x36>
    Error_Handler( );
 8005222:	f7ff fd73 	bl	8004d0c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005226:	2200      	movs	r2, #0
 8005228:	4611      	mov	r1, r2
 800522a:	2318      	movs	r3, #24
 800522c:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8005230:	f7fc f80b 	bl	800124a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005234:	2358      	movs	r3, #88	; 0x58
 8005236:	2200      	movs	r2, #0
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800523e:	f7fc f804 	bl	800124a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005242:	23c0      	movs	r3, #192	; 0xc0
 8005244:	2200      	movs	r2, #0
 8005246:	2181      	movs	r1, #129	; 0x81
 8005248:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800524c:	f7fb fffd 	bl	800124a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005250:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005254:	2200      	movs	r2, #0
 8005256:	2101      	movs	r1, #1
 8005258:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800525c:	f7fb fff5 	bl	800124a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005264:	2200      	movs	r2, #0
 8005266:	2182      	movs	r1, #130	; 0x82
 8005268:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800526c:	f7fb ffed 	bl	800124a <HAL_PCDEx_PMAConfig>
}
 8005270:	2000      	movs	r0, #0
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	2000193c 	.word	0x2000193c
 8005278:	40006800 	.word	0x40006800

0800527c <USBD_LL_Start>:
{
 800527c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800527e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005282:	f7fb fc62 	bl	8000b4a <HAL_PCD_Start>
 8005286:	2803      	cmp	r0, #3
 8005288:	bf9a      	itte	ls
 800528a:	4b02      	ldrls	r3, [pc, #8]	; (8005294 <USBD_LL_Start+0x18>)
 800528c:	5c18      	ldrbls	r0, [r3, r0]
 800528e:	2002      	movhi	r0, #2
}
 8005290:	bd08      	pop	{r3, pc}
 8005292:	bf00      	nop
 8005294:	08006604 	.word	0x08006604

08005298 <USBD_LL_OpenEP>:
{
 8005298:	b510      	push	{r4, lr}
 800529a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800529c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052a0:	4613      	mov	r3, r2
 80052a2:	4622      	mov	r2, r4
 80052a4:	f7fb fc7a 	bl	8000b9c <HAL_PCD_EP_Open>
 80052a8:	2803      	cmp	r0, #3
 80052aa:	bf9a      	itte	ls
 80052ac:	4b01      	ldrls	r3, [pc, #4]	; (80052b4 <USBD_LL_OpenEP+0x1c>)
 80052ae:	5c18      	ldrbls	r0, [r3, r0]
 80052b0:	2002      	movhi	r0, #2
}
 80052b2:	bd10      	pop	{r4, pc}
 80052b4:	08006604 	.word	0x08006604

080052b8 <USBD_LL_CloseEP>:
{
 80052b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80052ba:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052be:	f7fb fca2 	bl	8000c06 <HAL_PCD_EP_Close>
 80052c2:	2803      	cmp	r0, #3
 80052c4:	bf9a      	itte	ls
 80052c6:	4b02      	ldrls	r3, [pc, #8]	; (80052d0 <USBD_LL_CloseEP+0x18>)
 80052c8:	5c18      	ldrbls	r0, [r3, r0]
 80052ca:	2002      	movhi	r0, #2
}
 80052cc:	bd08      	pop	{r3, pc}
 80052ce:	bf00      	nop
 80052d0:	08006604 	.word	0x08006604

080052d4 <USBD_LL_StallEP>:
{
 80052d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80052d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052da:	f7fb ff47 	bl	800116c <HAL_PCD_EP_SetStall>
 80052de:	2803      	cmp	r0, #3
 80052e0:	bf9a      	itte	ls
 80052e2:	4b02      	ldrls	r3, [pc, #8]	; (80052ec <USBD_LL_StallEP+0x18>)
 80052e4:	5c18      	ldrbls	r0, [r3, r0]
 80052e6:	2002      	movhi	r0, #2
}
 80052e8:	bd08      	pop	{r3, pc}
 80052ea:	bf00      	nop
 80052ec:	08006604 	.word	0x08006604

080052f0 <USBD_LL_ClearStallEP>:
{
 80052f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80052f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80052f6:	f7fb ff72 	bl	80011de <HAL_PCD_EP_ClrStall>
 80052fa:	2803      	cmp	r0, #3
 80052fc:	bf9a      	itte	ls
 80052fe:	4b02      	ldrls	r3, [pc, #8]	; (8005308 <USBD_LL_ClearStallEP+0x18>)
 8005300:	5c18      	ldrbls	r0, [r3, r0]
 8005302:	2002      	movhi	r0, #2
}
 8005304:	bd08      	pop	{r3, pc}
 8005306:	bf00      	nop
 8005308:	08006604 	.word	0x08006604

0800530c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800530c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800530e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005312:	bf45      	ittet	mi
 8005314:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8005318:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800531c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005320:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005324:	bf58      	it	pl
 8005326:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
}
 800532a:	4770      	bx	lr

0800532c <USBD_LL_SetUSBAddress>:
{
 800532c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800532e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005332:	f7fb fc1f 	bl	8000b74 <HAL_PCD_SetAddress>
 8005336:	2803      	cmp	r0, #3
 8005338:	bf9a      	itte	ls
 800533a:	4b02      	ldrls	r3, [pc, #8]	; (8005344 <USBD_LL_SetUSBAddress+0x18>)
 800533c:	5c18      	ldrbls	r0, [r3, r0]
 800533e:	2002      	movhi	r0, #2
}
 8005340:	bd08      	pop	{r3, pc}
 8005342:	bf00      	nop
 8005344:	08006604 	.word	0x08006604

08005348 <USBD_LL_Transmit>:
{
 8005348:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800534a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800534e:	f7fb fca5 	bl	8000c9c <HAL_PCD_EP_Transmit>
 8005352:	2803      	cmp	r0, #3
 8005354:	bf9a      	itte	ls
 8005356:	4b02      	ldrls	r3, [pc, #8]	; (8005360 <USBD_LL_Transmit+0x18>)
 8005358:	5c18      	ldrbls	r0, [r3, r0]
 800535a:	2002      	movhi	r0, #2
}
 800535c:	bd08      	pop	{r3, pc}
 800535e:	bf00      	nop
 8005360:	08006604 	.word	0x08006604

08005364 <USBD_LL_PrepareReceive>:
{
 8005364:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005366:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800536a:	f7fb fc77 	bl	8000c5c <HAL_PCD_EP_Receive>
 800536e:	2803      	cmp	r0, #3
 8005370:	bf9a      	itte	ls
 8005372:	4b02      	ldrls	r3, [pc, #8]	; (800537c <USBD_LL_PrepareReceive+0x18>)
 8005374:	5c18      	ldrbls	r0, [r3, r0]
 8005376:	2002      	movhi	r0, #2
}
 8005378:	bd08      	pop	{r3, pc}
 800537a:	bf00      	nop
 800537c:	08006604 	.word	0x08006604

08005380 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005380:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005384:	f7fb bc83 	b.w	8000c8e <HAL_PCD_EP_GetRxCount>

08005388 <HAL_PCDEx_LPM_Callback>:
{
 8005388:	b510      	push	{r4, lr}
 800538a:	4604      	mov	r4, r0
  switch (msg)
 800538c:	b111      	cbz	r1, 8005394 <HAL_PCDEx_LPM_Callback+0xc>
 800538e:	2901      	cmp	r1, #1
 8005390:	d00f      	beq.n	80053b2 <HAL_PCDEx_LPM_Callback+0x2a>
 8005392:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8005394:	6983      	ldr	r3, [r0, #24]
 8005396:	b133      	cbz	r3, 80053a6 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8005398:	f7ff fb64 	bl	8004a64 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800539c:	4a0b      	ldr	r2, [pc, #44]	; (80053cc <HAL_PCDEx_LPM_Callback+0x44>)
 800539e:	6913      	ldr	r3, [r2, #16]
 80053a0:	f023 0306 	bic.w	r3, r3, #6
 80053a4:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80053a6:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 80053aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 80053ae:	f7fe bfe9 	b.w	8004384 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 80053b2:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 80053b6:	f7fe ffdc 	bl	8004372 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80053ba:	69a3      	ldr	r3, [r4, #24]
 80053bc:	b123      	cbz	r3, 80053c8 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80053be:	4a03      	ldr	r2, [pc, #12]	; (80053cc <HAL_PCDEx_LPM_Callback+0x44>)
 80053c0:	6913      	ldr	r3, [r2, #16]
 80053c2:	f043 0306 	orr.w	r3, r3, #6
 80053c6:	6113      	str	r3, [r2, #16]
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	e000ed00 	.word	0xe000ed00

080053d0 <USBD_static_malloc>:
}
 80053d0:	4800      	ldr	r0, [pc, #0]	; (80053d4 <USBD_static_malloc+0x4>)
 80053d2:	4770      	bx	lr
 80053d4:	20000214 	.word	0x20000214

080053d8 <USBD_static_free>:
{
 80053d8:	4770      	bx	lr
	...

080053dc <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80053dc:	2312      	movs	r3, #18
 80053de:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 80053e0:	4800      	ldr	r0, [pc, #0]	; (80053e4 <USBD_CDC_DeviceDescriptor+0x8>)
 80053e2:	4770      	bx	lr
 80053e4:	20000158 	.word	0x20000158

080053e8 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80053e8:	2304      	movs	r3, #4
 80053ea:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80053ec:	4800      	ldr	r0, [pc, #0]	; (80053f0 <USBD_CDC_LangIDStrDescriptor+0x8>)
 80053ee:	4770      	bx	lr
 80053f0:	2000016c 	.word	0x2000016c

080053f4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80053f4:	2300      	movs	r3, #0
{
 80053f6:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80053f8:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 80053fa:	b2dc      	uxtb	r4, r3
 80053fc:	42a2      	cmp	r2, r4
 80053fe:	d800      	bhi.n	8005402 <IntToUnicode+0xe>
  }
}
 8005400:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8005402:	0f04      	lsrs	r4, r0, #28
 8005404:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8005406:	bf94      	ite	ls
 8005408:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800540a:	3437      	addhi	r4, #55	; 0x37
 800540c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005410:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8005414:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8005416:	7065      	strb	r5, [r4, #1]
 8005418:	3301      	adds	r3, #1
 800541a:	e7ee      	b.n	80053fa <IntToUnicode+0x6>

0800541c <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800541c:	231a      	movs	r3, #26
{
 800541e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005420:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005422:	4b09      	ldr	r3, [pc, #36]	; (8005448 <USBD_CDC_SerialStrDescriptor+0x2c>)
 8005424:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005426:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8005428:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800542a:	18c0      	adds	r0, r0, r3
 800542c:	d00a      	beq.n	8005444 <USBD_CDC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <USBD_CDC_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005430:	4907      	ldr	r1, [pc, #28]	; (8005450 <USBD_CDC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005432:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005434:	2208      	movs	r2, #8
 8005436:	f7ff ffdd 	bl	80053f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800543a:	2204      	movs	r2, #4
 800543c:	4905      	ldr	r1, [pc, #20]	; (8005454 <USBD_CDC_SerialStrDescriptor+0x38>)
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff ffd8 	bl	80053f4 <IntToUnicode>
}
 8005444:	4804      	ldr	r0, [pc, #16]	; (8005458 <USBD_CDC_SerialStrDescriptor+0x3c>)
 8005446:	bd10      	pop	{r4, pc}
 8005448:	1fff7590 	.word	0x1fff7590
 800544c:	1fff7594 	.word	0x1fff7594
 8005450:	20000172 	.word	0x20000172
 8005454:	20000182 	.word	0x20000182
 8005458:	20000170 	.word	0x20000170

0800545c <USBD_CDC_ManufacturerStrDescriptor>:
{
 800545c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800545e:	4c04      	ldr	r4, [pc, #16]	; (8005470 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8005460:	4804      	ldr	r0, [pc, #16]	; (8005474 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 8005462:	460a      	mov	r2, r1
 8005464:	4621      	mov	r1, r4
 8005466:	f7ff f9a7 	bl	80047b8 <USBD_GetString>
}
 800546a:	4620      	mov	r0, r4
 800546c:	bd10      	pop	{r4, pc}
 800546e:	bf00      	nop
 8005470:	20001bb0 	.word	0x20001bb0
 8005474:	08006621 	.word	0x08006621

08005478 <USBD_CDC_ProductStrDescriptor>:
{
 8005478:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800547a:	4c04      	ldr	r4, [pc, #16]	; (800548c <USBD_CDC_ProductStrDescriptor+0x14>)
 800547c:	4804      	ldr	r0, [pc, #16]	; (8005490 <USBD_CDC_ProductStrDescriptor+0x18>)
 800547e:	460a      	mov	r2, r1
 8005480:	4621      	mov	r1, r4
 8005482:	f7ff f999 	bl	80047b8 <USBD_GetString>
}
 8005486:	4620      	mov	r0, r4
 8005488:	bd10      	pop	{r4, pc}
 800548a:	bf00      	nop
 800548c:	20001bb0 	.word	0x20001bb0
 8005490:	08006634 	.word	0x08006634

08005494 <USBD_CDC_ConfigStrDescriptor>:
{
 8005494:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005496:	4c04      	ldr	r4, [pc, #16]	; (80054a8 <USBD_CDC_ConfigStrDescriptor+0x14>)
 8005498:	4804      	ldr	r0, [pc, #16]	; (80054ac <USBD_CDC_ConfigStrDescriptor+0x18>)
 800549a:	460a      	mov	r2, r1
 800549c:	4621      	mov	r1, r4
 800549e:	f7ff f98b 	bl	80047b8 <USBD_GetString>
}
 80054a2:	4620      	mov	r0, r4
 80054a4:	bd10      	pop	{r4, pc}
 80054a6:	bf00      	nop
 80054a8:	20001bb0 	.word	0x20001bb0
 80054ac:	08006608 	.word	0x08006608

080054b0 <USBD_CDC_InterfaceStrDescriptor>:
{
 80054b0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80054b2:	4c04      	ldr	r4, [pc, #16]	; (80054c4 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 80054b4:	4804      	ldr	r0, [pc, #16]	; (80054c8 <USBD_CDC_InterfaceStrDescriptor+0x18>)
 80054b6:	460a      	mov	r2, r1
 80054b8:	4621      	mov	r1, r4
 80054ba:	f7ff f97d 	bl	80047b8 <USBD_GetString>
}
 80054be:	4620      	mov	r0, r4
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	bf00      	nop
 80054c4:	20001bb0 	.word	0x20001bb0
 80054c8:	08006613 	.word	0x08006613

080054cc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80054cc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054ce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054d0:	3304      	adds	r3, #4

080054d2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054d2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054d4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80054d6:	d3f9      	bcc.n	80054cc <CopyDataInit>
  bx lr
 80054d8:	4770      	bx	lr

080054da <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80054da:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80054dc:	3004      	adds	r0, #4

080054de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80054de:	4288      	cmp	r0, r1
  bcc FillZerobss
 80054e0:	d3fb      	bcc.n	80054da <FillZerobss>
  bx lr
 80054e2:	4770      	bx	lr

080054e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80054e4:	480c      	ldr	r0, [pc, #48]	; (8005518 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80054e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80054e8:	480c      	ldr	r0, [pc, #48]	; (800551c <LoopForever+0x8>)
 80054ea:	490d      	ldr	r1, [pc, #52]	; (8005520 <LoopForever+0xc>)
 80054ec:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <LoopForever+0x10>)
 80054ee:	2300      	movs	r3, #0
 80054f0:	f7ff ffef 	bl	80054d2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80054f4:	480c      	ldr	r0, [pc, #48]	; (8005528 <LoopForever+0x14>)
 80054f6:	490d      	ldr	r1, [pc, #52]	; (800552c <LoopForever+0x18>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	f7ff fff0 	bl	80054de <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80054fe:	480c      	ldr	r0, [pc, #48]	; (8005530 <LoopForever+0x1c>)
 8005500:	490c      	ldr	r1, [pc, #48]	; (8005534 <LoopForever+0x20>)
 8005502:	2300      	movs	r3, #0
 8005504:	f7ff ffeb 	bl	80054de <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005508:	f7ff fd12 	bl	8004f30 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800550c:	f000 f81c 	bl	8005548 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005510:	f7ff fb1e 	bl	8004b50 <main>

08005514 <LoopForever>:

LoopForever:
  b LoopForever
 8005514:	e7fe      	b.n	8005514 <LoopForever>
 8005516:	0000      	.short	0x0000
  ldr   r0, =_estack
 8005518:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800551c:	20000004 	.word	0x20000004
 8005520:	200001f0 	.word	0x200001f0
 8005524:	080066f4 	.word	0x080066f4
  INIT_BSS _sbss, _ebss
 8005528:	200001f0 	.word	0x200001f0
 800552c:	20001db4 	.word	0x20001db4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005530:	20030000 	.word	0x20030000
 8005534:	20030000 	.word	0x20030000

08005538 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005538:	e7fe      	b.n	8005538 <ADC1_IRQHandler>
	...

0800553c <__errno>:
 800553c:	4b01      	ldr	r3, [pc, #4]	; (8005544 <__errno+0x8>)
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	2000018c 	.word	0x2000018c

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4e0d      	ldr	r6, [pc, #52]	; (8005580 <__libc_init_array+0x38>)
 800554c:	4c0d      	ldr	r4, [pc, #52]	; (8005584 <__libc_init_array+0x3c>)
 800554e:	1ba4      	subs	r4, r4, r6
 8005550:	10a4      	asrs	r4, r4, #2
 8005552:	2500      	movs	r5, #0
 8005554:	42a5      	cmp	r5, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	4e0b      	ldr	r6, [pc, #44]	; (8005588 <__libc_init_array+0x40>)
 800555a:	4c0c      	ldr	r4, [pc, #48]	; (800558c <__libc_init_array+0x44>)
 800555c:	f000 ff7c 	bl	8006458 <_init>
 8005560:	1ba4      	subs	r4, r4, r6
 8005562:	10a4      	asrs	r4, r4, #2
 8005564:	2500      	movs	r5, #0
 8005566:	42a5      	cmp	r5, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005570:	4798      	blx	r3
 8005572:	3501      	adds	r5, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800557a:	4798      	blx	r3
 800557c:	3501      	adds	r5, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	080066ec 	.word	0x080066ec
 8005584:	080066ec 	.word	0x080066ec
 8005588:	080066ec 	.word	0x080066ec
 800558c:	080066f0 	.word	0x080066f0

08005590 <memset>:
 8005590:	4402      	add	r2, r0
 8005592:	4603      	mov	r3, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	d100      	bne.n	800559a <memset+0xa>
 8005598:	4770      	bx	lr
 800559a:	f803 1b01 	strb.w	r1, [r3], #1
 800559e:	e7f9      	b.n	8005594 <memset+0x4>

080055a0 <iprintf>:
 80055a0:	b40f      	push	{r0, r1, r2, r3}
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <iprintf+0x2c>)
 80055a4:	b513      	push	{r0, r1, r4, lr}
 80055a6:	681c      	ldr	r4, [r3, #0]
 80055a8:	b124      	cbz	r4, 80055b4 <iprintf+0x14>
 80055aa:	69a3      	ldr	r3, [r4, #24]
 80055ac:	b913      	cbnz	r3, 80055b4 <iprintf+0x14>
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 fa24 	bl	80059fc <__sinit>
 80055b4:	ab05      	add	r3, sp, #20
 80055b6:	9a04      	ldr	r2, [sp, #16]
 80055b8:	68a1      	ldr	r1, [r4, #8]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fbe1 	bl	8005d84 <_vfiprintf_r>
 80055c2:	b002      	add	sp, #8
 80055c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c8:	b004      	add	sp, #16
 80055ca:	4770      	bx	lr
 80055cc:	2000018c 	.word	0x2000018c

080055d0 <_puts_r>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	460e      	mov	r6, r1
 80055d4:	4605      	mov	r5, r0
 80055d6:	b118      	cbz	r0, 80055e0 <_puts_r+0x10>
 80055d8:	6983      	ldr	r3, [r0, #24]
 80055da:	b90b      	cbnz	r3, 80055e0 <_puts_r+0x10>
 80055dc:	f000 fa0e 	bl	80059fc <__sinit>
 80055e0:	69ab      	ldr	r3, [r5, #24]
 80055e2:	68ac      	ldr	r4, [r5, #8]
 80055e4:	b913      	cbnz	r3, 80055ec <_puts_r+0x1c>
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 fa08 	bl	80059fc <__sinit>
 80055ec:	4b23      	ldr	r3, [pc, #140]	; (800567c <_puts_r+0xac>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d117      	bne.n	8005622 <_puts_r+0x52>
 80055f2:	686c      	ldr	r4, [r5, #4]
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	071b      	lsls	r3, r3, #28
 80055f8:	d51d      	bpl.n	8005636 <_puts_r+0x66>
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	b1db      	cbz	r3, 8005636 <_puts_r+0x66>
 80055fe:	3e01      	subs	r6, #1
 8005600:	68a3      	ldr	r3, [r4, #8]
 8005602:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005606:	3b01      	subs	r3, #1
 8005608:	60a3      	str	r3, [r4, #8]
 800560a:	b9e9      	cbnz	r1, 8005648 <_puts_r+0x78>
 800560c:	2b00      	cmp	r3, #0
 800560e:	da2e      	bge.n	800566e <_puts_r+0x9e>
 8005610:	4622      	mov	r2, r4
 8005612:	210a      	movs	r1, #10
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f83f 	bl	8005698 <__swbuf_r>
 800561a:	3001      	adds	r0, #1
 800561c:	d011      	beq.n	8005642 <_puts_r+0x72>
 800561e:	200a      	movs	r0, #10
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <_puts_r+0xb0>)
 8005624:	429c      	cmp	r4, r3
 8005626:	d101      	bne.n	800562c <_puts_r+0x5c>
 8005628:	68ac      	ldr	r4, [r5, #8]
 800562a:	e7e3      	b.n	80055f4 <_puts_r+0x24>
 800562c:	4b15      	ldr	r3, [pc, #84]	; (8005684 <_puts_r+0xb4>)
 800562e:	429c      	cmp	r4, r3
 8005630:	bf08      	it	eq
 8005632:	68ec      	ldreq	r4, [r5, #12]
 8005634:	e7de      	b.n	80055f4 <_puts_r+0x24>
 8005636:	4621      	mov	r1, r4
 8005638:	4628      	mov	r0, r5
 800563a:	f000 f87f 	bl	800573c <__swsetup_r>
 800563e:	2800      	cmp	r0, #0
 8005640:	d0dd      	beq.n	80055fe <_puts_r+0x2e>
 8005642:	f04f 30ff 	mov.w	r0, #4294967295
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	2b00      	cmp	r3, #0
 800564a:	da04      	bge.n	8005656 <_puts_r+0x86>
 800564c:	69a2      	ldr	r2, [r4, #24]
 800564e:	4293      	cmp	r3, r2
 8005650:	db06      	blt.n	8005660 <_puts_r+0x90>
 8005652:	290a      	cmp	r1, #10
 8005654:	d004      	beq.n	8005660 <_puts_r+0x90>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	6022      	str	r2, [r4, #0]
 800565c:	7019      	strb	r1, [r3, #0]
 800565e:	e7cf      	b.n	8005600 <_puts_r+0x30>
 8005660:	4622      	mov	r2, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f000 f818 	bl	8005698 <__swbuf_r>
 8005668:	3001      	adds	r0, #1
 800566a:	d1c9      	bne.n	8005600 <_puts_r+0x30>
 800566c:	e7e9      	b.n	8005642 <_puts_r+0x72>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	200a      	movs	r0, #10
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	7018      	strb	r0, [r3, #0]
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	bf00      	nop
 800567c:	08006670 	.word	0x08006670
 8005680:	08006690 	.word	0x08006690
 8005684:	08006650 	.word	0x08006650

08005688 <puts>:
 8005688:	4b02      	ldr	r3, [pc, #8]	; (8005694 <puts+0xc>)
 800568a:	4601      	mov	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f7ff bf9f 	b.w	80055d0 <_puts_r>
 8005692:	bf00      	nop
 8005694:	2000018c 	.word	0x2000018c

08005698 <__swbuf_r>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	460e      	mov	r6, r1
 800569c:	4614      	mov	r4, r2
 800569e:	4605      	mov	r5, r0
 80056a0:	b118      	cbz	r0, 80056aa <__swbuf_r+0x12>
 80056a2:	6983      	ldr	r3, [r0, #24]
 80056a4:	b90b      	cbnz	r3, 80056aa <__swbuf_r+0x12>
 80056a6:	f000 f9a9 	bl	80059fc <__sinit>
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <__swbuf_r+0x98>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	d12a      	bne.n	8005706 <__swbuf_r+0x6e>
 80056b0:	686c      	ldr	r4, [r5, #4]
 80056b2:	69a3      	ldr	r3, [r4, #24]
 80056b4:	60a3      	str	r3, [r4, #8]
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	071a      	lsls	r2, r3, #28
 80056ba:	d52e      	bpl.n	800571a <__swbuf_r+0x82>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	b363      	cbz	r3, 800571a <__swbuf_r+0x82>
 80056c0:	6923      	ldr	r3, [r4, #16]
 80056c2:	6820      	ldr	r0, [r4, #0]
 80056c4:	1ac0      	subs	r0, r0, r3
 80056c6:	6963      	ldr	r3, [r4, #20]
 80056c8:	b2f6      	uxtb	r6, r6
 80056ca:	4298      	cmp	r0, r3
 80056cc:	4637      	mov	r7, r6
 80056ce:	db04      	blt.n	80056da <__swbuf_r+0x42>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f928 	bl	8005928 <_fflush_r>
 80056d8:	bb28      	cbnz	r0, 8005726 <__swbuf_r+0x8e>
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	3b01      	subs	r3, #1
 80056de:	60a3      	str	r3, [r4, #8]
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	6022      	str	r2, [r4, #0]
 80056e6:	701e      	strb	r6, [r3, #0]
 80056e8:	6963      	ldr	r3, [r4, #20]
 80056ea:	3001      	adds	r0, #1
 80056ec:	4298      	cmp	r0, r3
 80056ee:	d004      	beq.n	80056fa <__swbuf_r+0x62>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	07db      	lsls	r3, r3, #31
 80056f4:	d519      	bpl.n	800572a <__swbuf_r+0x92>
 80056f6:	2e0a      	cmp	r6, #10
 80056f8:	d117      	bne.n	800572a <__swbuf_r+0x92>
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f913 	bl	8005928 <_fflush_r>
 8005702:	b190      	cbz	r0, 800572a <__swbuf_r+0x92>
 8005704:	e00f      	b.n	8005726 <__swbuf_r+0x8e>
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <__swbuf_r+0x9c>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d101      	bne.n	8005710 <__swbuf_r+0x78>
 800570c:	68ac      	ldr	r4, [r5, #8]
 800570e:	e7d0      	b.n	80056b2 <__swbuf_r+0x1a>
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <__swbuf_r+0xa0>)
 8005712:	429c      	cmp	r4, r3
 8005714:	bf08      	it	eq
 8005716:	68ec      	ldreq	r4, [r5, #12]
 8005718:	e7cb      	b.n	80056b2 <__swbuf_r+0x1a>
 800571a:	4621      	mov	r1, r4
 800571c:	4628      	mov	r0, r5
 800571e:	f000 f80d 	bl	800573c <__swsetup_r>
 8005722:	2800      	cmp	r0, #0
 8005724:	d0cc      	beq.n	80056c0 <__swbuf_r+0x28>
 8005726:	f04f 37ff 	mov.w	r7, #4294967295
 800572a:	4638      	mov	r0, r7
 800572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800572e:	bf00      	nop
 8005730:	08006670 	.word	0x08006670
 8005734:	08006690 	.word	0x08006690
 8005738:	08006650 	.word	0x08006650

0800573c <__swsetup_r>:
 800573c:	4b32      	ldr	r3, [pc, #200]	; (8005808 <__swsetup_r+0xcc>)
 800573e:	b570      	push	{r4, r5, r6, lr}
 8005740:	681d      	ldr	r5, [r3, #0]
 8005742:	4606      	mov	r6, r0
 8005744:	460c      	mov	r4, r1
 8005746:	b125      	cbz	r5, 8005752 <__swsetup_r+0x16>
 8005748:	69ab      	ldr	r3, [r5, #24]
 800574a:	b913      	cbnz	r3, 8005752 <__swsetup_r+0x16>
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f955 	bl	80059fc <__sinit>
 8005752:	4b2e      	ldr	r3, [pc, #184]	; (800580c <__swsetup_r+0xd0>)
 8005754:	429c      	cmp	r4, r3
 8005756:	d10f      	bne.n	8005778 <__swsetup_r+0x3c>
 8005758:	686c      	ldr	r4, [r5, #4]
 800575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575e:	b29a      	uxth	r2, r3
 8005760:	0715      	lsls	r5, r2, #28
 8005762:	d42c      	bmi.n	80057be <__swsetup_r+0x82>
 8005764:	06d0      	lsls	r0, r2, #27
 8005766:	d411      	bmi.n	800578c <__swsetup_r+0x50>
 8005768:	2209      	movs	r2, #9
 800576a:	6032      	str	r2, [r6, #0]
 800576c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	4b25      	ldr	r3, [pc, #148]	; (8005810 <__swsetup_r+0xd4>)
 800577a:	429c      	cmp	r4, r3
 800577c:	d101      	bne.n	8005782 <__swsetup_r+0x46>
 800577e:	68ac      	ldr	r4, [r5, #8]
 8005780:	e7eb      	b.n	800575a <__swsetup_r+0x1e>
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <__swsetup_r+0xd8>)
 8005784:	429c      	cmp	r4, r3
 8005786:	bf08      	it	eq
 8005788:	68ec      	ldreq	r4, [r5, #12]
 800578a:	e7e6      	b.n	800575a <__swsetup_r+0x1e>
 800578c:	0751      	lsls	r1, r2, #29
 800578e:	d512      	bpl.n	80057b6 <__swsetup_r+0x7a>
 8005790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005792:	b141      	cbz	r1, 80057a6 <__swsetup_r+0x6a>
 8005794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005798:	4299      	cmp	r1, r3
 800579a:	d002      	beq.n	80057a2 <__swsetup_r+0x66>
 800579c:	4630      	mov	r0, r6
 800579e:	f000 fa1b 	bl	8005bd8 <_free_r>
 80057a2:	2300      	movs	r3, #0
 80057a4:	6363      	str	r3, [r4, #52]	; 0x34
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	2300      	movs	r3, #0
 80057b0:	6063      	str	r3, [r4, #4]
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	b94b      	cbnz	r3, 80057d6 <__swsetup_r+0x9a>
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057cc:	d003      	beq.n	80057d6 <__swsetup_r+0x9a>
 80057ce:	4621      	mov	r1, r4
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 f9c1 	bl	8005b58 <__smakebuf_r>
 80057d6:	89a2      	ldrh	r2, [r4, #12]
 80057d8:	f012 0301 	ands.w	r3, r2, #1
 80057dc:	d00c      	beq.n	80057f8 <__swsetup_r+0xbc>
 80057de:	2300      	movs	r3, #0
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	425b      	negs	r3, r3
 80057e6:	61a3      	str	r3, [r4, #24]
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	b953      	cbnz	r3, 8005802 <__swsetup_r+0xc6>
 80057ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057f4:	d1ba      	bne.n	800576c <__swsetup_r+0x30>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	0792      	lsls	r2, r2, #30
 80057fa:	bf58      	it	pl
 80057fc:	6963      	ldrpl	r3, [r4, #20]
 80057fe:	60a3      	str	r3, [r4, #8]
 8005800:	e7f2      	b.n	80057e8 <__swsetup_r+0xac>
 8005802:	2000      	movs	r0, #0
 8005804:	e7f7      	b.n	80057f6 <__swsetup_r+0xba>
 8005806:	bf00      	nop
 8005808:	2000018c 	.word	0x2000018c
 800580c:	08006670 	.word	0x08006670
 8005810:	08006690 	.word	0x08006690
 8005814:	08006650 	.word	0x08006650

08005818 <__sflush_r>:
 8005818:	898a      	ldrh	r2, [r1, #12]
 800581a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	0710      	lsls	r0, r2, #28
 8005822:	460c      	mov	r4, r1
 8005824:	d45a      	bmi.n	80058dc <__sflush_r+0xc4>
 8005826:	684b      	ldr	r3, [r1, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	dc05      	bgt.n	8005838 <__sflush_r+0x20>
 800582c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	dc02      	bgt.n	8005838 <__sflush_r+0x20>
 8005832:	2000      	movs	r0, #0
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800583a:	2e00      	cmp	r6, #0
 800583c:	d0f9      	beq.n	8005832 <__sflush_r+0x1a>
 800583e:	2300      	movs	r3, #0
 8005840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005844:	682f      	ldr	r7, [r5, #0]
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	d033      	beq.n	80058b2 <__sflush_r+0x9a>
 800584a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	075a      	lsls	r2, r3, #29
 8005850:	d505      	bpl.n	800585e <__sflush_r+0x46>
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	1ac0      	subs	r0, r0, r3
 8005856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005858:	b10b      	cbz	r3, 800585e <__sflush_r+0x46>
 800585a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800585c:	1ac0      	subs	r0, r0, r3
 800585e:	2300      	movs	r3, #0
 8005860:	4602      	mov	r2, r0
 8005862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005864:	6a21      	ldr	r1, [r4, #32]
 8005866:	4628      	mov	r0, r5
 8005868:	47b0      	blx	r6
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	d106      	bne.n	800587e <__sflush_r+0x66>
 8005870:	6829      	ldr	r1, [r5, #0]
 8005872:	291d      	cmp	r1, #29
 8005874:	d84b      	bhi.n	800590e <__sflush_r+0xf6>
 8005876:	4a2b      	ldr	r2, [pc, #172]	; (8005924 <__sflush_r+0x10c>)
 8005878:	40ca      	lsrs	r2, r1
 800587a:	07d6      	lsls	r6, r2, #31
 800587c:	d547      	bpl.n	800590e <__sflush_r+0xf6>
 800587e:	2200      	movs	r2, #0
 8005880:	6062      	str	r2, [r4, #4]
 8005882:	04d9      	lsls	r1, r3, #19
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	6022      	str	r2, [r4, #0]
 8005888:	d504      	bpl.n	8005894 <__sflush_r+0x7c>
 800588a:	1c42      	adds	r2, r0, #1
 800588c:	d101      	bne.n	8005892 <__sflush_r+0x7a>
 800588e:	682b      	ldr	r3, [r5, #0]
 8005890:	b903      	cbnz	r3, 8005894 <__sflush_r+0x7c>
 8005892:	6560      	str	r0, [r4, #84]	; 0x54
 8005894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005896:	602f      	str	r7, [r5, #0]
 8005898:	2900      	cmp	r1, #0
 800589a:	d0ca      	beq.n	8005832 <__sflush_r+0x1a>
 800589c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058a0:	4299      	cmp	r1, r3
 80058a2:	d002      	beq.n	80058aa <__sflush_r+0x92>
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 f997 	bl	8005bd8 <_free_r>
 80058aa:	2000      	movs	r0, #0
 80058ac:	6360      	str	r0, [r4, #52]	; 0x34
 80058ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b2:	6a21      	ldr	r1, [r4, #32]
 80058b4:	2301      	movs	r3, #1
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b0      	blx	r6
 80058ba:	1c41      	adds	r1, r0, #1
 80058bc:	d1c6      	bne.n	800584c <__sflush_r+0x34>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0c3      	beq.n	800584c <__sflush_r+0x34>
 80058c4:	2b1d      	cmp	r3, #29
 80058c6:	d001      	beq.n	80058cc <__sflush_r+0xb4>
 80058c8:	2b16      	cmp	r3, #22
 80058ca:	d101      	bne.n	80058d0 <__sflush_r+0xb8>
 80058cc:	602f      	str	r7, [r5, #0]
 80058ce:	e7b0      	b.n	8005832 <__sflush_r+0x1a>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	690f      	ldr	r7, [r1, #16]
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d0a7      	beq.n	8005832 <__sflush_r+0x1a>
 80058e2:	0793      	lsls	r3, r2, #30
 80058e4:	680e      	ldr	r6, [r1, #0]
 80058e6:	bf08      	it	eq
 80058e8:	694b      	ldreq	r3, [r1, #20]
 80058ea:	600f      	str	r7, [r1, #0]
 80058ec:	bf18      	it	ne
 80058ee:	2300      	movne	r3, #0
 80058f0:	eba6 0807 	sub.w	r8, r6, r7
 80058f4:	608b      	str	r3, [r1, #8]
 80058f6:	f1b8 0f00 	cmp.w	r8, #0
 80058fa:	dd9a      	ble.n	8005832 <__sflush_r+0x1a>
 80058fc:	4643      	mov	r3, r8
 80058fe:	463a      	mov	r2, r7
 8005900:	6a21      	ldr	r1, [r4, #32]
 8005902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005904:	4628      	mov	r0, r5
 8005906:	47b0      	blx	r6
 8005908:	2800      	cmp	r0, #0
 800590a:	dc07      	bgt.n	800591c <__sflush_r+0x104>
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800591c:	4407      	add	r7, r0
 800591e:	eba8 0800 	sub.w	r8, r8, r0
 8005922:	e7e8      	b.n	80058f6 <__sflush_r+0xde>
 8005924:	20400001 	.word	0x20400001

08005928 <_fflush_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	4605      	mov	r5, r0
 800592e:	460c      	mov	r4, r1
 8005930:	b1db      	cbz	r3, 800596a <_fflush_r+0x42>
 8005932:	b118      	cbz	r0, 800593c <_fflush_r+0x14>
 8005934:	6983      	ldr	r3, [r0, #24]
 8005936:	b90b      	cbnz	r3, 800593c <_fflush_r+0x14>
 8005938:	f000 f860 	bl	80059fc <__sinit>
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <_fflush_r+0x48>)
 800593e:	429c      	cmp	r4, r3
 8005940:	d109      	bne.n	8005956 <_fflush_r+0x2e>
 8005942:	686c      	ldr	r4, [r5, #4]
 8005944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005948:	b17b      	cbz	r3, 800596a <_fflush_r+0x42>
 800594a:	4621      	mov	r1, r4
 800594c:	4628      	mov	r0, r5
 800594e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005952:	f7ff bf61 	b.w	8005818 <__sflush_r>
 8005956:	4b07      	ldr	r3, [pc, #28]	; (8005974 <_fflush_r+0x4c>)
 8005958:	429c      	cmp	r4, r3
 800595a:	d101      	bne.n	8005960 <_fflush_r+0x38>
 800595c:	68ac      	ldr	r4, [r5, #8]
 800595e:	e7f1      	b.n	8005944 <_fflush_r+0x1c>
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <_fflush_r+0x50>)
 8005962:	429c      	cmp	r4, r3
 8005964:	bf08      	it	eq
 8005966:	68ec      	ldreq	r4, [r5, #12]
 8005968:	e7ec      	b.n	8005944 <_fflush_r+0x1c>
 800596a:	2000      	movs	r0, #0
 800596c:	bd38      	pop	{r3, r4, r5, pc}
 800596e:	bf00      	nop
 8005970:	08006670 	.word	0x08006670
 8005974:	08006690 	.word	0x08006690
 8005978:	08006650 	.word	0x08006650

0800597c <_cleanup_r>:
 800597c:	4901      	ldr	r1, [pc, #4]	; (8005984 <_cleanup_r+0x8>)
 800597e:	f000 b8a9 	b.w	8005ad4 <_fwalk_reent>
 8005982:	bf00      	nop
 8005984:	08005929 	.word	0x08005929

08005988 <std.isra.0>:
 8005988:	2300      	movs	r3, #0
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	6003      	str	r3, [r0, #0]
 8005990:	6043      	str	r3, [r0, #4]
 8005992:	6083      	str	r3, [r0, #8]
 8005994:	8181      	strh	r1, [r0, #12]
 8005996:	6643      	str	r3, [r0, #100]	; 0x64
 8005998:	81c2      	strh	r2, [r0, #14]
 800599a:	6103      	str	r3, [r0, #16]
 800599c:	6143      	str	r3, [r0, #20]
 800599e:	6183      	str	r3, [r0, #24]
 80059a0:	4619      	mov	r1, r3
 80059a2:	2208      	movs	r2, #8
 80059a4:	305c      	adds	r0, #92	; 0x5c
 80059a6:	f7ff fdf3 	bl	8005590 <memset>
 80059aa:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <std.isra.0+0x38>)
 80059ac:	6263      	str	r3, [r4, #36]	; 0x24
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <std.isra.0+0x3c>)
 80059b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <std.isra.0+0x40>)
 80059b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059b6:	4b05      	ldr	r3, [pc, #20]	; (80059cc <std.isra.0+0x44>)
 80059b8:	6224      	str	r4, [r4, #32]
 80059ba:	6323      	str	r3, [r4, #48]	; 0x30
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	080062fd 	.word	0x080062fd
 80059c4:	0800631f 	.word	0x0800631f
 80059c8:	08006357 	.word	0x08006357
 80059cc:	0800637b 	.word	0x0800637b

080059d0 <__sfmoreglue>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	1e4a      	subs	r2, r1, #1
 80059d4:	2568      	movs	r5, #104	; 0x68
 80059d6:	4355      	muls	r5, r2
 80059d8:	460e      	mov	r6, r1
 80059da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059de:	f000 f949 	bl	8005c74 <_malloc_r>
 80059e2:	4604      	mov	r4, r0
 80059e4:	b140      	cbz	r0, 80059f8 <__sfmoreglue+0x28>
 80059e6:	2100      	movs	r1, #0
 80059e8:	e880 0042 	stmia.w	r0, {r1, r6}
 80059ec:	300c      	adds	r0, #12
 80059ee:	60a0      	str	r0, [r4, #8]
 80059f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059f4:	f7ff fdcc 	bl	8005590 <memset>
 80059f8:	4620      	mov	r0, r4
 80059fa:	bd70      	pop	{r4, r5, r6, pc}

080059fc <__sinit>:
 80059fc:	6983      	ldr	r3, [r0, #24]
 80059fe:	b510      	push	{r4, lr}
 8005a00:	4604      	mov	r4, r0
 8005a02:	bb33      	cbnz	r3, 8005a52 <__sinit+0x56>
 8005a04:	6483      	str	r3, [r0, #72]	; 0x48
 8005a06:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005a08:	6503      	str	r3, [r0, #80]	; 0x50
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <__sinit+0x58>)
 8005a0c:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <__sinit+0x5c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6282      	str	r2, [r0, #40]	; 0x28
 8005a12:	4298      	cmp	r0, r3
 8005a14:	bf04      	itt	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	6183      	streq	r3, [r0, #24]
 8005a1a:	f000 f81f 	bl	8005a5c <__sfp>
 8005a1e:	6060      	str	r0, [r4, #4]
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 f81b 	bl	8005a5c <__sfp>
 8005a26:	60a0      	str	r0, [r4, #8]
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 f817 	bl	8005a5c <__sfp>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	60e0      	str	r0, [r4, #12]
 8005a32:	2104      	movs	r1, #4
 8005a34:	6860      	ldr	r0, [r4, #4]
 8005a36:	f7ff ffa7 	bl	8005988 <std.isra.0>
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	2109      	movs	r1, #9
 8005a3e:	68a0      	ldr	r0, [r4, #8]
 8005a40:	f7ff ffa2 	bl	8005988 <std.isra.0>
 8005a44:	2202      	movs	r2, #2
 8005a46:	2112      	movs	r1, #18
 8005a48:	68e0      	ldr	r0, [r4, #12]
 8005a4a:	f7ff ff9d 	bl	8005988 <std.isra.0>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	61a3      	str	r3, [r4, #24]
 8005a52:	bd10      	pop	{r4, pc}
 8005a54:	0800664c 	.word	0x0800664c
 8005a58:	0800597d 	.word	0x0800597d

08005a5c <__sfp>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <__sfp+0x74>)
 8005a60:	681e      	ldr	r6, [r3, #0]
 8005a62:	69b3      	ldr	r3, [r6, #24]
 8005a64:	4607      	mov	r7, r0
 8005a66:	b913      	cbnz	r3, 8005a6e <__sfp+0x12>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff ffc7 	bl	80059fc <__sinit>
 8005a6e:	3648      	adds	r6, #72	; 0x48
 8005a70:	68b4      	ldr	r4, [r6, #8]
 8005a72:	6873      	ldr	r3, [r6, #4]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	d503      	bpl.n	8005a80 <__sfp+0x24>
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	b133      	cbz	r3, 8005a8a <__sfp+0x2e>
 8005a7c:	6836      	ldr	r6, [r6, #0]
 8005a7e:	e7f7      	b.n	8005a70 <__sfp+0x14>
 8005a80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a84:	b16d      	cbz	r5, 8005aa2 <__sfp+0x46>
 8005a86:	3468      	adds	r4, #104	; 0x68
 8005a88:	e7f4      	b.n	8005a74 <__sfp+0x18>
 8005a8a:	2104      	movs	r1, #4
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	f7ff ff9f 	bl	80059d0 <__sfmoreglue>
 8005a92:	6030      	str	r0, [r6, #0]
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d1f1      	bne.n	8005a7c <__sfp+0x20>
 8005a98:	230c      	movs	r3, #12
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aa6:	81e3      	strh	r3, [r4, #14]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	6665      	str	r5, [r4, #100]	; 0x64
 8005aae:	6025      	str	r5, [r4, #0]
 8005ab0:	60a5      	str	r5, [r4, #8]
 8005ab2:	6065      	str	r5, [r4, #4]
 8005ab4:	6125      	str	r5, [r4, #16]
 8005ab6:	6165      	str	r5, [r4, #20]
 8005ab8:	61a5      	str	r5, [r4, #24]
 8005aba:	2208      	movs	r2, #8
 8005abc:	4629      	mov	r1, r5
 8005abe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ac2:	f7ff fd65 	bl	8005590 <memset>
 8005ac6:	6365      	str	r5, [r4, #52]	; 0x34
 8005ac8:	63a5      	str	r5, [r4, #56]	; 0x38
 8005aca:	64a5      	str	r5, [r4, #72]	; 0x48
 8005acc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005ace:	e7e6      	b.n	8005a9e <__sfp+0x42>
 8005ad0:	0800664c 	.word	0x0800664c

08005ad4 <_fwalk_reent>:
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4689      	mov	r9, r1
 8005adc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	b914      	cbnz	r4, 8005aea <_fwalk_reent+0x16>
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aea:	68a5      	ldr	r5, [r4, #8]
 8005aec:	6867      	ldr	r7, [r4, #4]
 8005aee:	3f01      	subs	r7, #1
 8005af0:	d501      	bpl.n	8005af6 <_fwalk_reent+0x22>
 8005af2:	6824      	ldr	r4, [r4, #0]
 8005af4:	e7f5      	b.n	8005ae2 <_fwalk_reent+0xe>
 8005af6:	89ab      	ldrh	r3, [r5, #12]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d907      	bls.n	8005b0c <_fwalk_reent+0x38>
 8005afc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b00:	3301      	adds	r3, #1
 8005b02:	d003      	beq.n	8005b0c <_fwalk_reent+0x38>
 8005b04:	4629      	mov	r1, r5
 8005b06:	4640      	mov	r0, r8
 8005b08:	47c8      	blx	r9
 8005b0a:	4306      	orrs	r6, r0
 8005b0c:	3568      	adds	r5, #104	; 0x68
 8005b0e:	e7ee      	b.n	8005aee <_fwalk_reent+0x1a>

08005b10 <__swhatbuf_r>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	460e      	mov	r6, r1
 8005b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	b090      	sub	sp, #64	; 0x40
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	461d      	mov	r5, r3
 8005b20:	da07      	bge.n	8005b32 <__swhatbuf_r+0x22>
 8005b22:	2300      	movs	r3, #0
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	89b3      	ldrh	r3, [r6, #12]
 8005b28:	061a      	lsls	r2, r3, #24
 8005b2a:	d410      	bmi.n	8005b4e <__swhatbuf_r+0x3e>
 8005b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b30:	e00e      	b.n	8005b50 <__swhatbuf_r+0x40>
 8005b32:	aa01      	add	r2, sp, #4
 8005b34:	f000 fc48 	bl	80063c8 <_fstat_r>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	dbf2      	blt.n	8005b22 <__swhatbuf_r+0x12>
 8005b3c:	9a02      	ldr	r2, [sp, #8]
 8005b3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b46:	425a      	negs	r2, r3
 8005b48:	415a      	adcs	r2, r3
 8005b4a:	602a      	str	r2, [r5, #0]
 8005b4c:	e7ee      	b.n	8005b2c <__swhatbuf_r+0x1c>
 8005b4e:	2340      	movs	r3, #64	; 0x40
 8005b50:	2000      	movs	r0, #0
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	b010      	add	sp, #64	; 0x40
 8005b56:	bd70      	pop	{r4, r5, r6, pc}

08005b58 <__smakebuf_r>:
 8005b58:	898b      	ldrh	r3, [r1, #12]
 8005b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b5c:	079d      	lsls	r5, r3, #30
 8005b5e:	4606      	mov	r6, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	d507      	bpl.n	8005b74 <__smakebuf_r+0x1c>
 8005b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	6163      	str	r3, [r4, #20]
 8005b70:	b002      	add	sp, #8
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	ab01      	add	r3, sp, #4
 8005b76:	466a      	mov	r2, sp
 8005b78:	f7ff ffca 	bl	8005b10 <__swhatbuf_r>
 8005b7c:	9900      	ldr	r1, [sp, #0]
 8005b7e:	4605      	mov	r5, r0
 8005b80:	4630      	mov	r0, r6
 8005b82:	f000 f877 	bl	8005c74 <_malloc_r>
 8005b86:	b948      	cbnz	r0, 8005b9c <__smakebuf_r+0x44>
 8005b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8c:	059a      	lsls	r2, r3, #22
 8005b8e:	d4ef      	bmi.n	8005b70 <__smakebuf_r+0x18>
 8005b90:	f023 0303 	bic.w	r3, r3, #3
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	e7e3      	b.n	8005b64 <__smakebuf_r+0xc>
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <__smakebuf_r+0x7c>)
 8005b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	6020      	str	r0, [r4, #0]
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	6163      	str	r3, [r4, #20]
 8005bae:	9b01      	ldr	r3, [sp, #4]
 8005bb0:	6120      	str	r0, [r4, #16]
 8005bb2:	b15b      	cbz	r3, 8005bcc <__smakebuf_r+0x74>
 8005bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 fc17 	bl	80063ec <_isatty_r>
 8005bbe:	b128      	cbz	r0, 8005bcc <__smakebuf_r+0x74>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	431d      	orrs	r5, r3
 8005bd0:	81a5      	strh	r5, [r4, #12]
 8005bd2:	e7cd      	b.n	8005b70 <__smakebuf_r+0x18>
 8005bd4:	0800597d 	.word	0x0800597d

08005bd8 <_free_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4605      	mov	r5, r0
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d045      	beq.n	8005c6c <_free_r+0x94>
 8005be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be4:	1f0c      	subs	r4, r1, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bfb8      	it	lt
 8005bea:	18e4      	addlt	r4, r4, r3
 8005bec:	f000 fc20 	bl	8006430 <__malloc_lock>
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <_free_r+0x98>)
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	b933      	cbnz	r3, 8005c06 <_free_r+0x2e>
 8005bf8:	6063      	str	r3, [r4, #4]
 8005bfa:	6014      	str	r4, [r2, #0]
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c02:	f000 bc16 	b.w	8006432 <__malloc_unlock>
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	d90c      	bls.n	8005c24 <_free_r+0x4c>
 8005c0a:	6821      	ldr	r1, [r4, #0]
 8005c0c:	1862      	adds	r2, r4, r1
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	bf04      	itt	eq
 8005c12:	681a      	ldreq	r2, [r3, #0]
 8005c14:	685b      	ldreq	r3, [r3, #4]
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	bf04      	itt	eq
 8005c1a:	1852      	addeq	r2, r2, r1
 8005c1c:	6022      	streq	r2, [r4, #0]
 8005c1e:	6004      	str	r4, [r0, #0]
 8005c20:	e7ec      	b.n	8005bfc <_free_r+0x24>
 8005c22:	4613      	mov	r3, r2
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	b10a      	cbz	r2, 8005c2c <_free_r+0x54>
 8005c28:	42a2      	cmp	r2, r4
 8005c2a:	d9fa      	bls.n	8005c22 <_free_r+0x4a>
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	1858      	adds	r0, r3, r1
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d10b      	bne.n	8005c4c <_free_r+0x74>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	4401      	add	r1, r0
 8005c38:	1858      	adds	r0, r3, r1
 8005c3a:	4282      	cmp	r2, r0
 8005c3c:	6019      	str	r1, [r3, #0]
 8005c3e:	d1dd      	bne.n	8005bfc <_free_r+0x24>
 8005c40:	6810      	ldr	r0, [r2, #0]
 8005c42:	6852      	ldr	r2, [r2, #4]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	4401      	add	r1, r0
 8005c48:	6019      	str	r1, [r3, #0]
 8005c4a:	e7d7      	b.n	8005bfc <_free_r+0x24>
 8005c4c:	d902      	bls.n	8005c54 <_free_r+0x7c>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	e7d3      	b.n	8005bfc <_free_r+0x24>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	1821      	adds	r1, r4, r0
 8005c58:	428a      	cmp	r2, r1
 8005c5a:	bf04      	itt	eq
 8005c5c:	6811      	ldreq	r1, [r2, #0]
 8005c5e:	6852      	ldreq	r2, [r2, #4]
 8005c60:	6062      	str	r2, [r4, #4]
 8005c62:	bf04      	itt	eq
 8005c64:	1809      	addeq	r1, r1, r0
 8005c66:	6021      	streq	r1, [r4, #0]
 8005c68:	605c      	str	r4, [r3, #4]
 8005c6a:	e7c7      	b.n	8005bfc <_free_r+0x24>
 8005c6c:	bd38      	pop	{r3, r4, r5, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000434 	.word	0x20000434

08005c74 <_malloc_r>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	1ccd      	adds	r5, r1, #3
 8005c78:	f025 0503 	bic.w	r5, r5, #3
 8005c7c:	3508      	adds	r5, #8
 8005c7e:	2d0c      	cmp	r5, #12
 8005c80:	bf38      	it	cc
 8005c82:	250c      	movcc	r5, #12
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	4606      	mov	r6, r0
 8005c88:	db01      	blt.n	8005c8e <_malloc_r+0x1a>
 8005c8a:	42a9      	cmp	r1, r5
 8005c8c:	d903      	bls.n	8005c96 <_malloc_r+0x22>
 8005c8e:	230c      	movs	r3, #12
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	2000      	movs	r0, #0
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
 8005c96:	f000 fbcb 	bl	8006430 <__malloc_lock>
 8005c9a:	4a23      	ldr	r2, [pc, #140]	; (8005d28 <_malloc_r+0xb4>)
 8005c9c:	6814      	ldr	r4, [r2, #0]
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	b991      	cbnz	r1, 8005cc8 <_malloc_r+0x54>
 8005ca2:	4c22      	ldr	r4, [pc, #136]	; (8005d2c <_malloc_r+0xb8>)
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	b91b      	cbnz	r3, 8005cb0 <_malloc_r+0x3c>
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f000 fb17 	bl	80062dc <_sbrk_r>
 8005cae:	6020      	str	r0, [r4, #0]
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f000 fb12 	bl	80062dc <_sbrk_r>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d126      	bne.n	8005d0a <_malloc_r+0x96>
 8005cbc:	230c      	movs	r3, #12
 8005cbe:	6033      	str	r3, [r6, #0]
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f000 fbb6 	bl	8006432 <__malloc_unlock>
 8005cc6:	e7e4      	b.n	8005c92 <_malloc_r+0x1e>
 8005cc8:	680b      	ldr	r3, [r1, #0]
 8005cca:	1b5b      	subs	r3, r3, r5
 8005ccc:	d41a      	bmi.n	8005d04 <_malloc_r+0x90>
 8005cce:	2b0b      	cmp	r3, #11
 8005cd0:	d90f      	bls.n	8005cf2 <_malloc_r+0x7e>
 8005cd2:	600b      	str	r3, [r1, #0]
 8005cd4:	50cd      	str	r5, [r1, r3]
 8005cd6:	18cc      	adds	r4, r1, r3
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f000 fbaa 	bl	8006432 <__malloc_unlock>
 8005cde:	f104 000b 	add.w	r0, r4, #11
 8005ce2:	1d23      	adds	r3, r4, #4
 8005ce4:	f020 0007 	bic.w	r0, r0, #7
 8005ce8:	1ac3      	subs	r3, r0, r3
 8005cea:	d01b      	beq.n	8005d24 <_malloc_r+0xb0>
 8005cec:	425a      	negs	r2, r3
 8005cee:	50e2      	str	r2, [r4, r3]
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	428c      	cmp	r4, r1
 8005cf4:	bf0d      	iteet	eq
 8005cf6:	6863      	ldreq	r3, [r4, #4]
 8005cf8:	684b      	ldrne	r3, [r1, #4]
 8005cfa:	6063      	strne	r3, [r4, #4]
 8005cfc:	6013      	streq	r3, [r2, #0]
 8005cfe:	bf18      	it	ne
 8005d00:	460c      	movne	r4, r1
 8005d02:	e7e9      	b.n	8005cd8 <_malloc_r+0x64>
 8005d04:	460c      	mov	r4, r1
 8005d06:	6849      	ldr	r1, [r1, #4]
 8005d08:	e7ca      	b.n	8005ca0 <_malloc_r+0x2c>
 8005d0a:	1cc4      	adds	r4, r0, #3
 8005d0c:	f024 0403 	bic.w	r4, r4, #3
 8005d10:	42a0      	cmp	r0, r4
 8005d12:	d005      	beq.n	8005d20 <_malloc_r+0xac>
 8005d14:	1a21      	subs	r1, r4, r0
 8005d16:	4630      	mov	r0, r6
 8005d18:	f000 fae0 	bl	80062dc <_sbrk_r>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d0cd      	beq.n	8005cbc <_malloc_r+0x48>
 8005d20:	6025      	str	r5, [r4, #0]
 8005d22:	e7d9      	b.n	8005cd8 <_malloc_r+0x64>
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	bf00      	nop
 8005d28:	20000434 	.word	0x20000434
 8005d2c:	20000438 	.word	0x20000438

08005d30 <__sfputc_r>:
 8005d30:	6893      	ldr	r3, [r2, #8]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	b410      	push	{r4}
 8005d38:	6093      	str	r3, [r2, #8]
 8005d3a:	da09      	bge.n	8005d50 <__sfputc_r+0x20>
 8005d3c:	6994      	ldr	r4, [r2, #24]
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	db02      	blt.n	8005d48 <__sfputc_r+0x18>
 8005d42:	b2cb      	uxtb	r3, r1
 8005d44:	2b0a      	cmp	r3, #10
 8005d46:	d103      	bne.n	8005d50 <__sfputc_r+0x20>
 8005d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d4c:	f7ff bca4 	b.w	8005698 <__swbuf_r>
 8005d50:	6813      	ldr	r3, [r2, #0]
 8005d52:	1c58      	adds	r0, r3, #1
 8005d54:	6010      	str	r0, [r2, #0]
 8005d56:	7019      	strb	r1, [r3, #0]
 8005d58:	b2c8      	uxtb	r0, r1
 8005d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <__sfputs_r>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	4606      	mov	r6, r0
 8005d64:	460f      	mov	r7, r1
 8005d66:	4614      	mov	r4, r2
 8005d68:	18d5      	adds	r5, r2, r3
 8005d6a:	42ac      	cmp	r4, r5
 8005d6c:	d101      	bne.n	8005d72 <__sfputs_r+0x12>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e007      	b.n	8005d82 <__sfputs_r+0x22>
 8005d72:	463a      	mov	r2, r7
 8005d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f7ff ffd9 	bl	8005d30 <__sfputc_r>
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	d1f3      	bne.n	8005d6a <__sfputs_r+0xa>
 8005d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d84 <_vfiprintf_r>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	b09d      	sub	sp, #116	; 0x74
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	4617      	mov	r7, r2
 8005d8e:	9303      	str	r3, [sp, #12]
 8005d90:	4606      	mov	r6, r0
 8005d92:	b118      	cbz	r0, 8005d9c <_vfiprintf_r+0x18>
 8005d94:	6983      	ldr	r3, [r0, #24]
 8005d96:	b90b      	cbnz	r3, 8005d9c <_vfiprintf_r+0x18>
 8005d98:	f7ff fe30 	bl	80059fc <__sinit>
 8005d9c:	4b7c      	ldr	r3, [pc, #496]	; (8005f90 <_vfiprintf_r+0x20c>)
 8005d9e:	429c      	cmp	r4, r3
 8005da0:	d157      	bne.n	8005e52 <_vfiprintf_r+0xce>
 8005da2:	6874      	ldr	r4, [r6, #4]
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	0718      	lsls	r0, r3, #28
 8005da8:	d55d      	bpl.n	8005e66 <_vfiprintf_r+0xe2>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05a      	beq.n	8005e66 <_vfiprintf_r+0xe2>
 8005db0:	2300      	movs	r3, #0
 8005db2:	9309      	str	r3, [sp, #36]	; 0x24
 8005db4:	2320      	movs	r3, #32
 8005db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dba:	2330      	movs	r3, #48	; 0x30
 8005dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc0:	f04f 0b01 	mov.w	fp, #1
 8005dc4:	46b8      	mov	r8, r7
 8005dc6:	4645      	mov	r5, r8
 8005dc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d155      	bne.n	8005e7c <_vfiprintf_r+0xf8>
 8005dd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8005dd4:	d00b      	beq.n	8005dee <_vfiprintf_r+0x6a>
 8005dd6:	4653      	mov	r3, sl
 8005dd8:	463a      	mov	r2, r7
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f7ff ffbf 	bl	8005d60 <__sfputs_r>
 8005de2:	3001      	adds	r0, #1
 8005de4:	f000 80c4 	beq.w	8005f70 <_vfiprintf_r+0x1ec>
 8005de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dea:	4453      	add	r3, sl
 8005dec:	9309      	str	r3, [sp, #36]	; 0x24
 8005dee:	f898 3000 	ldrb.w	r3, [r8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80bc 	beq.w	8005f70 <_vfiprintf_r+0x1ec>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	9304      	str	r3, [sp, #16]
 8005e00:	9307      	str	r3, [sp, #28]
 8005e02:	9205      	str	r2, [sp, #20]
 8005e04:	9306      	str	r3, [sp, #24]
 8005e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e0c:	2205      	movs	r2, #5
 8005e0e:	7829      	ldrb	r1, [r5, #0]
 8005e10:	4860      	ldr	r0, [pc, #384]	; (8005f94 <_vfiprintf_r+0x210>)
 8005e12:	f7fa f9c5 	bl	80001a0 <memchr>
 8005e16:	f105 0801 	add.w	r8, r5, #1
 8005e1a:	9b04      	ldr	r3, [sp, #16]
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d131      	bne.n	8005e84 <_vfiprintf_r+0x100>
 8005e20:	06d9      	lsls	r1, r3, #27
 8005e22:	bf44      	itt	mi
 8005e24:	2220      	movmi	r2, #32
 8005e26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e2a:	071a      	lsls	r2, r3, #28
 8005e2c:	bf44      	itt	mi
 8005e2e:	222b      	movmi	r2, #43	; 0x2b
 8005e30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e34:	782a      	ldrb	r2, [r5, #0]
 8005e36:	2a2a      	cmp	r2, #42	; 0x2a
 8005e38:	d02c      	beq.n	8005e94 <_vfiprintf_r+0x110>
 8005e3a:	9a07      	ldr	r2, [sp, #28]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	200a      	movs	r0, #10
 8005e40:	46a8      	mov	r8, r5
 8005e42:	3501      	adds	r5, #1
 8005e44:	f898 3000 	ldrb.w	r3, [r8]
 8005e48:	3b30      	subs	r3, #48	; 0x30
 8005e4a:	2b09      	cmp	r3, #9
 8005e4c:	d96d      	bls.n	8005f2a <_vfiprintf_r+0x1a6>
 8005e4e:	b371      	cbz	r1, 8005eae <_vfiprintf_r+0x12a>
 8005e50:	e026      	b.n	8005ea0 <_vfiprintf_r+0x11c>
 8005e52:	4b51      	ldr	r3, [pc, #324]	; (8005f98 <_vfiprintf_r+0x214>)
 8005e54:	429c      	cmp	r4, r3
 8005e56:	d101      	bne.n	8005e5c <_vfiprintf_r+0xd8>
 8005e58:	68b4      	ldr	r4, [r6, #8]
 8005e5a:	e7a3      	b.n	8005da4 <_vfiprintf_r+0x20>
 8005e5c:	4b4f      	ldr	r3, [pc, #316]	; (8005f9c <_vfiprintf_r+0x218>)
 8005e5e:	429c      	cmp	r4, r3
 8005e60:	bf08      	it	eq
 8005e62:	68f4      	ldreq	r4, [r6, #12]
 8005e64:	e79e      	b.n	8005da4 <_vfiprintf_r+0x20>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff fc67 	bl	800573c <__swsetup_r>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d09e      	beq.n	8005db0 <_vfiprintf_r+0x2c>
 8005e72:	f04f 30ff 	mov.w	r0, #4294967295
 8005e76:	b01d      	add	sp, #116	; 0x74
 8005e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7c:	2b25      	cmp	r3, #37	; 0x25
 8005e7e:	d0a7      	beq.n	8005dd0 <_vfiprintf_r+0x4c>
 8005e80:	46a8      	mov	r8, r5
 8005e82:	e7a0      	b.n	8005dc6 <_vfiprintf_r+0x42>
 8005e84:	4a43      	ldr	r2, [pc, #268]	; (8005f94 <_vfiprintf_r+0x210>)
 8005e86:	1a80      	subs	r0, r0, r2
 8005e88:	fa0b f000 	lsl.w	r0, fp, r0
 8005e8c:	4318      	orrs	r0, r3
 8005e8e:	9004      	str	r0, [sp, #16]
 8005e90:	4645      	mov	r5, r8
 8005e92:	e7bb      	b.n	8005e0c <_vfiprintf_r+0x88>
 8005e94:	9a03      	ldr	r2, [sp, #12]
 8005e96:	1d11      	adds	r1, r2, #4
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	9103      	str	r1, [sp, #12]
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	db01      	blt.n	8005ea4 <_vfiprintf_r+0x120>
 8005ea0:	9207      	str	r2, [sp, #28]
 8005ea2:	e004      	b.n	8005eae <_vfiprintf_r+0x12a>
 8005ea4:	4252      	negs	r2, r2
 8005ea6:	f043 0302 	orr.w	r3, r3, #2
 8005eaa:	9207      	str	r2, [sp, #28]
 8005eac:	9304      	str	r3, [sp, #16]
 8005eae:	f898 3000 	ldrb.w	r3, [r8]
 8005eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb4:	d110      	bne.n	8005ed8 <_vfiprintf_r+0x154>
 8005eb6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005eba:	2b2a      	cmp	r3, #42	; 0x2a
 8005ebc:	f108 0101 	add.w	r1, r8, #1
 8005ec0:	d137      	bne.n	8005f32 <_vfiprintf_r+0x1ae>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	1d1a      	adds	r2, r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9203      	str	r2, [sp, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bfb8      	it	lt
 8005ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ed2:	f108 0802 	add.w	r8, r8, #2
 8005ed6:	9305      	str	r3, [sp, #20]
 8005ed8:	4d31      	ldr	r5, [pc, #196]	; (8005fa0 <_vfiprintf_r+0x21c>)
 8005eda:	f898 1000 	ldrb.w	r1, [r8]
 8005ede:	2203      	movs	r2, #3
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f7fa f95d 	bl	80001a0 <memchr>
 8005ee6:	b140      	cbz	r0, 8005efa <_vfiprintf_r+0x176>
 8005ee8:	2340      	movs	r3, #64	; 0x40
 8005eea:	1b40      	subs	r0, r0, r5
 8005eec:	fa03 f000 	lsl.w	r0, r3, r0
 8005ef0:	9b04      	ldr	r3, [sp, #16]
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	f108 0801 	add.w	r8, r8, #1
 8005efa:	f898 1000 	ldrb.w	r1, [r8]
 8005efe:	4829      	ldr	r0, [pc, #164]	; (8005fa4 <_vfiprintf_r+0x220>)
 8005f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f04:	2206      	movs	r2, #6
 8005f06:	f108 0701 	add.w	r7, r8, #1
 8005f0a:	f7fa f949 	bl	80001a0 <memchr>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d034      	beq.n	8005f7c <_vfiprintf_r+0x1f8>
 8005f12:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <_vfiprintf_r+0x224>)
 8005f14:	bb03      	cbnz	r3, 8005f58 <_vfiprintf_r+0x1d4>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	3307      	adds	r3, #7
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	3308      	adds	r3, #8
 8005f20:	9303      	str	r3, [sp, #12]
 8005f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f24:	444b      	add	r3, r9
 8005f26:	9309      	str	r3, [sp, #36]	; 0x24
 8005f28:	e74c      	b.n	8005dc4 <_vfiprintf_r+0x40>
 8005f2a:	fb00 3202 	mla	r2, r0, r2, r3
 8005f2e:	2101      	movs	r1, #1
 8005f30:	e786      	b.n	8005e40 <_vfiprintf_r+0xbc>
 8005f32:	2300      	movs	r3, #0
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	4618      	mov	r0, r3
 8005f38:	250a      	movs	r5, #10
 8005f3a:	4688      	mov	r8, r1
 8005f3c:	3101      	adds	r1, #1
 8005f3e:	f898 2000 	ldrb.w	r2, [r8]
 8005f42:	3a30      	subs	r2, #48	; 0x30
 8005f44:	2a09      	cmp	r2, #9
 8005f46:	d903      	bls.n	8005f50 <_vfiprintf_r+0x1cc>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0c5      	beq.n	8005ed8 <_vfiprintf_r+0x154>
 8005f4c:	9005      	str	r0, [sp, #20]
 8005f4e:	e7c3      	b.n	8005ed8 <_vfiprintf_r+0x154>
 8005f50:	fb05 2000 	mla	r0, r5, r0, r2
 8005f54:	2301      	movs	r3, #1
 8005f56:	e7f0      	b.n	8005f3a <_vfiprintf_r+0x1b6>
 8005f58:	ab03      	add	r3, sp, #12
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <_vfiprintf_r+0x228>)
 8005f60:	a904      	add	r1, sp, #16
 8005f62:	4630      	mov	r0, r6
 8005f64:	f3af 8000 	nop.w
 8005f68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f6c:	4681      	mov	r9, r0
 8005f6e:	d1d8      	bne.n	8005f22 <_vfiprintf_r+0x19e>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	065b      	lsls	r3, r3, #25
 8005f74:	f53f af7d 	bmi.w	8005e72 <_vfiprintf_r+0xee>
 8005f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f7a:	e77c      	b.n	8005e76 <_vfiprintf_r+0xf2>
 8005f7c:	ab03      	add	r3, sp, #12
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4622      	mov	r2, r4
 8005f82:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <_vfiprintf_r+0x228>)
 8005f84:	a904      	add	r1, sp, #16
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 f888 	bl	800609c <_printf_i>
 8005f8c:	e7ec      	b.n	8005f68 <_vfiprintf_r+0x1e4>
 8005f8e:	bf00      	nop
 8005f90:	08006670 	.word	0x08006670
 8005f94:	080066b0 	.word	0x080066b0
 8005f98:	08006690 	.word	0x08006690
 8005f9c:	08006650 	.word	0x08006650
 8005fa0:	080066b6 	.word	0x080066b6
 8005fa4:	080066ba 	.word	0x080066ba
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	08005d61 	.word	0x08005d61

08005fb0 <_printf_common>:
 8005fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	4691      	mov	r9, r2
 8005fb6:	461f      	mov	r7, r3
 8005fb8:	688a      	ldr	r2, [r1, #8]
 8005fba:	690b      	ldr	r3, [r1, #16]
 8005fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bfb8      	it	lt
 8005fc4:	4613      	movlt	r3, r2
 8005fc6:	f8c9 3000 	str.w	r3, [r9]
 8005fca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fce:	4606      	mov	r6, r0
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	b112      	cbz	r2, 8005fda <_printf_common+0x2a>
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f8c9 3000 	str.w	r3, [r9]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	0699      	lsls	r1, r3, #26
 8005fde:	bf42      	ittt	mi
 8005fe0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fe4:	3302      	addmi	r3, #2
 8005fe6:	f8c9 3000 	strmi.w	r3, [r9]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d107      	bne.n	8006002 <_printf_common+0x52>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	f8d9 2000 	ldr.w	r2, [r9]
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	429d      	cmp	r5, r3
 8006000:	db29      	blt.n	8006056 <_printf_common+0xa6>
 8006002:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	3300      	adds	r3, #0
 800600a:	bf18      	it	ne
 800600c:	2301      	movne	r3, #1
 800600e:	0692      	lsls	r2, r2, #26
 8006010:	d42e      	bmi.n	8006070 <_printf_common+0xc0>
 8006012:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006016:	4639      	mov	r1, r7
 8006018:	4630      	mov	r0, r6
 800601a:	47c0      	blx	r8
 800601c:	3001      	adds	r0, #1
 800601e:	d021      	beq.n	8006064 <_printf_common+0xb4>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	68e5      	ldr	r5, [r4, #12]
 8006024:	f8d9 2000 	ldr.w	r2, [r9]
 8006028:	f003 0306 	and.w	r3, r3, #6
 800602c:	2b04      	cmp	r3, #4
 800602e:	bf08      	it	eq
 8006030:	1aad      	subeq	r5, r5, r2
 8006032:	68a3      	ldr	r3, [r4, #8]
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	bf0c      	ite	eq
 8006038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800603c:	2500      	movne	r5, #0
 800603e:	4293      	cmp	r3, r2
 8006040:	bfc4      	itt	gt
 8006042:	1a9b      	subgt	r3, r3, r2
 8006044:	18ed      	addgt	r5, r5, r3
 8006046:	f04f 0900 	mov.w	r9, #0
 800604a:	341a      	adds	r4, #26
 800604c:	454d      	cmp	r5, r9
 800604e:	d11b      	bne.n	8006088 <_printf_common+0xd8>
 8006050:	2000      	movs	r0, #0
 8006052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006056:	2301      	movs	r3, #1
 8006058:	4652      	mov	r2, sl
 800605a:	4639      	mov	r1, r7
 800605c:	4630      	mov	r0, r6
 800605e:	47c0      	blx	r8
 8006060:	3001      	adds	r0, #1
 8006062:	d103      	bne.n	800606c <_printf_common+0xbc>
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	3501      	adds	r5, #1
 800606e:	e7c2      	b.n	8005ff6 <_printf_common+0x46>
 8006070:	18e1      	adds	r1, r4, r3
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	2030      	movs	r0, #48	; 0x30
 8006076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800607a:	4422      	add	r2, r4
 800607c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006084:	3302      	adds	r3, #2
 8006086:	e7c4      	b.n	8006012 <_printf_common+0x62>
 8006088:	2301      	movs	r3, #1
 800608a:	4622      	mov	r2, r4
 800608c:	4639      	mov	r1, r7
 800608e:	4630      	mov	r0, r6
 8006090:	47c0      	blx	r8
 8006092:	3001      	adds	r0, #1
 8006094:	d0e6      	beq.n	8006064 <_printf_common+0xb4>
 8006096:	f109 0901 	add.w	r9, r9, #1
 800609a:	e7d7      	b.n	800604c <_printf_common+0x9c>

0800609c <_printf_i>:
 800609c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060a0:	4617      	mov	r7, r2
 80060a2:	7e0a      	ldrb	r2, [r1, #24]
 80060a4:	b085      	sub	sp, #20
 80060a6:	2a6e      	cmp	r2, #110	; 0x6e
 80060a8:	4698      	mov	r8, r3
 80060aa:	4606      	mov	r6, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060b0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80060b4:	f000 80bc 	beq.w	8006230 <_printf_i+0x194>
 80060b8:	d81a      	bhi.n	80060f0 <_printf_i+0x54>
 80060ba:	2a63      	cmp	r2, #99	; 0x63
 80060bc:	d02e      	beq.n	800611c <_printf_i+0x80>
 80060be:	d80a      	bhi.n	80060d6 <_printf_i+0x3a>
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	f000 80c8 	beq.w	8006256 <_printf_i+0x1ba>
 80060c6:	2a58      	cmp	r2, #88	; 0x58
 80060c8:	f000 808a 	beq.w	80061e0 <_printf_i+0x144>
 80060cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80060d4:	e02a      	b.n	800612c <_printf_i+0x90>
 80060d6:	2a64      	cmp	r2, #100	; 0x64
 80060d8:	d001      	beq.n	80060de <_printf_i+0x42>
 80060da:	2a69      	cmp	r2, #105	; 0x69
 80060dc:	d1f6      	bne.n	80060cc <_printf_i+0x30>
 80060de:	6821      	ldr	r1, [r4, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80060e6:	d023      	beq.n	8006130 <_printf_i+0x94>
 80060e8:	1d11      	adds	r1, r2, #4
 80060ea:	6019      	str	r1, [r3, #0]
 80060ec:	6813      	ldr	r3, [r2, #0]
 80060ee:	e027      	b.n	8006140 <_printf_i+0xa4>
 80060f0:	2a73      	cmp	r2, #115	; 0x73
 80060f2:	f000 80b4 	beq.w	800625e <_printf_i+0x1c2>
 80060f6:	d808      	bhi.n	800610a <_printf_i+0x6e>
 80060f8:	2a6f      	cmp	r2, #111	; 0x6f
 80060fa:	d02a      	beq.n	8006152 <_printf_i+0xb6>
 80060fc:	2a70      	cmp	r2, #112	; 0x70
 80060fe:	d1e5      	bne.n	80060cc <_printf_i+0x30>
 8006100:	680a      	ldr	r2, [r1, #0]
 8006102:	f042 0220 	orr.w	r2, r2, #32
 8006106:	600a      	str	r2, [r1, #0]
 8006108:	e003      	b.n	8006112 <_printf_i+0x76>
 800610a:	2a75      	cmp	r2, #117	; 0x75
 800610c:	d021      	beq.n	8006152 <_printf_i+0xb6>
 800610e:	2a78      	cmp	r2, #120	; 0x78
 8006110:	d1dc      	bne.n	80060cc <_printf_i+0x30>
 8006112:	2278      	movs	r2, #120	; 0x78
 8006114:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006118:	496e      	ldr	r1, [pc, #440]	; (80062d4 <_printf_i+0x238>)
 800611a:	e064      	b.n	80061e6 <_printf_i+0x14a>
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006122:	1d11      	adds	r1, r2, #4
 8006124:	6019      	str	r1, [r3, #0]
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800612c:	2301      	movs	r3, #1
 800612e:	e0a3      	b.n	8006278 <_printf_i+0x1dc>
 8006130:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006134:	f102 0104 	add.w	r1, r2, #4
 8006138:	6019      	str	r1, [r3, #0]
 800613a:	d0d7      	beq.n	80060ec <_printf_i+0x50>
 800613c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006140:	2b00      	cmp	r3, #0
 8006142:	da03      	bge.n	800614c <_printf_i+0xb0>
 8006144:	222d      	movs	r2, #45	; 0x2d
 8006146:	425b      	negs	r3, r3
 8006148:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800614c:	4962      	ldr	r1, [pc, #392]	; (80062d8 <_printf_i+0x23c>)
 800614e:	220a      	movs	r2, #10
 8006150:	e017      	b.n	8006182 <_printf_i+0xe6>
 8006152:	6820      	ldr	r0, [r4, #0]
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	f010 0f80 	tst.w	r0, #128	; 0x80
 800615a:	d003      	beq.n	8006164 <_printf_i+0xc8>
 800615c:	1d08      	adds	r0, r1, #4
 800615e:	6018      	str	r0, [r3, #0]
 8006160:	680b      	ldr	r3, [r1, #0]
 8006162:	e006      	b.n	8006172 <_printf_i+0xd6>
 8006164:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006168:	f101 0004 	add.w	r0, r1, #4
 800616c:	6018      	str	r0, [r3, #0]
 800616e:	d0f7      	beq.n	8006160 <_printf_i+0xc4>
 8006170:	880b      	ldrh	r3, [r1, #0]
 8006172:	4959      	ldr	r1, [pc, #356]	; (80062d8 <_printf_i+0x23c>)
 8006174:	2a6f      	cmp	r2, #111	; 0x6f
 8006176:	bf14      	ite	ne
 8006178:	220a      	movne	r2, #10
 800617a:	2208      	moveq	r2, #8
 800617c:	2000      	movs	r0, #0
 800617e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006182:	6865      	ldr	r5, [r4, #4]
 8006184:	60a5      	str	r5, [r4, #8]
 8006186:	2d00      	cmp	r5, #0
 8006188:	f2c0 809c 	blt.w	80062c4 <_printf_i+0x228>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	f020 0004 	bic.w	r0, r0, #4
 8006192:	6020      	str	r0, [r4, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d13f      	bne.n	8006218 <_printf_i+0x17c>
 8006198:	2d00      	cmp	r5, #0
 800619a:	f040 8095 	bne.w	80062c8 <_printf_i+0x22c>
 800619e:	4675      	mov	r5, lr
 80061a0:	2a08      	cmp	r2, #8
 80061a2:	d10b      	bne.n	80061bc <_printf_i+0x120>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	07da      	lsls	r2, r3, #31
 80061a8:	d508      	bpl.n	80061bc <_printf_i+0x120>
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	6862      	ldr	r2, [r4, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	bfde      	ittt	le
 80061b2:	2330      	movle	r3, #48	; 0x30
 80061b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061bc:	ebae 0305 	sub.w	r3, lr, r5
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	f8cd 8000 	str.w	r8, [sp]
 80061c6:	463b      	mov	r3, r7
 80061c8:	aa03      	add	r2, sp, #12
 80061ca:	4621      	mov	r1, r4
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff feef 	bl	8005fb0 <_printf_common>
 80061d2:	3001      	adds	r0, #1
 80061d4:	d155      	bne.n	8006282 <_printf_i+0x1e6>
 80061d6:	f04f 30ff 	mov.w	r0, #4294967295
 80061da:	b005      	add	sp, #20
 80061dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061e0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80061e4:	493c      	ldr	r1, [pc, #240]	; (80062d8 <_printf_i+0x23c>)
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80061ee:	f100 0504 	add.w	r5, r0, #4
 80061f2:	601d      	str	r5, [r3, #0]
 80061f4:	d001      	beq.n	80061fa <_printf_i+0x15e>
 80061f6:	6803      	ldr	r3, [r0, #0]
 80061f8:	e002      	b.n	8006200 <_printf_i+0x164>
 80061fa:	0655      	lsls	r5, r2, #25
 80061fc:	d5fb      	bpl.n	80061f6 <_printf_i+0x15a>
 80061fe:	8803      	ldrh	r3, [r0, #0]
 8006200:	07d0      	lsls	r0, r2, #31
 8006202:	bf44      	itt	mi
 8006204:	f042 0220 	orrmi.w	r2, r2, #32
 8006208:	6022      	strmi	r2, [r4, #0]
 800620a:	b91b      	cbnz	r3, 8006214 <_printf_i+0x178>
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	f022 0220 	bic.w	r2, r2, #32
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	2210      	movs	r2, #16
 8006216:	e7b1      	b.n	800617c <_printf_i+0xe0>
 8006218:	4675      	mov	r5, lr
 800621a:	fbb3 f0f2 	udiv	r0, r3, r2
 800621e:	fb02 3310 	mls	r3, r2, r0, r3
 8006222:	5ccb      	ldrb	r3, [r1, r3]
 8006224:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006228:	4603      	mov	r3, r0
 800622a:	2800      	cmp	r0, #0
 800622c:	d1f5      	bne.n	800621a <_printf_i+0x17e>
 800622e:	e7b7      	b.n	80061a0 <_printf_i+0x104>
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	6949      	ldr	r1, [r1, #20]
 8006236:	f010 0f80 	tst.w	r0, #128	; 0x80
 800623a:	d004      	beq.n	8006246 <_printf_i+0x1aa>
 800623c:	1d10      	adds	r0, r2, #4
 800623e:	6018      	str	r0, [r3, #0]
 8006240:	6813      	ldr	r3, [r2, #0]
 8006242:	6019      	str	r1, [r3, #0]
 8006244:	e007      	b.n	8006256 <_printf_i+0x1ba>
 8006246:	f010 0f40 	tst.w	r0, #64	; 0x40
 800624a:	f102 0004 	add.w	r0, r2, #4
 800624e:	6018      	str	r0, [r3, #0]
 8006250:	6813      	ldr	r3, [r2, #0]
 8006252:	d0f6      	beq.n	8006242 <_printf_i+0x1a6>
 8006254:	8019      	strh	r1, [r3, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	4675      	mov	r5, lr
 800625c:	e7b1      	b.n	80061c2 <_printf_i+0x126>
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	1d11      	adds	r1, r2, #4
 8006262:	6019      	str	r1, [r3, #0]
 8006264:	6815      	ldr	r5, [r2, #0]
 8006266:	6862      	ldr	r2, [r4, #4]
 8006268:	2100      	movs	r1, #0
 800626a:	4628      	mov	r0, r5
 800626c:	f7f9 ff98 	bl	80001a0 <memchr>
 8006270:	b108      	cbz	r0, 8006276 <_printf_i+0x1da>
 8006272:	1b40      	subs	r0, r0, r5
 8006274:	6060      	str	r0, [r4, #4]
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	2300      	movs	r3, #0
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006280:	e79f      	b.n	80061c2 <_printf_i+0x126>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	462a      	mov	r2, r5
 8006286:	4639      	mov	r1, r7
 8006288:	4630      	mov	r0, r6
 800628a:	47c0      	blx	r8
 800628c:	3001      	adds	r0, #1
 800628e:	d0a2      	beq.n	80061d6 <_printf_i+0x13a>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	079b      	lsls	r3, r3, #30
 8006294:	d507      	bpl.n	80062a6 <_printf_i+0x20a>
 8006296:	2500      	movs	r5, #0
 8006298:	f104 0919 	add.w	r9, r4, #25
 800629c:	68e3      	ldr	r3, [r4, #12]
 800629e:	9a03      	ldr	r2, [sp, #12]
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	429d      	cmp	r5, r3
 80062a4:	db05      	blt.n	80062b2 <_printf_i+0x216>
 80062a6:	68e0      	ldr	r0, [r4, #12]
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	4298      	cmp	r0, r3
 80062ac:	bfb8      	it	lt
 80062ae:	4618      	movlt	r0, r3
 80062b0:	e793      	b.n	80061da <_printf_i+0x13e>
 80062b2:	2301      	movs	r3, #1
 80062b4:	464a      	mov	r2, r9
 80062b6:	4639      	mov	r1, r7
 80062b8:	4630      	mov	r0, r6
 80062ba:	47c0      	blx	r8
 80062bc:	3001      	adds	r0, #1
 80062be:	d08a      	beq.n	80061d6 <_printf_i+0x13a>
 80062c0:	3501      	adds	r5, #1
 80062c2:	e7eb      	b.n	800629c <_printf_i+0x200>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1a7      	bne.n	8006218 <_printf_i+0x17c>
 80062c8:	780b      	ldrb	r3, [r1, #0]
 80062ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d2:	e765      	b.n	80061a0 <_printf_i+0x104>
 80062d4:	080066d2 	.word	0x080066d2
 80062d8:	080066c1 	.word	0x080066c1

080062dc <_sbrk_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4c06      	ldr	r4, [pc, #24]	; (80062f8 <_sbrk_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4605      	mov	r5, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	f7fe fdfc 	bl	8004ee4 <_sbrk>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_sbrk_r+0x1a>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_sbrk_r+0x1a>
 80062f4:	602b      	str	r3, [r5, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20001db0 	.word	0x20001db0

080062fc <__sread>:
 80062fc:	b510      	push	{r4, lr}
 80062fe:	460c      	mov	r4, r1
 8006300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006304:	f000 f896 	bl	8006434 <_read_r>
 8006308:	2800      	cmp	r0, #0
 800630a:	bfab      	itete	ge
 800630c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800630e:	89a3      	ldrhlt	r3, [r4, #12]
 8006310:	181b      	addge	r3, r3, r0
 8006312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006316:	bfac      	ite	ge
 8006318:	6563      	strge	r3, [r4, #84]	; 0x54
 800631a:	81a3      	strhlt	r3, [r4, #12]
 800631c:	bd10      	pop	{r4, pc}

0800631e <__swrite>:
 800631e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006322:	461f      	mov	r7, r3
 8006324:	898b      	ldrh	r3, [r1, #12]
 8006326:	05db      	lsls	r3, r3, #23
 8006328:	4605      	mov	r5, r0
 800632a:	460c      	mov	r4, r1
 800632c:	4616      	mov	r6, r2
 800632e:	d505      	bpl.n	800633c <__swrite+0x1e>
 8006330:	2302      	movs	r3, #2
 8006332:	2200      	movs	r2, #0
 8006334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006338:	f000 f868 	bl	800640c <_lseek_r>
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	4632      	mov	r2, r6
 800634a:	463b      	mov	r3, r7
 800634c:	4628      	mov	r0, r5
 800634e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006352:	f000 b817 	b.w	8006384 <_write_r>

08006356 <__sseek>:
 8006356:	b510      	push	{r4, lr}
 8006358:	460c      	mov	r4, r1
 800635a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635e:	f000 f855 	bl	800640c <_lseek_r>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	bf15      	itete	ne
 8006368:	6560      	strne	r0, [r4, #84]	; 0x54
 800636a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800636e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006372:	81a3      	strheq	r3, [r4, #12]
 8006374:	bf18      	it	ne
 8006376:	81a3      	strhne	r3, [r4, #12]
 8006378:	bd10      	pop	{r4, pc}

0800637a <__sclose>:
 800637a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637e:	f000 b813 	b.w	80063a8 <_close_r>
	...

08006384 <_write_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4c07      	ldr	r4, [pc, #28]	; (80063a4 <_write_r+0x20>)
 8006388:	4605      	mov	r5, r0
 800638a:	4608      	mov	r0, r1
 800638c:	4611      	mov	r1, r2
 800638e:	2200      	movs	r2, #0
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	f7fe fb5a 	bl	8004a4c <_write>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d102      	bne.n	80063a2 <_write_r+0x1e>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	b103      	cbz	r3, 80063a2 <_write_r+0x1e>
 80063a0:	602b      	str	r3, [r5, #0]
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	20001db0 	.word	0x20001db0

080063a8 <_close_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4c06      	ldr	r4, [pc, #24]	; (80063c4 <_close_r+0x1c>)
 80063ac:	2300      	movs	r3, #0
 80063ae:	4605      	mov	r5, r0
 80063b0:	4608      	mov	r0, r1
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	f7fe fdb0 	bl	8004f18 <_close>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_close_r+0x1a>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_close_r+0x1a>
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	20001db0 	.word	0x20001db0

080063c8 <_fstat_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4c07      	ldr	r4, [pc, #28]	; (80063e8 <_fstat_r+0x20>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	4605      	mov	r5, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	4611      	mov	r1, r2
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	f7fe fda2 	bl	8004f1e <_fstat>
 80063da:	1c43      	adds	r3, r0, #1
 80063dc:	d102      	bne.n	80063e4 <_fstat_r+0x1c>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	b103      	cbz	r3, 80063e4 <_fstat_r+0x1c>
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	bf00      	nop
 80063e8:	20001db0 	.word	0x20001db0

080063ec <_isatty_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4c06      	ldr	r4, [pc, #24]	; (8006408 <_isatty_r+0x1c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4605      	mov	r5, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	f7fe fd96 	bl	8004f28 <_isatty>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_isatty_r+0x1a>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b103      	cbz	r3, 8006406 <_isatty_r+0x1a>
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20001db0 	.word	0x20001db0

0800640c <_lseek_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4c07      	ldr	r4, [pc, #28]	; (800642c <_lseek_r+0x20>)
 8006410:	4605      	mov	r5, r0
 8006412:	4608      	mov	r0, r1
 8006414:	4611      	mov	r1, r2
 8006416:	2200      	movs	r2, #0
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f7fe fd86 	bl	8004f2c <_lseek>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_lseek_r+0x1e>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	b103      	cbz	r3, 800642a <_lseek_r+0x1e>
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	20001db0 	.word	0x20001db0

08006430 <__malloc_lock>:
 8006430:	4770      	bx	lr

08006432 <__malloc_unlock>:
 8006432:	4770      	bx	lr

08006434 <_read_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4c07      	ldr	r4, [pc, #28]	; (8006454 <_read_r+0x20>)
 8006438:	4605      	mov	r5, r0
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	2200      	movs	r2, #0
 8006440:	6022      	str	r2, [r4, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f7fe fd40 	bl	8004ec8 <_read>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_read_r+0x1e>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	b103      	cbz	r3, 8006452 <_read_r+0x1e>
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20001db0 	.word	0x20001db0

08006458 <_init>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr

08006464 <_fini>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	bf00      	nop
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr

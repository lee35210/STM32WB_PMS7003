
UART_PMS7003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000004  08006a94  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c90  200001e8  08006c78  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00001500  20001e78  08006c78  00021e78  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026565  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004fee  00000000  00000000  0004677d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000df70  00000000  00000000  0004b76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013f0  00000000  00000000  000596e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001e60  00000000  00000000  0005aad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b76b  00000000  00000000  0005c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007aa7  00000000  00000000  0006809b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006fb42  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c38  00000000  00000000  0006fbc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08006818 	.word	0x08006818

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	08006818 	.word	0x08006818

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000532:	4c10      	ldr	r4, [pc, #64]	; (8000574 <HAL_InitTick+0x44>)
 8000534:	6823      	ldr	r3, [r4, #0]
{
 8000536:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000538:	b90b      	cbnz	r3, 800053e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800053a:	2001      	movs	r0, #1
 800053c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800053e:	f001 ff05 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8000542:	6822      	ldr	r2, [r4, #0]
 8000544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000548:	fbb3 f3f2 	udiv	r3, r3, r2
 800054c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000550:	f000 f8aa 	bl	80006a8 <HAL_SYSTICK_Config>
 8000554:	4604      	mov	r4, r0
 8000556:	2800      	cmp	r0, #0
 8000558:	d1ef      	bne.n	800053a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	2d0f      	cmp	r5, #15
 800055c:	d8ed      	bhi.n	800053a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055e:	4602      	mov	r2, r0
 8000560:	4629      	mov	r1, r5
 8000562:	f04f 30ff 	mov.w	r0, #4294967295
 8000566:	f000 f85d 	bl	8000624 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_InitTick+0x48>)
 800056c:	4620      	mov	r0, r4
 800056e:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000570:	bd38      	pop	{r3, r4, r5, pc}
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	20000008 	.word	0x20000008

0800057c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <HAL_Init+0x28>)
 800057e:	6813      	ldr	r3, [r2, #0]
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000584:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	f000 f839 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffce 	bl	8000530 <HAL_InitTick>
 8000594:	4604      	mov	r4, r0
 8000596:	b918      	cbnz	r0, 80005a0 <HAL_Init+0x24>
    HAL_MspInit();
 8000598:	f004 fd32 	bl	8005000 <HAL_MspInit>
}
 800059c:	4620      	mov	r0, r4
 800059e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005a0:	2401      	movs	r4, #1
 80005a2:	e7fb      	b.n	800059c <HAL_Init+0x20>
 80005a4:	58004000 	.word	0x58004000

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4904      	ldr	r1, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6813      	ldr	r3, [r2, #0]
 80005ae:	6809      	ldr	r1, [r1, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000434 	.word	0x20000434
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000434 	.word	0x20000434

080005cc <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <HAL_GetTickPrio+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000008 	.word	0x20000008

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80005d8:	b538      	push	{r3, r4, r5, lr}
 80005da:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff fff0 	bl	80005c0 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80005e0:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 80005e2:	bf1c      	itt	ne
 80005e4:	4b05      	ldrne	r3, [pc, #20]	; (80005fc <HAL_Delay+0x24>)
 80005e6:	681b      	ldrne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 80005e8:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 80005ea:	bf18      	it	ne
 80005ec:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80005ee:	f7ff ffe7 	bl	80005c0 <HAL_GetTick>
 80005f2:	1b40      	subs	r0, r0, r5
 80005f4:	4284      	cmp	r4, r0
 80005f6:	d8fa      	bhi.n	80005ee <HAL_Delay+0x16>
    {
    }
  }
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000602:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000604:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	0200      	lsls	r0, r0, #8
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800061a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800061c:	60d3      	str	r3, [r2, #12]
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	68dc      	ldr	r4, [r3, #12]
 800062a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000634:	2b04      	cmp	r3, #4
 8000636:	bf28      	it	cs
 8000638:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f04f 0501 	mov.w	r5, #1
 8000640:	fa05 f303 	lsl.w	r3, r5, r3
 8000644:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000648:	bf8c      	ite	hi
 800064a:	3c03      	subhi	r4, #3
 800064c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064e:	4019      	ands	r1, r3
 8000650:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000652:	fa05 f404 	lsl.w	r4, r5, r4
 8000656:	3c01      	subs	r4, #1
 8000658:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800065a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	ea42 0201 	orr.w	r2, r2, r1
 8000660:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	bfad      	iteet	ge
 8000666:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	f000 000f 	andlt.w	r0, r0, #15
 800066e:	4b06      	ldrlt	r3, [pc, #24]	; (8000688 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	bfb5      	itete	lt
 8000676:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	e000ed14 	.word	0xe000ed14

0800068c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800068c:	2800      	cmp	r0, #0
 800068e:	db08      	blt.n	80006a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000690:	0942      	lsrs	r2, r0, #5
 8000692:	2301      	movs	r3, #1
 8000694:	f000 001f 	and.w	r0, r0, #31
 8000698:	fa03 f000 	lsl.w	r0, r3, r0
 800069c:	4b01      	ldr	r3, [pc, #4]	; (80006a4 <HAL_NVIC_EnableIRQ+0x18>)
 800069e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	3801      	subs	r0, #1
 80006aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ae:	d20a      	bcs.n	80006c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	21f0      	movs	r1, #240	; 0xf0
 80006b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80006d4:	6803      	ldr	r3, [r0, #0]
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006dc:	bf88      	it	hi
 80006de:	490f      	ldrhi	r1, [pc, #60]	; (800071c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006e0:	f022 0203 	bic.w	r2, r2, #3
 80006e4:	bf9b      	ittet	ls
 80006e6:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 80006ea:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006ee:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006f0:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006f2:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80006f6:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006f8:	f1a3 0308 	sub.w	r3, r3, #8
 80006fc:	f04f 0214 	mov.w	r2, #20
 8000700:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000704:	f04f 0201 	mov.w	r2, #1
 8000708:	f003 031c 	and.w	r3, r3, #28
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000710:	bf88      	it	hi
 8000712:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000714:	6503      	str	r3, [r0, #80]	; 0x50
 8000716:	4770      	bx	lr
 8000718:	40020407 	.word	0x40020407
 800071c:	4002081c 	.word	0x4002081c
 8000720:	40020880 	.word	0x40020880

08000724 <HAL_DMA_Init>:
{
 8000724:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8000726:	4604      	mov	r4, r0
 8000728:	2800      	cmp	r0, #0
 800072a:	d05d      	beq.n	80007e8 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800072c:	6801      	ldr	r1, [r0, #0]
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <HAL_DMA_Init+0xc8>)
 8000730:	4299      	cmp	r1, r3
 8000732:	f04f 0014 	mov.w	r0, #20
 8000736:	d84a      	bhi.n	80007ce <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000738:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <HAL_DMA_Init+0xcc>)
 800073a:	440a      	add	r2, r1
 800073c:	fbb2 f2f0 	udiv	r2, r2, r0
 8000740:	0092      	lsls	r2, r2, #2
 8000742:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000744:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8000748:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800074a:	2302      	movs	r3, #2
 800074c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8000750:	68e0      	ldr	r0, [r4, #12]
 8000752:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8000754:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000756:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000758:	6920      	ldr	r0, [r4, #16]
 800075a:	4303      	orrs	r3, r0
 800075c:	6960      	ldr	r0, [r4, #20]
 800075e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000760:	69a0      	ldr	r0, [r4, #24]
 8000762:	4303      	orrs	r3, r0
 8000764:	69e0      	ldr	r0, [r4, #28]
 8000766:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000768:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800076a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800076e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000772:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000774:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8000776:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000778:	4620      	mov	r0, r4
 800077a:	f7ff ffab 	bl	80006d4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800077e:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000782:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000788:	bf04      	itt	eq
 800078a:	2300      	moveq	r3, #0
 800078c:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800078e:	6862      	ldr	r2, [r4, #4]
 8000790:	b2d3      	uxtb	r3, r2
 8000792:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000794:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000796:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000798:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800079a:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800079c:	d81f      	bhi.n	80007de <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80007a0:	4815      	ldr	r0, [pc, #84]	; (80007f8 <HAL_DMA_Init+0xd4>)
 80007a2:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007a4:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007a6:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007a8:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007aa:	2101      	movs	r1, #1
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007b4:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007b6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007ba:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007bc:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007be:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80007c0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80007c4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80007c8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 80007cc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_DMA_Init+0xd8>)
 80007d0:	440b      	add	r3, r1
 80007d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_DMA_Init+0xdc>)
 80007dc:	e7b4      	b.n	8000748 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80007de:	2300      	movs	r3, #0
 80007e0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80007e2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80007e4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80007e6:	e7ea      	b.n	80007be <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80007e8:	2001      	movs	r0, #1
}
 80007ea:	bd10      	pop	{r4, pc}
 80007ec:	40020407 	.word	0x40020407
 80007f0:	bffdfff8 	.word	0xbffdfff8
 80007f4:	1000823f 	.word	0x1000823f
 80007f8:	40020940 	.word	0x40020940
 80007fc:	bffdfbf8 	.word	0xbffdfbf8
 8000800:	40020400 	.word	0x40020400

08000804 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8000804:	b140      	cbz	r0, 8000818 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000806:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800080a:	2b02      	cmp	r3, #2
 800080c:	d006      	beq.n	800081c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800080e:	2304      	movs	r3, #4
 8000810:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8000812:	2300      	movs	r3, #0
 8000814:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000818:	2001      	movs	r0, #1
}
 800081a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800081c:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800081e:	6c81      	ldr	r1, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	f022 020e 	bic.w	r2, r2, #14
 8000826:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000828:	680a      	ldr	r2, [r1, #0]
 800082a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800082e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8000830:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000832:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000834:	f022 0201 	bic.w	r2, r2, #1
 8000838:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800083a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800083c:	f003 021c 	and.w	r2, r3, #28
 8000840:	2301      	movs	r3, #1
 8000842:	4093      	lsls	r3, r2
 8000844:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000846:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000848:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800084a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800084c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800084e:	b133      	cbz	r3, 800085e <HAL_DMA_Abort+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000856:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000858:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800085a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800085c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800085e:	2301      	movs	r3, #1
 8000860:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000864:	2300      	movs	r3, #0
 8000866:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 800086a:	4618      	mov	r0, r3
 800086c:	4770      	bx	lr

0800086e <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800086e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000872:	2b02      	cmp	r3, #2
{
 8000874:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000876:	d003      	beq.n	8000880 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000878:	2304      	movs	r3, #4
 800087a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800087c:	2001      	movs	r0, #1
 800087e:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000880:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000882:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	f022 020e 	bic.w	r2, r2, #14
 800088a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	f022 0201 	bic.w	r2, r2, #1
 8000892:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000894:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000896:	6813      	ldr	r3, [r2, #0]
 8000898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800089c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800089e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008a0:	f003 021c 	and.w	r2, r3, #28
 80008a4:	2301      	movs	r3, #1
 80008a6:	4093      	lsls	r3, r2
 80008a8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80008ac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80008ae:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80008b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80008b2:	b133      	cbz	r3, 80008c2 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008bc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80008be:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008c0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 80008c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80008ca:	2400      	movs	r4, #0
 80008cc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80008d0:	b113      	cbz	r3, 80008d8 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80008d2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008d4:	4620      	mov	r0, r4
 80008d6:	bd10      	pop	{r4, pc}
 80008d8:	4618      	mov	r0, r3
}
 80008da:	bd10      	pop	{r4, pc}

080008dc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80008de:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80008e0:	6803      	ldr	r3, [r0, #0]
{
 80008e2:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80008e4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008e8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80008ea:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80008ec:	2404      	movs	r4, #4
 80008ee:	4094      	lsls	r4, r2
 80008f0:	4226      	tst	r6, r4
 80008f2:	d00e      	beq.n	8000912 <HAL_DMA_IRQHandler+0x36>
 80008f4:	f015 0f04 	tst.w	r5, #4
 80008f8:	d00b      	beq.n	8000912 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008fe:	bf5e      	ittt	pl
 8000900:	681a      	ldrpl	r2, [r3, #0]
 8000902:	f022 0204 	bicpl.w	r2, r2, #4
 8000906:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8000908:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800090a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800090c:	b373      	cbz	r3, 800096c <HAL_DMA_IRQHandler+0x90>
}
 800090e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000910:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000912:	2402      	movs	r4, #2
 8000914:	4094      	lsls	r4, r2
 8000916:	4226      	tst	r6, r4
 8000918:	d012      	beq.n	8000940 <HAL_DMA_IRQHandler+0x64>
 800091a:	f015 0f02 	tst.w	r5, #2
 800091e:	d00f      	beq.n	8000940 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	0695      	lsls	r5, r2, #26
 8000924:	d406      	bmi.n	8000934 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	f022 020a 	bic.w	r2, r2, #10
 800092c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800092e:	2301      	movs	r3, #1
 8000930:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000934:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000936:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000938:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800093c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800093e:	e7e5      	b.n	800090c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000940:	2408      	movs	r4, #8
 8000942:	4094      	lsls	r4, r2
 8000944:	4234      	tst	r4, r6
 8000946:	d011      	beq.n	800096c <HAL_DMA_IRQHandler+0x90>
 8000948:	072c      	lsls	r4, r5, #28
 800094a:	d50f      	bpl.n	800096c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800094c:	681c      	ldr	r4, [r3, #0]
 800094e:	f024 040e 	bic.w	r4, r4, #14
 8000952:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000954:	2301      	movs	r3, #1
 8000956:	fa03 f202 	lsl.w	r2, r3, r2
 800095a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800095c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800095e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000962:	2300      	movs	r3, #0
 8000964:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000968:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800096a:	e7cf      	b.n	800090c <HAL_DMA_IRQHandler+0x30>
}
 800096c:	bc70      	pop	{r4, r5, r6}
 800096e:	4770      	bx	lr

08000970 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8000970:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8000972:	4770      	bx	lr

08000974 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000978:	4a55      	ldr	r2, [pc, #340]	; (8000ad0 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097a:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000980:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000984:	fa38 f403 	lsrs.w	r4, r8, r3
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 800098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800098e:	2401      	movs	r4, #1
 8000990:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000994:	ea18 050a 	ands.w	r5, r8, sl
 8000998:	f000 808f 	beq.w	8000aba <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099c:	684c      	ldr	r4, [r1, #4]
 800099e:	f024 0b10 	bic.w	fp, r4, #16
 80009a2:	f1bb 0f02 	cmp.w	fp, #2
 80009a6:	d111      	bne.n	80009cc <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 80009a8:	08df      	lsrs	r7, r3, #3
 80009aa:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009ae:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80009b2:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80009b8:	fa09 fc0e 	lsl.w	ip, r9, lr
 80009bc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009c0:	690e      	ldr	r6, [r1, #16]
 80009c2:	fa06 f60e 	lsl.w	r6, r6, lr
 80009c6:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 80009ca:	623e      	str	r6, [r7, #32]
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d0:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80009d2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d4:	fa07 f70c 	lsl.w	r7, r7, ip
 80009d8:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009da:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009de:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e4:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e8:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ec:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80009f0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f2:	d811      	bhi.n	8000a18 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 80009f4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009f6:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009fa:	68ce      	ldr	r6, [r1, #12]
 80009fc:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000a00:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000a04:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a06:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a08:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a0c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000a10:	409e      	lsls	r6, r3
 8000a12:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000a16:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a18:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a1a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a1c:	688e      	ldr	r6, [r1, #8]
 8000a1e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a22:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a24:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000a26:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a28:	d547      	bpl.n	8000aba <HAL_GPIO_Init+0x146>
 8000a2a:	f023 0703 	bic.w	r7, r3, #3
 8000a2e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a32:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a36:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a3a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a3c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a40:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a44:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a48:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a4c:	d037      	beq.n	8000abe <HAL_GPIO_Init+0x14a>
 8000a4e:	4e21      	ldr	r6, [pc, #132]	; (8000ad4 <HAL_GPIO_Init+0x160>)
 8000a50:	42b0      	cmp	r0, r6
 8000a52:	d036      	beq.n	8000ac2 <HAL_GPIO_Init+0x14e>
 8000a54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a58:	42b0      	cmp	r0, r6
 8000a5a:	d034      	beq.n	8000ac6 <HAL_GPIO_Init+0x152>
 8000a5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a60:	42b0      	cmp	r0, r6
 8000a62:	d032      	beq.n	8000aca <HAL_GPIO_Init+0x156>
 8000a64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a68:	42b0      	cmp	r0, r6
 8000a6a:	bf14      	ite	ne
 8000a6c:	2607      	movne	r6, #7
 8000a6e:	2604      	moveq	r6, #4
 8000a70:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a74:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a78:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000a7a:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8000a7e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a80:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000a84:	bf0c      	ite	eq
 8000a86:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a88:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000a8a:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8000a8e:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a92:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000a96:	bf0c      	ite	eq
 8000a98:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a9a:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000a9c:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000aa0:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000aa6:	bf0c      	ite	eq
 8000aa8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000aaa:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000aac:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8000aae:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab0:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000ab2:	bf54      	ite	pl
 8000ab4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000ab6:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000ab8:	6056      	str	r6, [r2, #4]
    position++;
 8000aba:	3301      	adds	r3, #1
 8000abc:	e762      	b.n	8000984 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abe:	2600      	movs	r6, #0
 8000ac0:	e7d6      	b.n	8000a70 <HAL_GPIO_Init+0xfc>
 8000ac2:	2601      	movs	r6, #1
 8000ac4:	e7d4      	b.n	8000a70 <HAL_GPIO_Init+0xfc>
 8000ac6:	2602      	movs	r6, #2
 8000ac8:	e7d2      	b.n	8000a70 <HAL_GPIO_Init+0xfc>
 8000aca:	2603      	movs	r6, #3
 8000acc:	e7d0      	b.n	8000a70 <HAL_GPIO_Init+0xfc>
 8000ace:	bf00      	nop
 8000ad0:	58000800 	.word	0x58000800
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	b10a      	cbz	r2, 8000ade <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ada:	6181      	str	r1, [r0, #24]
 8000adc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ade:	6281      	str	r1, [r0, #40]	; 0x28
 8000ae0:	4770      	bx	lr

08000ae2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ae2:	6943      	ldr	r3, [r0, #20]
 8000ae4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ae6:	bf14      	ite	ne
 8000ae8:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aea:	6181      	streq	r1, [r0, #24]
 8000aec:	4770      	bx	lr
	...

08000af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000af0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000af4:	68d9      	ldr	r1, [r3, #12]
 8000af6:	4201      	tst	r1, r0
 8000af8:	d002      	beq.n	8000b00 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000afa:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000afc:	f004 fa72 	bl	8004fe4 <HAL_GPIO_EXTI_Callback>
 8000b00:	bd08      	pop	{r3, pc}
 8000b02:	bf00      	nop
 8000b04:	58000800 	.word	0x58000800

08000b08 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000b08:	6803      	ldr	r3, [r0, #0]
 8000b0a:	699a      	ldr	r2, [r3, #24]
 8000b0c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000b0e:	bf44      	itt	mi
 8000b10:	2200      	movmi	r2, #0
 8000b12:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b14:	699a      	ldr	r2, [r3, #24]
 8000b16:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b18:	bf5e      	ittt	pl
 8000b1a:	699a      	ldrpl	r2, [r3, #24]
 8000b1c:	f042 0201 	orrpl.w	r2, r2, #1
 8000b20:	619a      	strpl	r2, [r3, #24]
 8000b22:	4770      	bx	lr

08000b24 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000b24:	f011 0301 	ands.w	r3, r1, #1
 8000b28:	d007      	beq.n	8000b3a <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000b2a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b32:	2b28      	cmp	r3, #40	; 0x28
 8000b34:	bf0c      	ite	eq
 8000b36:	2342      	moveq	r3, #66	; 0x42
 8000b38:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000b3a:	078a      	lsls	r2, r1, #30
 8000b3c:	d509      	bpl.n	8000b52 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000b3e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000b42:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000b46:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000b48:	bf0c      	ite	eq
 8000b4a:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b4e:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000b52:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000b54:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b58:	bf48      	it	mi
 8000b5a:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000b5e:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000b62:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000b64:	bf08      	it	eq
 8000b66:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000b6a:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000b6c:	6801      	ldr	r1, [r0, #0]
 8000b6e:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 8000b70:	bf08      	it	eq
 8000b72:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000b76:	ea22 0303 	bic.w	r3, r2, r3
 8000b7a:	600b      	str	r3, [r1, #0]
 8000b7c:	4770      	bx	lr

08000b7e <HAL_I2C_Init>:
{
 8000b7e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000b80:	4604      	mov	r4, r0
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d04a      	beq.n	8000c1c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000b8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b8e:	b91b      	cbnz	r3, 8000b98 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000b90:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000b94:	f004 fa36 	bl	8005004 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b98:	2324      	movs	r3, #36	; 0x24
 8000b9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000b9e:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ba0:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	f022 0201 	bic.w	r2, r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000baa:	6862      	ldr	r2, [r4, #4]
 8000bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bb0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bb2:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bb4:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bbe:	d124      	bne.n	8000c0a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bc4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bc6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bc8:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bdc:	6922      	ldr	r2, [r4, #16]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	69a1      	ldr	r1, [r4, #24]
 8000be2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000be8:	6a21      	ldr	r1, [r4, #32]
 8000bea:	69e2      	ldr	r2, [r4, #28]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	f042 0201 	orr.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bf8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000bfa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bfc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000bfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c02:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c04:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000c08:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c0e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c10:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c12:	bf04      	itt	eq
 8000c14:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000c18:	605a      	streq	r2, [r3, #4]
 8000c1a:	e7d4      	b.n	8000bc6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
}
 8000c1e:	bd10      	pop	{r4, pc}

08000c20 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000c20:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8000c22:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000c24:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000c26:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000c28:	b103      	cbz	r3, 8000c2c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000c2a:	4718      	bx	r3
 8000c2c:	4770      	bx	lr

08000c2e <HAL_I2C_SlaveTxCpltCallback>:
 8000c2e:	4770      	bx	lr

08000c30 <HAL_I2C_SlaveRxCpltCallback>:
 8000c30:	4770      	bx	lr

08000c32 <I2C_ITSlaveSeqCplt>:
{
 8000c32:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c34:	2500      	movs	r5, #0
 8000c36:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000c3a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c3e:	2b29      	cmp	r3, #41	; 0x29
 8000c40:	d10c      	bne.n	8000c5c <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000c42:	2328      	movs	r3, #40	; 0x28
 8000c44:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000c48:	2321      	movs	r3, #33	; 0x21
 8000c4a:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	f7ff ff69 	bl	8000b24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000c52:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000c56:	f7ff ffea 	bl	8000c2e <HAL_I2C_SlaveTxCpltCallback>
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000c5c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c60:	2b2a      	cmp	r3, #42	; 0x2a
 8000c62:	d10b      	bne.n	8000c7c <I2C_ITSlaveSeqCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000c64:	2328      	movs	r3, #40	; 0x28
 8000c66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000c6a:	2322      	movs	r3, #34	; 0x22
 8000c6c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000c6e:	2102      	movs	r1, #2
 8000c70:	f7ff ff58 	bl	8000b24 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000c74:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000c78:	f7ff ffda 	bl	8000c30 <HAL_I2C_SlaveRxCpltCallback>
 8000c7c:	bd38      	pop	{r3, r4, r5, pc}

08000c7e <HAL_I2C_AddrCallback>:
{
 8000c7e:	4770      	bx	lr

08000c80 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000c82:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000c8a:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000c90:	d134      	bne.n	8000cfc <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8000c92:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c94:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000c96:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000c98:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000c9a:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000c9c:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c9e:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8000ca0:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000ca4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ca8:	d120      	bne.n	8000cec <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000caa:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000cae:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8000cb2:	f015 0506 	ands.w	r5, r5, #6
 8000cb6:	d10e      	bne.n	8000cd6 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8000cb8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000cba:	3101      	adds	r1, #1
 8000cbc:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000cbe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000cc0:	2902      	cmp	r1, #2
 8000cc2:	d120      	bne.n	8000d06 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000cc4:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8000cc6:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000cc8:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000cca:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000cce:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000cd0:	f7ff ffd5 	bl	8000c7e <HAL_I2C_AddrCallback>
 8000cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	f7ff ff24 	bl	8000b24 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000ce2:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e7f1      	b.n	8000cd0 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000cec:	2104      	movs	r1, #4
 8000cee:	f7ff ff19 	bl	8000b24 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000cf8:	462a      	mov	r2, r5
 8000cfa:	e7f4      	b.n	8000ce6 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000d00:	2300      	movs	r3, #0
 8000d02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d08 <HAL_I2C_ListenCpltCallback>:
 8000d08:	4770      	bx	lr
	...

08000d0c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <I2C_ITListenCplt+0x60>)
{
 8000d0e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8000d10:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d12:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8000d18:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8000d1a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d1e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000d22:	074b      	lsls	r3, r1, #29
{
 8000d24:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000d26:	d512      	bpl.n	8000d4e <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d28:	6802      	ldr	r2, [r0, #0]
 8000d2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8000d30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d32:	3301      	adds	r3, #1
 8000d34:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000d36:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000d38:	b14b      	cbz	r3, 8000d4e <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8000d3e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000d40:	3b01      	subs	r3, #1
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000d46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000d4e:	4620      	mov	r0, r4
 8000d50:	2107      	movs	r1, #7
 8000d52:	f7ff fee7 	bl	8000b24 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	2210      	movs	r2, #16
 8000d5a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8000d62:	4620      	mov	r0, r4
 8000d64:	f7ff ffd0 	bl	8000d08 <HAL_I2C_ListenCpltCallback>
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	bf00      	nop
 8000d6c:	ffff0000 	.word	0xffff0000

08000d70 <HAL_I2C_ErrorCallback>:
 8000d70:	4770      	bx	lr

08000d72 <HAL_I2C_AbortCpltCallback>:
{
 8000d72:	4770      	bx	lr

08000d74 <I2C_ITError>:
{
 8000d74:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000d76:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8000d78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000d82:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000d84:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000d86:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000d88:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8000d8a:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000d8c:	2b02      	cmp	r3, #2
{
 8000d8e:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8000d90:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000d92:	d822      	bhi.n	8000dda <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000d94:	2103      	movs	r1, #3
 8000d96:	f7ff fec5 	bl	8000b24 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d9a:	2328      	movs	r3, #40	; 0x28
 8000d9c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8000da2:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8000da4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000daa:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000dac:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8000db0:	d020      	beq.n	8000df4 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8000db2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000db4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000db8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d03e      	beq.n	8000e3c <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <I2C_ITError+0xd4>)
 8000dc0:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000dc8:	f7ff fd51 	bl	800086e <HAL_DMA_Abort_IT>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d035      	beq.n	8000e3c <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000dd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000dd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8000dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000dd8:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000dda:	2107      	movs	r1, #7
 8000ddc:	f7ff fea2 	bl	8000b24 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000de0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000de4:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8000de6:	bf1c      	itt	ne
 8000de8:	2320      	movne	r3, #32
 8000dea:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	6303      	str	r3, [r0, #48]	; 0x30
 8000df2:	e7d7      	b.n	8000da4 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000df4:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8000df8:	d00e      	beq.n	8000e18 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000dfa:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8000dfc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e02:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8000e04:	b1d0      	cbz	r0, 8000e3c <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <I2C_ITError+0xd4>)
 8000e08:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8000e0a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000e0e:	f7ff fd2e 	bl	800086e <HAL_DMA_Abort_IT>
 8000e12:	b198      	cbz	r0, 8000e3c <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000e16:	e7dc      	b.n	8000dd2 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000e18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000e1c:	2b60      	cmp	r3, #96	; 0x60
 8000e1e:	d108      	bne.n	8000e32 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8000e20:	2320      	movs	r3, #32
 8000e22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e26:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f7ff ffa1 	bl	8000d72 <HAL_I2C_AbortCpltCallback>
 8000e30:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8000e32:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8000e36:	4620      	mov	r0, r4
 8000e38:	f7ff ff9a 	bl	8000d70 <HAL_I2C_ErrorCallback>
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	bf00      	nop
 8000e40:	ffff0000 	.word	0xffff0000
 8000e44:	08000f45 	.word	0x08000f45
 8000e48:	080010b9 	.word	0x080010b9

08000e4c <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000e4c:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e4e:	2220      	movs	r2, #32
{
 8000e50:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000e52:	681d      	ldr	r5, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e54:	61da      	str	r2, [r3, #28]
{
 8000e56:	460e      	mov	r6, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000e58:	2107      	movs	r1, #7
{
 8000e5a:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000e5c:	f7ff fe62 	bl	8000b24 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000e60:	6803      	ldr	r3, [r0, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e68:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e70:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e74:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e78:	f022 0201 	bic.w	r2, r2, #1
 8000e7c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000e7e:	f7ff fe43 	bl	8000b08 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8000e82:	0469      	lsls	r1, r5, #17
 8000e84:	d534      	bpl.n	8000ef0 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8000e86:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8000e88:	b11b      	cbz	r3, 8000e92 <I2C_ITSlaveCplt+0x46>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8000e92:	0773      	lsls	r3, r6, #29
 8000e94:	d510      	bpl.n	8000eb8 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000e96:	6822      	ldr	r2, [r4, #0]
 8000e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8000e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000ea4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8000ea6:	f026 0604 	bic.w	r6, r6, #4
    if ((hi2c->XferSize > 0U))
 8000eaa:	b12b      	cbz	r3, 8000eb8 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8000eac:	3b01      	subs	r3, #1
 8000eae:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000eb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000eb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b11b      	cbz	r3, 8000ec6 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000ebe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000ece:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8000ed0:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000ed2:	b18d      	cbz	r5, 8000ef8 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000ed4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff ff4c 	bl	8000d74 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000edc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000ee0:	2b28      	cmp	r3, #40	; 0x28
 8000ee2:	d12b      	bne.n	8000f3c <I2C_ITSlaveCplt+0xf0>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	4620      	mov	r0, r4
}
 8000ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8000eec:	f7ff bf0e 	b.w	8000d0c <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8000ef0:	042a      	lsls	r2, r5, #16
 8000ef2:	d5ce      	bpl.n	8000e92 <I2C_ITSlaveCplt+0x46>
    if (hi2c->hdmarx != NULL)
 8000ef4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000ef6:	e7c7      	b.n	8000e88 <I2C_ITSlaveCplt+0x3c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000ef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000efe:	d00d      	beq.n	8000f1c <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff fe96 	bl	8000c32 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <I2C_ITSlaveCplt+0xf4>)
 8000f08:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8000f0a:	2320      	movs	r3, #32
 8000f0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f10:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8000f14:	4620      	mov	r0, r4
 8000f16:	f7ff fef7 	bl	8000d08 <HAL_I2C_ListenCpltCallback>
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f1c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000f20:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f24:	2b22      	cmp	r3, #34	; 0x22
 8000f26:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8000f2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000f2e:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f30:	d102      	bne.n	8000f38 <I2C_ITSlaveCplt+0xec>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000f32:	f7ff fe7d 	bl	8000c30 <HAL_I2C_SlaveRxCpltCallback>
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000f38:	f7ff fe79 	bl	8000c2e <HAL_I2C_SlaveTxCpltCallback>
 8000f3c:	bd70      	pop	{r4, r5, r6, pc}
 8000f3e:	bf00      	nop
 8000f40:	ffff0000 	.word	0xffff0000

08000f44 <I2C_Slave_ISR_IT>:
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8000f48:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8000f4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8000f4e:	2a01      	cmp	r2, #1
{
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8000f54:	d07e      	beq.n	8001054 <I2C_Slave_ISR_IT+0x110>
 8000f56:	2201      	movs	r2, #1
 8000f58:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8000f5c:	06ca      	lsls	r2, r1, #27
 8000f5e:	d539      	bpl.n	8000fd4 <I2C_Slave_ISR_IT+0x90>
 8000f60:	06f2      	lsls	r2, r6, #27
 8000f62:	d537      	bpl.n	8000fd4 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8000f64:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8000f66:	b292      	uxth	r2, r2
 8000f68:	bb32      	cbnz	r2, 8000fb8 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8000f6a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000f6e:	2a28      	cmp	r2, #40	; 0x28
 8000f70:	d110      	bne.n	8000f94 <I2C_Slave_ISR_IT+0x50>
 8000f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f76:	d10d      	bne.n	8000f94 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8000f78:	f7ff fec8 	bl	8000d0c <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8000f7c:	06aa      	lsls	r2, r5, #26
 8000f7e:	d505      	bpl.n	8000f8c <I2C_Slave_ISR_IT+0x48>
 8000f80:	06b3      	lsls	r3, r6, #26
 8000f82:	d503      	bpl.n	8000f8c <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8000f84:	4629      	mov	r1, r5
 8000f86:	4620      	mov	r0, r4
 8000f88:	f7ff ff60 	bl	8000e4c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8000f94:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8000f98:	2a29      	cmp	r2, #41	; 0x29
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fa0:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8000fa2:	d1eb      	bne.n	8000f7c <I2C_Slave_ISR_IT+0x38>
 8000fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000fa8:	d0e8      	beq.n	8000f7c <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff fdac 	bl	8000b08 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f7ff fe3e 	bl	8000c32 <I2C_ITSlaveSeqCplt>
 8000fb6:	e7e1      	b.n	8000f7c <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fb8:	6802      	ldr	r2, [r0, #0]
 8000fba:	2110      	movs	r1, #16
 8000fbc:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000fbe:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8000fc0:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000fc4:	f042 0204 	orr.w	r2, r2, #4
 8000fc8:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8000fca:	d1d7      	bne.n	8000f7c <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8000fcc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000fce:	f7ff fed1 	bl	8000d74 <I2C_ITError>
 8000fd2:	e7d3      	b.n	8000f7c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8000fd4:	076a      	lsls	r2, r5, #29
 8000fd6:	d51c      	bpl.n	8001012 <I2C_Slave_ISR_IT+0xce>
 8000fd8:	0770      	lsls	r0, r6, #29
 8000fda:	d51a      	bpl.n	8001012 <I2C_Slave_ISR_IT+0xce>
    if (hi2c->XferCount > 0U)
 8000fdc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	b17a      	cbz	r2, 8001002 <I2C_Slave_ISR_IT+0xbe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fe2:	6821      	ldr	r1, [r4, #0]
 8000fe4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fe6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000fe8:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8000fea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fec:	3201      	adds	r2, #1
 8000fee:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000ff0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000ff2:	3a01      	subs	r2, #1
 8000ff4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ff6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000ff8:	3a01      	subs	r2, #1
 8000ffa:	b292      	uxth	r2, r2
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8000ffc:	f025 0504 	bic.w	r5, r5, #4
      hi2c->XferCount--;
 8001000:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001002:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001004:	b292      	uxth	r2, r2
 8001006:	2a00      	cmp	r2, #0
 8001008:	d1b8      	bne.n	8000f7c <I2C_Slave_ISR_IT+0x38>
 800100a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800100e:	d1cf      	bne.n	8000fb0 <I2C_Slave_ISR_IT+0x6c>
 8001010:	e7b4      	b.n	8000f7c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001012:	0729      	lsls	r1, r5, #28
 8001014:	d505      	bpl.n	8001022 <I2C_Slave_ISR_IT+0xde>
 8001016:	0732      	lsls	r2, r6, #28
 8001018:	d503      	bpl.n	8001022 <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff fe30 	bl	8000c80 <I2C_ITAddrCplt.isra.8>
 8001020:	e7ac      	b.n	8000f7c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001022:	07a8      	lsls	r0, r5, #30
 8001024:	d5aa      	bpl.n	8000f7c <I2C_Slave_ISR_IT+0x38>
 8001026:	07b1      	lsls	r1, r6, #30
 8001028:	d5a8      	bpl.n	8000f7c <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 800102a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800102c:	b292      	uxth	r2, r2
 800102e:	b16a      	cbz	r2, 800104c <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001038:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800103a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800103c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800103e:	3b01      	subs	r3, #1
 8001040:	b29b      	uxth	r3, r3
 8001042:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001044:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001046:	3b01      	subs	r3, #1
 8001048:	8523      	strh	r3, [r4, #40]	; 0x28
 800104a:	e797      	b.n	8000f7c <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800104c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8001050:	d194      	bne.n	8000f7c <I2C_Slave_ISR_IT+0x38>
 8001052:	e7ad      	b.n	8000fb0 <I2C_Slave_ISR_IT+0x6c>
  __HAL_LOCK(hi2c);
 8001054:	2002      	movs	r0, #2
}
 8001056:	bd70      	pop	{r4, r5, r6, pc}

08001058 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001058:	6803      	ldr	r3, [r0, #0]
 800105a:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800105c:	681a      	ldr	r2, [r3, #0]
{
 800105e:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001060:	05cc      	lsls	r4, r1, #23
 8001062:	d508      	bpl.n	8001076 <HAL_I2C_ER_IRQHandler+0x1e>
 8001064:	0614      	lsls	r4, r2, #24
 8001066:	d506      	bpl.n	8001076 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001068:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800106a:	f044 0401 	orr.w	r4, r4, #1
 800106e:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001070:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001074:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001076:	054c      	lsls	r4, r1, #21
 8001078:	d508      	bpl.n	800108c <HAL_I2C_ER_IRQHandler+0x34>
 800107a:	0614      	lsls	r4, r2, #24
 800107c:	d506      	bpl.n	800108c <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800107e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001080:	f044 0408 	orr.w	r4, r4, #8
 8001084:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001086:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800108a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800108c:	0589      	lsls	r1, r1, #22
 800108e:	d508      	bpl.n	80010a2 <HAL_I2C_ER_IRQHandler+0x4a>
 8001090:	0612      	lsls	r2, r2, #24
 8001092:	d506      	bpl.n	80010a2 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001096:	f042 0202 	orr.w	r2, r2, #2
 800109a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80010a2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80010a4:	f011 0f0b 	tst.w	r1, #11
 80010a8:	d003      	beq.n	80010b2 <HAL_I2C_ER_IRQHandler+0x5a>
}
 80010aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80010ae:	f7ff be61 	b.w	8000d74 <I2C_ITError>
}
 80010b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80010b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 80010ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 80010bc:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80010c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80010c4:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80010c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010ca:	2b60      	cmp	r3, #96	; 0x60
 80010cc:	d105      	bne.n	80010da <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 80010ce:	2320      	movs	r3, #32
 80010d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80010d4:	f7ff fe4d 	bl	8000d72 <HAL_I2C_AbortCpltCallback>
 80010d8:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80010da:	f7ff fe49 	bl	8000d70 <HAL_I2C_ErrorCallback>
 80010de:	bd08      	pop	{r3, pc}

080010e0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010e0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	2a20      	cmp	r2, #32
{
 80010e8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ea:	d11d      	bne.n	8001128 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d019      	beq.n	8001128 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010f4:	2324      	movs	r3, #36	; 0x24
 80010f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010fa:	6803      	ldr	r3, [r0, #0]
 80010fc:	681c      	ldr	r4, [r3, #0]
 80010fe:	f024 0401 	bic.w	r4, r4, #1
 8001102:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001104:	681c      	ldr	r4, [r3, #0]
 8001106:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800110a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800110c:	681c      	ldr	r4, [r3, #0]
 800110e:	4321      	orrs	r1, r4
 8001110:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	f041 0101 	orr.w	r1, r1, #1
 8001118:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800111a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800111c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001120:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001124:	4618      	mov	r0, r3
 8001126:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001128:	2002      	movs	r0, #2
  }
}
 800112a:	bd10      	pop	{r4, pc}

0800112c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800112c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001132:	b2e4      	uxtb	r4, r4
 8001134:	2c20      	cmp	r4, #32
 8001136:	d11c      	bne.n	8001172 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001138:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800113c:	2b01      	cmp	r3, #1
 800113e:	d018      	beq.n	8001172 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001140:	2324      	movs	r3, #36	; 0x24
 8001142:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001146:	6803      	ldr	r3, [r0, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001150:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001152:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001156:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800115a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001164:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001166:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800116a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800116e:	4618      	mov	r0, r3
 8001170:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001172:	2002      	movs	r0, #2
  }
}
 8001174:	bd10      	pop	{r4, pc}
	...

08001178 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001178:	4a02      	ldr	r2, [pc, #8]	; (8001184 <HAL_I2CEx_EnableFastModePlus+0xc>)
 800117a:	6853      	ldr	r3, [r2, #4]
 800117c:	4318      	orrs	r0, r3
 800117e:	6050      	str	r0, [r2, #4]
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40010000 	.word	0x40010000

08001188 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001188:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800118a:	4604      	mov	r4, r0
{
 800118c:	b086      	sub	sp, #24
  if (hpcd == NULL)
 800118e:	2800      	cmp	r0, #0
 8001190:	d057      	beq.n	8001242 <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001192:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001196:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800119a:	b91b      	cbnz	r3, 80011a4 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800119c:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011a0:	f004 f97e 	bl	80054a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a4:	2303      	movs	r3, #3
 80011a6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011aa:	6820      	ldr	r0, [r4, #0]
 80011ac:	f002 fc03 	bl	80039b6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	2200      	movs	r2, #0
 80011b2:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011b4:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b6:	4615      	mov	r5, r2
 80011b8:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ba:	4298      	cmp	r0, r3
 80011bc:	f102 0201 	add.w	r2, r2, #1
 80011c0:	d820      	bhi.n	8001204 <HAL_PCD_Init+0x7c>
 80011c2:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011c4:	4611      	mov	r1, r2
 80011c6:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c8:	4298      	cmp	r0, r3
 80011ca:	f102 0201 	add.w	r2, r2, #1
 80011ce:	d828      	bhi.n	8001222 <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011d0:	f104 0610 	add.w	r6, r4, #16
 80011d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011d6:	466d      	mov	r5, sp
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	6833      	ldr	r3, [r6, #0]
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	1d23      	adds	r3, r4, #4
 80011e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e2:	6820      	ldr	r0, [r4, #0]
 80011e4:	f002 fbf1 	bl	80039ca <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011e8:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80011ea:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80011ec:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011f0:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011f4:	69e3      	ldr	r3, [r4, #28]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f000 fbbb 	bl	8001976 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001200:	4628      	mov	r0, r5
 8001202:	e01f      	b.n	8001244 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 8001204:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8001208:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800120c:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 800120e:	3302      	adds	r3, #2
 8001210:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8001212:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001216:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 800121a:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 800121c:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800121e:	50e5      	str	r5, [r4, r3]
 8001220:	e7ca      	b.n	80011b8 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8001222:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001226:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 800122a:	330a      	adds	r3, #10
 800122c:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 800122e:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001232:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001236:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800123a:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800123e:	50e1      	str	r1, [r4, r3]
 8001240:	e7c1      	b.n	80011c6 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
}
 8001244:	b006      	add	sp, #24
 8001246:	bd70      	pop	{r4, r5, r6, pc}

08001248 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001248:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800124c:	2b01      	cmp	r3, #1
{
 800124e:	b510      	push	{r4, lr}
 8001250:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001252:	d00c      	beq.n	800126e <HAL_PCD_Start+0x26>
 8001254:	2301      	movs	r3, #1
 8001256:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800125a:	6800      	ldr	r0, [r0, #0]
 800125c:	f002 fe97 	bl	8003f8e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	f002 fb9d 	bl	80039a0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001266:	2000      	movs	r0, #0
 8001268:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 800126c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800126e:	2002      	movs	r0, #2
}
 8001270:	bd10      	pop	{r4, pc}

08001272 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001272:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8001276:	2a01      	cmp	r2, #1
{
 8001278:	b510      	push	{r4, lr}
 800127a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800127c:	d00b      	beq.n	8001296 <HAL_PCD_SetAddress+0x24>
 800127e:	2201      	movs	r2, #1
 8001280:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001284:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001288:	6800      	ldr	r0, [r0, #0]
 800128a:	f002 fe7a 	bl	8003f82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800128e:	2000      	movs	r0, #0
 8001290:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8001294:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001296:	2002      	movs	r0, #2
  return HAL_OK;
}
 8001298:	bd10      	pop	{r4, pc}

0800129a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800129a:	b570      	push	{r4, r5, r6, lr}
 800129c:	4604      	mov	r4, r0
 800129e:	f001 0007 	and.w	r0, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80012a6:	b2c5      	uxtb	r5, r0
 80012a8:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ac:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 80012b0:	bf15      	itete	ne
 80012b2:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80012b6:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ba:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012bc:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 1U;
 80012c0:	bf15      	itete	ne
 80012c2:	2601      	movne	r6, #1
    ep->is_in = 0U;
 80012c4:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80012c6:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 80012ca:	f885 6129 	strbeq.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80012ce:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80012d0:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80012d2:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d4:	b2c0      	uxtb	r0, r0
 80012d6:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80012d8:	b102      	cbz	r2, 80012dc <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80012da:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012dc:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80012de:	bf04      	itt	eq
 80012e0:	2300      	moveq	r3, #0
 80012e2:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80012e4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d009      	beq.n	8001300 <HAL_PCD_EP_Open+0x66>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012f2:	6820      	ldr	r0, [r4, #0]
 80012f4:	f002 fb86 	bl	8003a04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001300:	2002      	movs	r0, #2
}
 8001302:	bd70      	pop	{r4, r5, r6, pc}

08001304 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001304:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001308:	f011 0f80 	tst.w	r1, #128	; 0x80
 800130c:	b2da      	uxtb	r2, r3
 800130e:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001312:	fb01 0102 	mla	r1, r1, r2, r0
{
 8001316:	b510      	push	{r4, lr}
 8001318:	4604      	mov	r4, r0
    ep->is_in = 1U;
 800131a:	bf19      	ittee	ne
 800131c:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001320:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001322:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 8001326:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 800132a:	bf15      	itete	ne
 800132c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800132e:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001330:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 8001334:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001338:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 800133a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800133e:	2b01      	cmp	r3, #1
 8001340:	d009      	beq.n	8001356 <HAL_PCD_EP_Close+0x52>
 8001342:	2301      	movs	r3, #1
 8001344:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	f002 fccd 	bl	8003ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800134e:	2000      	movs	r0, #0
 8001350:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001354:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001356:	2002      	movs	r0, #2
}
 8001358:	bd10      	pop	{r4, pc}

0800135a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800135a:	b570      	push	{r4, r5, r6, lr}
 800135c:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001360:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8001364:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001366:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001368:	f886 1128 	strb.w	r1, [r6, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800136c:	f504 7194 	add.w	r1, r4, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001370:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001372:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
  ep->xfer_len = len;
 8001376:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
  ep->xfer_count = 0U;
 800137a:	f8c6 5144 	str.w	r5, [r6, #324]	; 0x144
  ep->is_in = 0U;
 800137e:	f886 5129 	strb.w	r5, [r6, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001382:	6800      	ldr	r0, [r0, #0]
 8001384:	f002 fe24 	bl	8003fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001388:	4628      	mov	r0, r5
 800138a:	bd70      	pop	{r4, r5, r6, pc}

0800138c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800138c:	f001 0107 	and.w	r1, r1, #7
 8001390:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001394:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8001398:	4770      	bx	lr

0800139a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800139a:	b570      	push	{r4, r5, r6, lr}
 800139c:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013a0:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 80013a4:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 80013a6:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 80013a8:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80013aa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ac:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013b0:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013b4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80013b6:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 80013b8:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 80013ba:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013be:	6800      	ldr	r0, [r0, #0]
 80013c0:	f002 fe06 	bl	8003fd0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80013c4:	4630      	mov	r0, r6
 80013c6:	bd70      	pop	{r4, r5, r6, pc}

080013c8 <HAL_PCD_IRQHandler>:
{
 80013c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013cc:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013ce:	6800      	ldr	r0, [r0, #0]
 80013d0:	f002 fde8 	bl	8003fa4 <USB_ReadInterrupts>
 80013d4:	0402      	lsls	r2, r0, #16
 80013d6:	f100 823a 	bmi.w	800184e <HAL_PCD_IRQHandler+0x486>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013da:	6820      	ldr	r0, [r4, #0]
 80013dc:	f002 fde2 	bl	8003fa4 <USB_ReadInterrupts>
 80013e0:	0543      	lsls	r3, r0, #21
 80013e2:	d50f      	bpl.n	8001404 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013e4:	6822      	ldr	r2, [r4, #0]
 80013e6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80013ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 80013f2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80013f8:	f004 f8a3 	bl	8005542 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013fc:	2100      	movs	r1, #0
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ff37 	bl	8001272 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001404:	6820      	ldr	r0, [r4, #0]
 8001406:	f002 fdcd 	bl	8003fa4 <USB_ReadInterrupts>
 800140a:	0443      	lsls	r3, r0, #17
 800140c:	d508      	bpl.n	8001420 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800140e:	6822      	ldr	r2, [r4, #0]
 8001410:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	f002 fdbf 	bl	8003fa4 <USB_ReadInterrupts>
 8001426:	0487      	lsls	r7, r0, #18
 8001428:	d508      	bpl.n	800143c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800142a:	6822      	ldr	r2, [r4, #0]
 800142c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	0c1b      	lsrs	r3, r3, #16
 8001438:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800143c:	6820      	ldr	r0, [r4, #0]
 800143e:	f002 fdb1 	bl	8003fa4 <USB_ReadInterrupts>
 8001442:	04c6      	lsls	r6, r0, #19
 8001444:	d526      	bpl.n	8001494 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	041b      	lsls	r3, r3, #16
 8001452:	0c1b      	lsrs	r3, r3, #16
 8001454:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001458:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800145c:	f023 0308 	bic.w	r3, r3, #8
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	0c1b      	lsrs	r3, r3, #16
 8001464:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001468:	f894 3260 	ldrb.w	r3, [r4, #608]	; 0x260
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8001470:	2100      	movs	r1, #0
 8001472:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001476:	4620      	mov	r0, r4
 8001478:	f004 f966 	bl	8005748 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 800147c:	4620      	mov	r0, r4
 800147e:	f004 f883 	bl	8005588 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	0c1b      	lsrs	r3, r3, #16
 8001490:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	f002 fd85 	bl	8003fa4 <USB_ReadInterrupts>
 800149a:	0505      	lsls	r5, r0, #20
 800149c:	d51d      	bpl.n	80014da <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800149e:	6820      	ldr	r0, [r4, #0]
 80014a0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014ae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80014b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80014be:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80014cc:	f002 fd6a 	bl	8003fa4 <USB_ReadInterrupts>
 80014d0:	04c0      	lsls	r0, r0, #19
 80014d2:	d402      	bmi.n	80014da <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f004 f847 	bl	8005568 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	f002 fd62 	bl	8003fa4 <USB_ReadInterrupts>
 80014e0:	0601      	lsls	r1, r0, #24
 80014e2:	d529      	bpl.n	8001538 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80014ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ee:	0412      	lsls	r2, r2, #16
 80014f0:	0c12      	lsrs	r2, r2, #16
 80014f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014f6:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	f040 81ac 	bne.w	8001858 <HAL_PCD_IRQHandler+0x490>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001500:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001504:	b292      	uxth	r2, r2
 8001506:	f042 0204 	orr.w	r2, r2, #4
 800150a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800150e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001512:	b292      	uxth	r2, r2
 8001514:	f042 0208 	orr.w	r2, r2, #8
 8001518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800151c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001520:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8001524:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001526:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 800152a:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800152e:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001532:	4620      	mov	r0, r4
 8001534:	f004 f908 	bl	8005748 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	f002 fd33 	bl	8003fa4 <USB_ReadInterrupts>
 800153e:	0582      	lsls	r2, r0, #22
 8001540:	d50b      	bpl.n	800155a <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001542:	6822      	ldr	r2, [r4, #0]
 8001544:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001554:	4620      	mov	r0, r4
 8001556:	f003 fff0 	bl	800553a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f002 fd22 	bl	8003fa4 <USB_ReadInterrupts>
 8001560:	05c3      	lsls	r3, r0, #23
 8001562:	d508      	bpl.n	8001576 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800156a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 800157a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800157e:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001580:	f011 070f 	ands.w	r7, r1, #15
 8001584:	f040 80ab 	bne.w	80016de <HAL_PCD_IRQHandler+0x316>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001588:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800158a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800158e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001590:	d12b      	bne.n	80015ea <HAL_PCD_IRQHandler+0x222>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001592:	ea03 030a 	and.w	r3, r3, sl
 8001596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800159c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015a0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80015a4:	f200 4002 	addw	r0, r0, #1026	; 0x402
 80015a8:	fa10 f083 	uxtah	r0, r0, r3
 80015ac:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 80015b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015b6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80015b8:	4413      	add	r3, r2
 80015ba:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015bc:	4620      	mov	r0, r4
 80015be:	f003 ffb5 	bl	800552c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015c2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80015c6:	b153      	cbz	r3, 80015de <HAL_PCD_IRQHandler+0x216>
 80015c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015ca:	b942      	cbnz	r2, 80015de <HAL_PCD_IRQHandler+0x216>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80015d0:	6821      	ldr	r1, [r4, #0]
 80015d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d6:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015da:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80015e4:	041a      	lsls	r2, r3, #16
 80015e6:	d4c8      	bmi.n	800157a <HAL_PCD_IRQHandler+0x1b2>
 80015e8:	e6f7      	b.n	80013da <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015ea:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80015ee:	d020      	beq.n	8001632 <HAL_PCD_IRQHandler+0x26a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80015f4:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80015f8:	f200 4106 	addw	r1, r0, #1030	; 0x406
 80015fc:	fa11 f383 	uxtah	r3, r1, r3

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001600:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001604:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8001608:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800160c:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001610:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001614:	f002 fdbe 	bl	8004194 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	8813      	ldrh	r3, [r2, #0]
 800161c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001620:	051b      	lsls	r3, r3, #20
 8001622:	0d1b      	lsrs	r3, r3, #20
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800162a:	4620      	mov	r0, r4
 800162c:	f003 ff70 	bl	8005510 <HAL_PCD_SetupStageCallback>
 8001630:	e7d5      	b.n	80015de <HAL_PCD_IRQHandler+0x216>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001632:	041f      	lsls	r7, r3, #16
 8001634:	d5d3      	bpl.n	80015de <HAL_PCD_IRQHandler+0x216>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001636:	8803      	ldrh	r3, [r0, #0]
 8001638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163c:	051b      	lsls	r3, r3, #20
 800163e:	0d1b      	lsrs	r3, r3, #20
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001646:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800164a:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800164e:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001652:	fa11 f383 	uxtah	r3, r1, r3
 8001656:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 800165a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800165e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001662:	b18b      	cbz	r3, 8001688 <HAL_PCD_IRQHandler+0x2c0>
 8001664:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001668:	b171      	cbz	r1, 8001688 <HAL_PCD_IRQHandler+0x2c0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800166a:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800166e:	f002 fd91 	bl	8004194 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8001672:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001676:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 800167a:	4413      	add	r3, r2
 800167c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001680:	4629      	mov	r1, r5
 8001682:	4620      	mov	r0, r4
 8001684:	f003 ff4a 	bl	800551c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001688:	6820      	ldr	r0, [r4, #0]
 800168a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800168e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001692:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001696:	b292      	uxth	r2, r2
 8001698:	b933      	cbnz	r3, 80016a8 <HAL_PCD_IRQHandler+0x2e0>
 800169a:	5aab      	ldrh	r3, [r5, r2]
 800169c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80016a0:	ea43 030b 	orr.w	r3, r3, fp
 80016a4:	52ab      	strh	r3, [r5, r2]
 80016a6:	e007      	b.n	80016b8 <HAL_PCD_IRQHandler+0x2f0>
 80016a8:	2b3d      	cmp	r3, #61	; 0x3d
 80016aa:	d814      	bhi.n	80016d6 <HAL_PCD_IRQHandler+0x30e>
 80016ac:	0859      	lsrs	r1, r3, #1
 80016ae:	07de      	lsls	r6, r3, #31
 80016b0:	bf48      	it	mi
 80016b2:	3101      	addmi	r1, #1
 80016b4:	0289      	lsls	r1, r1, #10
 80016b6:	52a9      	strh	r1, [r5, r2]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016b8:	8803      	ldrh	r3, [r0, #0]
 80016ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	8003      	strh	r3, [r0, #0]
 80016d4:	e783      	b.n	80015de <HAL_PCD_IRQHandler+0x216>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	ea4b 2383 	orr.w	r3, fp, r3, lsl #10
 80016dc:	e7e2      	b.n	80016a4 <HAL_PCD_IRQHandler+0x2dc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016de:	b23e      	sxth	r6, r7
 80016e0:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 80016e4:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016e8:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80016ec:	d040      	beq.n	8001770 <HAL_PCD_IRQHandler+0x3a8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016ee:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80016f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f6:	051b      	lsls	r3, r3, #20
 80016f8:	0d1b      	lsrs	r3, r3, #20
 80016fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80016fe:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001702:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001706:	eb04 0108 	add.w	r1, r4, r8
 800170a:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 800170e:	2b00      	cmp	r3, #0
 8001710:	d159      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x3fe>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001712:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001716:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 800171a:	f200 4506 	addw	r5, r0, #1030	; 0x406
 800171e:	fa15 f383 	uxtah	r3, r5, r3
 8001722:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001726:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800172a:	b135      	cbz	r5, 800173a <HAL_PCD_IRQHandler+0x372>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800172c:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8001730:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001734:	462b      	mov	r3, r5
 8001736:	f002 fd2d 	bl	8004194 <USB_ReadPMA>
 800173a:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 800173e:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 8001742:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8001746:	442a      	add	r2, r5
 8001748:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        ep->xfer_buff += count;
 800174c:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 8001750:	442a      	add	r2, r5
 8001752:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175a:	b11b      	cbz	r3, 8001764 <HAL_PCD_IRQHandler+0x39c>
 800175c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001760:	4285      	cmp	r5, r0
 8001762:	d26b      	bcs.n	800183c <HAL_PCD_IRQHandler+0x474>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001764:	44a0      	add	r8, r4
 8001766:	4620      	mov	r0, r4
 8001768:	f898 1128 	ldrb.w	r1, [r8, #296]	; 0x128
 800176c:	f003 fed6 	bl	800551c <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001770:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001774:	f43f af33 	beq.w	80015de <HAL_PCD_IRQHandler+0x216>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 800177e:	b29b      	uxth	r3, r3
 8001780:	ea03 030a 	and.w	r3, r3, sl
 8001784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001788:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800178c:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8001790:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001794:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001798:	f202 4202 	addw	r2, r2, #1026	; 0x402
 800179c:	fa12 f283 	uxtah	r2, r2, r3
 80017a0:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80017a4:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
 80017a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017ac:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80017ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80017b4:	441a      	add	r2, r3
 80017b6:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80017b8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017ba:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d143      	bne.n	8001848 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017c0:	f003 feb4 	bl	800552c <HAL_PCD_DataInStageCallback>
 80017c4:	e70b      	b.n	80015de <HAL_PCD_IRQHandler+0x216>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017c6:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 80017ca:	b213      	sxth	r3, r2
 80017cc:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80017d0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017d8:	d022      	beq.n	8001820 <HAL_PCD_IRQHandler+0x458>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017da:	f200 4502 	addw	r5, r0, #1026	; 0x402
 80017de:	fa15 f383 	uxtah	r3, r5, r3
 80017e2:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80017e6:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80017ea:	b135      	cbz	r5, 80017fa <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017ec:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 80017f0:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017f2:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80017f6:	f002 fccd 	bl	8004194 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017fa:	eb04 0308 	add.w	r3, r4, r8
 80017fe:	6822      	ldr	r2, [r4, #0]
 8001800:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8001804:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001808:	b29b      	uxth	r3, r3
 800180a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800181a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800181e:	e78c      	b.n	800173a <HAL_PCD_IRQHandler+0x372>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001820:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001824:	fa15 f383 	uxtah	r3, r5, r3
 8001828:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 800182c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001830:	2d00      	cmp	r5, #0
 8001832:	d0e2      	beq.n	80017fa <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001834:	462b      	mov	r3, r5
 8001836:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800183a:	e7da      	b.n	80017f2 <HAL_PCD_IRQHandler+0x42a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800183c:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff fd8a 	bl	800135a <HAL_PCD_EP_Receive>
 8001846:	e793      	b.n	8001770 <HAL_PCD_IRQHandler+0x3a8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001848:	f7ff fda7 	bl	800139a <HAL_PCD_EP_Transmit>
 800184c:	e6c7      	b.n	80015de <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800184e:	f8df a010 	ldr.w	sl, [pc, #16]	; 8001860 <HAL_PCD_IRQHandler+0x498>
 8001852:	f8df b010 	ldr.w	fp, [pc, #16]	; 8001864 <HAL_PCD_IRQHandler+0x49c>
 8001856:	e6c2      	b.n	80015de <HAL_PCD_IRQHandler+0x216>
      HAL_PCD_SuspendCallback(hpcd);
 8001858:	4620      	mov	r0, r4
 800185a:	f003 fe85 	bl	8005568 <HAL_PCD_SuspendCallback>
 800185e:	e66b      	b.n	8001538 <HAL_PCD_IRQHandler+0x170>
 8001860:	ffff8f0f 	.word	0xffff8f0f
 8001864:	ffff8000 	.word	0xffff8000

08001868 <HAL_PCD_EP_SetStall>:
{
 8001868:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800186a:	6843      	ldr	r3, [r0, #4]
 800186c:	f001 0507 	and.w	r5, r1, #7
 8001870:	429d      	cmp	r5, r3
{
 8001872:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001874:	d82d      	bhi.n	80018d2 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001876:	f011 0f80 	tst.w	r1, #128	; 0x80
 800187a:	f04f 0320 	mov.w	r3, #32
 800187e:	d01e      	beq.n	80018be <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8001880:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001884:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001888:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188a:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 800188c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 8001890:	2201      	movs	r2, #1
 8001892:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001894:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001896:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
 800189a:	4291      	cmp	r1, r2
 800189c:	d01b      	beq.n	80018d6 <HAL_PCD_EP_SetStall+0x6e>
 800189e:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018a2:	4619      	mov	r1, r3
 80018a4:	6820      	ldr	r0, [r4, #0]
 80018a6:	f002 faff 	bl	8003ea8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018aa:	b925      	cbnz	r5, 80018b6 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018ac:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80018b0:	6820      	ldr	r0, [r4, #0]
 80018b2:	f002 fb7b 	bl	8003fac <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80018be:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 80018c2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80018c6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80018c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 80018cc:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
 80018d0:	e7de      	b.n	8001890 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80018d2:	2001      	movs	r0, #1
 80018d4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80018d6:	2002      	movs	r0, #2
}
 80018d8:	bd38      	pop	{r3, r4, r5, pc}

080018da <HAL_PCD_EP_ClrStall>:
{
 80018da:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018dc:	6843      	ldr	r3, [r0, #4]
 80018de:	f001 020f 	and.w	r2, r1, #15
 80018e2:	429a      	cmp	r2, r3
{
 80018e4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018e6:	d82a      	bhi.n	800193e <HAL_PCD_EP_ClrStall+0x64>
 80018e8:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80018ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	fb01 0102 	mla	r1, r1, r2, r0
 80018fa:	bf19      	ittee	ne
 80018fc:	3128      	addne	r1, #40	; 0x28
    ep->is_in = 1U;
 80018fe:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001902:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 8001906:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 800190a:	bf14      	ite	ne
 800190c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800190e:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8001910:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001914:	bf14      	ite	ne
 8001916:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 800191a:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 800191e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001920:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001922:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001926:	2b01      	cmp	r3, #1
 8001928:	d00b      	beq.n	8001942 <HAL_PCD_EP_ClrStall+0x68>
 800192a:	2301      	movs	r3, #1
 800192c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	f002 fada 	bl	8003eea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001936:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 800193a:	4628      	mov	r0, r5
 800193c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800193e:	2001      	movs	r0, #1
 8001940:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001942:	2002      	movs	r0, #2
}
 8001944:	bd38      	pop	{r3, r4, r5, pc}

08001946 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001946:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194a:	bf1b      	ittet	ne
 800194c:	f001 0107 	andne.w	r1, r1, #7
 8001950:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001954:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001958:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800195a:	bf08      	it	eq
 800195c:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001960:	b91a      	cbnz	r2, 800196a <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001962:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001964:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001966:	2000      	movs	r0, #0
 8001968:	4770      	bx	lr
    ep->doublebuffer = 1U;
 800196a:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800196c:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800196e:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001970:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001972:	8143      	strh	r3, [r0, #10]
 8001974:	e7f7      	b.n	8001966 <HAL_PCDEx_PMAConfig+0x20>

08001976 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001976:	6802      	ldr	r2, [r0, #0]
{
 8001978:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 800197a:	2101      	movs	r1, #1
 800197c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001980:	2000      	movs	r0, #0
 8001982:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001986:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800198a:	b29b      	uxth	r3, r3
 800198c:	430b      	orrs	r3, r1
 800198e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001992:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001996:	b29b      	uxth	r3, r3
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a4:	4a02      	ldr	r2, [pc, #8]	; (80019b0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80019a6:	6813      	ldr	r3, [r2, #0]
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4770      	bx	lr
 80019b0:	58000400 	.word	0x58000400

080019b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80019b6:	6818      	ldr	r0, [r3, #0]
}
 80019b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	58000400 	.word	0x58000400

080019c4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80019c4:	4a02      	ldr	r2, [pc, #8]	; (80019d0 <HAL_PWREx_EnableVddUSB+0xc>)
 80019c6:	6853      	ldr	r3, [r2, #4]
 80019c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019cc:	6053      	str	r3, [r2, #4]
 80019ce:	4770      	bx	lr
 80019d0:	58000400 	.word	0x58000400

080019d4 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	6818      	ldr	r0, [r3, #0]
}
 80019da:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80019de:	4770      	bx	lr

080019e0 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	6818      	ldr	r0, [r3, #0]
}
 80019e6:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 80019f4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	6818      	ldr	r0, [r3, #0]
}
 8001a00:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a10:	4318      	orrs	r0, r3
 8001a12:	6010      	str	r0, [r2, #0]
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 8001a20:	28b0      	cmp	r0, #176	; 0xb0
 8001a22:	bf28      	it	cs
 8001a24:	20b0      	movcs	r0, #176	; 0xb0
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2c:	6853      	ldr	r3, [r2, #4]
 8001a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a32:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001a36:	6050      	str	r0, [r2, #4]
 8001a38:	4770      	bx	lr

08001a3a <LL_RCC_PLL_IsReady>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3e:	6818      	ldr	r0, [r3, #0]
}
 8001a40:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8001a44:	4770      	bx	lr
	...

08001a48 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001a48:	28b0      	cmp	r0, #176	; 0xb0
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001a4c:	4a32      	ldr	r2, [pc, #200]	; (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001a4e:	bf98      	it	ls
 8001a50:	0900      	lsrls	r0, r0, #4
{
 8001a52:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001a54:	bf8c      	ite	hi
 8001a56:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001a58:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001a5c:	4c2f      	ldr	r4, [pc, #188]	; (8001b1c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001a62:	b08d      	sub	sp, #52	; 0x34
 8001a64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001a68:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001a6c:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8001a78:	fbb5 f5f3 	udiv	r5, r5, r3
 8001a7c:	f7ff ff9a 	bl	80019b4 <HAL_PWREx_GetVoltageRange>
 8001a80:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001a82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a86:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001a8a:	f104 0210 	add.w	r2, r4, #16
 8001a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a90:	ab01      	add	r3, sp, #4
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001a92:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001a94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001a98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001aa0:	ac0c      	add	r4, sp, #48	; 0x30
 8001aa2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa6:	d11f      	bne.n	8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8001aa8:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001aaa:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8001aae:	4295      	cmp	r5, r2
 8001ab0:	d815      	bhi.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001ab2:	aa0c      	add	r2, sp, #48	; 0x30
 8001ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ab8:	f853 4c10 	ldr.w	r4, [r3, #-16]
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001abc:	4d19      	ldr	r5, [pc, #100]	; (8001b24 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8001abe:	682b      	ldr	r3, [r5, #0]
 8001ac0:	f023 0307 	bic.w	r3, r3, #7
 8001ac4:	4323      	orrs	r3, r4
 8001ac6:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ac8:	f7fe fd7a 	bl	80005c0 <HAL_GetTick>
 8001acc:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d116      	bne.n	8001b06 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
}
 8001ada:	b00d      	add	sp, #52	; 0x34
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001ade:	3301      	adds	r3, #1
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d1e2      	bne.n	8001aaa <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001ae4:	2400      	movs	r4, #0
 8001ae6:	e7e9      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001ae8:	9b01      	ldr	r3, [sp, #4]
 8001aea:	429d      	cmp	r5, r3
 8001aec:	d907      	bls.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8001aee:	9b02      	ldr	r3, [sp, #8]
 8001af0:	429d      	cmp	r5, r3
 8001af2:	d906      	bls.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8001af4:	9b03      	ldr	r3, [sp, #12]
 8001af6:	429d      	cmp	r5, r3
 8001af8:	d8f4      	bhi.n	8001ae4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001afa:	2302      	movs	r3, #2
 8001afc:	e7d9      	b.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001afe:	2300      	movs	r3, #0
 8001b00:	e7d7      	b.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001b02:	2301      	movs	r3, #1
 8001b04:	e7d5      	b.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b06:	f7fe fd5b 	bl	80005c0 <HAL_GetTick>
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	2802      	cmp	r0, #2
 8001b0e:	d9de      	bls.n	8001ace <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	e7e2      	b.n	8001ada <RCC_SetFlashLatencyFromMSIRange+0x92>
 8001b14:	08006964 	.word	0x08006964
 8001b18:	08006904 	.word	0x08006904
 8001b1c:	08006830 	.word	0x08006830
 8001b20:	000f4240 	.word	0x000f4240
 8001b24:	58004000 	.word	0x58004000

08001b28 <HAL_RCC_OscConfig>:
{
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b908      	cbnz	r0, 8001b32 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b32:	6803      	ldr	r3, [r0, #0]
 8001b34:	069d      	lsls	r5, r3, #26
 8001b36:	d52a      	bpl.n	8001b8e <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3c:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b3e:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b40:	f013 030c 	ands.w	r3, r3, #12
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2a>
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d146      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xb0>
 8001b4a:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d142      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xb0>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b52:	f7ff ff52 	bl	80019fa <LL_RCC_MSI_IsReady>
 8001b56:	b110      	cbz	r0, 8001b5e <HAL_RCC_OscConfig+0x36>
 8001b58:	69e3      	ldr	r3, [r4, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0e7      	beq.n	8001b2e <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b60:	f7ff ff59 	bl	8001a16 <LL_RCC_MSI_GetRange>
 8001b64:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b66:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b68:	d92b      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x9a>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b6a:	f7ff ff6d 	bl	8001a48 <RCC_SetFlashLatencyFromMSIRange>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d1dd      	bne.n	8001b2e <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001b74:	f7ff ff47 	bl	8001a06 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b78:	6a20      	ldr	r0, [r4, #32]
 8001b7a:	f7ff ff55 	bl	8001a28 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 8001b7e:	f003 fbeb 	bl	8005358 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b82:	4bb8      	ldr	r3, [pc, #736]	; (8001e64 <HAL_RCC_OscConfig+0x33c>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f7fe fcd3 	bl	8000530 <HAL_InitTick>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d1cf      	bne.n	8001b2e <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	07d8      	lsls	r0, r3, #31
 8001b92:	d44e      	bmi.n	8001c32 <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	0799      	lsls	r1, r3, #30
 8001b98:	f100 8098 	bmi.w	8001ccc <HAL_RCC_OscConfig+0x1a4>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	f013 0f18 	tst.w	r3, #24
 8001ba2:	f040 80d9 	bne.w	8001d58 <HAL_RCC_OscConfig+0x230>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	075a      	lsls	r2, r3, #29
 8001baa:	f100 8168 	bmi.w	8001e7e <HAL_RCC_OscConfig+0x356>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	065a      	lsls	r2, r3, #25
 8001bb2:	f100 81ba 	bmi.w	8001f2a <HAL_RCC_OscConfig+0x402>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	f040 81e2 	bne.w	8001f82 <HAL_RCC_OscConfig+0x45a>
  return HAL_OK;
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc2:	f7ff ff20 	bl	8001a06 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc6:	6a20      	ldr	r0, [r4, #32]
 8001bc8:	f7ff ff2e 	bl	8001a28 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bce:	f7ff ff3b 	bl	8001a48 <RCC_SetFlashLatencyFromMSIRange>
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	d0d3      	beq.n	8001b7e <HAL_RCC_OscConfig+0x56>
 8001bd6:	e7aa      	b.n	8001b2e <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bd8:	69e2      	ldr	r2, [r4, #28]
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	b1ba      	cbz	r2, 8001c10 <HAL_RCC_OscConfig+0xe8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001be8:	f7fe fcea 	bl	80005c0 <HAL_GetTick>
 8001bec:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bee:	f7ff ff04 	bl	80019fa <LL_RCC_MSI_IsReady>
 8001bf2:	b130      	cbz	r0, 8001c02 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001bf6:	f7ff ff06 	bl	8001a06 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfa:	6a20      	ldr	r0, [r4, #32]
 8001bfc:	f7ff ff14 	bl	8001a28 <LL_RCC_MSI_SetCalibTrimming>
 8001c00:	e7c5      	b.n	8001b8e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c02:	f7fe fcdd 	bl	80005c0 <HAL_GetTick>
 8001c06:	1b40      	subs	r0, r0, r5
 8001c08:	2802      	cmp	r0, #2
 8001c0a:	d9f0      	bls.n	8001bee <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c18:	f7fe fcd2 	bl	80005c0 <HAL_GetTick>
 8001c1c:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c1e:	f7ff feec 	bl	80019fa <LL_RCC_MSI_IsReady>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d0b3      	beq.n	8001b8e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c26:	f7fe fccb 	bl	80005c0 <HAL_GetTick>
 8001c2a:	1b40      	subs	r0, r0, r5
 8001c2c:	2802      	cmp	r0, #2
 8001c2e:	d9f6      	bls.n	8001c1e <HAL_RCC_OscConfig+0xf6>
 8001c30:	e7ec      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c36:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c38:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c3a:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x126>
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d10b      	bne.n	8001c5e <HAL_RCC_OscConfig+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c46:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_OscConfig+0x136>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	f7ff fec1 	bl	80019d4 <LL_RCC_HSE_IsReady>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d09e      	beq.n	8001b94 <HAL_RCC_OscConfig+0x6c>
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d19b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x6c>
 8001c5c:	e767      	b.n	8001b2e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5e:	6862      	ldr	r2, [r4, #4]
 8001c60:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	d110      	bne.n	8001c8c <HAL_RCC_OscConfig+0x164>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c72:	f7fe fca5 	bl	80005c0 <HAL_GetTick>
 8001c76:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c78:	f7ff feac 	bl	80019d4 <LL_RCC_HSE_IsReady>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d189      	bne.n	8001b94 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7fe fc9e 	bl	80005c0 <HAL_GetTick>
 8001c84:	1b40      	subs	r0, r0, r5
 8001c86:	2864      	cmp	r0, #100	; 0x64
 8001c88:	d9f6      	bls.n	8001c78 <HAL_RCC_OscConfig+0x150>
 8001c8a:	e7bf      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c90:	d104      	bne.n	8001c9c <HAL_RCC_OscConfig+0x174>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e7e6      	b.n	8001c6a <HAL_RCC_OscConfig+0x142>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001ca2:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001caa:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cac:	2a00      	cmp	r2, #0
 8001cae:	d1e0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fc86 	bl	80005c0 <HAL_GetTick>
 8001cb4:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8001cb6:	f7ff fe8d 	bl	80019d4 <LL_RCC_HSE_IsReady>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	f43f af6a 	beq.w	8001b94 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7fe fc7e 	bl	80005c0 <HAL_GetTick>
 8001cc4:	1b40      	subs	r0, r0, r5
 8001cc6:	2864      	cmp	r0, #100	; 0x64
 8001cc8:	d9f5      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x18e>
 8001cca:	e79f      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd0:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cd2:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cd4:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x1c0>
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d114      	bne.n	8001d0a <HAL_RCC_OscConfig+0x1e2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ce0:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d110      	bne.n	8001d0a <HAL_RCC_OscConfig+0x1e2>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce8:	f7ff fe7a 	bl	80019e0 <LL_RCC_HSI_IsReady>
 8001cec:	b118      	cbz	r0, 8001cf6 <HAL_RCC_OscConfig+0x1ce>
 8001cee:	68e3      	ldr	r3, [r4, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f43f af1c 	beq.w	8001b2e <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfa:	6921      	ldr	r1, [r4, #16]
 8001cfc:	6853      	ldr	r3, [r2, #4]
 8001cfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001d02:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001d06:	6053      	str	r3, [r2, #4]
 8001d08:	e748      	b.n	8001b9c <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0a:	68e2      	ldr	r2, [r4, #12]
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	b182      	cbz	r2, 8001d34 <HAL_RCC_OscConfig+0x20c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d1a:	f7fe fc51 	bl	80005c0 <HAL_GetTick>
 8001d1e:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d20:	f7ff fe5e 	bl	80019e0 <LL_RCC_HSI_IsReady>
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d1e6      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7fe fc4a 	bl	80005c0 <HAL_GetTick>
 8001d2c:	1b40      	subs	r0, r0, r5
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d9f6      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1f8>
 8001d32:	e76b      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d3c:	f7fe fc40 	bl	80005c0 <HAL_GetTick>
 8001d40:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d42:	f7ff fe4d 	bl	80019e0 <LL_RCC_HSI_IsReady>
 8001d46:	2800      	cmp	r0, #0
 8001d48:	f43f af28 	beq.w	8001b9c <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7fe fc38 	bl	80005c0 <HAL_GetTick>
 8001d50:	1b40      	subs	r0, r0, r5
 8001d52:	2802      	cmp	r0, #2
 8001d54:	d9f5      	bls.n	8001d42 <HAL_RCC_OscConfig+0x21a>
 8001d56:	e759      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	6962      	ldr	r2, [r4, #20]
 8001d5a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	d06b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x312>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001d62:	06db      	lsls	r3, r3, #27
 8001d64:	d543      	bpl.n	8001dee <HAL_RCC_OscConfig+0x2c6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001d66:	f7ff fe41 	bl	80019ec <LL_RCC_LSI1_IsReady>
 8001d6a:	b310      	cbz	r0, 8001db2 <HAL_RCC_OscConfig+0x28a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d6c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001d70:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001d7c:	f7fe fc20 	bl	80005c0 <HAL_GetTick>
 8001d80:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d82:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d86:	071f      	lsls	r7, r3, #28
 8001d88:	f140 817d 	bpl.w	8002086 <HAL_RCC_OscConfig+0x55e>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d90:	69a2      	ldr	r2, [r4, #24]
 8001d92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d9a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d9e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001daa:	f7fe fc09 	bl	80005c0 <HAL_GetTick>
 8001dae:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001db0:	e018      	b.n	8001de4 <HAL_RCC_OscConfig+0x2bc>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001db2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8001dbe:	f7fe fbff 	bl	80005c0 <HAL_GetTick>
 8001dc2:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001dc4:	f7ff fe12 	bl	80019ec <LL_RCC_LSI1_IsReady>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d1cf      	bne.n	8001d6c <HAL_RCC_OscConfig+0x244>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001dcc:	f7fe fbf8 	bl	80005c0 <HAL_GetTick>
 8001dd0:	1b40      	subs	r0, r0, r5
 8001dd2:	2802      	cmp	r0, #2
 8001dd4:	d9f6      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x29c>
 8001dd6:	e719      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001dd8:	f7fe fbf2 	bl	80005c0 <HAL_GetTick>
 8001ddc:	1b40      	subs	r0, r0, r5
 8001dde:	2802      	cmp	r0, #2
 8001de0:	f63f af14 	bhi.w	8001c0c <HAL_RCC_OscConfig+0xe4>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001de4:	f7ff fe02 	bl	80019ec <LL_RCC_LSI1_IsReady>
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d1f5      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x2b0>
 8001dec:	e6db      	b.n	8001ba6 <HAL_RCC_OscConfig+0x7e>
 8001dee:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001dfa:	f7fe fbe1 	bl	80005c0 <HAL_GetTick>
 8001dfe:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001e00:	f7ff fdf4 	bl	80019ec <LL_RCC_LSI1_IsReady>
 8001e04:	b198      	cbz	r0, 8001e2e <HAL_RCC_OscConfig+0x306>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e0a:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e0c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e10:	f022 0204 	bic.w	r2, r2, #4
 8001e14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e18:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e1c:	0718      	lsls	r0, r3, #28
 8001e1e:	f57f aec2 	bpl.w	8001ba6 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e22:	f7fe fbcd 	bl	80005c0 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	2803      	cmp	r0, #3
 8001e2a:	d9f5      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
 8001e2c:	e6ee      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e2e:	f7fe fbc7 	bl	80005c0 <HAL_GetTick>
 8001e32:	1b80      	subs	r0, r0, r6
 8001e34:	2802      	cmp	r0, #2
 8001e36:	d9e3      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2d8>
 8001e38:	e6e8      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e46:	f7fe fbbb 	bl	80005c0 <HAL_GetTick>
 8001e4a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e4c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e50:	0719      	lsls	r1, r3, #28
 8001e52:	f140 811f 	bpl.w	8002094 <HAL_RCC_OscConfig+0x56c>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e56:	f7fe fbb3 	bl	80005c0 <HAL_GetTick>
 8001e5a:	1b80      	subs	r0, r0, r6
 8001e5c:	2803      	cmp	r0, #3
 8001e5e:	d9f5      	bls.n	8001e4c <HAL_RCC_OscConfig+0x324>
 8001e60:	e6d4      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
 8001e62:	bf00      	nop
 8001e64:	20000008 	.word	0x20000008
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e68:	f7fe fbaa 	bl	80005c0 <HAL_GetTick>
 8001e6c:	1b40      	subs	r0, r0, r5
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	f63f aecc 	bhi.w	8001c0c <HAL_RCC_OscConfig+0xe4>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001e74:	f7ff fdba 	bl	80019ec <LL_RCC_LSI1_IsReady>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d1f5      	bne.n	8001e68 <HAL_RCC_OscConfig+0x340>
 8001e7c:	e693      	b.n	8001ba6 <HAL_RCC_OscConfig+0x7e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7e:	4d8b      	ldr	r5, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x584>)
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	05db      	lsls	r3, r3, #23
 8001e84:	d51c      	bpl.n	8001ec0 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e86:	68a3      	ldr	r3, [r4, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001e8e:	d125      	bne.n	8001edc <HAL_RCC_OscConfig+0x3b4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e90:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fb90 	bl	80005c0 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ea0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001ea4:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f241 3588 	movw	r5, #5000	; 0x1388
 8001eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eae:	0798      	lsls	r0, r3, #30
 8001eb0:	f53f ae7d 	bmi.w	8001bae <HAL_RCC_OscConfig+0x86>
 8001eb4:	f7fe fb84 	bl	80005c0 <HAL_GetTick>
 8001eb8:	1b80      	subs	r0, r0, r6
 8001eba:	42a8      	cmp	r0, r5
 8001ebc:	d9f5      	bls.n	8001eaa <HAL_RCC_OscConfig+0x382>
 8001ebe:	e6a5      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
      HAL_PWR_EnableBkUpAccess();
 8001ec0:	f7ff fd70 	bl	80019a4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fb7c 	bl	80005c0 <HAL_GetTick>
 8001ec8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	05df      	lsls	r7, r3, #23
 8001ece:	d4da      	bmi.n	8001e86 <HAL_RCC_OscConfig+0x35e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed0:	f7fe fb76 	bl	80005c0 <HAL_GetTick>
 8001ed4:	1b80      	subs	r0, r0, r6
 8001ed6:	2802      	cmp	r0, #2
 8001ed8:	d9f7      	bls.n	8001eca <HAL_RCC_OscConfig+0x3a2>
 8001eda:	e697      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x3c6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ee0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001eec:	e7d0      	b.n	8001e90 <HAL_RCC_OscConfig+0x368>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001eee:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001efa:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001efe:	f022 0204 	bic.w	r2, r2, #4
 8001f02:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1c8      	bne.n	8001e9c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8001f0a:	f7fe fb59 	bl	80005c0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f12:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f14:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001f18:	0799      	lsls	r1, r3, #30
 8001f1a:	f57f ae48 	bpl.w	8001bae <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fb4f 	bl	80005c0 <HAL_GetTick>
 8001f22:	1bc0      	subs	r0, r0, r7
 8001f24:	42b0      	cmp	r0, r6
 8001f26:	d9f5      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3ec>
 8001f28:	e670      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f2c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001f30:	b19b      	cbz	r3, 8001f5a <HAL_RCC_OscConfig+0x432>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f32:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001f3e:	f7fe fb3f 	bl	80005c0 <HAL_GetTick>
 8001f42:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f44:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001f48:	079a      	lsls	r2, r3, #30
 8001f4a:	f53f ae34 	bmi.w	8001bb6 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4e:	f7fe fb37 	bl	80005c0 <HAL_GetTick>
 8001f52:	1b80      	subs	r0, r0, r6
 8001f54:	2802      	cmp	r0, #2
 8001f56:	d9f5      	bls.n	8001f44 <HAL_RCC_OscConfig+0x41c>
 8001f58:	e658      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f5a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001f66:	f7fe fb2b 	bl	80005c0 <HAL_GetTick>
 8001f6a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f6c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001f70:	079b      	lsls	r3, r3, #30
 8001f72:	f57f ae20 	bpl.w	8001bb6 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f76:	f7fe fb23 	bl	80005c0 <HAL_GetTick>
 8001f7a:	1b80      	subs	r0, r0, r6
 8001f7c:	2802      	cmp	r0, #2
 8001f7e:	d9f5      	bls.n	8001f6c <HAL_RCC_OscConfig+0x444>
 8001f80:	e644      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	2a0c      	cmp	r2, #12
 8001f8e:	d052      	beq.n	8002036 <HAL_RCC_OscConfig+0x50e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f90:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f92:	2802      	cmp	r0, #2
 8001f94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	d134      	bne.n	8002006 <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fb10 	bl	80005c0 <HAL_GetTick>
 8001fa0:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8001fa2:	f7ff fd4a 	bl	8001a3a <LL_RCC_PLL_IsReady>
 8001fa6:	bb40      	cbnz	r0, 8001ffa <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fb0:	68d0      	ldr	r0, [r2, #12]
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	493e      	ldr	r1, [pc, #248]	; (80020b0 <HAL_RCC_OscConfig+0x588>)
 8001fb6:	4001      	ands	r1, r0
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001fc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fcc:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd6:	68d3      	ldr	r3, [r2, #12]
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001fde:	f7fe faef 	bl	80005c0 <HAL_GetTick>
 8001fe2:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 8001fe4:	f7ff fd29 	bl	8001a3a <LL_RCC_PLL_IsReady>
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	f47f ade8 	bne.w	8001bbe <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe fae7 	bl	80005c0 <HAL_GetTick>
 8001ff2:	1b00      	subs	r0, r0, r4
 8001ff4:	2802      	cmp	r0, #2
 8001ff6:	d9f5      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x4bc>
 8001ff8:	e608      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7fe fae1 	bl	80005c0 <HAL_GetTick>
 8001ffe:	1b40      	subs	r0, r0, r5
 8002000:	2802      	cmp	r0, #2
 8002002:	d9ce      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x47a>
 8002004:	e602      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	f022 0203 	bic.w	r2, r2, #3
 800200c:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002014:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002018:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800201a:	f7fe fad1 	bl	80005c0 <HAL_GetTick>
 800201e:	4604      	mov	r4, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 8002020:	f7ff fd0b 	bl	8001a3a <LL_RCC_PLL_IsReady>
 8002024:	2800      	cmp	r0, #0
 8002026:	f43f adca 	beq.w	8001bbe <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7fe fac9 	bl	80005c0 <HAL_GetTick>
 800202e:	1b00      	subs	r0, r0, r4
 8002030:	2802      	cmp	r0, #2
 8002032:	d9f5      	bls.n	8002020 <HAL_RCC_OscConfig+0x4f8>
 8002034:	e5ea      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002036:	2801      	cmp	r0, #1
 8002038:	d036      	beq.n	80020a8 <HAL_RCC_OscConfig+0x580>
        uint32_t pllcfgr = RCC->PLLCFGR;
 800203a:	68d8      	ldr	r0, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800203e:	f000 0203 	and.w	r2, r0, #3
 8002042:	429a      	cmp	r2, r3
 8002044:	f47f ad73 	bne.w	8001b2e <HAL_RCC_OscConfig+0x6>
 8002048:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800204a:	f000 0370 	and.w	r3, r0, #112	; 0x70
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	4293      	cmp	r3, r2
 8002050:	f47f ad6d 	bne.w	8001b2e <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002054:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002056:	f3c0 2306 	ubfx	r3, r0, #8, #7
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800205a:	4293      	cmp	r3, r2
 800205c:	f47f ad67 	bne.w	8001b2e <HAL_RCC_OscConfig+0x6>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002060:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002062:	f400 1378 	and.w	r3, r0, #4063232	; 0x3e0000
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002066:	4293      	cmp	r3, r2
 8002068:	f47f ad61 	bne.w	8001b2e <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800206c:	6c22      	ldr	r2, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800206e:	f000 6360 	and.w	r3, r0, #234881024	; 0xe000000
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002072:	4293      	cmp	r3, r2
 8002074:	f47f ad5b 	bne.w	8001b2e <HAL_RCC_OscConfig+0x6>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002078:	6c63      	ldr	r3, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800207a:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
    return HAL_ERROR;
 800207e:	1ac0      	subs	r0, r0, r3
 8002080:	bf18      	it	ne
 8002082:	2001      	movne	r0, #1
 8002084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002086:	f7fe fa9b 	bl	80005c0 <HAL_GetTick>
 800208a:	1b80      	subs	r0, r0, r6
 800208c:	2803      	cmp	r0, #3
 800208e:	f67f ae78 	bls.w	8001d82 <HAL_RCC_OscConfig+0x25a>
 8002092:	e5bb      	b.n	8001c0c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002094:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80020a0:	f7fe fa8e 	bl	80005c0 <HAL_GetTick>
 80020a4:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 80020a6:	e6e5      	b.n	8001e74 <HAL_RCC_OscConfig+0x34c>
}
 80020a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	58000400 	.word	0x58000400
 80020b0:	11c1808c 	.word	0x11c1808c

080020b4 <HAL_RCC_ClockConfig>:
{
 80020b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80020ba:	4604      	mov	r4, r0
 80020bc:	b910      	cbnz	r0, 80020c4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80020be:	2001      	movs	r0, #1
 80020c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4e79      	ldr	r6, [pc, #484]	; (80022ac <HAL_RCC_ClockConfig+0x1f8>)
 80020c6:	6833      	ldr	r3, [r6, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d372      	bcc.n	80021b6 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	0799      	lsls	r1, r3, #30
 80020d4:	d50e      	bpl.n	80020f4 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020d6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80020da:	68a2      	ldr	r2, [r4, #8]
 80020dc:	68b3      	ldr	r3, [r6, #8]
 80020de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80020e6:	f7fe fa6b 	bl	80005c0 <HAL_GetTick>
 80020ea:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80020ec:	68b3      	ldr	r3, [r6, #8]
 80020ee:	03db      	lsls	r3, r3, #15
 80020f0:	f140 80b8 	bpl.w	8002264 <HAL_RCC_ClockConfig+0x1b0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	069a      	lsls	r2, r3, #26
 80020f8:	d511      	bpl.n	800211e <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80020fa:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80020fe:	6962      	ldr	r2, [r4, #20]
 8002100:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800210e:	f7fe fa57 	bl	80005c0 <HAL_GetTick>
 8002112:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002114:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002118:	0399      	lsls	r1, r3, #14
 800211a:	f140 80aa 	bpl.w	8002272 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	0658      	lsls	r0, r3, #25
 8002122:	d512      	bpl.n	800214a <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002124:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002128:	69a2      	ldr	r2, [r4, #24]
 800212a:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800212e:	f023 030f 	bic.w	r3, r3, #15
 8002132:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002136:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800213a:	f7fe fa41 	bl	80005c0 <HAL_GetTick>
 800213e:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002140:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002144:	03db      	lsls	r3, r3, #15
 8002146:	f140 809b 	bpl.w	8002280 <HAL_RCC_ClockConfig+0x1cc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	075a      	lsls	r2, r3, #29
 800214e:	d50e      	bpl.n	800216e <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002150:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002154:	68e2      	ldr	r2, [r4, #12]
 8002156:	68b3      	ldr	r3, [r6, #8]
 8002158:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800215c:	4313      	orrs	r3, r2
 800215e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002160:	f7fe fa2e 	bl	80005c0 <HAL_GetTick>
 8002164:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002166:	68b3      	ldr	r3, [r6, #8]
 8002168:	0399      	lsls	r1, r3, #14
 800216a:	f140 8090 	bpl.w	800228e <HAL_RCC_ClockConfig+0x1da>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	0718      	lsls	r0, r3, #28
 8002172:	d50f      	bpl.n	8002194 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002174:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002178:	6922      	ldr	r2, [r4, #16]
 800217a:	68b3      	ldr	r3, [r6, #8]
 800217c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002180:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002184:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002186:	f7fe fa1b 	bl	80005c0 <HAL_GetTick>
 800218a:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800218c:	68b3      	ldr	r3, [r6, #8]
 800218e:	035b      	lsls	r3, r3, #13
 8002190:	f140 8084 	bpl.w	800229c <HAL_RCC_ClockConfig+0x1e8>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	07da      	lsls	r2, r3, #31
 8002198:	d423      	bmi.n	80021e2 <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219a:	4c44      	ldr	r4, [pc, #272]	; (80022ac <HAL_RCC_ClockConfig+0x1f8>)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	429d      	cmp	r5, r3
 80021a4:	d34b      	bcc.n	800223e <HAL_RCC_ClockConfig+0x18a>
  SystemCoreClockUpdate();
 80021a6:	f003 f8d7 	bl	8005358 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 80021aa:	f7fe fa0f 	bl	80005cc <HAL_GetTickPrio>
}
 80021ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 80021b2:	f7fe b9bd 	b.w	8000530 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	6833      	ldr	r3, [r6, #0]
 80021b8:	f023 0307 	bic.w	r3, r3, #7
 80021bc:	430b      	orrs	r3, r1
 80021be:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80021c0:	f7fe f9fe 	bl	80005c0 <HAL_GetTick>
 80021c4:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	6833      	ldr	r3, [r6, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	429d      	cmp	r5, r3
 80021ce:	f43f af7f 	beq.w	80020d0 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021d2:	f7fe f9f5 	bl	80005c0 <HAL_GetTick>
 80021d6:	1bc0      	subs	r0, r0, r7
 80021d8:	2802      	cmp	r0, #2
 80021da:	d9f4      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 80021dc:	2003      	movs	r0, #3
 80021de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	6863      	ldr	r3, [r4, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d11e      	bne.n	8002226 <HAL_RCC_ClockConfig+0x172>
      if (LL_RCC_HSE_IsReady() == 0U)
 80021e8:	f7ff fbf4 	bl	80019d4 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 80021ec:	2800      	cmp	r0, #0
 80021ee:	f43f af66 	beq.w	80020be <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80021f2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80021f6:	6862      	ldr	r2, [r4, #4]
 80021f8:	68b3      	ldr	r3, [r6, #8]
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	4313      	orrs	r3, r2
 8002200:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002202:	f7fe f9dd 	bl	80005c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800220a:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800220c:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	6862      	ldr	r2, [r4, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002218:	d0bf      	beq.n	800219a <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221a:	f7fe f9d1 	bl	80005c0 <HAL_GetTick>
 800221e:	1bc0      	subs	r0, r0, r7
 8002220:	4540      	cmp	r0, r8
 8002222:	d9f3      	bls.n	800220c <HAL_RCC_ClockConfig+0x158>
 8002224:	e7da      	b.n	80021dc <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	2b03      	cmp	r3, #3
 8002228:	d102      	bne.n	8002230 <HAL_RCC_ClockConfig+0x17c>
      if (LL_RCC_PLL_IsReady() == 0U)
 800222a:	f7ff fc06 	bl	8001a3a <LL_RCC_PLL_IsReady>
 800222e:	e7dd      	b.n	80021ec <HAL_RCC_ClockConfig+0x138>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002230:	b913      	cbnz	r3, 8002238 <HAL_RCC_ClockConfig+0x184>
      if (LL_RCC_MSI_IsReady() == 0U)
 8002232:	f7ff fbe2 	bl	80019fa <LL_RCC_MSI_IsReady>
 8002236:	e7d9      	b.n	80021ec <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002238:	f7ff fbd2 	bl	80019e0 <LL_RCC_HSI_IsReady>
 800223c:	e7d6      	b.n	80021ec <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	f023 0307 	bic.w	r3, r3, #7
 8002244:	432b      	orrs	r3, r5
 8002246:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002248:	f7fe f9ba 	bl	80005c0 <HAL_GetTick>
 800224c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	429d      	cmp	r5, r3
 8002256:	d0a6      	beq.n	80021a6 <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002258:	f7fe f9b2 	bl	80005c0 <HAL_GetTick>
 800225c:	1b80      	subs	r0, r0, r6
 800225e:	2802      	cmp	r0, #2
 8002260:	d9f5      	bls.n	800224e <HAL_RCC_ClockConfig+0x19a>
 8002262:	e7bb      	b.n	80021dc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002264:	f7fe f9ac 	bl	80005c0 <HAL_GetTick>
 8002268:	1bc0      	subs	r0, r0, r7
 800226a:	2802      	cmp	r0, #2
 800226c:	f67f af3e 	bls.w	80020ec <HAL_RCC_ClockConfig+0x38>
 8002270:	e7b4      	b.n	80021dc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002272:	f7fe f9a5 	bl	80005c0 <HAL_GetTick>
 8002276:	1bc0      	subs	r0, r0, r7
 8002278:	2802      	cmp	r0, #2
 800227a:	f67f af4b 	bls.w	8002114 <HAL_RCC_ClockConfig+0x60>
 800227e:	e7ad      	b.n	80021dc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002280:	f7fe f99e 	bl	80005c0 <HAL_GetTick>
 8002284:	1bc0      	subs	r0, r0, r7
 8002286:	2802      	cmp	r0, #2
 8002288:	f67f af5a 	bls.w	8002140 <HAL_RCC_ClockConfig+0x8c>
 800228c:	e7a6      	b.n	80021dc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800228e:	f7fe f997 	bl	80005c0 <HAL_GetTick>
 8002292:	1bc0      	subs	r0, r0, r7
 8002294:	2802      	cmp	r0, #2
 8002296:	f67f af66 	bls.w	8002166 <HAL_RCC_ClockConfig+0xb2>
 800229a:	e79f      	b.n	80021dc <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800229c:	f7fe f990 	bl	80005c0 <HAL_GetTick>
 80022a0:	1bc0      	subs	r0, r0, r7
 80022a2:	2802      	cmp	r0, #2
 80022a4:	f67f af72 	bls.w	800218c <HAL_RCC_ClockConfig+0xd8>
 80022a8:	e798      	b.n	80021dc <HAL_RCC_ClockConfig+0x128>
 80022aa:	bf00      	nop
 80022ac:	58004000 	.word	0x58004000

080022b0 <HAL_RCC_GetSysClockFreq>:
 80022b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 80022b4:	b508      	push	{r3, lr}
 80022b6:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022b8:	f013 030c 	ands.w	r3, r3, #12
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80022be:	f7ff fbaa 	bl	8001a16 <LL_RCC_MSI_GetRange>
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_RCC_GetSysClockFreq+0x90>)
 80022c4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80022c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80022cc:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d033      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022d6:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 80022d8:	481a      	ldr	r0, [pc, #104]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 80022da:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e0:	bf08      	it	eq
 80022e2:	4618      	moveq	r0, r3
 80022e4:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80022e6:	68d3      	ldr	r3, [r2, #12]
 80022e8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d022      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x86>
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d118      	bne.n	8002326 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022f4:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE;
 80022f6:	4814      	ldr	r0, [pc, #80]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fe:	bf08      	it	eq
 8002300:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002306:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002308:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800230a:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800230c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002310:	4358      	muls	r0, r3
 8002312:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8002316:	3301      	adds	r3, #1
 8002318:	fbb0 f0f3 	udiv	r0, r0, r3
 800231c:	0f53      	lsrs	r3, r2, #29
 800231e:	3301      	adds	r3, #1
 8002320:	fbb0 f0f3 	udiv	r0, r0, r3
 8002324:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002326:	f7ff fb76 	bl	8001a16 <LL_RCC_MSI_GetRange>
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetSysClockFreq+0x90>)
 800232c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002330:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002334:	e7e5      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8002336:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 8002338:	e7e3      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 800233a:	4802      	ldr	r0, [pc, #8]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
}
 800233c:	bd08      	pop	{r3, pc}
 800233e:	bf00      	nop
 8002340:	08006964 	.word	0x08006964
 8002344:	00f42400 	.word	0x00f42400
 8002348:	01e84800 	.word	0x01e84800

0800234c <HAL_RCC_GetHCLKFreq>:
{
 800234c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800234e:	f7ff ffaf 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002362:	fbb0 f0f3 	udiv	r0, r0, r3
 8002366:	bd08      	pop	{r3, pc}
 8002368:	08006904 	.word	0x08006904

0800236c <HAL_RCC_GetPCLK1Freq>:
{
 800236c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800236e:	f7ff ffed 	bl	800234c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	f003 031f 	and.w	r3, r3, #31
}
 8002386:	40d8      	lsrs	r0, r3
 8002388:	bd08      	pop	{r3, pc}
 800238a:	bf00      	nop
 800238c:	08006944 	.word	0x08006944

08002390 <HAL_RCC_GetPCLK2Freq>:
{
 8002390:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002392:	f7ff ffdb 	bl	800234c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	f003 031f 	and.w	r3, r3, #31
}
 80023aa:	40d8      	lsrs	r0, r3
 80023ac:	bd08      	pop	{r3, pc}
 80023ae:	bf00      	nop
 80023b0:	08006944 	.word	0x08006944

080023b4 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 80023bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80023c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c6:	0902      	lsrs	r2, r0, #4
 80023c8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023cc:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 80023d0:	0100      	lsls	r0, r0, #4
 80023d2:	ea23 0302 	bic.w	r3, r3, r2
 80023d6:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 80023da:	4318      	orrs	r0, r3
 80023dc:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 80023e0:	4770      	bx	lr

080023e2 <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80023e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e6:	6813      	ldr	r3, [r2, #0]
 80023e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4770      	bx	lr

080023f0 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80023f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f4:	6813      	ldr	r3, [r2, #0]
 80023f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4770      	bx	lr

080023fe <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	6818      	ldr	r0, [r3, #0]
}
 8002404:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8002408:	4770      	bx	lr

0800240a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800240a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800240c:	6805      	ldr	r5, [r0, #0]
 800240e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8002412:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002414:	d043      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002416:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241c:	d015      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x40>
 800241e:	d802      	bhi.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002420:	b1d3      	cbz	r3, 8002458 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002422:	2501      	movs	r5, #1
 8002424:	e03b      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800242a:	d002      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800242c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002430:	d1f7      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002436:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002438:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800243c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002440:	430b      	orrs	r3, r1
 8002442:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002446:	2500      	movs	r5, #0
 8002448:	e029      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	68d3      	ldr	r3, [r2, #12]
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	60d3      	str	r3, [r2, #12]
        break;
 8002456:	e7ec      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002458:	f7ff ffca 	bl	80023f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800245c:	f7fe f8b0 	bl	80005c0 <HAL_GetTick>
 8002460:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002462:	f7ff ffcc 	bl	80023fe <LL_RCC_PLLSAI1_IsReady>
 8002466:	b9a0      	cbnz	r0, 8002492 <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246c:	6861      	ldr	r1, [r4, #4]
 800246e:	6913      	ldr	r3, [r2, #16]
 8002470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002474:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002478:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800247a:	6913      	ldr	r3, [r2, #16]
 800247c:	68a1      	ldr	r1, [r4, #8]
 800247e:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8002482:	430b      	orrs	r3, r1
 8002484:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002486:	f7ff ffac 	bl	80023e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248a:	f7fe f899 	bl	80005c0 <HAL_GetTick>
 800248e:	4605      	mov	r5, r0
 8002490:	e0cd      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002492:	f7fe f895 	bl	80005c0 <HAL_GetTick>
 8002496:	1b40      	subs	r0, r0, r5
 8002498:	2802      	cmp	r0, #2
 800249a:	d9e2      	bls.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 800249c:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	051a      	lsls	r2, r3, #20
 80024a2:	d515      	bpl.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80024a4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80024a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024aa:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 80024ae:	f407 7740 	and.w	r7, r7, #768	; 0x300
 80024b2:	42bb      	cmp	r3, r7
 80024b4:	d00c      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 80024b6:	f7ff fa75 	bl	80019a4 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80024ba:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80024be:	2f00      	cmp	r7, #0
 80024c0:	f040 80c0 	bne.w	8002644 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 80024c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	07df      	lsls	r7, r3, #31
 80024d4:	d509      	bpl.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80024d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024da:	69a0      	ldr	r0, [r4, #24]
 80024dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024e0:	f022 0203 	bic.w	r2, r2, #3
 80024e4:	4302      	orrs	r2, r0
 80024e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024ea:	079e      	lsls	r6, r3, #30
 80024ec:	d509      	bpl.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80024ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f2:	69e0      	ldr	r0, [r4, #28]
 80024f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024fc:	4302      	orrs	r2, r0
 80024fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002502:	06d8      	lsls	r0, r3, #27
 8002504:	d50c      	bpl.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002508:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800250c:	0c31      	lsrs	r1, r6, #16
 800250e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002512:	0409      	lsls	r1, r1, #16
 8002514:	ea22 0201 	bic.w	r2, r2, r1
 8002518:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800251c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002520:	0699      	lsls	r1, r3, #26
 8002522:	d50c      	bpl.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002526:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800252a:	0c31      	lsrs	r1, r6, #16
 800252c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002530:	0409      	lsls	r1, r1, #16
 8002532:	ea22 0201 	bic.w	r2, r2, r1
 8002536:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800253a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253e:	075a      	lsls	r2, r3, #29
 8002540:	d502      	bpl.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002542:	6a20      	ldr	r0, [r4, #32]
 8002544:	f7ff ff3d 	bl	80023c2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	071b      	lsls	r3, r3, #28
 800254c:	d502      	bpl.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800254e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002550:	f7ff ff37 	bl	80023c2 <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	05df      	lsls	r7, r3, #23
 8002558:	d511      	bpl.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800255a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800255e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002560:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002564:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002568:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800256a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800256e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002572:	f040 8090 	bne.w	8002696 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002576:	68d3      	ldr	r3, [r2, #12]
 8002578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257c:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	059e      	lsls	r6, r3, #22
 8002582:	d51a      	bpl.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002584:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002586:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	d003      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002590:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8002594:	f040 80b7 	bne.w	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002598:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800259c:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80025a0:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025a2:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80025a6:	bf08      	it	eq
 80025a8:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80025ac:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 80025b0:	bf02      	ittt	eq
 80025b2:	68d3      	ldreq	r3, [r2, #12]
 80025b4:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 80025b8:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	0558      	lsls	r0, r3, #21
 80025be:	d511      	bpl.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80025ce:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80025d0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80025d8:	f040 80a3 	bne.w	8002722 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025dc:	68d3      	ldr	r3, [r2, #12]
 80025de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e2:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	04d1      	lsls	r1, r2, #19
 80025e8:	d509      	bpl.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80025ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80025f0:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 80025f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025f8:	4303      	orrs	r3, r0
 80025fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80025fe:	0493      	lsls	r3, r2, #18
 8002600:	d50d      	bpl.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002606:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002608:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800260a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800260e:	430b      	orrs	r3, r1
 8002610:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002612:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002614:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	430b      	orrs	r3, r1
 800261c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800261e:	4628      	mov	r0, r5
 8002620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002622:	f7fd ffcd 	bl	80005c0 <HAL_GetTick>
 8002626:	1b40      	subs	r0, r0, r5
 8002628:	2802      	cmp	r0, #2
 800262a:	f63f af37 	bhi.w	800249c <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800262e:	f7ff fee6 	bl	80023fe <LL_RCC_PLLSAI1_IsReady>
 8002632:	2801      	cmp	r0, #1
 8002634:	d1f5      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263a:	6961      	ldr	r1, [r4, #20]
 800263c:	6913      	ldr	r3, [r2, #16]
 800263e:	430b      	orrs	r3, r1
 8002640:	6113      	str	r3, [r2, #16]
 8002642:	e6f6      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002644:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002648:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800264c:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002650:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002658:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800265c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800265e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002662:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8002664:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002668:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800266c:	07db      	lsls	r3, r3, #31
 800266e:	f57f af2f 	bpl.w	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 8002672:	f7fd ffa5 	bl	80005c0 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 800267a:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 800267c:	e004      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x27e>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fd ff9f 	bl	80005c0 <HAL_GetTick>
 8002682:	1bc0      	subs	r0, r0, r7
 8002684:	42b0      	cmp	r0, r6
 8002686:	d804      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x288>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002688:	f7ff fe94 	bl	80023b4 <LL_RCC_LSE_IsReady>
 800268c:	2801      	cmp	r0, #1
 800268e:	d1f6      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002690:	e71e      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 8002692:	2503      	movs	r5, #3
 8002694:	e71c      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002696:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800269a:	f47f af70 	bne.w	800257e <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800269e:	f7ff fea7 	bl	80023f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026a2:	f7fd ff8d 	bl	80005c0 <HAL_GetTick>
 80026a6:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80026a8:	f7ff fea9 	bl	80023fe <LL_RCC_PLLSAI1_IsReady>
 80026ac:	b9a0      	cbnz	r0, 80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b2:	6861      	ldr	r1, [r4, #4]
 80026b4:	6913      	ldr	r3, [r2, #16]
 80026b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026be:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80026c0:	6913      	ldr	r3, [r2, #16]
 80026c2:	68e1      	ldr	r1, [r4, #12]
 80026c4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80026cc:	f7ff fe89 	bl	80023e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7fd ff76 	bl	80005c0 <HAL_GetTick>
 80026d4:	4606      	mov	r6, r0
 80026d6:	e00b      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d8:	f7fd ff72 	bl	80005c0 <HAL_GetTick>
 80026dc:	1b80      	subs	r0, r0, r6
 80026de:	2802      	cmp	r0, #2
 80026e0:	d9e2      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x29e>
              ret = HAL_TIMEOUT;
 80026e2:	2503      	movs	r5, #3
 80026e4:	e74b      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e6:	f7fd ff6b 	bl	80005c0 <HAL_GetTick>
 80026ea:	1b80      	subs	r0, r0, r6
 80026ec:	2802      	cmp	r0, #2
 80026ee:	d8f8      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026f0:	f7ff fe85 	bl	80023fe <LL_RCC_PLLSAI1_IsReady>
 80026f4:	2801      	cmp	r0, #1
 80026f6:	d1f6      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fc:	6961      	ldr	r1, [r4, #20]
 80026fe:	6913      	ldr	r3, [r2, #16]
 8002700:	430b      	orrs	r3, r1
 8002702:	6113      	str	r3, [r2, #16]
 8002704:	e73b      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002706:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800270a:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800270e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002712:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002716:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800271a:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 800271e:	4301      	orrs	r1, r0
 8002720:	e73f      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x198>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002722:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002726:	f47f af5d 	bne.w	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800272a:	f7ff fe61 	bl	80023f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800272e:	f7fd ff47 	bl	80005c0 <HAL_GetTick>
 8002732:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002734:	f7ff fe63 	bl	80023fe <LL_RCC_PLLSAI1_IsReady>
 8002738:	b9a0      	cbnz	r0, 8002764 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800273a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273e:	6861      	ldr	r1, [r4, #4]
 8002740:	6913      	ldr	r3, [r2, #16]
 8002742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002746:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800274a:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800274c:	6913      	ldr	r3, [r2, #16]
 800274e:	6921      	ldr	r1, [r4, #16]
 8002750:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002754:	430b      	orrs	r3, r1
 8002756:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002758:	f7ff fe43 	bl	80023e2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fd ff30 	bl	80005c0 <HAL_GetTick>
 8002760:	4606      	mov	r6, r0
 8002762:	e00b      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x372>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002764:	f7fd ff2c 	bl	80005c0 <HAL_GetTick>
 8002768:	1b80      	subs	r0, r0, r6
 800276a:	2802      	cmp	r0, #2
 800276c:	d9e2      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x32a>
              ret = HAL_TIMEOUT;
 800276e:	2503      	movs	r5, #3
 8002770:	e738      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002772:	f7fd ff25 	bl	80005c0 <HAL_GetTick>
 8002776:	1b80      	subs	r0, r0, r6
 8002778:	2802      	cmp	r0, #2
 800277a:	d8f8      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x364>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800277c:	f7ff fe3f 	bl	80023fe <LL_RCC_PLLSAI1_IsReady>
 8002780:	2801      	cmp	r0, #1
 8002782:	d1f6      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x368>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002788:	6961      	ldr	r1, [r4, #20]
 800278a:	6913      	ldr	r3, [r2, #16]
 800278c:	430b      	orrs	r3, r1
 800278e:	6113      	str	r3, [r2, #16]
 8002790:	e728      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1da>

08002792 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4770      	bx	lr

080027a0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80027a0:	6802      	ldr	r2, [r0, #0]
 80027a2:	6813      	ldr	r3, [r2, #0]
 80027a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027a8:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80027aa:	6893      	ldr	r3, [r2, #8]
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b6:	2320      	movs	r3, #32
 80027b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	66c3      	str	r3, [r0, #108]	; 0x6c
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80027c4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80027c8:	2b20      	cmp	r3, #32
{
 80027ca:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80027cc:	d168      	bne.n	80028a0 <HAL_UART_Receive_IT+0xdc>
    if ((pData == NULL) || (Size == 0U))
 80027ce:	2900      	cmp	r1, #0
 80027d0:	d064      	beq.n	800289c <HAL_UART_Receive_IT+0xd8>
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	d062      	beq.n	800289c <HAL_UART_Receive_IT+0xd8>
    __HAL_LOCK(huart);
 80027d6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d060      	beq.n	80028a0 <HAL_UART_Receive_IT+0xdc>
 80027de:	2301      	movs	r3, #1
 80027e0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 80027e4:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 80027e6:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80027e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 80027ec:	f04f 0100 	mov.w	r1, #0
    huart->RxXferSize  = Size;
 80027f0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 80027f4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 80027f8:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 80027fa:	d12e      	bne.n	800285a <HAL_UART_Receive_IT+0x96>
 80027fc:	6901      	ldr	r1, [r0, #16]
 80027fe:	bb51      	cbnz	r1, 8002856 <HAL_UART_Receive_IT+0x92>
 8002800:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002804:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	2100      	movs	r1, #0
 800280a:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800280e:	2122      	movs	r1, #34	; 0x22
 8002810:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002814:	6801      	ldr	r1, [r0, #0]
 8002816:	688c      	ldr	r4, [r1, #8]
 8002818:	f044 0401 	orr.w	r4, r4, #1
 800281c:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800281e:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8002820:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8002824:	d129      	bne.n	800287a <HAL_UART_Receive_IT+0xb6>
 8002826:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800282a:	4294      	cmp	r4, r2
 800282c:	d825      	bhi.n	800287a <HAL_UART_Receive_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d120      	bne.n	8002876 <HAL_UART_Receive_IT+0xb2>
 8002834:	6903      	ldr	r3, [r0, #16]
 8002836:	b9f3      	cbnz	r3, 8002876 <HAL_UART_Receive_IT+0xb2>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800283a:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800283c:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800283e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8002842:	2300      	movs	r3, #0
 8002844:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002848:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800284a:	688a      	ldr	r2, [r1, #8]
 800284c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002850:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8002852:	4618      	mov	r0, r3
 8002854:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8002856:	21ff      	movs	r1, #255	; 0xff
 8002858:	e7d4      	b.n	8002804 <HAL_UART_Receive_IT+0x40>
 800285a:	b923      	cbnz	r3, 8002866 <HAL_UART_Receive_IT+0xa2>
 800285c:	6901      	ldr	r1, [r0, #16]
 800285e:	2900      	cmp	r1, #0
 8002860:	d0f9      	beq.n	8002856 <HAL_UART_Receive_IT+0x92>
 8002862:	217f      	movs	r1, #127	; 0x7f
 8002864:	e7ce      	b.n	8002804 <HAL_UART_Receive_IT+0x40>
 8002866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800286a:	d1cb      	bne.n	8002804 <HAL_UART_Receive_IT+0x40>
 800286c:	6901      	ldr	r1, [r0, #16]
 800286e:	2900      	cmp	r1, #0
 8002870:	d0f7      	beq.n	8002862 <HAL_UART_Receive_IT+0x9e>
 8002872:	213f      	movs	r1, #63	; 0x3f
 8002874:	e7c6      	b.n	8002804 <HAL_UART_Receive_IT+0x40>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_UART_Receive_IT+0xe4>)
 8002878:	e7df      	b.n	800283a <HAL_UART_Receive_IT+0x76>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	d10b      	bne.n	8002898 <HAL_UART_Receive_IT+0xd4>
 8002880:	6903      	ldr	r3, [r0, #16]
 8002882:	b94b      	cbnz	r3, 8002898 <HAL_UART_Receive_IT+0xd4>
        huart->RxISR = UART_RxISR_16BIT;
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002886:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8002888:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800288a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 800288e:	2300      	movs	r3, #0
 8002890:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002894:	600a      	str	r2, [r1, #0]
 8002896:	e7dc      	b.n	8002852 <HAL_UART_Receive_IT+0x8e>
        huart->RxISR = UART_RxISR_8BIT;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_UART_Receive_IT+0xec>)
 800289a:	e7f4      	b.n	8002886 <HAL_UART_Receive_IT+0xc2>
      return HAL_ERROR;
 800289c:	2001      	movs	r0, #1
 800289e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80028a0:	2002      	movs	r0, #2
}
 80028a2:	bd10      	pop	{r4, pc}
 80028a4:	08002a9d 	.word	0x08002a9d
 80028a8:	080029f5 	.word	0x080029f5
 80028ac:	0800299b 	.word	0x0800299b
 80028b0:	0800293f 	.word	0x0800293f

080028b4 <HAL_UART_DMAStop>:
{
 80028b4:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80028b6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80028b8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80028bc:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	0609      	lsls	r1, r1, #24
{
 80028c4:	4604      	mov	r4, r0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80028c6:	d520      	bpl.n	800290a <HAL_UART_DMAStop+0x56>
 80028c8:	2a21      	cmp	r2, #33	; 0x21
 80028ca:	d11e      	bne.n	800290a <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028cc:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 80028ce:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 80028d6:	b160      	cbz	r0, 80028f2 <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80028d8:	f7fd ff94 	bl	8000804 <HAL_DMA_Abort>
 80028dc:	b148      	cbz	r0, 80028f2 <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80028de:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80028e0:	f7fe f846 	bl	8000970 <HAL_DMA_GetError>
 80028e4:	2820      	cmp	r0, #32
 80028e6:	d104      	bne.n	80028f2 <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80028e8:	2310      	movs	r3, #16
 80028ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 80028ee:	2003      	movs	r0, #3
 80028f0:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002902:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8002904:	2320      	movs	r3, #32
 8002906:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	6898      	ldr	r0, [r3, #8]
 800290e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002912:	d013      	beq.n	800293c <HAL_UART_DMAStop+0x88>
 8002914:	2d22      	cmp	r5, #34	; 0x22
 8002916:	d110      	bne.n	800293a <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002918:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800291a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002920:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8002922:	b138      	cbz	r0, 8002934 <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002924:	f7fd ff6e 	bl	8000804 <HAL_DMA_Abort>
 8002928:	b120      	cbz	r0, 8002934 <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800292a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800292c:	f7fe f820 	bl	8000970 <HAL_DMA_GetError>
 8002930:	2820      	cmp	r0, #32
 8002932:	d0d9      	beq.n	80028e8 <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 8002934:	4620      	mov	r0, r4
 8002936:	f7ff ff33 	bl	80027a0 <UART_EndRxTransfer>
  return HAL_OK;
 800293a:	2000      	movs	r0, #0
}
 800293c:	bd38      	pop	{r3, r4, r5, pc}

0800293e <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800293e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002942:	2a22      	cmp	r2, #34	; 0x22
{
 8002944:	b510      	push	{r4, lr}
 8002946:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002948:	d122      	bne.n	8002990 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800294a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800294c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8002950:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8002952:	4022      	ands	r2, r4
 8002954:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 8002956:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002958:	3201      	adds	r2, #1
 800295a:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800295c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8002960:	3a01      	subs	r2, #1
 8002962:	b292      	uxth	r2, r2
 8002964:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8002968:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800296c:	b292      	uxth	r2, r2
 800296e:	b99a      	cbnz	r2, 8002998 <UART_RxISR_8BIT+0x5a>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002970:	6801      	ldr	r1, [r0, #0]
 8002972:	680c      	ldr	r4, [r1, #0]
 8002974:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002978:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297a:	688c      	ldr	r4, [r1, #8]
 800297c:	f024 0401 	bic.w	r4, r4, #1
 8002980:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002982:	2120      	movs	r1, #32
 8002984:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002988:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800298a:	f002 fb29 	bl	8004fe0 <HAL_UART_RxCpltCallback>
 800298e:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002990:	6993      	ldr	r3, [r2, #24]
 8002992:	f043 0308 	orr.w	r3, r3, #8
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	bd10      	pop	{r4, pc}

0800299a <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800299a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800299e:	2a22      	cmp	r2, #34	; 0x22
{
 80029a0:	b510      	push	{r4, lr}
 80029a2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029a4:	d120      	bne.n	80029e8 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029a6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80029a8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 80029ac:	400c      	ands	r4, r1
 80029ae:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80029b0:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 80029b4:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80029b6:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80029ba:	3901      	subs	r1, #1
 80029bc:	b289      	uxth	r1, r1
 80029be:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80029c2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80029c6:	b289      	uxth	r1, r1
 80029c8:	b991      	cbnz	r1, 80029f0 <UART_RxISR_16BIT+0x56>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029ca:	6814      	ldr	r4, [r2, #0]
 80029cc:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80029d0:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d2:	6894      	ldr	r4, [r2, #8]
 80029d4:	f024 0401 	bic.w	r4, r4, #1
 80029d8:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029da:	2220      	movs	r2, #32
 80029dc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80029e0:	66c1      	str	r1, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80029e2:	f002 fafd 	bl	8004fe0 <HAL_UART_RxCpltCallback>
 80029e6:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029e8:	6993      	ldr	r3, [r2, #24]
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	6193      	str	r3, [r2, #24]
 80029f0:	bd10      	pop	{r4, pc}
	...

080029f4 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029f4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80029f8:	2b22      	cmp	r3, #34	; 0x22
{
 80029fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029fe:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a00:	d140      	bne.n	8002a84 <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 8002a02:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002a06:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a0a:	4f22      	ldr	r7, [pc, #136]	; (8002a94 <UART_RxISR_8BIT_FIFOEN+0xa0>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002a10:	b9ad      	cbnz	r5, 8002a3e <UART_RxISR_8BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002a12:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002a16:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d038      	beq.n	8002a8e <UART_RxISR_8BIT_FIFOEN+0x9a>
 8002a1c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d934      	bls.n	8002a8e <UART_RxISR_8BIT_FIFOEN+0x9a>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a2c:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 8002a30:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a3e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002a40:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002a44:	4033      	ands	r3, r6
 8002a46:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8002a48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002a4e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8002a5a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b96b      	cbnz	r3, 8002a7e <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	6811      	ldr	r1, [r2, #0]
 8002a66:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002a6a:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a6c:	6891      	ldr	r1, [r2, #8]
 8002a6e:	4039      	ands	r1, r7
 8002a70:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 8002a72:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8002a74:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8002a78:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8002a7a:	f002 fab1 	bl	8004fe0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002a7e:	3d01      	subs	r5, #1
 8002a80:	b2ad      	uxth	r5, r5
 8002a82:	e7c5      	b.n	8002a10 <UART_RxISR_8BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a84:	6802      	ldr	r2, [r0, #0]
 8002a86:	6993      	ldr	r3, [r2, #24]
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6193      	str	r3, [r2, #24]
 8002a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a92:	bf00      	nop
 8002a94:	effffffe 	.word	0xeffffffe
 8002a98:	0800293f 	.word	0x0800293f

08002a9c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a9c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002aa0:	2b22      	cmp	r3, #34	; 0x22
{
 8002aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa6:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aa8:	d13e      	bne.n	8002b28 <UART_RxISR_16BIT_FIFOEN+0x8c>
  uint16_t  uhMask = huart->Mask;
 8002aaa:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002aae:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ab2:	4f21      	ldr	r7, [pc, #132]	; (8002b38 <UART_RxISR_16BIT_FIFOEN+0x9c>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002ab8:	b9ad      	cbnz	r5, 8002ae6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002aba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002abe:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d036      	beq.n	8002b32 <UART_RxISR_16BIT_FIFOEN+0x96>
 8002ac4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d932      	bls.n	8002b32 <UART_RxISR_16BIT_FIFOEN+0x96>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002ad4:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002ad6:	4a19      	ldr	r2, [pc, #100]	; (8002b3c <UART_RxISR_16BIT_FIFOEN+0xa0>)
 8002ad8:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ae6:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002ae8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002aea:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8002aec:	4031      	ands	r1, r6
 8002aee:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8002af2:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002af4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8002af8:	3a01      	subs	r2, #1
 8002afa:	b292      	uxth	r2, r2
 8002afc:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8002b00:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8002b04:	b292      	uxth	r2, r2
 8002b06:	b962      	cbnz	r2, 8002b22 <UART_RxISR_16BIT_FIFOEN+0x86>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002b0e:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	4039      	ands	r1, r7
 8002b14:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 8002b16:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8002b18:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8002b1c:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8002b1e:	f002 fa5f 	bl	8004fe0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002b22:	3d01      	subs	r5, #1
 8002b24:	b2ad      	uxth	r5, r5
 8002b26:	e7c7      	b.n	8002ab8 <UART_RxISR_16BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b28:	6802      	ldr	r2, [r0, #0]
 8002b2a:	6993      	ldr	r3, [r2, #24]
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	6193      	str	r3, [r2, #24]
 8002b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b36:	bf00      	nop
 8002b38:	effffffe 	.word	0xeffffffe
 8002b3c:	0800299b 	.word	0x0800299b

08002b40 <HAL_UART_ErrorCallback>:
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b44:	6802      	ldr	r2, [r0, #0]
 8002b46:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b48:	6811      	ldr	r1, [r2, #0]
{
 8002b4a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8002b4c:	f640 050f 	movw	r5, #2063	; 0x80f
 8002b50:	422b      	tst	r3, r5
{
 8002b52:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b54:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8002b56:	d10d      	bne.n	8002b74 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b58:	069e      	lsls	r6, r3, #26
 8002b5a:	f140 8087 	bpl.w	8002c6c <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b5e:	068d      	lsls	r5, r1, #26
 8002b60:	d402      	bmi.n	8002b68 <HAL_UART_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b62:	00c6      	lsls	r6, r0, #3
 8002b64:	f140 8082 	bpl.w	8002c6c <HAL_UART_IRQHandler+0x128>
      if (huart->RxISR != NULL)
 8002b68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80b5 	beq.w	8002cda <HAL_UART_IRQHandler+0x196>
      huart->TxISR(huart);
 8002b70:	4620      	mov	r0, r4
 8002b72:	e06f      	b.n	8002c54 <HAL_UART_IRQHandler+0x110>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002b74:	4e59      	ldr	r6, [pc, #356]	; (8002cdc <HAL_UART_IRQHandler+0x198>)
 8002b76:	4006      	ands	r6, r0
 8002b78:	d102      	bne.n	8002b80 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002b7a:	4d59      	ldr	r5, [pc, #356]	; (8002ce0 <HAL_UART_IRQHandler+0x19c>)
 8002b7c:	4229      	tst	r1, r5
 8002b7e:	d075      	beq.n	8002c6c <HAL_UART_IRQHandler+0x128>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b80:	07dd      	lsls	r5, r3, #31
 8002b82:	d509      	bpl.n	8002b98 <HAL_UART_IRQHandler+0x54>
 8002b84:	05cd      	lsls	r5, r1, #23
 8002b86:	d507      	bpl.n	8002b98 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b88:	2501      	movs	r5, #1
 8002b8a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b8c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002b90:	f045 0501 	orr.w	r5, r5, #1
 8002b94:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b98:	079d      	lsls	r5, r3, #30
 8002b9a:	d509      	bpl.n	8002bb0 <HAL_UART_IRQHandler+0x6c>
 8002b9c:	07c5      	lsls	r5, r0, #31
 8002b9e:	d507      	bpl.n	8002bb0 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ba0:	2502      	movs	r5, #2
 8002ba2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ba4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002ba8:	f045 0504 	orr.w	r5, r5, #4
 8002bac:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bb0:	075d      	lsls	r5, r3, #29
 8002bb2:	d509      	bpl.n	8002bc8 <HAL_UART_IRQHandler+0x84>
 8002bb4:	07c5      	lsls	r5, r0, #31
 8002bb6:	d507      	bpl.n	8002bc8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bb8:	2504      	movs	r5, #4
 8002bba:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bbc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002bc0:	f045 0502 	orr.w	r5, r5, #2
 8002bc4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bc8:	071d      	lsls	r5, r3, #28
 8002bca:	d50a      	bpl.n	8002be2 <HAL_UART_IRQHandler+0x9e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002bcc:	068d      	lsls	r5, r1, #26
 8002bce:	d400      	bmi.n	8002bd2 <HAL_UART_IRQHandler+0x8e>
 8002bd0:	b13e      	cbz	r6, 8002be2 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bd2:	2508      	movs	r5, #8
 8002bd4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bd6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002bda:	f045 0508 	orr.w	r5, r5, #8
 8002bde:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002be2:	051e      	lsls	r6, r3, #20
 8002be4:	d50a      	bpl.n	8002bfc <HAL_UART_IRQHandler+0xb8>
 8002be6:	014d      	lsls	r5, r1, #5
 8002be8:	d508      	bpl.n	8002bfc <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bea:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002bee:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bf0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002bf4:	f042 0220 	orr.w	r2, r2, #32
 8002bf8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bfc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	d06a      	beq.n	8002cda <HAL_UART_IRQHandler+0x196>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c04:	069e      	lsls	r6, r3, #26
 8002c06:	d507      	bpl.n	8002c18 <HAL_UART_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c08:	068d      	lsls	r5, r1, #26
 8002c0a:	d401      	bmi.n	8002c10 <HAL_UART_IRQHandler+0xcc>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c0c:	00c0      	lsls	r0, r0, #3
 8002c0e:	d503      	bpl.n	8002c18 <HAL_UART_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 8002c10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002c12:	b10b      	cbz	r3, 8002c18 <HAL_UART_IRQHandler+0xd4>
          huart->RxISR(huart);
 8002c14:	4620      	mov	r0, r4
 8002c16:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c18:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002c1a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c1e:	6892      	ldr	r2, [r2, #8]
 8002c20:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8002c22:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c24:	d402      	bmi.n	8002c2c <HAL_UART_IRQHandler+0xe8>
 8002c26:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8002c2a:	d01a      	beq.n	8002c62 <HAL_UART_IRQHandler+0x11e>
        UART_EndRxTransfer(huart);
 8002c2c:	f7ff fdb8 	bl	80027a0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	0652      	lsls	r2, r2, #25
 8002c36:	d510      	bpl.n	8002c5a <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c38:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002c3a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c40:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002c42:	b150      	cbz	r0, 8002c5a <HAL_UART_IRQHandler+0x116>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_UART_IRQHandler+0x1a0>)
 8002c46:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c48:	f7fd fe11 	bl	800086e <HAL_DMA_Abort_IT>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d044      	beq.n	8002cda <HAL_UART_IRQHandler+0x196>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c50:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002c52:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c58:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff ff70 	bl	8002b40 <HAL_UART_ErrorCallback>
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002c62:	f7ff ff6d 	bl	8002b40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c66:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c6c:	02de      	lsls	r6, r3, #11
 8002c6e:	d509      	bpl.n	8002c84 <HAL_UART_IRQHandler+0x140>
 8002c70:	0245      	lsls	r5, r0, #9
 8002c72:	d507      	bpl.n	8002c84 <HAL_UART_IRQHandler+0x140>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002c78:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c7a:	6213      	str	r3, [r2, #32]
}
 8002c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002c80:	f000 be28 	b.w	80038d4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c84:	061e      	lsls	r6, r3, #24
 8002c86:	d505      	bpl.n	8002c94 <HAL_UART_IRQHandler+0x150>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c88:	060d      	lsls	r5, r1, #24
 8002c8a:	d401      	bmi.n	8002c90 <HAL_UART_IRQHandler+0x14c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c8c:	0200      	lsls	r0, r0, #8
 8002c8e:	d501      	bpl.n	8002c94 <HAL_UART_IRQHandler+0x150>
    if (huart->TxISR != NULL)
 8002c90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002c92:	e76a      	b.n	8002b6a <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c94:	065e      	lsls	r6, r3, #25
 8002c96:	d50e      	bpl.n	8002cb6 <HAL_UART_IRQHandler+0x172>
 8002c98:	064d      	lsls	r5, r1, #25
 8002c9a:	d50c      	bpl.n	8002cb6 <HAL_UART_IRQHandler+0x172>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c9c:	6813      	ldr	r3, [r2, #0]
 8002c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca2:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f002 f990 	bl	8004fd4 <HAL_UART_TxCpltCallback>
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002cb6:	0218      	lsls	r0, r3, #8
 8002cb8:	d506      	bpl.n	8002cc8 <HAL_UART_IRQHandler+0x184>
 8002cba:	004a      	lsls	r2, r1, #1
 8002cbc:	d504      	bpl.n	8002cc8 <HAL_UART_IRQHandler+0x184>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cbe:	4620      	mov	r0, r4
}
 8002cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cc4:	f000 be08 	b.w	80038d8 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cc8:	01db      	lsls	r3, r3, #7
 8002cca:	d506      	bpl.n	8002cda <HAL_UART_IRQHandler+0x196>
 8002ccc:	2900      	cmp	r1, #0
 8002cce:	da04      	bge.n	8002cda <HAL_UART_IRQHandler+0x196>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cd0:	4620      	mov	r0, r4
}
 8002cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cd6:	f000 bdfe 	b.w	80038d6 <HAL_UARTEx_RxFifoFullCallback>
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	10000001 	.word	0x10000001
 8002ce0:	04000120 	.word	0x04000120
 8002ce4:	08002ce9 	.word	0x08002ce9

08002ce8 <UART_DMAAbortOnError>:
{
 8002ce8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002cea:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8002cf2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8002cf6:	f7ff ff23 	bl	8002b40 <HAL_UART_ErrorCallback>
 8002cfa:	bd08      	pop	{r3, pc}

08002cfc <HAL_UART_GetState>:
  temp1 = huart->gState;
 8002cfc:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8002d00:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8002d04:	4310      	orrs	r0, r2
 8002d06:	4770      	bx	lr

08002d08 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d08:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d0a:	69c1      	ldr	r1, [r0, #28]
 8002d0c:	6883      	ldr	r3, [r0, #8]
{
 8002d0e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002d12:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d14:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d16:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d18:	4303      	orrs	r3, r0
 8002d1a:	6960      	ldr	r0, [r4, #20]
 8002d1c:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8002d1e:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d20:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8002d22:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d24:	48ac      	ldr	r0, [pc, #688]	; (8002fd8 <UART_SetConfig+0x2d0>)
 8002d26:	4028      	ands	r0, r5
 8002d28:	4303      	orrs	r3, r0
 8002d2a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2c:	6853      	ldr	r3, [r2, #4]
 8002d2e:	68e0      	ldr	r0, [r4, #12]
 8002d30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d34:	4303      	orrs	r3, r0
 8002d36:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d38:	4ba8      	ldr	r3, [pc, #672]	; (8002fdc <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d3a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d3c:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002d3e:	bf1c      	itt	ne
 8002d40:	6a23      	ldrne	r3, [r4, #32]
 8002d42:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d44:	6893      	ldr	r3, [r2, #8]
 8002d46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d4e:	4303      	orrs	r3, r0
 8002d50:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d52:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8002d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d56:	f020 000f 	bic.w	r0, r0, #15
 8002d5a:	4318      	orrs	r0, r3
 8002d5c:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d5e:	48a0      	ldr	r0, [pc, #640]	; (8002fe0 <UART_SetConfig+0x2d8>)
 8002d60:	4282      	cmp	r2, r0
 8002d62:	d11a      	bne.n	8002d9a <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d68:	489e      	ldr	r0, [pc, #632]	; (8002fe4 <UART_SetConfig+0x2dc>)
 8002d6a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002d6e:	f002 0203 	and.w	r2, r2, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d72:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002d76:	5c82      	ldrb	r2, [r0, r2]
 8002d78:	f102 32ff 	add.w	r2, r2, #4294967295
 8002d7c:	f000 8220 	beq.w	80031c0 <UART_SetConfig+0x4b8>
    switch (clocksource)
 8002d80:	2a07      	cmp	r2, #7
 8002d82:	f200 83e7 	bhi.w	8003554 <UART_SetConfig+0x84c>
 8002d86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002d8a:	0327      	.short	0x0327
 8002d8c:	03e50349 	.word	0x03e50349
 8002d90:	03e5038c 	.word	0x03e5038c
 8002d94:	03e503e5 	.word	0x03e503e5
 8002d98:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d9a:	4890      	ldr	r0, [pc, #576]	; (8002fdc <UART_SetConfig+0x2d4>)
 8002d9c:	4282      	cmp	r2, r0
 8002d9e:	f040 83d5 	bne.w	800354c <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002daa:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002dae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002db2:	f000 8094 	beq.w	8002ede <UART_SetConfig+0x1d6>
 8002db6:	d80c      	bhi.n	8002dd2 <UART_SetConfig+0xca>
 8002db8:	b3ca      	cbz	r2, 8002e2e <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 8002dba:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002dc2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8002dca:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002dcc:	4610      	mov	r0, r2
 8002dce:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dd2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002dd6:	d064      	beq.n	8002ea2 <UART_SetConfig+0x19a>
 8002dd8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002ddc:	d1ed      	bne.n	8002dba <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80e1 	beq.w	8002fa6 <UART_SetConfig+0x29e>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f000 80e1 	beq.w	8002fac <UART_SetConfig+0x2a4>
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	f000 80e1 	beq.w	8002fb2 <UART_SetConfig+0x2aa>
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	f000 80e1 	beq.w	8002fb8 <UART_SetConfig+0x2b0>
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	f000 80e1 	beq.w	8002fbe <UART_SetConfig+0x2b6>
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	f000 80e1 	beq.w	8002fc4 <UART_SetConfig+0x2bc>
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	f000 80e1 	beq.w	8002fca <UART_SetConfig+0x2c2>
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	f000 80e1 	beq.w	8002fd0 <UART_SetConfig+0x2c8>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	f000 8100 	beq.w	8003014 <UART_SetConfig+0x30c>
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	f000 8100 	beq.w	800301a <UART_SetConfig+0x312>
 8002e1a:	2b0a      	cmp	r3, #10
 8002e1c:	f000 8100 	beq.w	8003020 <UART_SetConfig+0x318>
 8002e20:	2b0b      	cmp	r3, #11
 8002e22:	bf14      	ite	ne
 8002e24:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002e28:	2080      	moveq	r0, #128	; 0x80
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e093      	b.n	8002f56 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e2e:	f7ff fa9d 	bl	800236c <HAL_RCC_GetPCLK1Freq>
 8002e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e34:	b1fb      	cbz	r3, 8002e76 <UART_SetConfig+0x16e>
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d01f      	beq.n	8002e7a <UART_SetConfig+0x172>
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d01f      	beq.n	8002e7e <UART_SetConfig+0x176>
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d01f      	beq.n	8002e82 <UART_SetConfig+0x17a>
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d01f      	beq.n	8002e86 <UART_SetConfig+0x17e>
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d01f      	beq.n	8002e8a <UART_SetConfig+0x182>
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d01f      	beq.n	8002e8e <UART_SetConfig+0x186>
 8002e4e:	2b07      	cmp	r3, #7
 8002e50:	d01f      	beq.n	8002e92 <UART_SetConfig+0x18a>
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d01f      	beq.n	8002e96 <UART_SetConfig+0x18e>
 8002e56:	2b09      	cmp	r3, #9
 8002e58:	d01f      	beq.n	8002e9a <UART_SetConfig+0x192>
 8002e5a:	2b0a      	cmp	r3, #10
 8002e5c:	d01f      	beq.n	8002e9e <UART_SetConfig+0x196>
 8002e5e:	2b0b      	cmp	r3, #11
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002e68:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002e6c:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d171      	bne.n	8002f56 <UART_SetConfig+0x24e>
 8002e72:	4602      	mov	r2, r0
 8002e74:	e7a2      	b.n	8002dbc <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002e76:	2301      	movs	r3, #1
 8002e78:	e7f6      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e7f4      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e7f2      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e82:	2306      	movs	r3, #6
 8002e84:	e7f0      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e86:	2308      	movs	r3, #8
 8002e88:	e7ee      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	e7ec      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e8e:	230c      	movs	r3, #12
 8002e90:	e7ea      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e92:	2310      	movs	r3, #16
 8002e94:	e7e8      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e96:	2320      	movs	r3, #32
 8002e98:	e7e6      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	e7e4      	b.n	8002e68 <UART_SetConfig+0x160>
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	e7e2      	b.n	8002e68 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d052      	beq.n	8002f4c <UART_SetConfig+0x244>
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d052      	beq.n	8002f50 <UART_SetConfig+0x248>
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d052      	beq.n	8002f54 <UART_SetConfig+0x24c>
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d069      	beq.n	8002f86 <UART_SetConfig+0x27e>
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d069      	beq.n	8002f8a <UART_SetConfig+0x282>
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d069      	beq.n	8002f8e <UART_SetConfig+0x286>
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d069      	beq.n	8002f92 <UART_SetConfig+0x28a>
 8002ebe:	2b07      	cmp	r3, #7
 8002ec0:	d069      	beq.n	8002f96 <UART_SetConfig+0x28e>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d069      	beq.n	8002f9a <UART_SetConfig+0x292>
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	d069      	beq.n	8002f9e <UART_SetConfig+0x296>
 8002eca:	2b0a      	cmp	r3, #10
 8002ecc:	d069      	beq.n	8002fa2 <UART_SetConfig+0x29a>
 8002ece:	4846      	ldr	r0, [pc, #280]	; (8002fe8 <UART_SetConfig+0x2e0>)
 8002ed0:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002ed4:	2b0b      	cmp	r3, #11
 8002ed6:	bf08      	it	eq
 8002ed8:	4610      	moveq	r0, r2
 8002eda:	2302      	movs	r3, #2
 8002edc:	e03b      	b.n	8002f56 <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ede:	f7ff f9e7 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ee4:	b1e3      	cbz	r3, 8002f20 <UART_SetConfig+0x218>
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d01c      	beq.n	8002f24 <UART_SetConfig+0x21c>
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d01c      	beq.n	8002f28 <UART_SetConfig+0x220>
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d01c      	beq.n	8002f2c <UART_SetConfig+0x224>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d01c      	beq.n	8002f30 <UART_SetConfig+0x228>
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	d01c      	beq.n	8002f34 <UART_SetConfig+0x22c>
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d01c      	beq.n	8002f38 <UART_SetConfig+0x230>
 8002efe:	2b07      	cmp	r3, #7
 8002f00:	d01c      	beq.n	8002f3c <UART_SetConfig+0x234>
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d01c      	beq.n	8002f40 <UART_SetConfig+0x238>
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	d01c      	beq.n	8002f44 <UART_SetConfig+0x23c>
 8002f0a:	2b0a      	cmp	r3, #10
 8002f0c:	d01c      	beq.n	8002f48 <UART_SetConfig+0x240>
 8002f0e:	2b0b      	cmp	r3, #11
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002f18:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	e7a6      	b.n	8002e6e <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f20:	2301      	movs	r3, #1
 8002f22:	e7f9      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e7f7      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	e7f5      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f2c:	2306      	movs	r3, #6
 8002f2e:	e7f3      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f30:	2308      	movs	r3, #8
 8002f32:	e7f1      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f34:	230a      	movs	r3, #10
 8002f36:	e7ef      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	e7ed      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	e7eb      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f40:	2320      	movs	r3, #32
 8002f42:	e7e9      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f44:	2340      	movs	r3, #64	; 0x40
 8002f46:	e7e7      	b.n	8002f18 <UART_SetConfig+0x210>
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	e7e5      	b.n	8002f18 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f4c:	4826      	ldr	r0, [pc, #152]	; (8002fe8 <UART_SetConfig+0x2e0>)
 8002f4e:	e7c4      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f50:	4826      	ldr	r0, [pc, #152]	; (8002fec <UART_SetConfig+0x2e4>)
 8002f52:	e7c2      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f54:	4826      	ldr	r0, [pc, #152]	; (8002ff0 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002f5c:	4281      	cmp	r1, r0
 8002f5e:	f63f af2c 	bhi.w	8002dba <UART_SetConfig+0xb2>
 8002f62:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002f66:	f63f af28 	bhi.w	8002dba <UART_SetConfig+0xb2>
        switch (clocksource)
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	f200 8125 	bhi.w	80031ba <UART_SetConfig+0x4b2>
 8002f70:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f74:	01230059 	.word	0x01230059
 8002f78:	01230095 	.word	0x01230095
 8002f7c:	012300d1 	.word	0x012300d1
 8002f80:	01230123 	.word	0x01230123
 8002f84:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002f86:	481b      	ldr	r0, [pc, #108]	; (8002ff4 <UART_SetConfig+0x2ec>)
 8002f88:	e7a7      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f8a:	481b      	ldr	r0, [pc, #108]	; (8002ff8 <UART_SetConfig+0x2f0>)
 8002f8c:	e7a5      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f8e:	481b      	ldr	r0, [pc, #108]	; (8002ffc <UART_SetConfig+0x2f4>)
 8002f90:	e7a3      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f92:	481b      	ldr	r0, [pc, #108]	; (8003000 <UART_SetConfig+0x2f8>)
 8002f94:	e7a1      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f96:	481b      	ldr	r0, [pc, #108]	; (8003004 <UART_SetConfig+0x2fc>)
 8002f98:	e79f      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f9a:	481b      	ldr	r0, [pc, #108]	; (8003008 <UART_SetConfig+0x300>)
 8002f9c:	e79d      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002f9e:	481b      	ldr	r0, [pc, #108]	; (800300c <UART_SetConfig+0x304>)
 8002fa0:	e79b      	b.n	8002eda <UART_SetConfig+0x1d2>
 8002fa2:	481b      	ldr	r0, [pc, #108]	; (8003010 <UART_SetConfig+0x308>)
 8002fa4:	e799      	b.n	8002eda <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002fa6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002faa:	e73e      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fb0:	e73b      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fb2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fb6:	e738      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fb8:	f241 5055 	movw	r0, #5461	; 0x1555
 8002fbc:	e735      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fc2:	e732      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fc4:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002fc8:	e72f      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fca:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8002fce:	e72c      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fd4:	e729      	b.n	8002e2a <UART_SetConfig+0x122>
 8002fd6:	bf00      	nop
 8002fd8:	cfff69f3 	.word	0xcfff69f3
 8002fdc:	40008000 	.word	0x40008000
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	0800685c 	.word	0x0800685c
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	007a1200 	.word	0x007a1200
 8002ff0:	003d0900 	.word	0x003d0900
 8002ff4:	0028b0aa 	.word	0x0028b0aa
 8002ff8:	001e8480 	.word	0x001e8480
 8002ffc:	00186a00 	.word	0x00186a00
 8003000:	00145855 	.word	0x00145855
 8003004:	000f4240 	.word	0x000f4240
 8003008:	0007a120 	.word	0x0007a120
 800300c:	0003d090 	.word	0x0003d090
 8003010:	0001e848 	.word	0x0001e848
 8003014:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003018:	e79d      	b.n	8002f56 <UART_SetConfig+0x24e>
 800301a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800301e:	e704      	b.n	8002e2a <UART_SetConfig+0x122>
 8003020:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003024:	e701      	b.n	8002e2a <UART_SetConfig+0x122>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003026:	f7ff f9a1 	bl	800236c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800302a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8089 	beq.w	8003144 <UART_SetConfig+0x43c>
 8003032:	2b01      	cmp	r3, #1
 8003034:	d072      	beq.n	800311c <UART_SetConfig+0x414>
 8003036:	2b02      	cmp	r3, #2
 8003038:	d072      	beq.n	8003120 <UART_SetConfig+0x418>
 800303a:	2b03      	cmp	r3, #3
 800303c:	d072      	beq.n	8003124 <UART_SetConfig+0x41c>
 800303e:	2b04      	cmp	r3, #4
 8003040:	d072      	beq.n	8003128 <UART_SetConfig+0x420>
 8003042:	2b05      	cmp	r3, #5
 8003044:	d072      	beq.n	800312c <UART_SetConfig+0x424>
 8003046:	2b06      	cmp	r3, #6
 8003048:	d072      	beq.n	8003130 <UART_SetConfig+0x428>
 800304a:	2b07      	cmp	r3, #7
 800304c:	d072      	beq.n	8003134 <UART_SetConfig+0x42c>
 800304e:	2b08      	cmp	r3, #8
 8003050:	d072      	beq.n	8003138 <UART_SetConfig+0x430>
 8003052:	2b09      	cmp	r3, #9
 8003054:	d072      	beq.n	800313c <UART_SetConfig+0x434>
 8003056:	2b0a      	cmp	r3, #10
 8003058:	d072      	beq.n	8003140 <UART_SetConfig+0x438>
 800305a:	2b0b      	cmp	r3, #11
 800305c:	d172      	bne.n	8003144 <UART_SetConfig+0x43c>
 800305e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003062:	2300      	movs	r3, #0
 8003064:	2100      	movs	r1, #0
 8003066:	f7fd f8db 	bl	8000220 <__aeabi_uldivmod>
 800306a:	6865      	ldr	r5, [r4, #4]
 800306c:	020f      	lsls	r7, r1, #8
 800306e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003072:	0206      	lsls	r6, r0, #8
 8003074:	0868      	lsrs	r0, r5, #1
 8003076:	eb16 0b00 	adds.w	fp, r6, r0
 800307a:	f147 0c00 	adc.w	ip, r7, #0
 800307e:	462a      	mov	r2, r5
 8003080:	2300      	movs	r3, #0
 8003082:	4658      	mov	r0, fp
 8003084:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003086:	f7fd f8cb 	bl	8000220 <__aeabi_uldivmod>
            break;
 800308a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800308c:	4b9a      	ldr	r3, [pc, #616]	; (80032f8 <UART_SetConfig+0x5f0>)
 800308e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003092:	4299      	cmp	r1, r3
 8003094:	f63f ae91 	bhi.w	8002dba <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	60d8      	str	r0, [r3, #12]
 800309c:	e68e      	b.n	8002dbc <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800309e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d036      	beq.n	8003112 <UART_SetConfig+0x40a>
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d016      	beq.n	80030d6 <UART_SetConfig+0x3ce>
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d016      	beq.n	80030da <UART_SetConfig+0x3d2>
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d016      	beq.n	80030de <UART_SetConfig+0x3d6>
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d01e      	beq.n	80030f2 <UART_SetConfig+0x3ea>
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d01e      	beq.n	80030f6 <UART_SetConfig+0x3ee>
 80030b8:	2b06      	cmp	r3, #6
 80030ba:	d01e      	beq.n	80030fa <UART_SetConfig+0x3f2>
 80030bc:	2b07      	cmp	r3, #7
 80030be:	d020      	beq.n	8003102 <UART_SetConfig+0x3fa>
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d020      	beq.n	8003106 <UART_SetConfig+0x3fe>
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d020      	beq.n	800310a <UART_SetConfig+0x402>
 80030c8:	2b0a      	cmp	r3, #10
 80030ca:	d020      	beq.n	800310e <UART_SetConfig+0x406>
 80030cc:	2b0b      	cmp	r3, #11
 80030ce:	d120      	bne.n	8003112 <UART_SetConfig+0x40a>
 80030d0:	488a      	ldr	r0, [pc, #552]	; (80032fc <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030d2:	2100      	movs	r1, #0
 80030d4:	e006      	b.n	80030e4 <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030d6:	488a      	ldr	r0, [pc, #552]	; (8003300 <UART_SetConfig+0x5f8>)
 80030d8:	e7fb      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80030da:	488a      	ldr	r0, [pc, #552]	; (8003304 <UART_SetConfig+0x5fc>)
 80030dc:	e7f9      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80030de:	a182      	add	r1, pc, #520	; (adr r1, 80032e8 <UART_SetConfig+0x5e0>)
 80030e0:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e4:	0855      	lsrs	r5, r2, #1
 80030e6:	1940      	adds	r0, r0, r5
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	f141 0100 	adc.w	r1, r1, #0
 80030f0:	e7c9      	b.n	8003086 <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f2:	4885      	ldr	r0, [pc, #532]	; (8003308 <UART_SetConfig+0x600>)
 80030f4:	e7ed      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80030f6:	4885      	ldr	r0, [pc, #532]	; (800330c <UART_SetConfig+0x604>)
 80030f8:	e7eb      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80030fa:	a17d      	add	r1, pc, #500	; (adr r1, 80032f0 <UART_SetConfig+0x5e8>)
 80030fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003100:	e7f0      	b.n	80030e4 <UART_SetConfig+0x3dc>
 8003102:	4883      	ldr	r0, [pc, #524]	; (8003310 <UART_SetConfig+0x608>)
 8003104:	e7e5      	b.n	80030d2 <UART_SetConfig+0x3ca>
 8003106:	4883      	ldr	r0, [pc, #524]	; (8003314 <UART_SetConfig+0x60c>)
 8003108:	e7e3      	b.n	80030d2 <UART_SetConfig+0x3ca>
 800310a:	4883      	ldr	r0, [pc, #524]	; (8003318 <UART_SetConfig+0x610>)
 800310c:	e7e1      	b.n	80030d2 <UART_SetConfig+0x3ca>
 800310e:	4883      	ldr	r0, [pc, #524]	; (800331c <UART_SetConfig+0x614>)
 8003110:	e7df      	b.n	80030d2 <UART_SetConfig+0x3ca>
 8003112:	4883      	ldr	r0, [pc, #524]	; (8003320 <UART_SetConfig+0x618>)
 8003114:	e7dd      	b.n	80030d2 <UART_SetConfig+0x3ca>
            pclk = HAL_RCC_GetSysClockFreq();
 8003116:	f7ff f8cb 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800311a:	e786      	b.n	800302a <UART_SetConfig+0x322>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800311c:	2202      	movs	r2, #2
 800311e:	e7a0      	b.n	8003062 <UART_SetConfig+0x35a>
 8003120:	2204      	movs	r2, #4
 8003122:	e79e      	b.n	8003062 <UART_SetConfig+0x35a>
 8003124:	2206      	movs	r2, #6
 8003126:	e79c      	b.n	8003062 <UART_SetConfig+0x35a>
 8003128:	2208      	movs	r2, #8
 800312a:	e79a      	b.n	8003062 <UART_SetConfig+0x35a>
 800312c:	220a      	movs	r2, #10
 800312e:	e798      	b.n	8003062 <UART_SetConfig+0x35a>
 8003130:	220c      	movs	r2, #12
 8003132:	e796      	b.n	8003062 <UART_SetConfig+0x35a>
 8003134:	2210      	movs	r2, #16
 8003136:	e794      	b.n	8003062 <UART_SetConfig+0x35a>
 8003138:	2220      	movs	r2, #32
 800313a:	e792      	b.n	8003062 <UART_SetConfig+0x35a>
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	e790      	b.n	8003062 <UART_SetConfig+0x35a>
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	e78e      	b.n	8003062 <UART_SetConfig+0x35a>
 8003144:	2201      	movs	r2, #1
 8003146:	e78c      	b.n	8003062 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314a:	b39b      	cbz	r3, 80031b4 <UART_SetConfig+0x4ac>
 800314c:	2b01      	cmp	r3, #1
 800314e:	d016      	beq.n	800317e <UART_SetConfig+0x476>
 8003150:	2b02      	cmp	r3, #2
 8003152:	d017      	beq.n	8003184 <UART_SetConfig+0x47c>
 8003154:	2b03      	cmp	r3, #3
 8003156:	d018      	beq.n	800318a <UART_SetConfig+0x482>
 8003158:	2b04      	cmp	r3, #4
 800315a:	d018      	beq.n	800318e <UART_SetConfig+0x486>
 800315c:	2b05      	cmp	r3, #5
 800315e:	d019      	beq.n	8003194 <UART_SetConfig+0x48c>
 8003160:	2b06      	cmp	r3, #6
 8003162:	d019      	beq.n	8003198 <UART_SetConfig+0x490>
 8003164:	2b07      	cmp	r3, #7
 8003166:	d019      	beq.n	800319c <UART_SetConfig+0x494>
 8003168:	2b08      	cmp	r3, #8
 800316a:	d01a      	beq.n	80031a2 <UART_SetConfig+0x49a>
 800316c:	2b09      	cmp	r3, #9
 800316e:	d01b      	beq.n	80031a8 <UART_SetConfig+0x4a0>
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d01c      	beq.n	80031ae <UART_SetConfig+0x4a6>
 8003174:	2b0b      	cmp	r3, #11
 8003176:	d11d      	bne.n	80031b4 <UART_SetConfig+0x4ac>
 8003178:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800317c:	e7a9      	b.n	80030d2 <UART_SetConfig+0x3ca>
 800317e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003182:	e7a6      	b.n	80030d2 <UART_SetConfig+0x3ca>
 8003184:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003188:	e7a3      	b.n	80030d2 <UART_SetConfig+0x3ca>
 800318a:	4866      	ldr	r0, [pc, #408]	; (8003324 <UART_SetConfig+0x61c>)
 800318c:	e7a1      	b.n	80030d2 <UART_SetConfig+0x3ca>
 800318e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003192:	e79e      	b.n	80030d2 <UART_SetConfig+0x3ca>
 8003194:	4864      	ldr	r0, [pc, #400]	; (8003328 <UART_SetConfig+0x620>)
 8003196:	e79c      	b.n	80030d2 <UART_SetConfig+0x3ca>
 8003198:	4864      	ldr	r0, [pc, #400]	; (800332c <UART_SetConfig+0x624>)
 800319a:	e79a      	b.n	80030d2 <UART_SetConfig+0x3ca>
 800319c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031a0:	e797      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80031a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80031a6:	e794      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80031a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80031ac:	e791      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80031ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80031b2:	e78e      	b.n	80030d2 <UART_SetConfig+0x3ca>
 80031b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80031b8:	e78b      	b.n	80030d2 <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 80031ba:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80031bc:	2000      	movs	r0, #0
 80031be:	e765      	b.n	800308c <UART_SetConfig+0x384>
    switch (clocksource)
 80031c0:	2a07      	cmp	r2, #7
 80031c2:	f200 8106 	bhi.w	80033d2 <UART_SetConfig+0x6ca>
 80031c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80031ca:	0008      	.short	0x0008
 80031cc:	0104003f 	.word	0x0104003f
 80031d0:	01040076 	.word	0x01040076
 80031d4:	01040104 	.word	0x01040104
 80031d8:	00c7      	.short	0x00c7
        pclk = HAL_RCC_GetPCLK2Freq();
 80031da:	f7ff f8d9 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d06b      	beq.n	80032bc <UART_SetConfig+0x5b4>
 80031e4:	2901      	cmp	r1, #1
 80031e6:	d06b      	beq.n	80032c0 <UART_SetConfig+0x5b8>
 80031e8:	2902      	cmp	r1, #2
 80031ea:	d06b      	beq.n	80032c4 <UART_SetConfig+0x5bc>
 80031ec:	2903      	cmp	r1, #3
 80031ee:	d06b      	beq.n	80032c8 <UART_SetConfig+0x5c0>
 80031f0:	2904      	cmp	r1, #4
 80031f2:	d06b      	beq.n	80032cc <UART_SetConfig+0x5c4>
 80031f4:	2905      	cmp	r1, #5
 80031f6:	d06b      	beq.n	80032d0 <UART_SetConfig+0x5c8>
 80031f8:	2906      	cmp	r1, #6
 80031fa:	d06b      	beq.n	80032d4 <UART_SetConfig+0x5cc>
 80031fc:	2907      	cmp	r1, #7
 80031fe:	d06b      	beq.n	80032d8 <UART_SetConfig+0x5d0>
 8003200:	2908      	cmp	r1, #8
 8003202:	d06b      	beq.n	80032dc <UART_SetConfig+0x5d4>
 8003204:	2909      	cmp	r1, #9
 8003206:	d06b      	beq.n	80032e0 <UART_SetConfig+0x5d8>
 8003208:	290a      	cmp	r1, #10
 800320a:	d06b      	beq.n	80032e4 <UART_SetConfig+0x5dc>
 800320c:	290b      	cmp	r1, #11
 800320e:	bf14      	ite	ne
 8003210:	2201      	movne	r2, #1
 8003212:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003216:	6861      	ldr	r1, [r4, #4]
 8003218:	fbb0 f2f2 	udiv	r2, r0, r2
 800321c:	084b      	lsrs	r3, r1, #1
 800321e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003228:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800322a:	f1a3 0010 	sub.w	r0, r3, #16
 800322e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003232:	4288      	cmp	r0, r1
 8003234:	f63f adc1 	bhi.w	8002dba <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003238:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800323c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800323e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003242:	430b      	orrs	r3, r1
 8003244:	60c3      	str	r3, [r0, #12]
 8003246:	e5b9      	b.n	8002dbc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003248:	b1fb      	cbz	r3, 800328a <UART_SetConfig+0x582>
 800324a:	2b01      	cmp	r3, #1
 800324c:	d01f      	beq.n	800328e <UART_SetConfig+0x586>
 800324e:	2b02      	cmp	r3, #2
 8003250:	d01f      	beq.n	8003292 <UART_SetConfig+0x58a>
 8003252:	2b03      	cmp	r3, #3
 8003254:	d01f      	beq.n	8003296 <UART_SetConfig+0x58e>
 8003256:	2b04      	cmp	r3, #4
 8003258:	d01f      	beq.n	800329a <UART_SetConfig+0x592>
 800325a:	2b05      	cmp	r3, #5
 800325c:	d01f      	beq.n	800329e <UART_SetConfig+0x596>
 800325e:	2b06      	cmp	r3, #6
 8003260:	d01f      	beq.n	80032a2 <UART_SetConfig+0x59a>
 8003262:	2b07      	cmp	r3, #7
 8003264:	d01f      	beq.n	80032a6 <UART_SetConfig+0x59e>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d01f      	beq.n	80032aa <UART_SetConfig+0x5a2>
 800326a:	2b09      	cmp	r3, #9
 800326c:	d01f      	beq.n	80032ae <UART_SetConfig+0x5a6>
 800326e:	2b0a      	cmp	r3, #10
 8003270:	d01f      	beq.n	80032b2 <UART_SetConfig+0x5aa>
 8003272:	492f      	ldr	r1, [pc, #188]	; (8003330 <UART_SetConfig+0x628>)
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <UART_SetConfig+0x614>)
 8003276:	2b0b      	cmp	r3, #11
 8003278:	bf14      	ite	ne
 800327a:	4613      	movne	r3, r2
 800327c:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800327e:	6862      	ldr	r2, [r4, #4]
 8003280:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003284:	fbb3 f3f2 	udiv	r3, r3, r2
 8003288:	e7cd      	b.n	8003226 <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <UART_SetConfig+0x614>)
 800328c:	e7f7      	b.n	800327e <UART_SetConfig+0x576>
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <UART_SetConfig+0x5f4>)
 8003290:	e7f5      	b.n	800327e <UART_SetConfig+0x576>
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <UART_SetConfig+0x62c>)
 8003294:	e7f3      	b.n	800327e <UART_SetConfig+0x576>
 8003296:	4b28      	ldr	r3, [pc, #160]	; (8003338 <UART_SetConfig+0x630>)
 8003298:	e7f1      	b.n	800327e <UART_SetConfig+0x576>
 800329a:	4b28      	ldr	r3, [pc, #160]	; (800333c <UART_SetConfig+0x634>)
 800329c:	e7ef      	b.n	800327e <UART_SetConfig+0x576>
 800329e:	4b28      	ldr	r3, [pc, #160]	; (8003340 <UART_SetConfig+0x638>)
 80032a0:	e7ed      	b.n	800327e <UART_SetConfig+0x576>
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <UART_SetConfig+0x63c>)
 80032a4:	e7eb      	b.n	800327e <UART_SetConfig+0x576>
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <UART_SetConfig+0x640>)
 80032a8:	e7e9      	b.n	800327e <UART_SetConfig+0x576>
 80032aa:	4b28      	ldr	r3, [pc, #160]	; (800334c <UART_SetConfig+0x644>)
 80032ac:	e7e7      	b.n	800327e <UART_SetConfig+0x576>
 80032ae:	4b28      	ldr	r3, [pc, #160]	; (8003350 <UART_SetConfig+0x648>)
 80032b0:	e7e5      	b.n	800327e <UART_SetConfig+0x576>
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <UART_SetConfig+0x64c>)
 80032b4:	e7e3      	b.n	800327e <UART_SetConfig+0x576>
        pclk = HAL_RCC_GetSysClockFreq();
 80032b6:	f7fe fffb 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 80032ba:	e790      	b.n	80031de <UART_SetConfig+0x4d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032bc:	2201      	movs	r2, #1
 80032be:	e7aa      	b.n	8003216 <UART_SetConfig+0x50e>
 80032c0:	2202      	movs	r2, #2
 80032c2:	e7a8      	b.n	8003216 <UART_SetConfig+0x50e>
 80032c4:	2204      	movs	r2, #4
 80032c6:	e7a6      	b.n	8003216 <UART_SetConfig+0x50e>
 80032c8:	2206      	movs	r2, #6
 80032ca:	e7a4      	b.n	8003216 <UART_SetConfig+0x50e>
 80032cc:	2208      	movs	r2, #8
 80032ce:	e7a2      	b.n	8003216 <UART_SetConfig+0x50e>
 80032d0:	220a      	movs	r2, #10
 80032d2:	e7a0      	b.n	8003216 <UART_SetConfig+0x50e>
 80032d4:	220c      	movs	r2, #12
 80032d6:	e79e      	b.n	8003216 <UART_SetConfig+0x50e>
 80032d8:	2210      	movs	r2, #16
 80032da:	e79c      	b.n	8003216 <UART_SetConfig+0x50e>
 80032dc:	2220      	movs	r2, #32
 80032de:	e79a      	b.n	8003216 <UART_SetConfig+0x50e>
 80032e0:	2240      	movs	r2, #64	; 0x40
 80032e2:	e798      	b.n	8003216 <UART_SetConfig+0x50e>
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	e796      	b.n	8003216 <UART_SetConfig+0x50e>
 80032e8:	28b0aa00 	.word	0x28b0aa00
 80032ec:	00000000 	.word	0x00000000
 80032f0:	14585500 	.word	0x14585500
 80032f4:	00000000 	.word	0x00000000
 80032f8:	000ffcff 	.word	0x000ffcff
 80032fc:	00f42400 	.word	0x00f42400
 8003300:	7a120000 	.word	0x7a120000
 8003304:	3d090000 	.word	0x3d090000
 8003308:	1e848000 	.word	0x1e848000
 800330c:	186a0000 	.word	0x186a0000
 8003310:	0f424000 	.word	0x0f424000
 8003314:	07a12000 	.word	0x07a12000
 8003318:	03d09000 	.word	0x03d09000
 800331c:	01e84800 	.word	0x01e84800
 8003320:	f4240000 	.word	0xf4240000
 8003324:	00155500 	.word	0x00155500
 8003328:	000ccc00 	.word	0x000ccc00
 800332c:	000aaa00 	.word	0x000aaa00
 8003330:	0001e848 	.word	0x0001e848
 8003334:	007a1200 	.word	0x007a1200
 8003338:	00516154 	.word	0x00516154
 800333c:	003d0900 	.word	0x003d0900
 8003340:	0030d400 	.word	0x0030d400
 8003344:	0028b0aa 	.word	0x0028b0aa
 8003348:	001e8480 	.word	0x001e8480
 800334c:	000f4240 	.word	0x000f4240
 8003350:	0007a120 	.word	0x0007a120
 8003354:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003358:	b1d3      	cbz	r3, 8003390 <UART_SetConfig+0x688>
 800335a:	2b01      	cmp	r3, #1
 800335c:	d01b      	beq.n	8003396 <UART_SetConfig+0x68e>
 800335e:	2b02      	cmp	r3, #2
 8003360:	d01c      	beq.n	800339c <UART_SetConfig+0x694>
 8003362:	2b03      	cmp	r3, #3
 8003364:	d01d      	beq.n	80033a2 <UART_SetConfig+0x69a>
 8003366:	2b04      	cmp	r3, #4
 8003368:	d01e      	beq.n	80033a8 <UART_SetConfig+0x6a0>
 800336a:	2b05      	cmp	r3, #5
 800336c:	d01f      	beq.n	80033ae <UART_SetConfig+0x6a6>
 800336e:	2b06      	cmp	r3, #6
 8003370:	d020      	beq.n	80033b4 <UART_SetConfig+0x6ac>
 8003372:	2b07      	cmp	r3, #7
 8003374:	d021      	beq.n	80033ba <UART_SetConfig+0x6b2>
 8003376:	2b08      	cmp	r3, #8
 8003378:	d022      	beq.n	80033c0 <UART_SetConfig+0x6b8>
 800337a:	2b09      	cmp	r3, #9
 800337c:	d023      	beq.n	80033c6 <UART_SetConfig+0x6be>
 800337e:	2b0a      	cmp	r3, #10
 8003380:	d024      	beq.n	80033cc <UART_SetConfig+0x6c4>
 8003382:	2b0b      	cmp	r3, #11
 8003384:	bf14      	ite	ne
 8003386:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 800338a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800338e:	e776      	b.n	800327e <UART_SetConfig+0x576>
 8003390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003394:	e773      	b.n	800327e <UART_SetConfig+0x576>
 8003396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339a:	e770      	b.n	800327e <UART_SetConfig+0x576>
 800339c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033a0:	e76d      	b.n	800327e <UART_SetConfig+0x576>
 80033a2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80033a6:	e76a      	b.n	800327e <UART_SetConfig+0x576>
 80033a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ac:	e767      	b.n	800327e <UART_SetConfig+0x576>
 80033ae:	f641 1398 	movw	r3, #6552	; 0x1998
 80033b2:	e764      	b.n	800327e <UART_SetConfig+0x576>
 80033b4:	f241 5354 	movw	r3, #5460	; 0x1554
 80033b8:	e761      	b.n	800327e <UART_SetConfig+0x576>
 80033ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033be:	e75e      	b.n	800327e <UART_SetConfig+0x576>
 80033c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033c4:	e75b      	b.n	800327e <UART_SetConfig+0x576>
 80033c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ca:	e758      	b.n	800327e <UART_SetConfig+0x576>
 80033cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d0:	e755      	b.n	800327e <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 80033d2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e728      	b.n	800322a <UART_SetConfig+0x522>
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe ffda 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d062      	beq.n	80034a8 <UART_SetConfig+0x7a0>
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d062      	beq.n	80034ac <UART_SetConfig+0x7a4>
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d062      	beq.n	80034b0 <UART_SetConfig+0x7a8>
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d062      	beq.n	80034b4 <UART_SetConfig+0x7ac>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d062      	beq.n	80034b8 <UART_SetConfig+0x7b0>
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d062      	beq.n	80034bc <UART_SetConfig+0x7b4>
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d062      	beq.n	80034c0 <UART_SetConfig+0x7b8>
 80033fa:	2b07      	cmp	r3, #7
 80033fc:	d062      	beq.n	80034c4 <UART_SetConfig+0x7bc>
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d062      	beq.n	80034c8 <UART_SetConfig+0x7c0>
 8003402:	2b09      	cmp	r3, #9
 8003404:	d062      	beq.n	80034cc <UART_SetConfig+0x7c4>
 8003406:	2b0a      	cmp	r3, #10
 8003408:	d062      	beq.n	80034d0 <UART_SetConfig+0x7c8>
 800340a:	2b0b      	cmp	r3, #11
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003414:	6862      	ldr	r2, [r4, #4]
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	e01c      	b.n	8003456 <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800341c:	b35b      	cbz	r3, 8003476 <UART_SetConfig+0x76e>
 800341e:	2b01      	cmp	r3, #1
 8003420:	d02b      	beq.n	800347a <UART_SetConfig+0x772>
 8003422:	2b02      	cmp	r3, #2
 8003424:	d02b      	beq.n	800347e <UART_SetConfig+0x776>
 8003426:	2b03      	cmp	r3, #3
 8003428:	d02b      	beq.n	8003482 <UART_SetConfig+0x77a>
 800342a:	2b04      	cmp	r3, #4
 800342c:	d02b      	beq.n	8003486 <UART_SetConfig+0x77e>
 800342e:	2b05      	cmp	r3, #5
 8003430:	d02b      	beq.n	800348a <UART_SetConfig+0x782>
 8003432:	2b06      	cmp	r3, #6
 8003434:	d02b      	beq.n	800348e <UART_SetConfig+0x786>
 8003436:	2b07      	cmp	r3, #7
 8003438:	d02b      	beq.n	8003492 <UART_SetConfig+0x78a>
 800343a:	2b08      	cmp	r3, #8
 800343c:	d02b      	beq.n	8003496 <UART_SetConfig+0x78e>
 800343e:	2b09      	cmp	r3, #9
 8003440:	d02b      	beq.n	800349a <UART_SetConfig+0x792>
 8003442:	2b0a      	cmp	r3, #10
 8003444:	d02b      	beq.n	800349e <UART_SetConfig+0x796>
 8003446:	4a45      	ldr	r2, [pc, #276]	; (800355c <UART_SetConfig+0x854>)
 8003448:	f24f 4124 	movw	r1, #62500	; 0xf424
 800344c:	2b0b      	cmp	r3, #11
 800344e:	bf14      	ite	ne
 8003450:	4613      	movne	r3, r2
 8003452:	460b      	moveq	r3, r1
 8003454:	6862      	ldr	r2, [r4, #4]
 8003456:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800345a:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800345e:	2200      	movs	r2, #0
 8003460:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003462:	f1a3 0010 	sub.w	r0, r3, #16
 8003466:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800346a:	4288      	cmp	r0, r1
 800346c:	f63f aca5 	bhi.w	8002dba <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8003470:	6821      	ldr	r1, [r4, #0]
 8003472:	60cb      	str	r3, [r1, #12]
 8003474:	e4a2      	b.n	8002dbc <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <UART_SetConfig+0x854>)
 8003478:	e7ec      	b.n	8003454 <UART_SetConfig+0x74c>
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <UART_SetConfig+0x858>)
 800347c:	e7ea      	b.n	8003454 <UART_SetConfig+0x74c>
 800347e:	4b39      	ldr	r3, [pc, #228]	; (8003564 <UART_SetConfig+0x85c>)
 8003480:	e7e8      	b.n	8003454 <UART_SetConfig+0x74c>
 8003482:	4b39      	ldr	r3, [pc, #228]	; (8003568 <UART_SetConfig+0x860>)
 8003484:	e7e6      	b.n	8003454 <UART_SetConfig+0x74c>
 8003486:	4b39      	ldr	r3, [pc, #228]	; (800356c <UART_SetConfig+0x864>)
 8003488:	e7e4      	b.n	8003454 <UART_SetConfig+0x74c>
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <UART_SetConfig+0x868>)
 800348c:	e7e2      	b.n	8003454 <UART_SetConfig+0x74c>
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <UART_SetConfig+0x86c>)
 8003490:	e7e0      	b.n	8003454 <UART_SetConfig+0x74c>
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <UART_SetConfig+0x870>)
 8003494:	e7de      	b.n	8003454 <UART_SetConfig+0x74c>
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <UART_SetConfig+0x874>)
 8003498:	e7dc      	b.n	8003454 <UART_SetConfig+0x74c>
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <UART_SetConfig+0x878>)
 800349c:	e7da      	b.n	8003454 <UART_SetConfig+0x74c>
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <UART_SetConfig+0x87c>)
 80034a0:	e7d8      	b.n	8003454 <UART_SetConfig+0x74c>
        pclk = HAL_RCC_GetSysClockFreq();
 80034a2:	f7fe ff05 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 80034a6:	e799      	b.n	80033dc <UART_SetConfig+0x6d4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a8:	2301      	movs	r3, #1
 80034aa:	e7b3      	b.n	8003414 <UART_SetConfig+0x70c>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e7b1      	b.n	8003414 <UART_SetConfig+0x70c>
 80034b0:	2304      	movs	r3, #4
 80034b2:	e7af      	b.n	8003414 <UART_SetConfig+0x70c>
 80034b4:	2306      	movs	r3, #6
 80034b6:	e7ad      	b.n	8003414 <UART_SetConfig+0x70c>
 80034b8:	2308      	movs	r3, #8
 80034ba:	e7ab      	b.n	8003414 <UART_SetConfig+0x70c>
 80034bc:	230a      	movs	r3, #10
 80034be:	e7a9      	b.n	8003414 <UART_SetConfig+0x70c>
 80034c0:	230c      	movs	r3, #12
 80034c2:	e7a7      	b.n	8003414 <UART_SetConfig+0x70c>
 80034c4:	2310      	movs	r3, #16
 80034c6:	e7a5      	b.n	8003414 <UART_SetConfig+0x70c>
 80034c8:	2320      	movs	r3, #32
 80034ca:	e7a3      	b.n	8003414 <UART_SetConfig+0x70c>
 80034cc:	2340      	movs	r3, #64	; 0x40
 80034ce:	e7a1      	b.n	8003414 <UART_SetConfig+0x70c>
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	e79f      	b.n	8003414 <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034d4:	b1cb      	cbz	r3, 800350a <UART_SetConfig+0x802>
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d01a      	beq.n	8003510 <UART_SetConfig+0x808>
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d01b      	beq.n	8003516 <UART_SetConfig+0x80e>
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d01c      	beq.n	800351c <UART_SetConfig+0x814>
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d01d      	beq.n	8003522 <UART_SetConfig+0x81a>
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d01e      	beq.n	8003528 <UART_SetConfig+0x820>
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d01f      	beq.n	800352e <UART_SetConfig+0x826>
 80034ee:	2b07      	cmp	r3, #7
 80034f0:	d020      	beq.n	8003534 <UART_SetConfig+0x82c>
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d021      	beq.n	800353a <UART_SetConfig+0x832>
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	d022      	beq.n	8003540 <UART_SetConfig+0x838>
 80034fa:	2b0a      	cmp	r3, #10
 80034fc:	d023      	beq.n	8003546 <UART_SetConfig+0x83e>
 80034fe:	2b0b      	cmp	r3, #11
 8003500:	bf14      	ite	ne
 8003502:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8003506:	2380      	moveq	r3, #128	; 0x80
 8003508:	e7a4      	b.n	8003454 <UART_SetConfig+0x74c>
 800350a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350e:	e7a1      	b.n	8003454 <UART_SetConfig+0x74c>
 8003510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003514:	e79e      	b.n	8003454 <UART_SetConfig+0x74c>
 8003516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800351a:	e79b      	b.n	8003454 <UART_SetConfig+0x74c>
 800351c:	f241 5355 	movw	r3, #5461	; 0x1555
 8003520:	e798      	b.n	8003454 <UART_SetConfig+0x74c>
 8003522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003526:	e795      	b.n	8003454 <UART_SetConfig+0x74c>
 8003528:	f640 43cc 	movw	r3, #3276	; 0xccc
 800352c:	e792      	b.n	8003454 <UART_SetConfig+0x74c>
 800352e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003532:	e78f      	b.n	8003454 <UART_SetConfig+0x74c>
 8003534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003538:	e78c      	b.n	8003454 <UART_SetConfig+0x74c>
 800353a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800353e:	e789      	b.n	8003454 <UART_SetConfig+0x74c>
 8003540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003544:	e786      	b.n	8003454 <UART_SetConfig+0x74c>
 8003546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354a:	e783      	b.n	8003454 <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003550:	f43f af3f 	beq.w	80033d2 <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8003554:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003556:	2300      	movs	r3, #0
 8003558:	e783      	b.n	8003462 <UART_SetConfig+0x75a>
 800355a:	bf00      	nop
 800355c:	00f42400 	.word	0x00f42400
 8003560:	007a1200 	.word	0x007a1200
 8003564:	003d0900 	.word	0x003d0900
 8003568:	0028b0aa 	.word	0x0028b0aa
 800356c:	001e8480 	.word	0x001e8480
 8003570:	00186a00 	.word	0x00186a00
 8003574:	00145855 	.word	0x00145855
 8003578:	000f4240 	.word	0x000f4240
 800357c:	0007a120 	.word	0x0007a120
 8003580:	0003d090 	.word	0x0003d090
 8003584:	0001e848 	.word	0x0001e848

08003588 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003588:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800358a:	07da      	lsls	r2, r3, #31
{
 800358c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358e:	d506      	bpl.n	800359e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003590:	6801      	ldr	r1, [r0, #0]
 8003592:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003594:	684a      	ldr	r2, [r1, #4]
 8003596:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800359a:	4322      	orrs	r2, r4
 800359c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800359e:	079c      	lsls	r4, r3, #30
 80035a0:	d506      	bpl.n	80035b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035a2:	6801      	ldr	r1, [r0, #0]
 80035a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80035a6:	684a      	ldr	r2, [r1, #4]
 80035a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035ac:	4322      	orrs	r2, r4
 80035ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b0:	0759      	lsls	r1, r3, #29
 80035b2:	d506      	bpl.n	80035c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b4:	6801      	ldr	r1, [r0, #0]
 80035b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80035b8:	684a      	ldr	r2, [r1, #4]
 80035ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035be:	4322      	orrs	r2, r4
 80035c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035c2:	071a      	lsls	r2, r3, #28
 80035c4:	d506      	bpl.n	80035d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035c6:	6801      	ldr	r1, [r0, #0]
 80035c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035ca:	684a      	ldr	r2, [r1, #4]
 80035cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d0:	4322      	orrs	r2, r4
 80035d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035d4:	06dc      	lsls	r4, r3, #27
 80035d6:	d506      	bpl.n	80035e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d8:	6801      	ldr	r1, [r0, #0]
 80035da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80035dc:	688a      	ldr	r2, [r1, #8]
 80035de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035e2:	4322      	orrs	r2, r4
 80035e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e6:	0699      	lsls	r1, r3, #26
 80035e8:	d506      	bpl.n	80035f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ea:	6801      	ldr	r1, [r0, #0]
 80035ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80035ee:	688a      	ldr	r2, [r1, #8]
 80035f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f4:	4322      	orrs	r2, r4
 80035f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f8:	065a      	lsls	r2, r3, #25
 80035fa:	d50f      	bpl.n	800361c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035fc:	6801      	ldr	r1, [r0, #0]
 80035fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003600:	684a      	ldr	r2, [r1, #4]
 8003602:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003606:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003608:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800360c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360e:	d105      	bne.n	800361c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003610:	684a      	ldr	r2, [r1, #4]
 8003612:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003614:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003618:	4322      	orrs	r2, r4
 800361a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	d506      	bpl.n	800362e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003620:	6802      	ldr	r2, [r0, #0]
 8003622:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003624:	6853      	ldr	r3, [r2, #4]
 8003626:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800362a:	430b      	orrs	r3, r1
 800362c:	6053      	str	r3, [r2, #4]
 800362e:	bd10      	pop	{r4, pc}

08003630 <UART_WaitOnFlagUntilTimeout>:
{
 8003630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003634:	9d06      	ldr	r5, [sp, #24]
 8003636:	4604      	mov	r4, r0
 8003638:	460f      	mov	r7, r1
 800363a:	4616      	mov	r6, r2
 800363c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363e:	6821      	ldr	r1, [r4, #0]
 8003640:	69ca      	ldr	r2, [r1, #28]
 8003642:	ea37 0302 	bics.w	r3, r7, r2
 8003646:	bf0c      	ite	eq
 8003648:	2201      	moveq	r2, #1
 800364a:	2200      	movne	r2, #0
 800364c:	42b2      	cmp	r2, r6
 800364e:	d002      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003650:	2000      	movs	r0, #0
}
 8003652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003656:	1c68      	adds	r0, r5, #1
 8003658:	d0f2      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fc ffb1 	bl	80005c0 <HAL_GetTick>
 800365e:	eba0 0008 	sub.w	r0, r0, r8
 8003662:	4285      	cmp	r5, r0
 8003664:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003666:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003668:	d300      	bcc.n	800366c <UART_WaitOnFlagUntilTimeout+0x3c>
 800366a:	b98d      	cbnz	r5, 8003690 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800366c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003670:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	6883      	ldr	r3, [r0, #8]
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800367a:	2320      	movs	r3, #32
 800367c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003680:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003684:	2300      	movs	r3, #0
 8003686:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800368a:	2003      	movs	r0, #3
 800368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003690:	075a      	lsls	r2, r3, #29
 8003692:	d5d4      	bpl.n	800363e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003694:	69c3      	ldr	r3, [r0, #28]
 8003696:	051b      	lsls	r3, r3, #20
 8003698:	d5d1      	bpl.n	800363e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800369a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800369e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80036a0:	6803      	ldr	r3, [r0, #0]
 80036a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036a6:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a8:	6883      	ldr	r3, [r0, #8]
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80036b0:	2320      	movs	r3, #32
 80036b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80036b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80036be:	e7e1      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0x54>

080036c0 <HAL_UART_Transmit>:
{
 80036c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036c4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80036c6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80036ca:	2b20      	cmp	r3, #32
{
 80036cc:	4604      	mov	r4, r0
 80036ce:	460e      	mov	r6, r1
 80036d0:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80036d2:	d14f      	bne.n	8003774 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80036d4:	2900      	cmp	r1, #0
 80036d6:	d04b      	beq.n	8003770 <HAL_UART_Transmit+0xb0>
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d049      	beq.n	8003770 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 80036dc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d047      	beq.n	8003774 <HAL_UART_Transmit+0xb4>
 80036e4:	2301      	movs	r3, #1
 80036e6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ec:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ee:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 80036f6:	f7fc ff63 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fa:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80036fc:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003704:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003706:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800370a:	d103      	bne.n	8003714 <HAL_UART_Transmit+0x54>
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	b90b      	cbnz	r3, 8003714 <HAL_UART_Transmit+0x54>
 8003710:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003712:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003714:	2300      	movs	r3, #0
 8003716:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 800371a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003722:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003724:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8003726:	b942      	cbnz	r2, 800373a <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003728:	2140      	movs	r1, #64	; 0x40
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff ff80 	bl	8003630 <UART_WaitOnFlagUntilTimeout>
 8003730:	b948      	cbnz	r0, 8003746 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8003732:	2320      	movs	r3, #32
 8003734:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8003738:	e006      	b.n	8003748 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	2200      	movs	r2, #0
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff ff76 	bl	8003630 <UART_WaitOnFlagUntilTimeout>
 8003744:	b118      	cbz	r0, 800374e <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 8003746:	2003      	movs	r0, #3
}
 8003748:	b003      	add	sp, #12
 800374a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800374e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003750:	b95e      	cbnz	r6, 800376a <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003752:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800375a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800375c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003760:	3b01      	subs	r3, #1
 8003762:	b29b      	uxth	r3, r3
 8003764:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8003768:	e7d7      	b.n	800371a <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800376a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800376e:	e7f4      	b.n	800375a <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8003770:	2001      	movs	r0, #1
 8003772:	e7e9      	b.n	8003748 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8003774:	2002      	movs	r0, #2
 8003776:	e7e7      	b.n	8003748 <HAL_UART_Transmit+0x88>

08003778 <UART_CheckIdleState>:
{
 8003778:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800377a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377c:	2600      	movs	r6, #0
 800377e:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8003782:	f7fc ff1d 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800378c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800378e:	d417      	bmi.n	80037c0 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	075b      	lsls	r3, r3, #29
 8003796:	d50a      	bpl.n	80037ae <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	462b      	mov	r3, r5
 80037a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff ff42 	bl	8003630 <UART_WaitOnFlagUntilTimeout>
 80037ac:	b9a0      	cbnz	r0, 80037d8 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80037ae:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80037b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80037b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80037b6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 80037be:	e00c      	b.n	80037da <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	4632      	mov	r2, r6
 80037c8:	4603      	mov	r3, r0
 80037ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7ff ff2e 	bl	8003630 <UART_WaitOnFlagUntilTimeout>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d0db      	beq.n	8003790 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80037d8:	2003      	movs	r0, #3
}
 80037da:	b002      	add	sp, #8
 80037dc:	bd70      	pop	{r4, r5, r6, pc}

080037de <HAL_UART_Init>:
{
 80037de:	b510      	push	{r4, lr}
  if (huart == NULL)
 80037e0:	4604      	mov	r4, r0
 80037e2:	b350      	cbz	r0, 800383a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80037e4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80037e8:	b91b      	cbnz	r3, 80037f2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80037ea:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80037ee:	f001 fc7f 	bl	80050f0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80037f2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80037f4:	2324      	movs	r3, #36	; 0x24
 80037f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003802:	4620      	mov	r0, r4
 8003804:	f7ff fa80 	bl	8002d08 <UART_SetConfig>
 8003808:	2801      	cmp	r0, #1
 800380a:	d016      	beq.n	800383a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800380c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800380e:	b113      	cbz	r3, 8003816 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff feb9 	bl	8003588 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003826:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800382e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003836:	f7ff bf9f 	b.w	8003778 <UART_CheckIdleState>
}
 800383a:	2001      	movs	r0, #1
 800383c:	bd10      	pop	{r4, pc}

0800383e <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800383e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003840:	2203      	movs	r2, #3
 8003842:	f88d 2003 	strb.w	r2, [sp, #3]
 8003846:	2207      	movs	r2, #7
 8003848:	f88d 2004 	strb.w	r2, [sp, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f88d 2006 	strb.w	r2, [sp, #6]
 8003852:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003856:	2208      	movs	r2, #8
 8003858:	f88d 2008 	strb.w	r2, [sp, #8]
 800385c:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003860:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003862:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003864:	2104      	movs	r1, #4
 8003866:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003868:	f88d 3000 	strb.w	r3, [sp]
 800386c:	f88d 3001 	strb.w	r3, [sp, #1]
 8003870:	f88d 3002 	strb.w	r3, [sp, #2]
 8003874:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003878:	f88d 1009 	strb.w	r1, [sp, #9]
 800387c:	f88d 400a 	strb.w	r4, [sp, #10]
 8003880:	f88d 100b 	strb.w	r1, [sp, #11]
 8003884:	f88d 300d 	strb.w	r3, [sp, #13]
 8003888:	f88d 300e 	strb.w	r3, [sp, #14]
 800388c:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003890:	b92a      	cbnz	r2, 800389e <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8003892:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003896:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800389a:	b004      	add	sp, #16
 800389c:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800389e:	6802      	ldr	r2, [r0, #0]
 80038a0:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a2:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80038a4:	aa04      	add	r2, sp, #16
 80038a6:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80038aa:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80038ae:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 80038b2:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 80038b6:	00d2      	lsls	r2, r2, #3
 80038b8:	fb92 f2f1 	sdiv	r2, r2, r1
 80038bc:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80038c0:	aa04      	add	r2, sp, #16
 80038c2:	4413      	add	r3, r2
 80038c4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80038c8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80038cc:	00d2      	lsls	r2, r2, #3
 80038ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80038d2:	e7e0      	b.n	8003896 <UARTEx_SetNbDataToProcess+0x58>

080038d4 <HAL_UARTEx_WakeupCallback>:
 80038d4:	4770      	bx	lr

080038d6 <HAL_UARTEx_RxFifoFullCallback>:
 80038d6:	4770      	bx	lr

080038d8 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 80038d8:	4770      	bx	lr

080038da <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80038da:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d014      	beq.n	800390c <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038e2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	2324      	movs	r3, #36	; 0x24
 80038e6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ea:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038f4:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038fc:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003904:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8003908:	4618      	mov	r0, r3
 800390a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800390c:	2002      	movs	r0, #2
}
 800390e:	4770      	bx	lr

08003910 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003910:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003912:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003916:	2b01      	cmp	r3, #1
{
 8003918:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800391a:	d01b      	beq.n	8003954 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800391c:	2301      	movs	r3, #1
 800391e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003922:	2324      	movs	r3, #36	; 0x24
 8003924:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003928:	6803      	ldr	r3, [r0, #0]
 800392a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800393a:	4311      	orrs	r1, r2
 800393c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800393e:	f7ff ff7e 	bl	800383e <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003942:	6803      	ldr	r3, [r0, #0]
 8003944:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003946:	2320      	movs	r3, #32
 8003948:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800394c:	2000      	movs	r0, #0
 800394e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003952:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003954:	2002      	movs	r0, #2
}
 8003956:	bd38      	pop	{r3, r4, r5, pc}

08003958 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003958:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800395a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800395e:	2b01      	cmp	r3, #1
{
 8003960:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003962:	d01b      	beq.n	800399c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003964:	2301      	movs	r3, #1
 8003966:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800396a:	2324      	movs	r3, #36	; 0x24
 800396c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003970:	6803      	ldr	r3, [r0, #0]
 8003972:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003982:	4311      	orrs	r1, r2
 8003984:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003986:	f7ff ff5a 	bl	800383e <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800398a:	6803      	ldr	r3, [r0, #0]
 800398c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800398e:	2320      	movs	r3, #32
 8003990:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003994:	2000      	movs	r0, #0
 8003996:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 800399a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800399c:	2002      	movs	r0, #2
}
 800399e:	bd38      	pop	{r3, r4, r5, pc}

080039a0 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80039a0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80039aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80039b2:	2000      	movs	r0, #0
 80039b4:	4770      	bx	lr

080039b6 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80039b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80039ba:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80039be:	045b      	lsls	r3, r3, #17
 80039c0:	0c5b      	lsrs	r3, r3, #17
 80039c2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80039c6:	2000      	movs	r0, #0
 80039c8:	4770      	bx	lr

080039ca <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039ca:	b084      	sub	sp, #16
 80039cc:	b510      	push	{r4, lr}
 80039ce:	ac03      	add	r4, sp, #12
 80039d0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80039d4:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80039dc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80039e0:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039e4:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80039e8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80039fe:	b004      	add	sp, #16
 8003a00:	4610      	mov	r0, r2
 8003a02:	4770      	bx	lr

08003a04 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a06:	780d      	ldrb	r5, [r1, #0]
 8003a08:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8003a0c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8003a10:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a12:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8003a16:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a18:	0412      	lsls	r2, r2, #16
 8003a1a:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8003a1c:	2803      	cmp	r0, #3
 8003a1e:	d84f      	bhi.n	8003ac0 <USB_ActivateEndpoint+0xbc>
 8003a20:	e8df f000 	tbb	[pc, r0]
 8003a24:	48044b02 	.word	0x48044b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003a2c:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003a2e:	f248 0480 	movw	r4, #32896	; 0x8080
 8003a32:	4322      	orrs	r2, r4
 8003a34:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a38:	780f      	ldrb	r7, [r1, #0]
 8003a3a:	4da8      	ldr	r5, [pc, #672]	; (8003cdc <USB_ActivateEndpoint+0x2d8>)
 8003a3c:	b23e      	sxth	r6, r7
 8003a3e:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8003a42:	b292      	uxth	r2, r2
 8003a44:	402a      	ands	r2, r5
 8003a46:	433a      	orrs	r2, r7
 8003a48:	4322      	orrs	r2, r4
 8003a4a:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8003a4e:	7b0c      	ldrb	r4, [r1, #12]
 8003a50:	780a      	ldrb	r2, [r1, #0]
 8003a52:	2c00      	cmp	r4, #0
 8003a54:	d17f      	bne.n	8003b56 <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
 8003a56:	784f      	ldrb	r7, [r1, #1]
 8003a58:	88ce      	ldrh	r6, [r1, #6]
 8003a5a:	2408      	movs	r4, #8
 8003a5c:	b397      	cbz	r7, 8003ac4 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a5e:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8003a62:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003a66:	fa12 f287 	uxtah	r2, r2, r7
 8003a6a:	f026 0601 	bic.w	r6, r6, #1
 8003a6e:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a72:	780a      	ldrb	r2, [r1, #0]
 8003a74:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003a78:	0666      	lsls	r6, r4, #25
 8003a7a:	d509      	bpl.n	8003a90 <USB_ActivateEndpoint+0x8c>
 8003a7c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003a80:	b2a4      	uxth	r4, r4
 8003a82:	402c      	ands	r4, r5
 8003a84:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003a88:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003a8c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003a90:	78ca      	ldrb	r2, [r1, #3]
 8003a92:	7809      	ldrb	r1, [r1, #0]
 8003a94:	4c92      	ldr	r4, [pc, #584]	; (8003ce0 <USB_ActivateEndpoint+0x2dc>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a96:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003a98:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a9a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8003aa4:	d001      	beq.n	8003aaa <USB_ActivateEndpoint+0xa6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003aa6:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ab2:	e0c3      	b.n	8003c3c <USB_ActivateEndpoint+0x238>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ab4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003ab8:	e7b8      	b.n	8003a2c <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abe:	e7b5      	b.n	8003a2c <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	e7b4      	b.n	8003a2e <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ac4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003ac8:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003acc:	fa12 f285 	uxtah	r2, r2, r5
 8003ad0:	f026 0601 	bic.w	r6, r6, #1
 8003ad4:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ad8:	780a      	ldrb	r2, [r1, #0]
 8003ada:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003ade:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003ae2:	690c      	ldr	r4, [r1, #16]
 8003ae4:	b2ad      	uxth	r5, r5
 8003ae6:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8003aea:	b944      	cbnz	r4, 8003afe <USB_ActivateEndpoint+0xfa>
 8003aec:	5b54      	ldrh	r4, [r2, r5]
 8003aee:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003af2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003af6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003afa:	5354      	strh	r4, [r2, r5]
 8003afc:	e007      	b.n	8003b0e <USB_ActivateEndpoint+0x10a>
 8003afe:	2c3d      	cmp	r4, #61	; 0x3d
 8003b00:	d824      	bhi.n	8003b4c <USB_ActivateEndpoint+0x148>
 8003b02:	0866      	lsrs	r6, r4, #1
 8003b04:	07e4      	lsls	r4, r4, #31
 8003b06:	bf48      	it	mi
 8003b08:	3601      	addmi	r6, #1
 8003b0a:	02b6      	lsls	r6, r6, #10
 8003b0c:	5356      	strh	r6, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b0e:	780c      	ldrb	r4, [r1, #0]
 8003b10:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b14:	0457      	lsls	r7, r2, #17
 8003b16:	d50d      	bpl.n	8003b34 <USB_ActivateEndpoint+0x130>
 8003b18:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b1c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b24:	0412      	lsls	r2, r2, #16
 8003b26:	0c12      	lsrs	r2, r2, #16
 8003b28:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b30:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b34:	7809      	ldrb	r1, [r1, #0]
 8003b36:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003b3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b42:	0412      	lsls	r2, r2, #16
 8003b44:	0c12      	lsrs	r2, r2, #16
 8003b46:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003b4a:	e7ae      	b.n	8003aaa <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b4c:	4e65      	ldr	r6, [pc, #404]	; (8003ce4 <USB_ActivateEndpoint+0x2e0>)
 8003b4e:	0964      	lsrs	r4, r4, #5
 8003b50:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 8003b54:	e7d1      	b.n	8003afa <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003b56:	b212      	sxth	r2, r2
 8003b58:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003b5c:	b2a4      	uxth	r4, r4
 8003b5e:	402c      	ands	r4, r5
 8003b60:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8003b64:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003b68:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b6c:	780e      	ldrb	r6, [r1, #0]
 8003b6e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003b72:	2208      	movs	r2, #8
 8003b74:	fb12 3606 	smlabb	r6, r2, r6, r3
 8003b78:	fa16 f484 	uxtah	r4, r6, r4
 8003b7c:	890e      	ldrh	r6, [r1, #8]
 8003b7e:	f026 0601 	bic.w	r6, r6, #1
 8003b82:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8003b86:	780e      	ldrb	r6, [r1, #0]
 8003b88:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003b8c:	fb12 3206 	smlabb	r2, r2, r6, r3
 8003b90:	fa12 f284 	uxtah	r2, r2, r4
 8003b94:	894c      	ldrh	r4, [r1, #10]
 8003b96:	f024 0401 	bic.w	r4, r4, #1
 8003b9a:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003b9e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8003ba0:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ba2:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 8003ba4:	2c00      	cmp	r4, #0
 8003ba6:	d14c      	bne.n	8003c42 <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ba8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003bac:	0466      	lsls	r6, r4, #17
 8003bae:	d509      	bpl.n	8003bc4 <USB_ActivateEndpoint+0x1c0>
 8003bb0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003bb4:	b2a4      	uxth	r4, r4
 8003bb6:	402c      	ands	r4, r5
 8003bb8:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003bbc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003bc0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bc4:	780c      	ldrb	r4, [r1, #0]
 8003bc6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bca:	0655      	lsls	r5, r2, #25
 8003bcc:	d50d      	bpl.n	8003bea <USB_ActivateEndpoint+0x1e6>
 8003bce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bd2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003bd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bda:	0412      	lsls	r2, r2, #16
 8003bdc:	0c12      	lsrs	r2, r2, #16
 8003bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003be6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003bea:	780c      	ldrb	r4, [r1, #0]
 8003bec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bf0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003bf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bf8:	0412      	lsls	r2, r2, #16
 8003bfa:	0c12      	lsrs	r2, r2, #16
 8003bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c00:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003c04:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c08:	780d      	ldrb	r5, [r1, #0]
 8003c0a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c16:	0412      	lsls	r2, r2, #16
 8003c18:	0c12      	lsrs	r2, r2, #16
 8003c1a:	f248 0480 	movw	r4, #32896	; 0x8080
 8003c1e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003c22:	4322      	orrs	r2, r4
 8003c24:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c28:	7809      	ldrb	r1, [r1, #0]
 8003c2a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003c2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c36:	0412      	lsls	r2, r2, #16
 8003c38:	0c12      	lsrs	r2, r2, #16
 8003c3a:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c3c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8003c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c42:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003c46:	0464      	lsls	r4, r4, #17
 8003c48:	d509      	bpl.n	8003c5e <USB_ActivateEndpoint+0x25a>
 8003c4a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003c4e:	b2a4      	uxth	r4, r4
 8003c50:	402c      	ands	r4, r5
 8003c52:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003c56:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003c5a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c5e:	780c      	ldrb	r4, [r1, #0]
 8003c60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c64:	0652      	lsls	r2, r2, #25
 8003c66:	d50d      	bpl.n	8003c84 <USB_ActivateEndpoint+0x280>
 8003c68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c74:	0412      	lsls	r2, r2, #16
 8003c76:	0c12      	lsrs	r2, r2, #16
 8003c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c7c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003c80:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003c84:	780c      	ldrb	r4, [r1, #0]
 8003c86:	4d16      	ldr	r5, [pc, #88]	; (8003ce0 <USB_ActivateEndpoint+0x2dc>)
 8003c88:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c8c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c94:	0412      	lsls	r2, r2, #16
 8003c96:	0c12      	lsrs	r2, r2, #16
 8003c98:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ca0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003ca4:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8003ca6:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ca8:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8003caa:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	ea02 0205 	and.w	r2, r2, r5
 8003cb6:	bf18      	it	ne
 8003cb8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cc4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cc8:	7809      	ldrb	r1, [r1, #0]
 8003cca:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003cce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cd6:	0412      	lsls	r2, r2, #16
 8003cd8:	0c12      	lsrs	r2, r2, #16
 8003cda:	e6e6      	b.n	8003aaa <USB_ActivateEndpoint+0xa6>
 8003cdc:	ffff8f8f 	.word	0xffff8f8f
 8003ce0:	ffff8fbf 	.word	0xffff8fbf
 8003ce4:	ffff8000 	.word	0xffff8000

08003ce8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003cec:	7b0c      	ldrb	r4, [r1, #12]
 8003cee:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cf0:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d13d      	bne.n	8003d72 <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 8003cf6:	b312      	cbz	r2, 8003d3e <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cf8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003cfc:	0652      	lsls	r2, r2, #25
 8003cfe:	d50d      	bpl.n	8003d1c <USB_DeactivateEndpoint+0x34>
 8003d00:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d04:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d0c:	0412      	lsls	r2, r2, #16
 8003d0e:	0c12      	lsrs	r2, r2, #16
 8003d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d14:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003d18:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d1c:	780a      	ldrb	r2, [r1, #0]
 8003d1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d3e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d42:	0454      	lsls	r4, r2, #17
 8003d44:	d50d      	bpl.n	8003d62 <USB_DeactivateEndpoint+0x7a>
 8003d46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d52:	0412      	lsls	r2, r2, #16
 8003d54:	0c12      	lsrs	r2, r2, #16
 8003d56:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d5e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d62:	780a      	ldrb	r2, [r1, #0]
 8003d64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d70:	e7db      	b.n	8003d2a <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 8003d72:	2a00      	cmp	r2, #0
 8003d74:	d14e      	bne.n	8003e14 <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d7a:	0452      	lsls	r2, r2, #17
 8003d7c:	d50d      	bpl.n	8003d9a <USB_DeactivateEndpoint+0xb2>
 8003d7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d82:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d8a:	0412      	lsls	r2, r2, #16
 8003d8c:	0c12      	lsrs	r2, r2, #16
 8003d8e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d96:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d9a:	780a      	ldrb	r2, [r1, #0]
 8003d9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003da0:	065c      	lsls	r4, r3, #25
 8003da2:	d50d      	bpl.n	8003dc0 <USB_DeactivateEndpoint+0xd8>
 8003da4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003dc0:	780a      	ldrb	r2, [r1, #0]
 8003dc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dde:	780c      	ldrb	r4, [r1, #0]
 8003de0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	0c1b      	lsrs	r3, r3, #16
 8003df0:	f248 0280 	movw	r2, #32896	; 0x8080
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dfa:	7809      	ldrb	r1, [r1, #0]
 8003dfc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003e12:	e792      	b.n	8003d3a <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e14:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e18:	0452      	lsls	r2, r2, #17
 8003e1a:	d50d      	bpl.n	8003e38 <USB_DeactivateEndpoint+0x150>
 8003e1c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003e20:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e28:	0412      	lsls	r2, r2, #16
 8003e2a:	0c12      	lsrs	r2, r2, #16
 8003e2c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e34:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e38:	780a      	ldrb	r2, [r1, #0]
 8003e3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e3e:	065b      	lsls	r3, r3, #25
 8003e40:	d50d      	bpl.n	8003e5e <USB_DeactivateEndpoint+0x176>
 8003e42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003e5e:	780a      	ldrb	r2, [r1, #0]
 8003e60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e7c:	780c      	ldrb	r4, [r1, #0]
 8003e7e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f248 0280 	movw	r2, #32896	; 0x8080
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e98:	7809      	ldrb	r1, [r1, #0]
 8003e9a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	e7af      	b.n	8003e08 <USB_DeactivateEndpoint+0x120>

08003ea8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ea8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003eaa:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003eac:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 8003eae:	b18b      	cbz	r3, 8003ed4 <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003eb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ecc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003ed4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ee8:	e7ec      	b.n	8003ec4 <USB_EPSetStall+0x1c>

08003eea <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003eea:	7b0b      	ldrb	r3, [r1, #12]
 8003eec:	bb4b      	cbnz	r3, 8003f42 <USB_EPClearStall+0x58>
 8003eee:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8003ef0:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ef2:	b212      	sxth	r2, r2
    if (ep->is_in != 0U)
 8003ef4:	b33b      	cbz	r3, 8003f46 <USB_EPClearStall+0x5c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ef6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003efa:	065b      	lsls	r3, r3, #25
 8003efc:	d50d      	bpl.n	8003f1a <USB_EPClearStall+0x30>
 8003efe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003f1a:	78cb      	ldrb	r3, [r1, #3]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d010      	beq.n	8003f42 <USB_EPClearStall+0x58>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f20:	780a      	ldrb	r2, [r1, #0]
 8003f22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003f42:	2000      	movs	r0, #0
 8003f44:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f46:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f4a:	045b      	lsls	r3, r3, #17
 8003f4c:	d50d      	bpl.n	8003f6a <USB_EPClearStall+0x80>
 8003f4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f6a:	780a      	ldrb	r2, [r1, #0]
 8003f6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003f80:	e7d9      	b.n	8003f36 <USB_EPClearStall+0x4c>

08003f82 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003f82:	b911      	cbnz	r1, 8003f8a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	4770      	bx	lr

08003f8e <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003f8e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8003f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	4770      	bx	lr

08003fa4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003fa4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003fa8:	b280      	uxth	r0, r0
 8003faa:	4770      	bx	lr

08003fac <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003fac:	2000      	movs	r0, #0
 8003fae:	4770      	bx	lr

08003fb0 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003fb4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003fb6:	4402      	add	r2, r0
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	440b      	add	r3, r1
 8003fbe:	1a52      	subs	r2, r2, r1

  for (i = n; i != 0U; i--)
 8003fc0:	4299      	cmp	r1, r3
 8003fc2:	d100      	bne.n	8003fc6 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003fc4:	4770      	bx	lr
 8003fc6:	8808      	ldrh	r0, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 8003fc8:	5288      	strh	r0, [r1, r2]
 8003fca:	3102      	adds	r1, #2
 8003fcc:	e7f8      	b.n	8003fc0 <USB_WritePMA+0x10>
	...

08003fd0 <USB_EPStartXfer>:
{
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8003fd4:	7848      	ldrb	r0, [r1, #1]
 8003fd6:	698a      	ldr	r2, [r1, #24]
 8003fd8:	690b      	ldr	r3, [r1, #16]
 8003fda:	7b0f      	ldrb	r7, [r1, #12]
 8003fdc:	2801      	cmp	r0, #1
{
 8003fde:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8003fe0:	d16b      	bne.n	80040ba <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 8003fe2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003fe4:	bf97      	itett	ls
 8003fe6:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003fe8:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8003fea:	618b      	strls	r3, [r1, #24]
 8003fec:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8003fee:	bf88      	it	hi
 8003ff0:	618a      	strhi	r2, [r1, #24]
 8003ff2:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8003ff4:	bb0f      	cbnz	r7, 800403a <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ff6:	88ca      	ldrh	r2, [r1, #6]
 8003ff8:	6949      	ldr	r1, [r1, #20]
 8003ffa:	4633      	mov	r3, r6
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff ffd7 	bl	8003fb0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004002:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004006:	782a      	ldrb	r2, [r5, #0]
 8004008:	f204 4102 	addw	r1, r4, #1026	; 0x402
 800400c:	fa11 f383 	uxtah	r3, r1, r3
 8004010:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004014:	782a      	ldrb	r2, [r5, #0]
 8004016:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800401a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800402a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004032:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8004036:	2000      	movs	r0, #0
 8004038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800403a:	7809      	ldrb	r1, [r1, #0]
 800403c:	b20a      	sxth	r2, r1
 800403e:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8004042:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004046:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800404a:	bf15      	itete	ne
 800404c:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004050:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004054:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004058:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800405c:	bf15      	itete	ne
 800405e:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004062:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 8004066:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8004068:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800406a:	6969      	ldr	r1, [r5, #20]
 800406c:	4633      	mov	r3, r6
 800406e:	4620      	mov	r0, r4
 8004070:	f7ff ff9e 	bl	8003fb0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004074:	786b      	ldrb	r3, [r5, #1]
 8004076:	782a      	ldrb	r2, [r5, #0]
 8004078:	b97b      	cbnz	r3, 800409a <USB_EPStartXfer+0xca>
 800407a:	b212      	sxth	r2, r2
 800407c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004094:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004098:	e7bc      	b.n	8004014 <USB_EPStartXfer+0x44>
 800409a:	2b01      	cmp	r3, #1
 800409c:	d1ba      	bne.n	8004014 <USB_EPStartXfer+0x44>
 800409e:	b212      	sxth	r2, r2
 80040a0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80040a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	e7ec      	b.n	8004094 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 80040ba:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80040bc:	bf95      	itete	ls
 80040be:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80040c0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80040c2:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 80040c4:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 80040c6:	bf98      	it	ls
 80040c8:	4613      	movls	r3, r2
 80040ca:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 80040cc:	b98f      	cbnz	r7, 80040f2 <USB_EPStartXfer+0x122>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80040ce:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80040d2:	f204 4006 	addw	r0, r4, #1030	; 0x406
 80040d6:	fa10 f282 	uxtah	r2, r0, r2
 80040da:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80040de:	bb9b      	cbnz	r3, 8004148 <USB_EPStartXfer+0x178>
 80040e0:	8813      	ldrh	r3, [r2, #0]
 80040e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ee:	8013      	strh	r3, [r2, #0]
 80040f0:	e032      	b.n	8004158 <USB_EPStartXfer+0x188>
 80040f2:	b980      	cbnz	r0, 8004116 <USB_EPStartXfer+0x146>
 80040f4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80040f8:	f204 4002 	addw	r0, r4, #1026	; 0x402
 80040fc:	fa10 f282 	uxtah	r2, r0, r2
 8004100:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004104:	b99b      	cbnz	r3, 800412e <USB_EPStartXfer+0x15e>
 8004106:	8811      	ldrh	r1, [r2, #0]
 8004108:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800410c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004110:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004114:	8011      	strh	r1, [r2, #0]
 8004116:	786a      	ldrb	r2, [r5, #1]
 8004118:	7828      	ldrb	r0, [r5, #0]
 800411a:	bb72      	cbnz	r2, 800417a <USB_EPStartXfer+0x1aa>
 800411c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8004120:	f204 4106 	addw	r1, r4, #1030	; 0x406
 8004124:	fa11 f282 	uxtah	r2, r1, r2
 8004128:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800412c:	e7d7      	b.n	80040de <USB_EPStartXfer+0x10e>
 800412e:	2b3d      	cmp	r3, #61	; 0x3d
 8004130:	d805      	bhi.n	800413e <USB_EPStartXfer+0x16e>
 8004132:	0859      	lsrs	r1, r3, #1
 8004134:	07d8      	lsls	r0, r3, #31
 8004136:	bf48      	it	mi
 8004138:	3101      	addmi	r1, #1
 800413a:	0289      	lsls	r1, r1, #10
 800413c:	e7ea      	b.n	8004114 <USB_EPStartXfer+0x144>
 800413e:	4814      	ldr	r0, [pc, #80]	; (8004190 <USB_EPStartXfer+0x1c0>)
 8004140:	0959      	lsrs	r1, r3, #5
 8004142:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8004146:	e7e5      	b.n	8004114 <USB_EPStartXfer+0x144>
 8004148:	2b3d      	cmp	r3, #61	; 0x3d
 800414a:	d811      	bhi.n	8004170 <USB_EPStartXfer+0x1a0>
 800414c:	0859      	lsrs	r1, r3, #1
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	bf48      	it	mi
 8004152:	3101      	addmi	r1, #1
 8004154:	0289      	lsls	r1, r1, #10
 8004156:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004158:	782a      	ldrb	r2, [r5, #0]
 800415a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800415e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800416e:	e75c      	b.n	800402a <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004170:	0959      	lsrs	r1, r3, #5
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <USB_EPStartXfer+0x1c0>)
 8004174:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004178:	e7b9      	b.n	80040ee <USB_EPStartXfer+0x11e>
 800417a:	2a01      	cmp	r2, #1
 800417c:	bf01      	itttt	eq
 800417e:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8004182:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8004186:	fa12 f181 	uxtaheq	r1, r2, r1
 800418a:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 800418e:	e7e3      	b.n	8004158 <USB_EPStartXfer+0x188>
 8004190:	ffff8000 	.word	0xffff8000

08004194 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800419a:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 800419c:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 800419e:	460d      	mov	r5, r1
 80041a0:	4632      	mov	r2, r6
 80041a2:	1a47      	subs	r7, r0, r1
 80041a4:	197c      	adds	r4, r7, r5
 80041a6:	3502      	adds	r5, #2
 80041a8:	b932      	cbnz	r2, 80041b8 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80041aa:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80041ac:	bf44      	itt	mi
 80041ae:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80041b2:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
 80041b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80041b8:	8824      	ldrh	r4, [r4, #0]
 80041ba:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80041bc:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80041c0:	0a24      	lsrs	r4, r4, #8
 80041c2:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 80041c6:	3a01      	subs	r2, #1
 80041c8:	e7ec      	b.n	80041a4 <USB_ReadPMA+0x10>

080041ca <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80041ca:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80041ce:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80041d0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80041d4:	b15b      	cbz	r3, 80041ee <USBD_CDC_EP0_RxReady+0x24>
 80041d6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80041da:	28ff      	cmp	r0, #255	; 0xff
 80041dc:	d007      	beq.n	80041ee <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80041e4:	4621      	mov	r1, r4
 80041e6:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80041e8:	23ff      	movs	r3, #255	; 0xff
 80041ea:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80041ee:	2000      	movs	r0, #0
 80041f0:	bd10      	pop	{r4, pc}
	...

080041f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80041f4:	2343      	movs	r3, #67	; 0x43
 80041f6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80041f8:	4800      	ldr	r0, [pc, #0]	; (80041fc <USBD_CDC_GetFSCfgDesc+0x8>)
 80041fa:	4770      	bx	lr
 80041fc:	20000044 	.word	0x20000044

08004200 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004200:	2343      	movs	r3, #67	; 0x43
 8004202:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004204:	4800      	ldr	r0, [pc, #0]	; (8004208 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004206:	4770      	bx	lr
 8004208:	20000088 	.word	0x20000088

0800420c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800420c:	2343      	movs	r3, #67	; 0x43
 800420e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004210:	4800      	ldr	r0, [pc, #0]	; (8004214 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004212:	4770      	bx	lr
 8004214:	200000d8 	.word	0x200000d8

08004218 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004218:	230a      	movs	r3, #10
 800421a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800421c:	4800      	ldr	r0, [pc, #0]	; (8004220 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800421e:	4770      	bx	lr
 8004220:	200000cc 	.word	0x200000cc

08004224 <USBD_CDC_DataOut>:
{
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004228:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800422c:	f001 fa88 	bl	8005740 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8004230:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004234:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8004238:	b14b      	cbz	r3, 800424e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800423a:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 800423e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004248:	4798      	blx	r3
    return USBD_OK;
 800424a:	2000      	movs	r0, #0
 800424c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800424e:	2002      	movs	r0, #2
}
 8004250:	bd38      	pop	{r3, r4, r5, pc}

08004252 <USBD_CDC_DataIn>:
{
 8004252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004254:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8004258:	b1ce      	cbz	r6, 800428e <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800425a:	2314      	movs	r3, #20
 800425c:	fb03 0301 	mla	r3, r3, r1, r0
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	b182      	cbz	r2, 8004286 <USBD_CDC_DataIn+0x34>
 8004264:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8004268:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 800426c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800426e:	fbb2 f4f5 	udiv	r4, r2, r5
 8004272:	fb05 2414 	mls	r4, r5, r4, r2
 8004276:	b934      	cbnz	r4, 8004286 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8004278:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800427a:	4622      	mov	r2, r4
 800427c:	4623      	mov	r3, r4
 800427e:	f001 fa43 	bl	8005708 <USBD_LL_Transmit>
    return USBD_OK;
 8004282:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8004286:	2000      	movs	r0, #0
 8004288:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800428e:	2002      	movs	r0, #2
}
 8004290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004292 <USBD_CDC_Setup>:
{
 8004292:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004296:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004298:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800429c:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042a0:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80042a4:	4605      	mov	r5, r0
 80042a6:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 80042a8:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80042ac:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042b0:	d028      	beq.n	8004304 <USBD_CDC_Setup+0x72>
 80042b2:	2c20      	cmp	r4, #32
 80042b4:	d147      	bne.n	8004346 <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 80042b6:	88cc      	ldrh	r4, [r1, #6]
 80042b8:	784b      	ldrb	r3, [r1, #1]
 80042ba:	b1e4      	cbz	r4, 80042f6 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 80042bc:	0612      	lsls	r2, r2, #24
 80042be:	d511      	bpl.n	80042e4 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042c0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80042c4:	4639      	mov	r1, r7
 80042c6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80042ca:	4618      	mov	r0, r3
 80042cc:	4622      	mov	r2, r4
 80042ce:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80042d0:	88f2      	ldrh	r2, [r6, #6]
 80042d2:	4639      	mov	r1, r7
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 fc37 	bl	8004b48 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80042da:	4644      	mov	r4, r8
}
 80042dc:	4620      	mov	r0, r4
 80042de:	b003      	add	sp, #12
 80042e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 80042e4:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80042e8:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80042ec:	4622      	mov	r2, r4
 80042ee:	4639      	mov	r1, r7
 80042f0:	f000 fc3f 	bl	8004b72 <USBD_CtlPrepareRx>
 80042f4:	e7f1      	b.n	80042da <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042f6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80042fa:	4618      	mov	r0, r3
 80042fc:	6895      	ldr	r5, [r2, #8]
 80042fe:	4622      	mov	r2, r4
 8004300:	47a8      	blx	r5
 8004302:	e7eb      	b.n	80042dc <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8004304:	784f      	ldrb	r7, [r1, #1]
 8004306:	2f0a      	cmp	r7, #10
 8004308:	d00d      	beq.n	8004326 <USBD_CDC_Setup+0x94>
 800430a:	2f0b      	cmp	r7, #11
 800430c:	d015      	beq.n	800433a <USBD_CDC_Setup+0xa8>
 800430e:	b9d7      	cbnz	r7, 8004346 <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004310:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004314:	2b03      	cmp	r3, #3
 8004316:	d114      	bne.n	8004342 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004318:	2202      	movs	r2, #2
 800431a:	f10d 0106 	add.w	r1, sp, #6
 800431e:	f000 fc13 	bl	8004b48 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004322:	463c      	mov	r4, r7
 8004324:	e7da      	b.n	80042dc <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004326:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800432a:	2b03      	cmp	r3, #3
 800432c:	d109      	bne.n	8004342 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800432e:	2201      	movs	r2, #1
 8004330:	f10d 0105 	add.w	r1, sp, #5
 8004334:	f000 fc08 	bl	8004b48 <USBD_CtlSendData>
 8004338:	e7d0      	b.n	80042dc <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800433a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800433e:	2b03      	cmp	r3, #3
 8004340:	d0cc      	beq.n	80042dc <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8004346:	f000 fbd8 	bl	8004afa <USBD_CtlError>
      ret = USBD_FAIL;
 800434a:	2402      	movs	r4, #2
      break;
 800434c:	e7c6      	b.n	80042dc <USBD_CDC_Setup+0x4a>

0800434e <USBD_CDC_DeInit>:
{
 800434e:	b538      	push	{r3, r4, r5, lr}
 8004350:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004352:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004354:	2181      	movs	r1, #129	; 0x81
 8004356:	f001 f98f 	bl	8005678 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800435a:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800435c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800435e:	4620      	mov	r0, r4
 8004360:	f001 f98a 	bl	8005678 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004364:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004368:	2182      	movs	r1, #130	; 0x82
 800436a:	4620      	mov	r0, r4
 800436c:	f001 f984 	bl	8005678 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004370:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004374:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004376:	b14b      	cbz	r3, 800438c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004378:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004380:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8004384:	f001 fa08 	bl	8005798 <USBD_static_free>
    pdev->pClassData = NULL;
 8004388:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800438c:	2000      	movs	r0, #0
 800438e:	bd38      	pop	{r3, r4, r5, pc}

08004390 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004390:	7c03      	ldrb	r3, [r0, #16]
{
 8004392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004398:	bbcb      	cbnz	r3, 800440e <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800439a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800439e:	2202      	movs	r2, #2
 80043a0:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80043a2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80043a4:	f001 f958 	bl	8005658 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80043a8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80043aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80043ae:	4629      	mov	r1, r5
 80043b0:	2202      	movs	r2, #2
 80043b2:	4620      	mov	r0, r4
 80043b4:	f001 f950 	bl	8005658 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80043b8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80043bc:	2308      	movs	r3, #8
 80043be:	2203      	movs	r2, #3
 80043c0:	2182      	movs	r1, #130	; 0x82
 80043c2:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80043c4:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80043c6:	f001 f947 	bl	8005658 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80043ca:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80043cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80043d0:	f001 f9de 	bl	8005790 <USBD_static_malloc>
 80043d4:	4606      	mov	r6, r0
 80043d6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80043da:	b358      	cbz	r0, 8004434 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80043dc:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043e4:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80043e8:	2700      	movs	r7, #0
 80043ea:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80043ee:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043f2:	f1b8 0f00 	cmp.w	r8, #0
 80043f6:	d113      	bne.n	8004420 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80043f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043fc:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004400:	4629      	mov	r1, r5
 8004402:	4620      	mov	r0, r4
 8004404:	f001 f98e 	bl	8005724 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004408:	4640      	mov	r0, r8
 800440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800440e:	2340      	movs	r3, #64	; 0x40
 8004410:	2202      	movs	r2, #2
 8004412:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004414:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004416:	f001 f91f 	bl	8005658 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800441a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800441c:	2340      	movs	r3, #64	; 0x40
 800441e:	e7c6      	b.n	80043ae <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004420:	2340      	movs	r3, #64	; 0x40
 8004422:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004426:	4629      	mov	r1, r5
 8004428:	4620      	mov	r0, r4
 800442a:	f001 f97b 	bl	8005724 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800442e:	4638      	mov	r0, r7
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8004434:	4628      	mov	r0, r5
}
 8004436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800443a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800443a:	b119      	cbz	r1, 8004444 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800443c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004440:	2000      	movs	r0, #0
 8004442:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004444:	2002      	movs	r0, #2
  }

  return ret;
}
 8004446:	4770      	bx	lr

08004448 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004448:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800444c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800444e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004452:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004456:	4770      	bx	lr

08004458 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004458:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800445c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800445e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004462:	4770      	bx	lr

08004464 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004464:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004468:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800446a:	b162      	cbz	r2, 8004486 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800446c:	7c04      	ldrb	r4, [r0, #16]
 800446e:	b944      	cbnz	r4, 8004482 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004470:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004474:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004478:	2101      	movs	r1, #1
 800447a:	f001 f953 	bl	8005724 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800447e:	2000      	movs	r0, #0
 8004480:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	e7f6      	b.n	8004474 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8004486:	2002      	movs	r0, #2
  }
}
 8004488:	bd10      	pop	{r4, pc}

0800448a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800448a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800448c:	b180      	cbz	r0, 80044b0 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800448e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004492:	b113      	cbz	r3, 800449a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800449a:	b109      	cbz	r1, 80044a0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800449c:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 80044a6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80044a8:	f001 f882 	bl	80055b0 <USBD_LL_Init>

  return USBD_OK;
 80044ac:	2000      	movs	r0, #0
 80044ae:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80044b0:	2002      	movs	r0, #2
}
 80044b2:	bd08      	pop	{r3, pc}

080044b4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80044b4:	b119      	cbz	r1, 80044be <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80044b6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80044ba:	2000      	movs	r0, #0
 80044bc:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80044be:	2002      	movs	r0, #2
  }

  return status;
}
 80044c0:	4770      	bx	lr

080044c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80044c2:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80044c4:	f001 f8ba 	bl	800563c <USBD_LL_Start>

  return USBD_OK;
}
 80044c8:	2000      	movs	r0, #0
 80044ca:	bd08      	pop	{r3, pc}

080044cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044cc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80044ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044d2:	b90b      	cbnz	r3, 80044d8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80044d4:	2002      	movs	r0, #2
 80044d6:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4798      	blx	r3
 80044dc:	2800      	cmp	r0, #0
 80044de:	d1f9      	bne.n	80044d4 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80044e0:	bd08      	pop	{r3, pc}

080044e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044e2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80044e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4798      	blx	r3

  return USBD_OK;
}
 80044ec:	2000      	movs	r0, #0
 80044ee:	bd08      	pop	{r3, pc}

080044f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044f4:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80044f8:	4628      	mov	r0, r5
 80044fa:	f000 faea 	bl	8004ad2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80044fe:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004500:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8004504:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004508:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800450c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004510:	f001 031f 	and.w	r3, r1, #31
 8004514:	2b01      	cmp	r3, #1
 8004516:	d00e      	beq.n	8004536 <USBD_LL_SetupStage+0x46>
 8004518:	d307      	bcc.n	800452a <USBD_LL_SetupStage+0x3a>
 800451a:	2b02      	cmp	r3, #2
 800451c:	d010      	beq.n	8004540 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800451e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004522:	4620      	mov	r0, r4
 8004524:	f001 f8b6 	bl	8005694 <USBD_LL_StallEP>
      break;
 8004528:	e003      	b.n	8004532 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800452a:	4629      	mov	r1, r5
 800452c:	4620      	mov	r0, r4
 800452e:	f000 f8f7 	bl	8004720 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004532:	2000      	movs	r0, #0
 8004534:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004536:	4629      	mov	r1, r5
 8004538:	4620      	mov	r0, r4
 800453a:	f000 fa1d 	bl	8004978 <USBD_StdItfReq>
      break;
 800453e:	e7f8      	b.n	8004532 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004540:	4629      	mov	r1, r5
 8004542:	4620      	mov	r0, r4
 8004544:	f000 fa3d 	bl	80049c2 <USBD_StdEPReq>
      break;
 8004548:	e7f3      	b.n	8004532 <USBD_LL_SetupStage+0x42>

0800454a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800454a:	b570      	push	{r4, r5, r6, lr}
 800454c:	4605      	mov	r5, r0
 800454e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004550:	bb49      	cbnz	r1, 80045a6 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004552:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004556:	2b03      	cmp	r3, #3
 8004558:	d11e      	bne.n	8004598 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 800455a:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 800455e:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8004562:	4293      	cmp	r3, r2
 8004564:	d90b      	bls.n	800457e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8004566:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004568:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800456a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800456e:	bf8c      	ite	hi
 8004570:	b29a      	uxthhi	r2, r3
 8004572:	b292      	uxthls	r2, r2
 8004574:	4631      	mov	r1, r6
 8004576:	f000 fb0b 	bl	8004b90 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800457a:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800457c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800457e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	b123      	cbz	r3, 8004590 <USBD_LL_DataOutStage+0x46>
 8004586:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800458a:	2a03      	cmp	r2, #3
 800458c:	d100      	bne.n	8004590 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800458e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004590:	4628      	mov	r0, r5
 8004592:	f000 fb05 	bl	8004ba0 <USBD_CtlSendStatus>
 8004596:	e7f0      	b.n	800457a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004598:	2b05      	cmp	r3, #5
 800459a:	d1ee      	bne.n	800457a <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 800459c:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80045a0:	f001 f878 	bl	8005694 <USBD_LL_StallEP>
 80045a4:	e7e9      	b.n	800457a <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 80045a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	b12b      	cbz	r3, 80045ba <USBD_LL_DataOutStage+0x70>
 80045ae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80045b2:	2a03      	cmp	r2, #3
 80045b4:	d101      	bne.n	80045ba <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80045b6:	4798      	blx	r3
 80045b8:	e7df      	b.n	800457a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80045ba:	2002      	movs	r0, #2
}
 80045bc:	bd70      	pop	{r4, r5, r6, pc}

080045be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80045be:	b570      	push	{r4, r5, r6, lr}
 80045c0:	4613      	mov	r3, r2
 80045c2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80045c4:	460e      	mov	r6, r1
 80045c6:	2900      	cmp	r1, #0
 80045c8:	d148      	bne.n	800465c <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80045ca:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80045ce:	2a02      	cmp	r2, #2
 80045d0:	d13d      	bne.n	800464e <USBD_LL_DataInStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80045d2:	6a05      	ldr	r5, [r0, #32]
 80045d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80045d6:	4295      	cmp	r5, r2
 80045d8:	d914      	bls.n	8004604 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80045da:	1aaa      	subs	r2, r5, r2
 80045dc:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80045de:	4619      	mov	r1, r3
 80045e0:	b292      	uxth	r2, r2
 80045e2:	f000 fabe 	bl	8004b62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045e6:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045e8:	461a      	mov	r2, r3
 80045ea:	4619      	mov	r1, r3
 80045ec:	4620      	mov	r0, r4
 80045ee:	f001 f899 	bl	8005724 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80045f2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	d13a      	bne.n	8004674 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80045fe:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8004602:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004604:	69c3      	ldr	r3, [r0, #28]
 8004606:	fbb3 f5f2 	udiv	r5, r3, r2
 800460a:	fb02 3515 	mls	r5, r2, r5, r3
 800460e:	b965      	cbnz	r5, 800462a <USBD_LL_DataInStage+0x6c>
 8004610:	429a      	cmp	r2, r3
 8004612:	d80a      	bhi.n	800462a <USBD_LL_DataInStage+0x6c>
            (pep->total_length >= pep->maxpacket) &&
 8004614:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004618:	4293      	cmp	r3, r2
 800461a:	d206      	bcs.n	800462a <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800461c:	462a      	mov	r2, r5
 800461e:	f000 faa0 	bl	8004b62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004622:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004626:	462b      	mov	r3, r5
 8004628:	e7de      	b.n	80045e8 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800462a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	b12b      	cbz	r3, 800463e <USBD_LL_DataInStage+0x80>
 8004632:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004636:	2a03      	cmp	r2, #3
 8004638:	d101      	bne.n	800463e <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800463a:	4620      	mov	r0, r4
 800463c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	4620      	mov	r0, r4
 8004642:	f001 f827 	bl	8005694 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004646:	4620      	mov	r0, r4
 8004648:	f000 fab5 	bl	8004bb6 <USBD_CtlReceiveStatus>
 800464c:	e7d1      	b.n	80045f2 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800464e:	f032 0304 	bics.w	r3, r2, #4
 8004652:	d1ce      	bne.n	80045f2 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	f001 f81d 	bl	8005694 <USBD_LL_StallEP>
 800465a:	e7ca      	b.n	80045f2 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800465c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	b133      	cbz	r3, 8004672 <USBD_LL_DataInStage+0xb4>
 8004664:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004668:	2a03      	cmp	r2, #3
 800466a:	d102      	bne.n	8004672 <USBD_LL_DataInStage+0xb4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 800466c:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800466e:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004670:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8004672:	2002      	movs	r0, #2
}
 8004674:	bd70      	pop	{r4, r5, r6, pc}

08004676 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004676:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004678:	2200      	movs	r2, #0
{
 800467a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800467c:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800467e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004680:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	f000 ffe8 	bl	8005658 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004688:	4633      	mov	r3, r6
 800468a:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800468c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004690:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004694:	2200      	movs	r2, #0
 8004696:	4620      	mov	r0, r4
 8004698:	f000 ffde 	bl	8005658 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800469c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80046a0:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80046a2:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80046a4:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046a6:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80046aa:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80046ae:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80046b0:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80046b4:	b123      	cbz	r3, 80046c0 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046b6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80046ba:	4620      	mov	r0, r4
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4798      	blx	r3
  }

  return USBD_OK;
}
 80046c0:	2000      	movs	r0, #0
 80046c2:	bd70      	pop	{r4, r5, r6, pc}

080046c4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80046c4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80046c6:	2000      	movs	r0, #0
 80046c8:	4770      	bx	lr

080046ca <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80046ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046ce:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046d2:	2304      	movs	r3, #4
 80046d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80046d8:	2000      	movs	r0, #0
 80046da:	4770      	bx	lr

080046dc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80046dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046e0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80046e2:	bf04      	itt	eq
 80046e4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80046e8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80046ec:	2000      	movs	r0, #0
 80046ee:	4770      	bx	lr

080046f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80046f0:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046f2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80046f6:	2a03      	cmp	r2, #3
 80046f8:	d104      	bne.n	8004704 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80046fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	b103      	cbz	r3, 8004704 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004702:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8004704:	2000      	movs	r0, #0
 8004706:	bd08      	pop	{r3, pc}

08004708 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004708:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800470a:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800470c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800470e:	f000 ffc1 	bl	8005694 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004712:	4620      	mov	r0, r4
 8004714:	2100      	movs	r1, #0
}
 8004716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800471a:	f000 bfbb 	b.w	8005694 <USBD_LL_StallEP>
	...

08004720 <USBD_StdDevReq>:
{
 8004720:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004722:	780b      	ldrb	r3, [r1, #0]
 8004724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004728:	2b20      	cmp	r3, #32
{
 800472a:	4604      	mov	r4, r0
 800472c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800472e:	d011      	beq.n	8004754 <USBD_StdDevReq+0x34>
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d00f      	beq.n	8004754 <USBD_StdDevReq+0x34>
 8004734:	bb73      	cbnz	r3, 8004794 <USBD_StdDevReq+0x74>
      switch (req->bRequest)
 8004736:	784b      	ldrb	r3, [r1, #1]
 8004738:	2b09      	cmp	r3, #9
 800473a:	d82a      	bhi.n	8004792 <USBD_StdDevReq+0x72>
 800473c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004740:	010e00f2 	.word	0x010e00f2
 8004744:	01070029 	.word	0x01070029
 8004748:	008b0029 	.word	0x008b0029
 800474c:	00290013 	.word	0x00290013
 8004750:	00a700da 	.word	0x00a700da
      pdev->pClass->Setup(pdev, req);
 8004754:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004758:	4629      	mov	r1, r5
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4620      	mov	r0, r4
 800475e:	4798      	blx	r3
}
 8004760:	2000      	movs	r0, #0
 8004762:	b003      	add	sp, #12
 8004764:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800476c:	884b      	ldrh	r3, [r1, #2]
 800476e:	0a1a      	lsrs	r2, r3, #8
 8004770:	3a01      	subs	r2, #1
 8004772:	2a0e      	cmp	r2, #14
 8004774:	d80d      	bhi.n	8004792 <USBD_StdDevReq+0x72>
 8004776:	e8df f002 	tbb	[pc, r2]
 800477a:	2c10      	.short	0x2c10
 800477c:	590c0c39 	.word	0x590c0c39
 8004780:	0c0c0c63 	.word	0x0c0c0c63
 8004784:	0c0c0c0c 	.word	0x0c0c0c0c
 8004788:	08          	.byte	0x08
 8004789:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800478a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800478e:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004790:	b933      	cbnz	r3, 80047a0 <USBD_StdDevReq+0x80>
          USBD_CtlError(pdev, req);
 8004792:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8004794:	f7ff ffb8 	bl	8004708 <USBD_CtlError.constprop.1>
  return ret;
 8004798:	e7e2      	b.n	8004760 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800479a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800479e:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80047a0:	7c20      	ldrb	r0, [r4, #16]
 80047a2:	f10d 0106 	add.w	r1, sp, #6
 80047a6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80047a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80047ac:	b152      	cbz	r2, 80047c4 <USBD_StdDevReq+0xa4>
 80047ae:	88eb      	ldrh	r3, [r5, #6]
 80047b0:	b143      	cbz	r3, 80047c4 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf28      	it	cs
 80047b6:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80047b8:	4601      	mov	r1, r0
 80047ba:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80047bc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80047c0:	f000 f9c2 	bl	8004b48 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80047c4:	88eb      	ldrh	r3, [r5, #6]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ca      	bne.n	8004760 <USBD_StdDevReq+0x40>
        USBD_CtlSendStatus(pdev);
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 f9e8 	bl	8004ba0 <USBD_CtlSendStatus>
 80047d0:	e7c6      	b.n	8004760 <USBD_StdDevReq+0x40>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047d2:	7c02      	ldrb	r2, [r0, #16]
 80047d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047d8:	b932      	cbnz	r2, 80047e8 <USBD_StdDevReq+0xc8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80047dc:	f10d 0006 	add.w	r0, sp, #6
 80047e0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80047e2:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80047e4:	7043      	strb	r3, [r0, #1]
 80047e6:	e7df      	b.n	80047a8 <USBD_StdDevReq+0x88>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	e7f7      	b.n	80047dc <USBD_StdDevReq+0xbc>
      switch ((uint8_t)(req->wValue))
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	d8cf      	bhi.n	8004792 <USBD_StdDevReq+0x72>
 80047f2:	e8df f003 	tbb	[pc, r3]
 80047f6:	0703      	.short	0x0703
 80047f8:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80047fc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	e7c5      	b.n	8004790 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004804:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	e7c1      	b.n	8004790 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800480c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	e7bd      	b.n	8004790 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004814:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	e7b9      	b.n	8004790 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800481c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	e7b5      	b.n	8004790 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004824:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	e7b1      	b.n	8004790 <USBD_StdDevReq+0x70>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800482c:	7c03      	ldrb	r3, [r0, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1af      	bne.n	8004792 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004832:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004836:	f10d 0006 	add.w	r0, sp, #6
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	4798      	blx	r3
 800483e:	e7b3      	b.n	80047a8 <USBD_StdDevReq+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004840:	7c03      	ldrb	r3, [r0, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1a5      	bne.n	8004792 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004846:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800484a:	f10d 0006 	add.w	r0, sp, #6
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004852:	2307      	movs	r3, #7
 8004854:	e7c6      	b.n	80047e4 <USBD_StdDevReq+0xc4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004856:	888b      	ldrh	r3, [r1, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d19a      	bne.n	8004792 <USBD_StdDevReq+0x72>
 800485c:	88cb      	ldrh	r3, [r1, #6]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d197      	bne.n	8004792 <USBD_StdDevReq+0x72>
 8004862:	884d      	ldrh	r5, [r1, #2]
 8004864:	2d7f      	cmp	r5, #127	; 0x7f
 8004866:	d894      	bhi.n	8004792 <USBD_StdDevReq+0x72>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004868:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800486c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800486e:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004870:	d08f      	beq.n	8004792 <USBD_StdDevReq+0x72>
      pdev->dev_address = dev_addr;
 8004872:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004876:	f000 ff39 	bl	80056ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800487a:	4620      	mov	r0, r4
 800487c:	f000 f990 	bl	8004ba0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004880:	b11d      	cbz	r5, 800488a <USBD_StdDevReq+0x16a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004882:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004884:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004888:	e76a      	b.n	8004760 <USBD_StdDevReq+0x40>
 800488a:	2301      	movs	r3, #1
 800488c:	e7fa      	b.n	8004884 <USBD_StdDevReq+0x164>
  cfgidx = (uint8_t)(req->wValue);
 800488e:	7889      	ldrb	r1, [r1, #2]
 8004890:	4d38      	ldr	r5, [pc, #224]	; (8004974 <USBD_StdDevReq+0x254>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004892:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004894:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004896:	f63f af7c 	bhi.w	8004792 <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 800489a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d008      	beq.n	80048b4 <USBD_StdDevReq+0x194>
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d014      	beq.n	80048d0 <USBD_StdDevReq+0x1b0>
        USBD_CtlError(pdev, req);
 80048a6:	f7ff ff2f 	bl	8004708 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80048aa:	7829      	ldrb	r1, [r5, #0]
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7ff fe18 	bl	80044e2 <USBD_ClrClassConfig>
 80048b2:	e755      	b.n	8004760 <USBD_StdDevReq+0x40>
        if (cfgidx)
 80048b4:	2900      	cmp	r1, #0
 80048b6:	d088      	beq.n	80047ca <USBD_StdDevReq+0xaa>
          pdev->dev_config = cfgidx;
 80048b8:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80048ba:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80048bc:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80048be:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff fe02 	bl	80044cc <USBD_SetClassConfig>
 80048c8:	2802      	cmp	r0, #2
 80048ca:	f47f af7e 	bne.w	80047ca <USBD_StdDevReq+0xaa>
 80048ce:	e760      	b.n	8004792 <USBD_StdDevReq+0x72>
        if (cfgidx == 0U)
 80048d0:	b931      	cbnz	r1, 80048e0 <USBD_StdDevReq+0x1c0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80048d2:	2302      	movs	r3, #2
 80048d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80048d8:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80048da:	f7ff fe02 	bl	80044e2 <USBD_ClrClassConfig>
 80048de:	e774      	b.n	80047ca <USBD_StdDevReq+0xaa>
        else if (cfgidx != pdev->dev_config)
 80048e0:	6841      	ldr	r1, [r0, #4]
 80048e2:	2901      	cmp	r1, #1
 80048e4:	f43f af71 	beq.w	80047ca <USBD_StdDevReq+0xaa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80048e8:	b2c9      	uxtb	r1, r1
 80048ea:	f7ff fdfa 	bl	80044e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80048ee:	7829      	ldrb	r1, [r5, #0]
 80048f0:	6061      	str	r1, [r4, #4]
 80048f2:	e7e6      	b.n	80048c2 <USBD_StdDevReq+0x1a2>
  if (req->wLength != 1U)
 80048f4:	88ca      	ldrh	r2, [r1, #6]
 80048f6:	2a01      	cmp	r2, #1
 80048f8:	f47f af4b 	bne.w	8004792 <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 80048fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004900:	2b00      	cmp	r3, #0
 8004902:	f43f af46 	beq.w	8004792 <USBD_StdDevReq+0x72>
 8004906:	2b02      	cmp	r3, #2
 8004908:	d904      	bls.n	8004914 <USBD_StdDevReq+0x1f4>
 800490a:	2b03      	cmp	r3, #3
 800490c:	f47f af41 	bne.w	8004792 <USBD_StdDevReq+0x72>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004910:	1d01      	adds	r1, r0, #4
 8004912:	e003      	b.n	800491c <USBD_StdDevReq+0x1fc>
        pdev->dev_default_config = 0U;
 8004914:	4601      	mov	r1, r0
 8004916:	2300      	movs	r3, #0
 8004918:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800491c:	4620      	mov	r0, r4
 800491e:	f000 f913 	bl	8004b48 <USBD_CtlSendData>
 8004922:	e71d      	b.n	8004760 <USBD_StdDevReq+0x40>
  switch (pdev->dev_state)
 8004924:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004928:	3b01      	subs	r3, #1
 800492a:	2b02      	cmp	r3, #2
 800492c:	f63f af31 	bhi.w	8004792 <USBD_StdDevReq+0x72>
      if (req->wLength != 0x2U)
 8004930:	88cb      	ldrh	r3, [r1, #6]
 8004932:	2b02      	cmp	r3, #2
 8004934:	f47f af2d 	bne.w	8004792 <USBD_StdDevReq+0x72>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004938:	2301      	movs	r3, #1
 800493a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800493c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004940:	b10b      	cbz	r3, 8004946 <USBD_StdDevReq+0x226>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004942:	2303      	movs	r3, #3
 8004944:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004946:	2202      	movs	r2, #2
 8004948:	f104 010c 	add.w	r1, r4, #12
 800494c:	e7e6      	b.n	800491c <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800494e:	884b      	ldrh	r3, [r1, #2]
 8004950:	2b01      	cmp	r3, #1
 8004952:	f47f af05 	bne.w	8004760 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8004956:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800495a:	e736      	b.n	80047ca <USBD_StdDevReq+0xaa>
  switch (pdev->dev_state)
 800495c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004960:	3b01      	subs	r3, #1
 8004962:	2b02      	cmp	r3, #2
 8004964:	f63f af15 	bhi.w	8004792 <USBD_StdDevReq+0x72>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004968:	884b      	ldrh	r3, [r1, #2]
 800496a:	2b01      	cmp	r3, #1
 800496c:	f47f aef8 	bne.w	8004760 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	e7f0      	b.n	8004956 <USBD_StdDevReq+0x236>
 8004974:	20000204 	.word	0x20000204

08004978 <USBD_StdItfReq>:
{
 8004978:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800497a:	780b      	ldrb	r3, [r1, #0]
 800497c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004980:	2b20      	cmp	r3, #32
{
 8004982:	4604      	mov	r4, r0
 8004984:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004986:	d002      	beq.n	800498e <USBD_StdItfReq+0x16>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d000      	beq.n	800498e <USBD_StdItfReq+0x16>
 800498c:	b9b3      	cbnz	r3, 80049bc <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 800498e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004992:	3b01      	subs	r3, #1
 8004994:	2b02      	cmp	r3, #2
 8004996:	d810      	bhi.n	80049ba <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004998:	792b      	ldrb	r3, [r5, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d80d      	bhi.n	80049ba <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800499e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80049a2:	4629      	mov	r1, r5
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	4620      	mov	r0, r4
 80049a8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80049aa:	88eb      	ldrh	r3, [r5, #6]
 80049ac:	b91b      	cbnz	r3, 80049b6 <USBD_StdItfReq+0x3e>
 80049ae:	b910      	cbnz	r0, 80049b6 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80049b0:	4620      	mov	r0, r4
 80049b2:	f000 f8f5 	bl	8004ba0 <USBD_CtlSendStatus>
}
 80049b6:	2000      	movs	r0, #0
 80049b8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80049ba:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 80049bc:	f7ff fea4 	bl	8004708 <USBD_CtlError.constprop.1>
      break;
 80049c0:	e7f9      	b.n	80049b6 <USBD_StdItfReq+0x3e>

080049c2 <USBD_StdEPReq>:
{
 80049c2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049c4:	780a      	ldrb	r2, [r1, #0]
 80049c6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80049ca:	2a20      	cmp	r2, #32
{
 80049cc:	4604      	mov	r4, r0
 80049ce:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049d0:	d013      	beq.n	80049fa <USBD_StdEPReq+0x38>
 80049d2:	2a40      	cmp	r2, #64	; 0x40
 80049d4:	d011      	beq.n	80049fa <USBD_StdEPReq+0x38>
 80049d6:	b96a      	cbnz	r2, 80049f4 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80049d8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80049da:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80049dc:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80049de:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80049e0:	d01f      	beq.n	8004a22 <USBD_StdEPReq+0x60>
 80049e2:	d335      	bcc.n	8004a50 <USBD_StdEPReq+0x8e>
 80049e4:	2d03      	cmp	r5, #3
 80049e6:	d105      	bne.n	80049f4 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80049e8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80049ec:	2a02      	cmp	r2, #2
 80049ee:	d026      	beq.n	8004a3e <USBD_StdEPReq+0x7c>
 80049f0:	2a03      	cmp	r2, #3
 80049f2:	d00a      	beq.n	8004a0a <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 80049f4:	f7ff fe88 	bl	8004708 <USBD_CtlError.constprop.1>
      break;
 80049f8:	e005      	b.n	8004a06 <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 80049fa:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80049fe:	4619      	mov	r1, r3
 8004a00:	6892      	ldr	r2, [r2, #8]
 8004a02:	4620      	mov	r0, r4
 8004a04:	4790      	blx	r2
}
 8004a06:	2000      	movs	r0, #0
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a0a:	885a      	ldrh	r2, [r3, #2]
 8004a0c:	b92a      	cbnz	r2, 8004a1a <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 8004a0e:	064a      	lsls	r2, r1, #25
 8004a10:	d003      	beq.n	8004a1a <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a12:	88db      	ldrh	r3, [r3, #6]
 8004a14:	b90b      	cbnz	r3, 8004a1a <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004a16:	f000 fe3d 	bl	8005694 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f000 f8c0 	bl	8004ba0 <USBD_CtlSendStatus>
              break;
 8004a20:	e7f1      	b.n	8004a06 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8004a22:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004a26:	2a02      	cmp	r2, #2
 8004a28:	d009      	beq.n	8004a3e <USBD_StdEPReq+0x7c>
 8004a2a:	2a03      	cmp	r2, #3
 8004a2c:	d1e2      	bne.n	80049f4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a2e:	885b      	ldrh	r3, [r3, #2]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e8      	bne.n	8004a06 <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004a34:	064d      	lsls	r5, r1, #25
 8004a36:	d0f0      	beq.n	8004a1a <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a38:	f000 fe3a 	bl	80056b0 <USBD_LL_ClearStallEP>
 8004a3c:	e7ed      	b.n	8004a1a <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a3e:	064b      	lsls	r3, r1, #25
 8004a40:	d017      	beq.n	8004a72 <USBD_StdEPReq+0xb0>
                USBD_LL_StallEP(pdev, ep_addr);
 8004a42:	f000 fe27 	bl	8005694 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 fe23 	bl	8005694 <USBD_LL_StallEP>
 8004a4e:	e7da      	b.n	8004a06 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8004a50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d00e      	beq.n	8004a76 <USBD_StdEPReq+0xb4>
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d1cb      	bne.n	80049f4 <USBD_StdEPReq+0x32>
              if ((ep_addr & 0x80U) == 0x80U)
 8004a5c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004a60:	f04f 0314 	mov.w	r3, #20
 8004a64:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004a68:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004a6c:	d012      	beq.n	8004a94 <USBD_StdEPReq+0xd2>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004a6e:	6992      	ldr	r2, [r2, #24]
 8004a70:	b9da      	cbnz	r2, 8004aaa <USBD_StdEPReq+0xe8>
                USBD_CtlError(pdev, req);
 8004a72:	4620      	mov	r0, r4
 8004a74:	e7be      	b.n	80049f4 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a76:	0649      	lsls	r1, r1, #25
 8004a78:	d1fb      	bne.n	8004a72 <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a7a:	0613      	lsls	r3, r2, #24
 8004a7c:	bf4c      	ite	mi
 8004a7e:	f100 0114 	addmi.w	r1, r0, #20
 8004a82:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a8a:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 f85b 	bl	8004b48 <USBD_CtlSendData>
              break;
 8004a92:	e7b8      	b.n	8004a06 <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004a94:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	d0ea      	beq.n	8004a72 <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a9c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004aa0:	fb03 0505 	mla	r5, r3, r5, r0
 8004aa4:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004aa8:	e004      	b.n	8004ab4 <USBD_StdEPReq+0xf2>
 8004aaa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004aae:	fb05 3503 	mla	r5, r5, r3, r3
 8004ab2:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004ab4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004ab8:	d103      	bne.n	8004ac2 <USBD_StdEPReq+0x100>
                pep->status = 0x0001U;
 8004aba:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004abc:	2202      	movs	r2, #2
 8004abe:	4629      	mov	r1, r5
 8004ac0:	e7e4      	b.n	8004a8c <USBD_StdEPReq+0xca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 fe02 	bl	80056cc <USBD_LL_IsStallEP>
 8004ac8:	b108      	cbz	r0, 8004ace <USBD_StdEPReq+0x10c>
                pep->status = 0x0001U;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e7f5      	b.n	8004aba <USBD_StdEPReq+0xf8>
                pep->status = 0x0000U;
 8004ace:	6028      	str	r0, [r5, #0]
 8004ad0:	e7f4      	b.n	8004abc <USBD_StdEPReq+0xfa>

08004ad2 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004ad2:	780b      	ldrb	r3, [r1, #0]
 8004ad4:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004ad6:	784b      	ldrb	r3, [r1, #1]
 8004ad8:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004ada:	78ca      	ldrb	r2, [r1, #3]
 8004adc:	788b      	ldrb	r3, [r1, #2]
 8004ade:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ae2:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004ae4:	794a      	ldrb	r2, [r1, #5]
 8004ae6:	790b      	ldrb	r3, [r1, #4]
 8004ae8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004aec:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004aee:	79ca      	ldrb	r2, [r1, #7]
 8004af0:	798b      	ldrb	r3, [r1, #6]
 8004af2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004af6:	80c3      	strh	r3, [r0, #6]
 8004af8:	4770      	bx	lr

08004afa <USBD_CtlError>:
{
 8004afa:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 8004afc:	2180      	movs	r1, #128	; 0x80
{
 8004afe:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004b00:	f000 fdc8 	bl	8005694 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004b04:	4620      	mov	r0, r4
 8004b06:	2100      	movs	r1, #0
}
 8004b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004b0c:	f000 bdc2 	b.w	8005694 <USBD_LL_StallEP>

08004b10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004b10:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8004b12:	b188      	cbz	r0, 8004b38 <USBD_GetString+0x28>
 8004b14:	4605      	mov	r5, r0
 8004b16:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2c00      	cmp	r4, #0
 8004b20:	d1f9      	bne.n	8004b16 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004b22:	3301      	adds	r3, #1
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004b28:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	704b      	strb	r3, [r1, #1]
 8004b2e:	3801      	subs	r0, #1
 8004b30:	2302      	movs	r3, #2
    while (*desc != '\0')
 8004b32:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004b36:	b905      	cbnz	r5, 8004b3a <USBD_GetString+0x2a>
 8004b38:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8004b40:	3302      	adds	r3, #2
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	548c      	strb	r4, [r1, r2]
 8004b46:	e7f4      	b.n	8004b32 <USBD_GetString+0x22>

08004b48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004b52:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004b54:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8004b56:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f000 fdd5 	bl	8005708 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b5e:	2000      	movs	r0, #0
 8004b60:	bd10      	pop	{r4, pc}

08004b62 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004b62:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004b64:	4613      	mov	r3, r2
 8004b66:	460a      	mov	r2, r1
 8004b68:	2100      	movs	r1, #0
 8004b6a:	f000 fdcd 	bl	8005708 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b6e:	2000      	movs	r0, #0
 8004b70:	bd08      	pop	{r3, pc}

08004b72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004b72:	b510      	push	{r4, lr}
 8004b74:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004b76:	2203      	movs	r2, #3
 8004b78:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004b7c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004b80:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004b82:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004b86:	2100      	movs	r1, #0
 8004b88:	f000 fdcc 	bl	8005724 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004b90:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004b92:	4613      	mov	r3, r2
 8004b94:	460a      	mov	r2, r1
 8004b96:	2100      	movs	r1, #0
 8004b98:	f000 fdc4 	bl	8005724 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	bd08      	pop	{r3, pc}

08004ba0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004ba0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	461a      	mov	r2, r3
 8004bac:	4619      	mov	r1, r3
 8004bae:	f000 fdab 	bl	8005708 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	bd08      	pop	{r3, pc}

08004bb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004bb6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004bb8:	2305      	movs	r3, #5
 8004bba:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f000 fdae 	bl	8005724 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004bc8:	2000      	movs	r0, #0
 8004bca:	bd08      	pop	{r3, pc}

08004bcc <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8004bd0:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bd4:	4302      	orrs	r2, r0
 8004bd6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	4018      	ands	r0, r3
 8004bdc:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004bde:	9b01      	ldr	r3, [sp, #4]
}
 8004be0:	b002      	add	sp, #8
 8004be2:	4770      	bx	lr

08004be4 <print_PMS7003>:
static void MX_LPUART1_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

void print_PMS7003(void)
{
 8004be4:	b570      	push	{r4, r5, r6, lr}
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;

	check_byte_receive=pms7003_Buffer[30]<<8|pms7003_Buffer[31];
 8004be6:	4c31      	ldr	r4, [pc, #196]	; (8004cac <print_PMS7003+0xc8>)
 8004be8:	7fa3      	ldrb	r3, [r4, #30]
 8004bea:	7fe6      	ldrb	r6, [r4, #31]
 8004bec:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8004bf0:	2300      	movs	r3, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 8004bf2:	461d      	mov	r5, r3


	for(uint8_t i=0;i<30;i++)
	{
		check_byte_calculate+=pms7003_Buffer[i];
 8004bf4:	5ce2      	ldrb	r2, [r4, r3]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4415      	add	r5, r2
	for(uint8_t i=0;i<30;i++)
 8004bfa:	2b1e      	cmp	r3, #30
		check_byte_calculate+=pms7003_Buffer[i];
 8004bfc:	b2ad      	uxth	r5, r5
	for(uint8_t i=0;i<30;i++)
 8004bfe:	d1f9      	bne.n	8004bf4 <print_PMS7003+0x10>
	}

	printf("pms : 0x%X	crc_cal : 0x%X\r\n",check_byte_receive,check_byte_calculate);
 8004c00:	462a      	mov	r2, r5
 8004c02:	4631      	mov	r1, r6
 8004c04:	482a      	ldr	r0, [pc, #168]	; (8004cb0 <print_PMS7003+0xcc>)
 8004c06:	f000 feab 	bl	8005960 <iprintf>

	if(check_byte_receive==check_byte_calculate)
 8004c0a:	42ae      	cmp	r6, r5
 8004c0c:	d149      	bne.n	8004ca2 <print_PMS7003+0xbe>
	{
		printf("PM1.0 : %d	",(combine_value=(pms7003_Buffer[10]<<8)|pms7003_Buffer[11]));
 8004c0e:	7ae3      	ldrb	r3, [r4, #11]
 8004c10:	7aa1      	ldrb	r1, [r4, #10]
 8004c12:	4828      	ldr	r0, [pc, #160]	; (8004cb4 <print_PMS7003+0xd0>)
 8004c14:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c18:	f000 fea2 	bl	8005960 <iprintf>
		printf("PM2.5 : %d	",(combine_value=(pms7003_Buffer[12]<<8)|pms7003_Buffer[13]));
 8004c1c:	7b63      	ldrb	r3, [r4, #13]
 8004c1e:	7b21      	ldrb	r1, [r4, #12]
 8004c20:	4825      	ldr	r0, [pc, #148]	; (8004cb8 <print_PMS7003+0xd4>)
 8004c22:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c26:	f000 fe9b 	bl	8005960 <iprintf>
		printf("PM10 : %d	",(combine_value=(pms7003_Buffer[14]<<8)|pms7003_Buffer[15]));
 8004c2a:	7be3      	ldrb	r3, [r4, #15]
 8004c2c:	7ba1      	ldrb	r1, [r4, #14]
 8004c2e:	4823      	ldr	r0, [pc, #140]	; (8004cbc <print_PMS7003+0xd8>)
 8004c30:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c34:	f000 fe94 	bl	8005960 <iprintf>
		printf("0.3um : %d	",(combine_value=(pms7003_Buffer[16]<<8)|pms7003_Buffer[17]));
 8004c38:	7c63      	ldrb	r3, [r4, #17]
 8004c3a:	7c21      	ldrb	r1, [r4, #16]
 8004c3c:	4820      	ldr	r0, [pc, #128]	; (8004cc0 <print_PMS7003+0xdc>)
 8004c3e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c42:	f000 fe8d 	bl	8005960 <iprintf>
		printf("0.5um : %d	",(combine_value=(pms7003_Buffer[18]<<8)|pms7003_Buffer[19]));
 8004c46:	7ce3      	ldrb	r3, [r4, #19]
 8004c48:	7ca1      	ldrb	r1, [r4, #18]
 8004c4a:	481e      	ldr	r0, [pc, #120]	; (8004cc4 <print_PMS7003+0xe0>)
 8004c4c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c50:	f000 fe86 	bl	8005960 <iprintf>
		printf("1.0um : %d	",(combine_value=(pms7003_Buffer[20]<<8)|pms7003_Buffer[21]));
 8004c54:	7d63      	ldrb	r3, [r4, #21]
 8004c56:	7d21      	ldrb	r1, [r4, #20]
 8004c58:	481b      	ldr	r0, [pc, #108]	; (8004cc8 <print_PMS7003+0xe4>)
 8004c5a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c5e:	f000 fe7f 	bl	8005960 <iprintf>
		printf("2.5um : %d	",(combine_value=(pms7003_Buffer[22]<<8)|pms7003_Buffer[23]));
 8004c62:	7de3      	ldrb	r3, [r4, #23]
 8004c64:	7da1      	ldrb	r1, [r4, #22]
 8004c66:	4819      	ldr	r0, [pc, #100]	; (8004ccc <print_PMS7003+0xe8>)
 8004c68:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c6c:	f000 fe78 	bl	8005960 <iprintf>
		printf("5.0um : %d	",(combine_value=(pms7003_Buffer[24]<<8)|pms7003_Buffer[25]));
 8004c70:	7e63      	ldrb	r3, [r4, #25]
 8004c72:	7e21      	ldrb	r1, [r4, #24]
 8004c74:	4816      	ldr	r0, [pc, #88]	; (8004cd0 <print_PMS7003+0xec>)
 8004c76:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c7a:	f000 fe71 	bl	8005960 <iprintf>
		printf("10.0um : %d\n",(combine_value=(pms7003_Buffer[26]<<8)|pms7003_Buffer[27]));
 8004c7e:	7ea1      	ldrb	r1, [r4, #26]
 8004c80:	7ee3      	ldrb	r3, [r4, #27]
 8004c82:	4814      	ldr	r0, [pc, #80]	; (8004cd4 <print_PMS7003+0xf0>)
 8004c84:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004c88:	f000 fe6a 	bl	8005960 <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	4812      	ldr	r0, [pc, #72]	; (8004cd8 <print_PMS7003+0xf4>)
 8004c90:	f7fb ff27 	bl	8000ae2 <HAL_GPIO_TogglePin>
	}
	else
	{
		printf("Check bytes not matched\r\n");
	}
	HAL_UART_DMAStop(&hlpuart1);
 8004c94:	4811      	ldr	r0, [pc, #68]	; (8004cdc <print_PMS7003+0xf8>)
 8004c96:	f7fd fe0d 	bl	80028b4 <HAL_UART_DMAStop>
	receive_complete=0;
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <print_PMS7003+0xfc>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
		printf("Check bytes not matched\r\n");
 8004ca2:	4810      	ldr	r0, [pc, #64]	; (8004ce4 <print_PMS7003+0x100>)
 8004ca4:	f000 fed0 	bl	8005a48 <puts>
 8004ca8:	e7f4      	b.n	8004c94 <print_PMS7003+0xb0>
 8004caa:	bf00      	nop
 8004cac:	20000438 	.word	0x20000438
 8004cb0:	08006860 	.word	0x08006860
 8004cb4:	0800687c 	.word	0x0800687c
 8004cb8:	08006888 	.word	0x08006888
 8004cbc:	08006894 	.word	0x08006894
 8004cc0:	0800689f 	.word	0x0800689f
 8004cc4:	080068ab 	.word	0x080068ab
 8004cc8:	080068b7 	.word	0x080068b7
 8004ccc:	080068c3 	.word	0x080068c3
 8004cd0:	080068cf 	.word	0x080068cf
 8004cd4:	080068db 	.word	0x080068db
 8004cd8:	48000400 	.word	0x48000400
 8004cdc:	20000504 	.word	0x20000504
 8004ce0:	20000205 	.word	0x20000205
 8004ce4:	080068e8 	.word	0x080068e8

08004ce8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8004ce8:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8004cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8004cee:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8004cf0:	4802      	ldr	r0, [pc, #8]	; (8004cfc <_write+0x14>)
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	f7fe fce4 	bl	80036c0 <HAL_UART_Transmit>
  return len;
}
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	bd10      	pop	{r4, pc}
 8004cfc:	20000590 	.word	0x20000590

08004d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d00:	b530      	push	{r4, r5, lr}
 8004d02:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d04:	2248      	movs	r2, #72	; 0x48
 8004d06:	2100      	movs	r1, #0
 8004d08:	a808      	add	r0, sp, #32
 8004d0a:	f000 fe21 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d0e:	221c      	movs	r2, #28
 8004d10:	2100      	movs	r1, #0
 8004d12:	a801      	add	r0, sp, #4
 8004d14:	f000 fe1c 	bl	8005950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d18:	2100      	movs	r1, #0
 8004d1a:	2250      	movs	r2, #80	; 0x50
 8004d1c:	a81a      	add	r0, sp, #104	; 0x68
 8004d1e:	f000 fe17 	bl	8005950 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8004d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004d26:	2501      	movs	r5, #1
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d2e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	f022 0203 	bic.w	r2, r2, #3
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004d3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d40:	f022 0218 	bic.w	r2, r2, #24
 8004d44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d48:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <SystemClock_Config+0xe4>)
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004d58:	950a      	str	r5, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004d62:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004d64:	2327      	movs	r3, #39	; 0x27
 8004d66:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d6c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d72:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d74:	2340      	movs	r3, #64	; 0x40
 8004d76:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d78:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004d7a:	2360      	movs	r3, #96	; 0x60
 8004d7c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d7e:	f7fc fed3 	bl	8001b28 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004d82:	236f      	movs	r3, #111	; 0x6f
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d84:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004d86:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004d88:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004d8a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d90:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d92:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d94:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004d96:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004d98:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004d9a:	f7fd f98b 	bl	80020b4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8004d9e:	f242 1307 	movw	r3, #8455	; 0x2107
 8004da2:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8004da4:	2318      	movs	r3, #24
 8004da6:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dac:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004db2:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004db4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004db8:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8004dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dbe:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004dc0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004dc4:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004dc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004dca:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004dcc:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004dce:	2310      	movs	r3, #16
 8004dd0:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004dd2:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004dd4:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004dd6:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004dd8:	f7fd fb17 	bl	800240a <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004ddc:	f7fd fcd9 	bl	8002792 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004de0:	b02f      	add	sp, #188	; 0xbc
 8004de2:	bd30      	pop	{r4, r5, pc}
 8004de4:	58000400 	.word	0x58000400

08004de8 <main>:
{
 8004de8:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 8004dea:	f7fb fbc7 	bl	800057c <HAL_Init>
  SystemClock_Config();
 8004dee:	f7ff ff87 	bl	8004d00 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df2:	2214      	movs	r2, #20
 8004df4:	2100      	movs	r1, #0
 8004df6:	a801      	add	r0, sp, #4
 8004df8:	f000 fdaa 	bl	8005950 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dfc:	2004      	movs	r0, #4
 8004dfe:	f7ff fee5 	bl	8004bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e02:	2002      	movs	r0, #2
 8004e04:	f7ff fee2 	bl	8004bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e08:	2001      	movs	r0, #1
 8004e0a:	f7ff fedf 	bl	8004bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e0e:	2008      	movs	r0, #8
 8004e10:	f7ff fedc 	bl	8004bcc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8004e14:	2200      	movs	r2, #0
 8004e16:	2123      	movs	r1, #35	; 0x23
 8004e18:	4861      	ldr	r0, [pc, #388]	; (8004fa0 <main+0x1b8>)
  huart1.Instance = USART1;
 8004e1a:	4d62      	ldr	r5, [pc, #392]	; (8004fa4 <main+0x1bc>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8004e1c:	f7fb fe5c 	bl	8000ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004e20:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e22:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = B1_Pin;
 8004e24:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004e26:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e28:	4b5f      	ldr	r3, [pc, #380]	; (8004fa8 <main+0x1c0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004e2a:	4860      	ldr	r0, [pc, #384]	; (8004fac <main+0x1c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e2c:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e30:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004e32:	f7fb fd9f 	bl	8000974 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8004e36:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e38:	a901      	add	r1, sp, #4
 8004e3a:	4859      	ldr	r0, [pc, #356]	; (8004fa0 <main+0x1b8>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8004e3c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e40:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e42:	9702      	str	r7, [sp, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e44:	f7fb fd96 	bl	8000974 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004e48:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e4a:	a901      	add	r1, sp, #4
 8004e4c:	4858      	ldr	r0, [pc, #352]	; (8004fb0 <main+0x1c8>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004e4e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e50:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e54:	f7fb fd8e 	bl	8000974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	f7fb fbe1 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004e62:	200a      	movs	r0, #10
 8004e64:	f7fb fc12 	bl	800068c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 8004e68:	4a52      	ldr	r2, [pc, #328]	; (8004fb4 <main+0x1cc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e6a:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 8004e6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e70:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e72:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8004e74:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e78:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e7a:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e7c:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e7e:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e80:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e82:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e84:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e86:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e88:	f7fe fca9 	bl	80037de <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f7fe fd3e 	bl	8003910 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e94:	4621      	mov	r1, r4
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7fe fd5e 	bl	8003958 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7fe fd1c 	bl	80038da <HAL_UARTEx_DisableFifoMode>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  hlpuart1.Instance = LPUART1;
 8004eaa:	4d43      	ldr	r5, [pc, #268]	; (8004fb8 <main+0x1d0>)
 8004eac:	f042 0204 	orr.w	r2, r2, #4
 8004eb0:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eb4:	f002 0204 	and.w	r2, r2, #4
 8004eb8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004eba:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ebe:	433a      	orrs	r2, r7
 8004ec0:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec4:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	200b      	movs	r0, #11
  (void)tmpreg;
 8004ecc:	9b00      	ldr	r3, [sp, #0]
 8004ece:	f7fb fba9 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ed2:	200b      	movs	r0, #11
 8004ed4:	f7fb fbda 	bl	800068c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004ed8:	4622      	mov	r2, r4
 8004eda:	4621      	mov	r1, r4
 8004edc:	4630      	mov	r0, r6
 8004ede:	f7fb fba1 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7fb fbd2 	bl	800068c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4621      	mov	r1, r4
 8004eec:	200d      	movs	r0, #13
 8004eee:	f7fb fb99 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004ef2:	200d      	movs	r0, #13
 8004ef4:	f7fb fbca 	bl	800068c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4621      	mov	r1, r4
 8004efc:	200e      	movs	r0, #14
 8004efe:	f7fb fb91 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004f02:	200e      	movs	r0, #14
 8004f04:	f7fb fbc2 	bl	800068c <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 9600;
 8004f08:	492c      	ldr	r1, [pc, #176]	; (8004fbc <main+0x1d4>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f0a:	60ac      	str	r4, [r5, #8]
  hlpuart1.Init.BaudRate = 9600;
 8004f0c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004f10:	4628      	mov	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 8004f12:	e885 000a 	stmia.w	r5, {r1, r3}
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004f16:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004f18:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004f1a:	616e      	str	r6, [r5, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f1c:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f1e:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f20:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f22:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004f24:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004f26:	f7fe fc5a 	bl	80037de <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f7fe fcef 	bl	8003910 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f32:	4621      	mov	r1, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	f7fe fd0f 	bl	8003958 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004f3a:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 8004f3c:	4e20      	ldr	r6, [pc, #128]	; (8004fc0 <main+0x1d8>)
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004f3e:	f7fe fccc 	bl	80038da <HAL_UARTEx_DisableFifoMode>
  MX_USB_Device_Init();
 8004f42:	f000 fa5f 	bl	8005404 <MX_USB_Device_Init>
  hi2c1.Init.Timing = 0x00100413;
 8004f46:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <main+0x1dc>)
 8004f48:	481f      	ldr	r0, [pc, #124]	; (8004fc8 <main+0x1e0>)
  hi2c1.Init.OwnAddress1 = 0;
 8004f4a:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x00100413;
 8004f4c:	e886 0009 	stmia.w	r6, {r0, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f50:	4630      	mov	r0, r6
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f52:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004f54:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004f56:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f58:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f5a:	6234      	str	r4, [r6, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f5c:	60f7      	str	r7, [r6, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f5e:	f7fb fe0e 	bl	8000b7e <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f62:	4621      	mov	r1, r4
 8004f64:	4630      	mov	r0, r6
 8004f66:	f7fc f8bb 	bl	80010e0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7fc f8dd 	bl	800112c <HAL_I2CEx_ConfigDigitalFilter>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8004f72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004f76:	f7fc f8ff 	bl	8001178 <HAL_I2CEx_EnableFastModePlus>
	  if((receive_complete==0)&&(HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY))
 8004f7a:	4c14      	ldr	r4, [pc, #80]	; (8004fcc <main+0x1e4>)
		  HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)pms7003_Buffer,32);
 8004f7c:	4e14      	ldr	r6, [pc, #80]	; (8004fd0 <main+0x1e8>)
	  if((receive_complete==0)&&(HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY))
 8004f7e:	7823      	ldrb	r3, [r4, #0]
 8004f80:	b94b      	cbnz	r3, 8004f96 <main+0x1ae>
 8004f82:	4628      	mov	r0, r5
 8004f84:	f7fd feba 	bl	8002cfc <HAL_UART_GetState>
 8004f88:	2820      	cmp	r0, #32
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	d103      	bne.n	8004f96 <main+0x1ae>
		  HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)pms7003_Buffer,32);
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	f7fd fc17 	bl	80027c4 <HAL_UART_Receive_IT>
	  HAL_Delay(2300);
 8004f96:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8004f9a:	f7fb fb1d 	bl	80005d8 <HAL_Delay>
	  if((receive_complete==0)&&(HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY))
 8004f9e:	e7ee      	b.n	8004f7e <main+0x196>
 8004fa0:	48000400 	.word	0x48000400
 8004fa4:	20000590 	.word	0x20000590
 8004fa8:	10110000 	.word	0x10110000
 8004fac:	48000800 	.word	0x48000800
 8004fb0:	48000c00 	.word	0x48000c00
 8004fb4:	40013800 	.word	0x40013800
 8004fb8:	20000504 	.word	0x20000504
 8004fbc:	40008000 	.word	0x40008000
 8004fc0:	200004b8 	.word	0x200004b8
 8004fc4:	00100413 	.word	0x00100413
 8004fc8:	40005400 	.word	0x40005400
 8004fcc:	20000205 	.word	0x20000205
 8004fd0:	20000438 	.word	0x20000438

08004fd4 <HAL_UART_TxCpltCallback>:
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
//	printf("transfer complete\r\n");
	transfer_complete=1;
 8004fd4:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <HAL_UART_TxCpltCallback+0x8>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	4770      	bx	lr
 8004fdc:	20000206 	.word	0x20000206

08004fe0 <HAL_UART_RxCpltCallback>:
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
//	receive_complete=1;
	print_PMS7003();
 8004fe0:	f7ff be00 	b.w	8004be4 <print_PMS7003>

08004fe4 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fe4:	4770      	bx	lr

08004fe6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fe6:	4770      	bx	lr

08004fe8 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8004fec:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ff0:	4302      	orrs	r2, r0
 8004ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	4018      	ands	r0, r3
 8004ff8:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004ffa:	9b01      	ldr	r3, [sp, #4]
}
 8004ffc:	b002      	add	sp, #8
 8004ffe:	4770      	bx	lr

08005000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005000:	4770      	bx	lr
	...

08005004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4606      	mov	r6, r0
 8005008:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500a:	2214      	movs	r2, #20
 800500c:	2100      	movs	r1, #0
 800500e:	a801      	add	r0, sp, #4
 8005010:	f000 fc9e 	bl	8005950 <memset>
  if(hi2c->Instance==I2C1)
 8005014:	6832      	ldr	r2, [r6, #0]
 8005016:	4b30      	ldr	r3, [pc, #192]	; (80050d8 <HAL_I2C_MspInit+0xd4>)
 8005018:	429a      	cmp	r2, r3
 800501a:	d15a      	bne.n	80050d2 <HAL_I2C_MspInit+0xce>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501c:	2002      	movs	r0, #2
 800501e:	f7ff ffe3 	bl	8004fe8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005026:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005028:	2312      	movs	r3, #18
 800502a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800502c:	2301      	movs	r3, #1
 800502e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005030:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005032:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005034:	eb0d 0103 	add.w	r1, sp, r3
 8005038:	4828      	ldr	r0, [pc, #160]	; (80050dc <HAL_I2C_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800503a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503e:	f7fb fc99 	bl	8000974 <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005046:	4c26      	ldr	r4, [pc, #152]	; (80050e0 <HAL_I2C_MspInit+0xdc>)
 8005048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800504a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800504e:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005052:	60a5      	str	r5, [r4, #8]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005058:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800505a:	9b00      	ldr	r3, [sp, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800505c:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <HAL_I2C_MspInit+0xe0>)
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800505e:	60e5      	str	r5, [r4, #12]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8005060:	f04f 0c0a 	mov.w	ip, #10
 8005064:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005068:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800506e:	6165      	str	r5, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005070:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005072:	61e5      	str	r5, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005074:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005076:	f7fb fb55 	bl	8000724 <HAL_DMA_Init>
 800507a:	b108      	cbz	r0, 8005080 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 800507c:	f7ff ffb3 	bl	8004fe6 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <HAL_I2C_MspInit+0xe4>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005082:	63f4      	str	r4, [r6, #60]	; 0x3c
 8005084:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8005086:	4c19      	ldr	r4, [pc, #100]	; (80050ec <HAL_I2C_MspInit+0xe8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005088:	250b      	movs	r5, #11
 800508a:	f04f 0e10 	mov.w	lr, #16
 800508e:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005092:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005094:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005096:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005098:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800509a:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800509c:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800509e:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80050a0:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050a2:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80050a4:	f7fb fb3e 	bl	8000724 <HAL_DMA_Init>
 80050a8:	b108      	cbz	r0, 80050ae <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80050aa:	f7ff ff9c 	bl	8004fe6 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80050ae:	2200      	movs	r2, #0
 80050b0:	4611      	mov	r1, r2
 80050b2:	201e      	movs	r0, #30
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80050b4:	63b4      	str	r4, [r6, #56]	; 0x38
 80050b6:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80050b8:	f7fb fab4 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80050bc:	201e      	movs	r0, #30
 80050be:	f7fb fae5 	bl	800068c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	201f      	movs	r0, #31
 80050c6:	4611      	mov	r1, r2
 80050c8:	f7fb faac 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80050cc:	201f      	movs	r0, #31
 80050ce:	f7fb fadd 	bl	800068c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050d2:	b006      	add	sp, #24
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
 80050d6:	bf00      	nop
 80050d8:	40005400 	.word	0x40005400
 80050dc:	48000400 	.word	0x48000400
 80050e0:	2000067c 	.word	0x2000067c
 80050e4:	40020030 	.word	0x40020030
 80050e8:	40020044 	.word	0x40020044
 80050ec:	20000458 	.word	0x20000458

080050f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4606      	mov	r6, r0
 80050f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f6:	2214      	movs	r2, #20
 80050f8:	2100      	movs	r1, #0
 80050fa:	a803      	add	r0, sp, #12
 80050fc:	f000 fc28 	bl	8005950 <memset>
  if(huart->Instance==LPUART1)
 8005100:	6833      	ldr	r3, [r6, #0]
 8005102:	4a3a      	ldr	r2, [pc, #232]	; (80051ec <HAL_UART_MspInit+0xfc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d151      	bne.n	80051ac <HAL_UART_MspInit+0xbc>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800510c:	2004      	movs	r0, #4
 800510e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8005110:	4c37      	ldr	r4, [pc, #220]	; (80051f0 <HAL_UART_MspInit+0x100>)
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005120:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005122:	f7ff ff61 	bl	8004fe8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005126:	2303      	movs	r3, #3
 8005128:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005130:	4830      	ldr	r0, [pc, #192]	; (80051f4 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005132:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005134:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005136:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005138:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800513a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800513c:	f7fb fc1a 	bl	8000974 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_UART_MspInit+0x108>)
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005142:	60a5      	str	r5, [r4, #8]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005144:	f04f 0c10 	mov.w	ip, #16
 8005148:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800514c:	4620      	mov	r0, r4
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800514e:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005150:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005152:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005154:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005156:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8005158:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800515a:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800515c:	f7fb fae2 	bl	8000724 <HAL_DMA_Init>
 8005160:	b108      	cbz	r0, 8005166 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8005162:	f7ff ff40 	bl	8004fe6 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005166:	4b25      	ldr	r3, [pc, #148]	; (80051fc <HAL_UART_MspInit+0x10c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8005168:	67b4      	str	r4, [r6, #120]	; 0x78
 800516a:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800516c:	4c24      	ldr	r4, [pc, #144]	; (8005200 <HAL_UART_MspInit+0x110>)
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800516e:	2511      	movs	r5, #17
 8005170:	f04f 0e10 	mov.w	lr, #16
 8005174:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005178:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800517a:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800517c:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800517e:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005180:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005182:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005184:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8005186:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005188:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800518a:	f7fb facb 	bl	8000724 <HAL_DMA_Init>
 800518e:	b108      	cbz	r0, 8005194 <HAL_UART_MspInit+0xa4>
    {
      Error_Handler();
 8005190:	f7ff ff29 	bl	8004fe6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005194:	2200      	movs	r2, #0
 8005196:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8005198:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800519a:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800519c:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800519e:	f7fb fa41 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80051a2:	2025      	movs	r0, #37	; 0x25
 80051a4:	f7fb fa72 	bl	800068c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80051a8:	b008      	add	sp, #32
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART1)
 80051ac:	4a15      	ldr	r2, [pc, #84]	; (8005204 <HAL_UART_MspInit+0x114>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d1fa      	bne.n	80051a8 <HAL_UART_MspInit+0xb8>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051b6:	2002      	movs	r0, #2
 80051b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051be:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80051c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c6:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80051c8:	9b02      	ldr	r3, [sp, #8]
 80051ca:	f7ff ff0d 	bl	8004fe8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80051ce:	23c0      	movs	r3, #192	; 0xc0
 80051d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d2:	2302      	movs	r3, #2
 80051d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051da:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051de:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e0:	4809      	ldr	r0, [pc, #36]	; (8005208 <HAL_UART_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e4:	f7fb fbc6 	bl	8000974 <HAL_GPIO_Init>
}
 80051e8:	e7de      	b.n	80051a8 <HAL_UART_MspInit+0xb8>
 80051ea:	bf00      	nop
 80051ec:	40008000 	.word	0x40008000
 80051f0:	200006dc 	.word	0x200006dc
 80051f4:	48000800 	.word	0x48000800
 80051f8:	40020008 	.word	0x40020008
 80051fc:	4002001c 	.word	0x4002001c
 8005200:	2000061c 	.word	0x2000061c
 8005204:	40013800 	.word	0x40013800
 8005208:	48000400 	.word	0x48000400

0800520c <NMI_Handler>:
 800520c:	4770      	bx	lr

0800520e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800520e:	e7fe      	b.n	800520e <HardFault_Handler>

08005210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005210:	e7fe      	b.n	8005210 <MemManage_Handler>

08005212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005212:	e7fe      	b.n	8005212 <BusFault_Handler>

08005214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005214:	e7fe      	b.n	8005214 <UsageFault_Handler>

08005216 <SVC_Handler>:
 8005216:	4770      	bx	lr

08005218 <DebugMon_Handler>:
 8005218:	4770      	bx	lr

0800521a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800521a:	4770      	bx	lr

0800521c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800521c:	f7fb b9c4 	b.w	80005a8 <HAL_IncTick>

08005220 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005220:	2010      	movs	r0, #16
 8005222:	f7fb bc65 	b.w	8000af0 <HAL_GPIO_EXTI_IRQHandler>
	...

08005228 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//	printf("rx dma\r\n");
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <DMA1_Channel1_IRQHandler+0x8>)
 800522a:	f7fb bb57 	b.w	80008dc <HAL_DMA_IRQHandler>
 800522e:	bf00      	nop
 8005230:	200006dc 	.word	0x200006dc

08005234 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <DMA1_Channel2_IRQHandler+0x8>)
 8005236:	f7fb bb51 	b.w	80008dc <HAL_DMA_IRQHandler>
 800523a:	bf00      	nop
 800523c:	2000061c 	.word	0x2000061c

08005240 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005240:	4801      	ldr	r0, [pc, #4]	; (8005248 <DMA1_Channel3_IRQHandler+0x8>)
 8005242:	f7fb bb4b 	b.w	80008dc <HAL_DMA_IRQHandler>
 8005246:	bf00      	nop
 8005248:	2000067c 	.word	0x2000067c

0800524c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800524c:	4801      	ldr	r0, [pc, #4]	; (8005254 <DMA1_Channel4_IRQHandler+0x8>)
 800524e:	f7fb bb45 	b.w	80008dc <HAL_DMA_IRQHandler>
 8005252:	bf00      	nop
 8005254:	20000458 	.word	0x20000458

08005258 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <USB_LP_IRQHandler+0x8>)
 800525a:	f7fc b8b5 	b.w	80013c8 <HAL_PCD_IRQHandler>
 800525e:	bf00      	nop
 8005260:	20001a00 	.word	0x20001a00

08005264 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <I2C1_EV_IRQHandler+0x8>)
 8005266:	f7fb bcdb 	b.w	8000c20 <HAL_I2C_EV_IRQHandler>
 800526a:	bf00      	nop
 800526c:	200004b8 	.word	0x200004b8

08005270 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <I2C1_ER_IRQHandler+0x8>)
 8005272:	f7fb bef1 	b.w	8001058 <HAL_I2C_ER_IRQHandler>
 8005276:	bf00      	nop
 8005278:	200004b8 	.word	0x200004b8

0800527c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <LPUART1_IRQHandler+0x8>)
 800527e:	f7fd bc61 	b.w	8002b44 <HAL_UART_IRQHandler>
 8005282:	bf00      	nop
 8005284:	20000504 	.word	0x20000504

08005288 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	460e      	mov	r6, r1
 800528c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800528e:	460c      	mov	r4, r1
 8005290:	1ba3      	subs	r3, r4, r6
 8005292:	429d      	cmp	r5, r3
 8005294:	dc01      	bgt.n	800529a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005296:	4628      	mov	r0, r5
 8005298:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800529a:	f3af 8000 	nop.w
 800529e:	f804 0b01 	strb.w	r0, [r4], #1
 80052a2:	e7f5      	b.n	8005290 <_read+0x8>

080052a4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80052a4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <_sbrk+0x2c>)
 80052a8:	6819      	ldr	r1, [r3, #0]
{
 80052aa:	4602      	mov	r2, r0
	if (heap_end == 0)
 80052ac:	b909      	cbnz	r1, 80052b2 <_sbrk+0xe>
		heap_end = &end;
 80052ae:	4909      	ldr	r1, [pc, #36]	; (80052d4 <_sbrk+0x30>)
 80052b0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80052b2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80052b4:	4669      	mov	r1, sp
 80052b6:	4402      	add	r2, r0
 80052b8:	428a      	cmp	r2, r1
 80052ba:	d906      	bls.n	80052ca <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80052bc:	f000 fb1e 	bl	80058fc <__errno>
 80052c0:	230c      	movs	r3, #12
 80052c2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80052ca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80052cc:	bd08      	pop	{r3, pc}
 80052ce:	bf00      	nop
 80052d0:	20000208 	.word	0x20000208
 80052d4:	20001e78 	.word	0x20001e78

080052d8 <_close>:

int _close(int file)
{
	return -1;
}
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	4770      	bx	lr

080052de <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80052de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052e2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80052e4:	2000      	movs	r0, #0
 80052e6:	4770      	bx	lr

080052e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80052e8:	2001      	movs	r0, #1
 80052ea:	4770      	bx	lr

080052ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80052ec:	2000      	movs	r0, #0
 80052ee:	4770      	bx	lr

080052f0 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80052f0:	4b17      	ldr	r3, [pc, #92]	; (8005350 <SystemInit+0x60>)
 80052f2:	2100      	movs	r1, #0
 80052f4:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80052f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80052fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005306:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	f042 0201 	orr.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8005312:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005316:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 800531e:	4462      	add	r2, ip
 8005320:	4002      	ands	r2, r0
 8005322:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8005324:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005328:	f022 0205 	bic.w	r2, r2, #5
 800532c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005330:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800533c:	4a05      	ldr	r2, [pc, #20]	; (8005354 <SystemInit+0x64>)
 800533e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005340:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005348:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800534a:	6199      	str	r1, [r3, #24]
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00
 8005354:	22041000 	.word	0x22041000

08005358 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800535c:	4924      	ldr	r1, [pc, #144]	; (80053f0 <SystemCoreClockUpdate+0x98>)
 800535e:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005362:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005366:	f000 000c 	and.w	r0, r0, #12
{
 800536a:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800536c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005370:	4611      	mov	r1, r2
 8005372:	4a20      	ldr	r2, [pc, #128]	; (80053f4 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005374:	280c      	cmp	r0, #12
 8005376:	d839      	bhi.n	80053ec <SystemCoreClockUpdate+0x94>
 8005378:	e8df f000 	tbb	[pc, r0]
 800537c:	38383838 	.word	0x38383838
 8005380:	38383807 	.word	0x38383807
 8005384:	38383816 	.word	0x38383816
 8005388:	18          	.byte	0x18
 8005389:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 800538c:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8005392:	481a      	ldr	r0, [pc, #104]	; (80053fc <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005394:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8005396:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005398:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 800539c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80053a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <SystemCoreClockUpdate+0xa8>)
 80053aa:	e7ef      	b.n	800538c <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80053ac:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80053ae:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80053b0:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80053b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80053b8:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80053ba:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80053be:	d10e      	bne.n	80053de <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 80053c0:	490d      	ldr	r1, [pc, #52]	; (80053f8 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 80053c2:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ca:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80053cc:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ce:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80053d2:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053d4:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80053d6:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 80053d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80053dc:	e7d6      	b.n	800538c <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80053de:	2803      	cmp	r0, #3
 80053e0:	d101      	bne.n	80053e6 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 80053e2:	4907      	ldr	r1, [pc, #28]	; (8005400 <SystemCoreClockUpdate+0xa8>)
 80053e4:	e7ed      	b.n	80053c2 <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 80053e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80053ea:	e7ec      	b.n	80053c6 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 80053ec:	6014      	str	r4, [r2, #0]
      break;
 80053ee:	e7ce      	b.n	800538e <SystemCoreClockUpdate+0x36>
 80053f0:	08006964 	.word	0x08006964
 80053f4:	2000011c 	.word	0x2000011c
 80053f8:	00f42400 	.word	0x00f42400
 80053fc:	08006904 	.word	0x08006904
 8005400:	01e84800 	.word	0x01e84800

08005404 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8005404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8005406:	2200      	movs	r2, #0
 8005408:	490e      	ldr	r1, [pc, #56]	; (8005444 <MX_USB_Device_Init+0x40>)
 800540a:	480f      	ldr	r0, [pc, #60]	; (8005448 <MX_USB_Device_Init+0x44>)
 800540c:	f7ff f83d 	bl	800448a <USBD_Init>
 8005410:	b108      	cbz	r0, 8005416 <MX_USB_Device_Init+0x12>
    Error_Handler();
 8005412:	f7ff fde8 	bl	8004fe6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8005416:	490d      	ldr	r1, [pc, #52]	; (800544c <MX_USB_Device_Init+0x48>)
 8005418:	480b      	ldr	r0, [pc, #44]	; (8005448 <MX_USB_Device_Init+0x44>)
 800541a:	f7ff f84b 	bl	80044b4 <USBD_RegisterClass>
 800541e:	b108      	cbz	r0, 8005424 <MX_USB_Device_Init+0x20>
    Error_Handler();
 8005420:	f7ff fde1 	bl	8004fe6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8005424:	490a      	ldr	r1, [pc, #40]	; (8005450 <MX_USB_Device_Init+0x4c>)
 8005426:	4808      	ldr	r0, [pc, #32]	; (8005448 <MX_USB_Device_Init+0x44>)
 8005428:	f7ff f807 	bl	800443a <USBD_CDC_RegisterInterface>
 800542c:	b108      	cbz	r0, 8005432 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800542e:	f7ff fdda 	bl	8004fe6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8005432:	4805      	ldr	r0, [pc, #20]	; (8005448 <MX_USB_Device_Init+0x44>)
 8005434:	f7ff f845 	bl	80044c2 <USBD_Start>
 8005438:	b118      	cbz	r0, 8005442 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800543a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800543e:	f7ff bdd2 	b.w	8004fe6 <Error_Handler>
 8005442:	bd08      	pop	{r3, pc}
 8005444:	20000130 	.word	0x20000130
 8005448:	2000073c 	.word	0x2000073c
 800544c:	2000000c 	.word	0x2000000c
 8005450:	20000120 	.word	0x20000120

08005454 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005454:	2000      	movs	r0, #0
 8005456:	4770      	bx	lr

08005458 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005458:	2000      	movs	r0, #0
 800545a:	4770      	bx	lr

0800545c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800545c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800545e:	4c05      	ldr	r4, [pc, #20]	; (8005474 <CDC_Receive_FS+0x18>)
 8005460:	4601      	mov	r1, r0
 8005462:	4620      	mov	r0, r4
 8005464:	f7fe fff8 	bl	8004458 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005468:	4620      	mov	r0, r4
 800546a:	f7fe fffb 	bl	8004464 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800546e:	2000      	movs	r0, #0
 8005470:	bd10      	pop	{r4, pc}
 8005472:	bf00      	nop
 8005474:	2000073c 	.word	0x2000073c

08005478 <CDC_Init_FS>:
{
 8005478:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800547a:	4c06      	ldr	r4, [pc, #24]	; (8005494 <CDC_Init_FS+0x1c>)
 800547c:	4906      	ldr	r1, [pc, #24]	; (8005498 <CDC_Init_FS+0x20>)
 800547e:	2200      	movs	r2, #0
 8005480:	4620      	mov	r0, r4
 8005482:	f7fe ffe1 	bl	8004448 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005486:	4905      	ldr	r1, [pc, #20]	; (800549c <CDC_Init_FS+0x24>)
 8005488:	4620      	mov	r0, r4
 800548a:	f7fe ffe5 	bl	8004458 <USBD_CDC_SetRxBuffer>
}
 800548e:	2000      	movs	r0, #0
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	2000073c 	.word	0x2000073c
 8005498:	20001200 	.word	0x20001200
 800549c:	20000a00 	.word	0x20000a00

080054a0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80054a0:	b510      	push	{r4, lr}
 80054a2:	4604      	mov	r4, r0
 80054a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a6:	2214      	movs	r2, #20
 80054a8:	2100      	movs	r1, #0
 80054aa:	a803      	add	r0, sp, #12
 80054ac:	f000 fa50 	bl	8005950 <memset>
  if(pcdHandle->Instance==USB)
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <HAL_PCD_MspInit+0x6c>)
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d127      	bne.n	8005508 <HAL_PCD_MspInit+0x68>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80054b8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054bc:	a903      	add	r1, sp, #12
 80054be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80054c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80054ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80054d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80054d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d6:	2302      	movs	r3, #2
 80054d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80054de:	230a      	movs	r3, #10
 80054e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e2:	f7fb fa47 	bl	8000974 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80054e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ec:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80054ee:	6da3      	ldr	r3, [r4, #88]	; 0x58

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80054f0:	2200      	movs	r2, #0
 80054f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	2014      	movs	r0, #20
 80054fa:	4611      	mov	r1, r2
  (void)tmpreg;
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	f7fb f891 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8005502:	2014      	movs	r0, #20
 8005504:	f7fb f8c2 	bl	800068c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005508:	b008      	add	sp, #32
 800550a:	bd10      	pop	{r4, pc}
 800550c:	40006800 	.word	0x40006800

08005510 <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8005510:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8005514:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005518:	f7fe bfea 	b.w	80044f0 <USBD_LL_SetupStage>

0800551c <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800551c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005520:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005524:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8005528:	f7ff b80f 	b.w	800454a <USBD_LL_DataOutStage>

0800552c <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800552c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8005530:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005536:	f7ff b842 	b.w	80045be <USBD_LL_DataInStage>

0800553a <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800553a:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 800553e:	f7ff b8d7 	b.w	80046f0 <USBD_LL_SOF>

08005542 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005542:	6883      	ldr	r3, [r0, #8]
 8005544:	2b02      	cmp	r3, #2
{ 
 8005546:	b510      	push	{r4, lr}
 8005548:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800554a:	d001      	beq.n	8005550 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800554c:	f7ff fd4b 	bl	8004fe6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005550:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
 8005554:	2101      	movs	r1, #1
 8005556:	f7ff f8b5 	bl	80046c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800555a:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800555e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005562:	f7ff b888 	b.w	8004676 <USBD_LL_Reset>
	...

08005568 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005568:	b510      	push	{r4, lr}
 800556a:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800556c:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005570:	f7ff f8ab 	bl	80046ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005574:	69a3      	ldr	r3, [r4, #24]
 8005576:	b123      	cbz	r3, 8005582 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005578:	4a02      	ldr	r2, [pc, #8]	; (8005584 <HAL_PCD_SuspendCallback+0x1c>)
 800557a:	6913      	ldr	r3, [r2, #16]
 800557c:	f043 0306 	orr.w	r3, r3, #6
 8005580:	6113      	str	r3, [r2, #16]
 8005582:	bd10      	pop	{r4, pc}
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005588:	6983      	ldr	r3, [r0, #24]
{
 800558a:	b510      	push	{r4, lr}
 800558c:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800558e:	b133      	cbz	r3, 800559e <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005590:	4a06      	ldr	r2, [pc, #24]	; (80055ac <HAL_PCD_ResumeCallback+0x24>)
 8005592:	6913      	ldr	r3, [r2, #16]
 8005594:	f023 0306 	bic.w	r3, r3, #6
 8005598:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800559a:	f7ff fbb1 	bl	8004d00 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800559e:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 80055a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80055a6:	f7ff b899 	b.w	80046dc <USBD_LL_Resume>
 80055aa:	bf00      	nop
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <USBD_LL_Init>:
{
 80055b0:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 80055b2:	4c20      	ldr	r4, [pc, #128]	; (8005634 <USBD_LL_Init+0x84>)
  pdev->pData = &hpcd_USB_FS;
 80055b4:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
{
 80055b8:	4605      	mov	r5, r0
  hpcd_USB_FS.pData = pdev;
 80055ba:	f8c4 0270 	str.w	r0, [r4, #624]	; 0x270
  HAL_PWREx_EnableVddUSB();
 80055be:	f7fc fa01 	bl	80019c4 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80055c2:	481d      	ldr	r0, [pc, #116]	; (8005638 <USBD_LL_Init+0x88>)
 80055c4:	2308      	movs	r3, #8
 80055c6:	e884 0009 	stmia.w	r4, {r0, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80055ca:	2302      	movs	r3, #2
 80055cc:	60a3      	str	r3, [r4, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80055ce:	6123      	str	r3, [r4, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80055d0:	4620      	mov	r0, r4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	6163      	str	r3, [r4, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80055d6:	61a3      	str	r3, [r4, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80055d8:	61e3      	str	r3, [r4, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80055da:	6223      	str	r3, [r4, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80055dc:	f7fb fdd4 	bl	8001188 <HAL_PCD_Init>
 80055e0:	b108      	cbz	r0, 80055e6 <USBD_LL_Init+0x36>
    Error_Handler( );
 80055e2:	f7ff fd00 	bl	8004fe6 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80055e6:	2200      	movs	r2, #0
 80055e8:	4611      	mov	r1, r2
 80055ea:	2318      	movs	r3, #24
 80055ec:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 80055f0:	f7fc f9a9 	bl	8001946 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80055f4:	2358      	movs	r3, #88	; 0x58
 80055f6:	2200      	movs	r2, #0
 80055f8:	2180      	movs	r1, #128	; 0x80
 80055fa:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 80055fe:	f7fc f9a2 	bl	8001946 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005602:	23c0      	movs	r3, #192	; 0xc0
 8005604:	2200      	movs	r2, #0
 8005606:	2181      	movs	r1, #129	; 0x81
 8005608:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800560c:	f7fc f99b 	bl	8001946 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005610:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005614:	2200      	movs	r2, #0
 8005616:	2101      	movs	r1, #1
 8005618:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800561c:	f7fc f993 	bl	8001946 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005624:	2200      	movs	r2, #0
 8005626:	2182      	movs	r1, #130	; 0x82
 8005628:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800562c:	f7fc f98b 	bl	8001946 <HAL_PCDEx_PMAConfig>
}
 8005630:	2000      	movs	r0, #0
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20001a00 	.word	0x20001a00
 8005638:	40006800 	.word	0x40006800

0800563c <USBD_LL_Start>:
{
 800563c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800563e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005642:	f7fb fe01 	bl	8001248 <HAL_PCD_Start>
 8005646:	2803      	cmp	r0, #3
 8005648:	bf9a      	itte	ls
 800564a:	4b02      	ldrls	r3, [pc, #8]	; (8005654 <USBD_LL_Start+0x18>)
 800564c:	5c18      	ldrbls	r0, [r3, r0]
 800564e:	2002      	movhi	r0, #2
}
 8005650:	bd08      	pop	{r3, pc}
 8005652:	bf00      	nop
 8005654:	080069a4 	.word	0x080069a4

08005658 <USBD_LL_OpenEP>:
{
 8005658:	b510      	push	{r4, lr}
 800565a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800565c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005660:	4613      	mov	r3, r2
 8005662:	4622      	mov	r2, r4
 8005664:	f7fb fe19 	bl	800129a <HAL_PCD_EP_Open>
 8005668:	2803      	cmp	r0, #3
 800566a:	bf9a      	itte	ls
 800566c:	4b01      	ldrls	r3, [pc, #4]	; (8005674 <USBD_LL_OpenEP+0x1c>)
 800566e:	5c18      	ldrbls	r0, [r3, r0]
 8005670:	2002      	movhi	r0, #2
}
 8005672:	bd10      	pop	{r4, pc}
 8005674:	080069a4 	.word	0x080069a4

08005678 <USBD_LL_CloseEP>:
{
 8005678:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800567a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800567e:	f7fb fe41 	bl	8001304 <HAL_PCD_EP_Close>
 8005682:	2803      	cmp	r0, #3
 8005684:	bf9a      	itte	ls
 8005686:	4b02      	ldrls	r3, [pc, #8]	; (8005690 <USBD_LL_CloseEP+0x18>)
 8005688:	5c18      	ldrbls	r0, [r3, r0]
 800568a:	2002      	movhi	r0, #2
}
 800568c:	bd08      	pop	{r3, pc}
 800568e:	bf00      	nop
 8005690:	080069a4 	.word	0x080069a4

08005694 <USBD_LL_StallEP>:
{
 8005694:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005696:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800569a:	f7fc f8e5 	bl	8001868 <HAL_PCD_EP_SetStall>
 800569e:	2803      	cmp	r0, #3
 80056a0:	bf9a      	itte	ls
 80056a2:	4b02      	ldrls	r3, [pc, #8]	; (80056ac <USBD_LL_StallEP+0x18>)
 80056a4:	5c18      	ldrbls	r0, [r3, r0]
 80056a6:	2002      	movhi	r0, #2
}
 80056a8:	bd08      	pop	{r3, pc}
 80056aa:	bf00      	nop
 80056ac:	080069a4 	.word	0x080069a4

080056b0 <USBD_LL_ClearStallEP>:
{
 80056b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80056b2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80056b6:	f7fc f910 	bl	80018da <HAL_PCD_EP_ClrStall>
 80056ba:	2803      	cmp	r0, #3
 80056bc:	bf9a      	itte	ls
 80056be:	4b02      	ldrls	r3, [pc, #8]	; (80056c8 <USBD_LL_ClearStallEP+0x18>)
 80056c0:	5c18      	ldrbls	r0, [r3, r0]
 80056c2:	2002      	movhi	r0, #2
}
 80056c4:	bd08      	pop	{r3, pc}
 80056c6:	bf00      	nop
 80056c8:	080069a4 	.word	0x080069a4

080056cc <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80056cc:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80056ce:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80056d2:	bf45      	ittet	mi
 80056d4:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80056d8:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80056dc:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80056e0:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80056e4:	bf58      	it	pl
 80056e6:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
}
 80056ea:	4770      	bx	lr

080056ec <USBD_LL_SetUSBAddress>:
{
 80056ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80056ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80056f2:	f7fb fdbe 	bl	8001272 <HAL_PCD_SetAddress>
 80056f6:	2803      	cmp	r0, #3
 80056f8:	bf9a      	itte	ls
 80056fa:	4b02      	ldrls	r3, [pc, #8]	; (8005704 <USBD_LL_SetUSBAddress+0x18>)
 80056fc:	5c18      	ldrbls	r0, [r3, r0]
 80056fe:	2002      	movhi	r0, #2
}
 8005700:	bd08      	pop	{r3, pc}
 8005702:	bf00      	nop
 8005704:	080069a4 	.word	0x080069a4

08005708 <USBD_LL_Transmit>:
{
 8005708:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800570a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800570e:	f7fb fe44 	bl	800139a <HAL_PCD_EP_Transmit>
 8005712:	2803      	cmp	r0, #3
 8005714:	bf9a      	itte	ls
 8005716:	4b02      	ldrls	r3, [pc, #8]	; (8005720 <USBD_LL_Transmit+0x18>)
 8005718:	5c18      	ldrbls	r0, [r3, r0]
 800571a:	2002      	movhi	r0, #2
}
 800571c:	bd08      	pop	{r3, pc}
 800571e:	bf00      	nop
 8005720:	080069a4 	.word	0x080069a4

08005724 <USBD_LL_PrepareReceive>:
{
 8005724:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005726:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800572a:	f7fb fe16 	bl	800135a <HAL_PCD_EP_Receive>
 800572e:	2803      	cmp	r0, #3
 8005730:	bf9a      	itte	ls
 8005732:	4b02      	ldrls	r3, [pc, #8]	; (800573c <USBD_LL_PrepareReceive+0x18>)
 8005734:	5c18      	ldrbls	r0, [r3, r0]
 8005736:	2002      	movhi	r0, #2
}
 8005738:	bd08      	pop	{r3, pc}
 800573a:	bf00      	nop
 800573c:	080069a4 	.word	0x080069a4

08005740 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005740:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005744:	f7fb be22 	b.w	800138c <HAL_PCD_EP_GetRxCount>

08005748 <HAL_PCDEx_LPM_Callback>:
{
 8005748:	b510      	push	{r4, lr}
 800574a:	4604      	mov	r4, r0
  switch (msg)
 800574c:	b111      	cbz	r1, 8005754 <HAL_PCDEx_LPM_Callback+0xc>
 800574e:	2901      	cmp	r1, #1
 8005750:	d00f      	beq.n	8005772 <HAL_PCDEx_LPM_Callback+0x2a>
 8005752:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8005754:	6983      	ldr	r3, [r0, #24]
 8005756:	b133      	cbz	r3, 8005766 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8005758:	f7ff fad2 	bl	8004d00 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800575c:	4a0b      	ldr	r2, [pc, #44]	; (800578c <HAL_PCDEx_LPM_Callback+0x44>)
 800575e:	6913      	ldr	r3, [r2, #16]
 8005760:	f023 0306 	bic.w	r3, r3, #6
 8005764:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8005766:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 800576a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800576e:	f7fe bfb5 	b.w	80046dc <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8005772:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005776:	f7fe ffa8 	bl	80046ca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800577a:	69a3      	ldr	r3, [r4, #24]
 800577c:	b123      	cbz	r3, 8005788 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800577e:	4a03      	ldr	r2, [pc, #12]	; (800578c <HAL_PCDEx_LPM_Callback+0x44>)
 8005780:	6913      	ldr	r3, [r2, #16]
 8005782:	f043 0306 	orr.w	r3, r3, #6
 8005786:	6113      	str	r3, [r2, #16]
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <USBD_static_malloc>:
}
 8005790:	4800      	ldr	r0, [pc, #0]	; (8005794 <USBD_static_malloc+0x4>)
 8005792:	4770      	bx	lr
 8005794:	2000020c 	.word	0x2000020c

08005798 <USBD_static_free>:
{
 8005798:	4770      	bx	lr
	...

0800579c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800579c:	2312      	movs	r3, #18
 800579e:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 80057a0:	4800      	ldr	r0, [pc, #0]	; (80057a4 <USBD_CDC_DeviceDescriptor+0x8>)
 80057a2:	4770      	bx	lr
 80057a4:	20000150 	.word	0x20000150

080057a8 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80057a8:	2304      	movs	r3, #4
 80057aa:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80057ac:	4800      	ldr	r0, [pc, #0]	; (80057b0 <USBD_CDC_LangIDStrDescriptor+0x8>)
 80057ae:	4770      	bx	lr
 80057b0:	20000164 	.word	0x20000164

080057b4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80057b4:	2300      	movs	r3, #0
{
 80057b6:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80057b8:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 80057ba:	b2dc      	uxtb	r4, r3
 80057bc:	42a2      	cmp	r2, r4
 80057be:	d800      	bhi.n	80057c2 <IntToUnicode+0xe>
  }
}
 80057c0:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 80057c2:	0f04      	lsrs	r4, r0, #28
 80057c4:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80057c6:	bf94      	ite	ls
 80057c8:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057ca:	3437      	addhi	r4, #55	; 0x37
 80057cc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80057d0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80057d4:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 80057d6:	7065      	strb	r5, [r4, #1]
 80057d8:	3301      	adds	r3, #1
 80057da:	e7ee      	b.n	80057ba <IntToUnicode+0x6>

080057dc <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80057dc:	231a      	movs	r3, #26
{
 80057de:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80057e0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <USBD_CDC_SerialStrDescriptor+0x2c>)
 80057e4:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80057e6:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80057e8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80057ea:	18c0      	adds	r0, r0, r3
 80057ec:	d00a      	beq.n	8005804 <USBD_CDC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <USBD_CDC_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80057f0:	4907      	ldr	r1, [pc, #28]	; (8005810 <USBD_CDC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80057f2:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80057f4:	2208      	movs	r2, #8
 80057f6:	f7ff ffdd 	bl	80057b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80057fa:	2204      	movs	r2, #4
 80057fc:	4905      	ldr	r1, [pc, #20]	; (8005814 <USBD_CDC_SerialStrDescriptor+0x38>)
 80057fe:	4620      	mov	r0, r4
 8005800:	f7ff ffd8 	bl	80057b4 <IntToUnicode>
}
 8005804:	4804      	ldr	r0, [pc, #16]	; (8005818 <USBD_CDC_SerialStrDescriptor+0x3c>)
 8005806:	bd10      	pop	{r4, pc}
 8005808:	1fff7590 	.word	0x1fff7590
 800580c:	1fff7594 	.word	0x1fff7594
 8005810:	2000016a 	.word	0x2000016a
 8005814:	2000017a 	.word	0x2000017a
 8005818:	20000168 	.word	0x20000168

0800581c <USBD_CDC_ManufacturerStrDescriptor>:
{
 800581c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800581e:	4c04      	ldr	r4, [pc, #16]	; (8005830 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8005820:	4804      	ldr	r0, [pc, #16]	; (8005834 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 8005822:	460a      	mov	r2, r1
 8005824:	4621      	mov	r1, r4
 8005826:	f7ff f973 	bl	8004b10 <USBD_GetString>
}
 800582a:	4620      	mov	r0, r4
 800582c:	bd10      	pop	{r4, pc}
 800582e:	bf00      	nop
 8005830:	20001c74 	.word	0x20001c74
 8005834:	080069c1 	.word	0x080069c1

08005838 <USBD_CDC_ProductStrDescriptor>:
{
 8005838:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800583a:	4c04      	ldr	r4, [pc, #16]	; (800584c <USBD_CDC_ProductStrDescriptor+0x14>)
 800583c:	4804      	ldr	r0, [pc, #16]	; (8005850 <USBD_CDC_ProductStrDescriptor+0x18>)
 800583e:	460a      	mov	r2, r1
 8005840:	4621      	mov	r1, r4
 8005842:	f7ff f965 	bl	8004b10 <USBD_GetString>
}
 8005846:	4620      	mov	r0, r4
 8005848:	bd10      	pop	{r4, pc}
 800584a:	bf00      	nop
 800584c:	20001c74 	.word	0x20001c74
 8005850:	080069d4 	.word	0x080069d4

08005854 <USBD_CDC_ConfigStrDescriptor>:
{
 8005854:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005856:	4c04      	ldr	r4, [pc, #16]	; (8005868 <USBD_CDC_ConfigStrDescriptor+0x14>)
 8005858:	4804      	ldr	r0, [pc, #16]	; (800586c <USBD_CDC_ConfigStrDescriptor+0x18>)
 800585a:	460a      	mov	r2, r1
 800585c:	4621      	mov	r1, r4
 800585e:	f7ff f957 	bl	8004b10 <USBD_GetString>
}
 8005862:	4620      	mov	r0, r4
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	20001c74 	.word	0x20001c74
 800586c:	080069a8 	.word	0x080069a8

08005870 <USBD_CDC_InterfaceStrDescriptor>:
{
 8005870:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005872:	4c04      	ldr	r4, [pc, #16]	; (8005884 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8005874:	4804      	ldr	r0, [pc, #16]	; (8005888 <USBD_CDC_InterfaceStrDescriptor+0x18>)
 8005876:	460a      	mov	r2, r1
 8005878:	4621      	mov	r1, r4
 800587a:	f7ff f949 	bl	8004b10 <USBD_GetString>
}
 800587e:	4620      	mov	r0, r4
 8005880:	bd10      	pop	{r4, pc}
 8005882:	bf00      	nop
 8005884:	20001c74 	.word	0x20001c74
 8005888:	080069b3 	.word	0x080069b3

0800588c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800588c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800588e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005890:	3304      	adds	r3, #4

08005892 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005892:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005894:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005896:	d3f9      	bcc.n	800588c <CopyDataInit>
  bx lr
 8005898:	4770      	bx	lr

0800589a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800589a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800589c:	3004      	adds	r0, #4

0800589e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800589e:	4288      	cmp	r0, r1
  bcc FillZerobss
 80058a0:	d3fb      	bcc.n	800589a <FillZerobss>
  bx lr
 80058a2:	4770      	bx	lr

080058a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80058a4:	480c      	ldr	r0, [pc, #48]	; (80058d8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80058a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80058a8:	480c      	ldr	r0, [pc, #48]	; (80058dc <LoopForever+0x8>)
 80058aa:	490d      	ldr	r1, [pc, #52]	; (80058e0 <LoopForever+0xc>)
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <LoopForever+0x10>)
 80058ae:	2300      	movs	r3, #0
 80058b0:	f7ff ffef 	bl	8005892 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80058b4:	480c      	ldr	r0, [pc, #48]	; (80058e8 <LoopForever+0x14>)
 80058b6:	490d      	ldr	r1, [pc, #52]	; (80058ec <LoopForever+0x18>)
 80058b8:	2300      	movs	r3, #0
 80058ba:	f7ff fff0 	bl	800589e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80058be:	480c      	ldr	r0, [pc, #48]	; (80058f0 <LoopForever+0x1c>)
 80058c0:	490c      	ldr	r1, [pc, #48]	; (80058f4 <LoopForever+0x20>)
 80058c2:	2300      	movs	r3, #0
 80058c4:	f7ff ffeb 	bl	800589e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80058c8:	f7ff fd12 	bl	80052f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80058cc:	f000 f81c 	bl	8005908 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80058d0:	f7ff fa8a 	bl	8004de8 <main>

080058d4 <LoopForever>:

LoopForever:
  b LoopForever
 80058d4:	e7fe      	b.n	80058d4 <LoopForever>
 80058d6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80058d8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80058dc:	20000004 	.word	0x20000004
 80058e0:	200001e8 	.word	0x200001e8
 80058e4:	08006a94 	.word	0x08006a94
  INIT_BSS _sbss, _ebss
 80058e8:	200001e8 	.word	0x200001e8
 80058ec:	20001e78 	.word	0x20001e78
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80058f0:	20030000 	.word	0x20030000
 80058f4:	20030000 	.word	0x20030000

080058f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058f8:	e7fe      	b.n	80058f8 <ADC1_IRQHandler>
	...

080058fc <__errno>:
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <__errno+0x8>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20000184 	.word	0x20000184

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4e0d      	ldr	r6, [pc, #52]	; (8005940 <__libc_init_array+0x38>)
 800590c:	4c0d      	ldr	r4, [pc, #52]	; (8005944 <__libc_init_array+0x3c>)
 800590e:	1ba4      	subs	r4, r4, r6
 8005910:	10a4      	asrs	r4, r4, #2
 8005912:	2500      	movs	r5, #0
 8005914:	42a5      	cmp	r5, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	4e0b      	ldr	r6, [pc, #44]	; (8005948 <__libc_init_array+0x40>)
 800591a:	4c0c      	ldr	r4, [pc, #48]	; (800594c <__libc_init_array+0x44>)
 800591c:	f000 ff7c 	bl	8006818 <_init>
 8005920:	1ba4      	subs	r4, r4, r6
 8005922:	10a4      	asrs	r4, r4, #2
 8005924:	2500      	movs	r5, #0
 8005926:	42a5      	cmp	r5, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005930:	4798      	blx	r3
 8005932:	3501      	adds	r5, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800593a:	4798      	blx	r3
 800593c:	3501      	adds	r5, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	08006a8c 	.word	0x08006a8c
 8005944:	08006a8c 	.word	0x08006a8c
 8005948:	08006a8c 	.word	0x08006a8c
 800594c:	08006a90 	.word	0x08006a90

08005950 <memset>:
 8005950:	4402      	add	r2, r0
 8005952:	4603      	mov	r3, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <iprintf>:
 8005960:	b40f      	push	{r0, r1, r2, r3}
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <iprintf+0x2c>)
 8005964:	b513      	push	{r0, r1, r4, lr}
 8005966:	681c      	ldr	r4, [r3, #0]
 8005968:	b124      	cbz	r4, 8005974 <iprintf+0x14>
 800596a:	69a3      	ldr	r3, [r4, #24]
 800596c:	b913      	cbnz	r3, 8005974 <iprintf+0x14>
 800596e:	4620      	mov	r0, r4
 8005970:	f000 fa24 	bl	8005dbc <__sinit>
 8005974:	ab05      	add	r3, sp, #20
 8005976:	9a04      	ldr	r2, [sp, #16]
 8005978:	68a1      	ldr	r1, [r4, #8]
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	4620      	mov	r0, r4
 800597e:	f000 fbe1 	bl	8006144 <_vfiprintf_r>
 8005982:	b002      	add	sp, #8
 8005984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr
 800598c:	20000184 	.word	0x20000184

08005990 <_puts_r>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	460e      	mov	r6, r1
 8005994:	4605      	mov	r5, r0
 8005996:	b118      	cbz	r0, 80059a0 <_puts_r+0x10>
 8005998:	6983      	ldr	r3, [r0, #24]
 800599a:	b90b      	cbnz	r3, 80059a0 <_puts_r+0x10>
 800599c:	f000 fa0e 	bl	8005dbc <__sinit>
 80059a0:	69ab      	ldr	r3, [r5, #24]
 80059a2:	68ac      	ldr	r4, [r5, #8]
 80059a4:	b913      	cbnz	r3, 80059ac <_puts_r+0x1c>
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 fa08 	bl	8005dbc <__sinit>
 80059ac:	4b23      	ldr	r3, [pc, #140]	; (8005a3c <_puts_r+0xac>)
 80059ae:	429c      	cmp	r4, r3
 80059b0:	d117      	bne.n	80059e2 <_puts_r+0x52>
 80059b2:	686c      	ldr	r4, [r5, #4]
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	071b      	lsls	r3, r3, #28
 80059b8:	d51d      	bpl.n	80059f6 <_puts_r+0x66>
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	b1db      	cbz	r3, 80059f6 <_puts_r+0x66>
 80059be:	3e01      	subs	r6, #1
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059c6:	3b01      	subs	r3, #1
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	b9e9      	cbnz	r1, 8005a08 <_puts_r+0x78>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da2e      	bge.n	8005a2e <_puts_r+0x9e>
 80059d0:	4622      	mov	r2, r4
 80059d2:	210a      	movs	r1, #10
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f83f 	bl	8005a58 <__swbuf_r>
 80059da:	3001      	adds	r0, #1
 80059dc:	d011      	beq.n	8005a02 <_puts_r+0x72>
 80059de:	200a      	movs	r0, #10
 80059e0:	bd70      	pop	{r4, r5, r6, pc}
 80059e2:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <_puts_r+0xb0>)
 80059e4:	429c      	cmp	r4, r3
 80059e6:	d101      	bne.n	80059ec <_puts_r+0x5c>
 80059e8:	68ac      	ldr	r4, [r5, #8]
 80059ea:	e7e3      	b.n	80059b4 <_puts_r+0x24>
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <_puts_r+0xb4>)
 80059ee:	429c      	cmp	r4, r3
 80059f0:	bf08      	it	eq
 80059f2:	68ec      	ldreq	r4, [r5, #12]
 80059f4:	e7de      	b.n	80059b4 <_puts_r+0x24>
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 f87f 	bl	8005afc <__swsetup_r>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0dd      	beq.n	80059be <_puts_r+0x2e>
 8005a02:	f04f 30ff 	mov.w	r0, #4294967295
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	da04      	bge.n	8005a16 <_puts_r+0x86>
 8005a0c:	69a2      	ldr	r2, [r4, #24]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	db06      	blt.n	8005a20 <_puts_r+0x90>
 8005a12:	290a      	cmp	r1, #10
 8005a14:	d004      	beq.n	8005a20 <_puts_r+0x90>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	6022      	str	r2, [r4, #0]
 8005a1c:	7019      	strb	r1, [r3, #0]
 8005a1e:	e7cf      	b.n	80059c0 <_puts_r+0x30>
 8005a20:	4622      	mov	r2, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 f818 	bl	8005a58 <__swbuf_r>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d1c9      	bne.n	80059c0 <_puts_r+0x30>
 8005a2c:	e7e9      	b.n	8005a02 <_puts_r+0x72>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	200a      	movs	r0, #10
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	6022      	str	r2, [r4, #0]
 8005a36:	7018      	strb	r0, [r3, #0]
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	bf00      	nop
 8005a3c:	08006a10 	.word	0x08006a10
 8005a40:	08006a30 	.word	0x08006a30
 8005a44:	080069f0 	.word	0x080069f0

08005a48 <puts>:
 8005a48:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <puts+0xc>)
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	f7ff bf9f 	b.w	8005990 <_puts_r>
 8005a52:	bf00      	nop
 8005a54:	20000184 	.word	0x20000184

08005a58 <__swbuf_r>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	460e      	mov	r6, r1
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	4605      	mov	r5, r0
 8005a60:	b118      	cbz	r0, 8005a6a <__swbuf_r+0x12>
 8005a62:	6983      	ldr	r3, [r0, #24]
 8005a64:	b90b      	cbnz	r3, 8005a6a <__swbuf_r+0x12>
 8005a66:	f000 f9a9 	bl	8005dbc <__sinit>
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <__swbuf_r+0x98>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d12a      	bne.n	8005ac6 <__swbuf_r+0x6e>
 8005a70:	686c      	ldr	r4, [r5, #4]
 8005a72:	69a3      	ldr	r3, [r4, #24]
 8005a74:	60a3      	str	r3, [r4, #8]
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	071a      	lsls	r2, r3, #28
 8005a7a:	d52e      	bpl.n	8005ada <__swbuf_r+0x82>
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	b363      	cbz	r3, 8005ada <__swbuf_r+0x82>
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	1ac0      	subs	r0, r0, r3
 8005a86:	6963      	ldr	r3, [r4, #20]
 8005a88:	b2f6      	uxtb	r6, r6
 8005a8a:	4298      	cmp	r0, r3
 8005a8c:	4637      	mov	r7, r6
 8005a8e:	db04      	blt.n	8005a9a <__swbuf_r+0x42>
 8005a90:	4621      	mov	r1, r4
 8005a92:	4628      	mov	r0, r5
 8005a94:	f000 f928 	bl	8005ce8 <_fflush_r>
 8005a98:	bb28      	cbnz	r0, 8005ae6 <__swbuf_r+0x8e>
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	60a3      	str	r3, [r4, #8]
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	6022      	str	r2, [r4, #0]
 8005aa6:	701e      	strb	r6, [r3, #0]
 8005aa8:	6963      	ldr	r3, [r4, #20]
 8005aaa:	3001      	adds	r0, #1
 8005aac:	4298      	cmp	r0, r3
 8005aae:	d004      	beq.n	8005aba <__swbuf_r+0x62>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	07db      	lsls	r3, r3, #31
 8005ab4:	d519      	bpl.n	8005aea <__swbuf_r+0x92>
 8005ab6:	2e0a      	cmp	r6, #10
 8005ab8:	d117      	bne.n	8005aea <__swbuf_r+0x92>
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f913 	bl	8005ce8 <_fflush_r>
 8005ac2:	b190      	cbz	r0, 8005aea <__swbuf_r+0x92>
 8005ac4:	e00f      	b.n	8005ae6 <__swbuf_r+0x8e>
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <__swbuf_r+0x9c>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	d101      	bne.n	8005ad0 <__swbuf_r+0x78>
 8005acc:	68ac      	ldr	r4, [r5, #8]
 8005ace:	e7d0      	b.n	8005a72 <__swbuf_r+0x1a>
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <__swbuf_r+0xa0>)
 8005ad2:	429c      	cmp	r4, r3
 8005ad4:	bf08      	it	eq
 8005ad6:	68ec      	ldreq	r4, [r5, #12]
 8005ad8:	e7cb      	b.n	8005a72 <__swbuf_r+0x1a>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f80d 	bl	8005afc <__swsetup_r>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d0cc      	beq.n	8005a80 <__swbuf_r+0x28>
 8005ae6:	f04f 37ff 	mov.w	r7, #4294967295
 8005aea:	4638      	mov	r0, r7
 8005aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aee:	bf00      	nop
 8005af0:	08006a10 	.word	0x08006a10
 8005af4:	08006a30 	.word	0x08006a30
 8005af8:	080069f0 	.word	0x080069f0

08005afc <__swsetup_r>:
 8005afc:	4b32      	ldr	r3, [pc, #200]	; (8005bc8 <__swsetup_r+0xcc>)
 8005afe:	b570      	push	{r4, r5, r6, lr}
 8005b00:	681d      	ldr	r5, [r3, #0]
 8005b02:	4606      	mov	r6, r0
 8005b04:	460c      	mov	r4, r1
 8005b06:	b125      	cbz	r5, 8005b12 <__swsetup_r+0x16>
 8005b08:	69ab      	ldr	r3, [r5, #24]
 8005b0a:	b913      	cbnz	r3, 8005b12 <__swsetup_r+0x16>
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	f000 f955 	bl	8005dbc <__sinit>
 8005b12:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <__swsetup_r+0xd0>)
 8005b14:	429c      	cmp	r4, r3
 8005b16:	d10f      	bne.n	8005b38 <__swsetup_r+0x3c>
 8005b18:	686c      	ldr	r4, [r5, #4]
 8005b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	0715      	lsls	r5, r2, #28
 8005b22:	d42c      	bmi.n	8005b7e <__swsetup_r+0x82>
 8005b24:	06d0      	lsls	r0, r2, #27
 8005b26:	d411      	bmi.n	8005b4c <__swsetup_r+0x50>
 8005b28:	2209      	movs	r2, #9
 8005b2a:	6032      	str	r2, [r6, #0]
 8005b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <__swsetup_r+0xd4>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d101      	bne.n	8005b42 <__swsetup_r+0x46>
 8005b3e:	68ac      	ldr	r4, [r5, #8]
 8005b40:	e7eb      	b.n	8005b1a <__swsetup_r+0x1e>
 8005b42:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <__swsetup_r+0xd8>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	bf08      	it	eq
 8005b48:	68ec      	ldreq	r4, [r5, #12]
 8005b4a:	e7e6      	b.n	8005b1a <__swsetup_r+0x1e>
 8005b4c:	0751      	lsls	r1, r2, #29
 8005b4e:	d512      	bpl.n	8005b76 <__swsetup_r+0x7a>
 8005b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b52:	b141      	cbz	r1, 8005b66 <__swsetup_r+0x6a>
 8005b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	d002      	beq.n	8005b62 <__swsetup_r+0x66>
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	f000 fa1b 	bl	8005f98 <_free_r>
 8005b62:	2300      	movs	r3, #0
 8005b64:	6363      	str	r3, [r4, #52]	; 0x34
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6063      	str	r3, [r4, #4]
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f043 0308 	orr.w	r3, r3, #8
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	b94b      	cbnz	r3, 8005b96 <__swsetup_r+0x9a>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b8c:	d003      	beq.n	8005b96 <__swsetup_r+0x9a>
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4630      	mov	r0, r6
 8005b92:	f000 f9c1 	bl	8005f18 <__smakebuf_r>
 8005b96:	89a2      	ldrh	r2, [r4, #12]
 8005b98:	f012 0301 	ands.w	r3, r2, #1
 8005b9c:	d00c      	beq.n	8005bb8 <__swsetup_r+0xbc>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	6963      	ldr	r3, [r4, #20]
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	61a3      	str	r3, [r4, #24]
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	b953      	cbnz	r3, 8005bc2 <__swsetup_r+0xc6>
 8005bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005bb4:	d1ba      	bne.n	8005b2c <__swsetup_r+0x30>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	0792      	lsls	r2, r2, #30
 8005bba:	bf58      	it	pl
 8005bbc:	6963      	ldrpl	r3, [r4, #20]
 8005bbe:	60a3      	str	r3, [r4, #8]
 8005bc0:	e7f2      	b.n	8005ba8 <__swsetup_r+0xac>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e7f7      	b.n	8005bb6 <__swsetup_r+0xba>
 8005bc6:	bf00      	nop
 8005bc8:	20000184 	.word	0x20000184
 8005bcc:	08006a10 	.word	0x08006a10
 8005bd0:	08006a30 	.word	0x08006a30
 8005bd4:	080069f0 	.word	0x080069f0

08005bd8 <__sflush_r>:
 8005bd8:	898a      	ldrh	r2, [r1, #12]
 8005bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	4605      	mov	r5, r0
 8005be0:	0710      	lsls	r0, r2, #28
 8005be2:	460c      	mov	r4, r1
 8005be4:	d45a      	bmi.n	8005c9c <__sflush_r+0xc4>
 8005be6:	684b      	ldr	r3, [r1, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dc05      	bgt.n	8005bf8 <__sflush_r+0x20>
 8005bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dc02      	bgt.n	8005bf8 <__sflush_r+0x20>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	d0f9      	beq.n	8005bf2 <__sflush_r+0x1a>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c04:	682f      	ldr	r7, [r5, #0]
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	d033      	beq.n	8005c72 <__sflush_r+0x9a>
 8005c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	075a      	lsls	r2, r3, #29
 8005c10:	d505      	bpl.n	8005c1e <__sflush_r+0x46>
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	1ac0      	subs	r0, r0, r3
 8005c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c18:	b10b      	cbz	r3, 8005c1e <__sflush_r+0x46>
 8005c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c1c:	1ac0      	subs	r0, r0, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	4602      	mov	r2, r0
 8005c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c24:	6a21      	ldr	r1, [r4, #32]
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b0      	blx	r6
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	d106      	bne.n	8005c3e <__sflush_r+0x66>
 8005c30:	6829      	ldr	r1, [r5, #0]
 8005c32:	291d      	cmp	r1, #29
 8005c34:	d84b      	bhi.n	8005cce <__sflush_r+0xf6>
 8005c36:	4a2b      	ldr	r2, [pc, #172]	; (8005ce4 <__sflush_r+0x10c>)
 8005c38:	40ca      	lsrs	r2, r1
 8005c3a:	07d6      	lsls	r6, r2, #31
 8005c3c:	d547      	bpl.n	8005cce <__sflush_r+0xf6>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	6062      	str	r2, [r4, #4]
 8005c42:	04d9      	lsls	r1, r3, #19
 8005c44:	6922      	ldr	r2, [r4, #16]
 8005c46:	6022      	str	r2, [r4, #0]
 8005c48:	d504      	bpl.n	8005c54 <__sflush_r+0x7c>
 8005c4a:	1c42      	adds	r2, r0, #1
 8005c4c:	d101      	bne.n	8005c52 <__sflush_r+0x7a>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	b903      	cbnz	r3, 8005c54 <__sflush_r+0x7c>
 8005c52:	6560      	str	r0, [r4, #84]	; 0x54
 8005c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c56:	602f      	str	r7, [r5, #0]
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	d0ca      	beq.n	8005bf2 <__sflush_r+0x1a>
 8005c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c60:	4299      	cmp	r1, r3
 8005c62:	d002      	beq.n	8005c6a <__sflush_r+0x92>
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 f997 	bl	8005f98 <_free_r>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c72:	6a21      	ldr	r1, [r4, #32]
 8005c74:	2301      	movs	r3, #1
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b0      	blx	r6
 8005c7a:	1c41      	adds	r1, r0, #1
 8005c7c:	d1c6      	bne.n	8005c0c <__sflush_r+0x34>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0c3      	beq.n	8005c0c <__sflush_r+0x34>
 8005c84:	2b1d      	cmp	r3, #29
 8005c86:	d001      	beq.n	8005c8c <__sflush_r+0xb4>
 8005c88:	2b16      	cmp	r3, #22
 8005c8a:	d101      	bne.n	8005c90 <__sflush_r+0xb8>
 8005c8c:	602f      	str	r7, [r5, #0]
 8005c8e:	e7b0      	b.n	8005bf2 <__sflush_r+0x1a>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9c:	690f      	ldr	r7, [r1, #16]
 8005c9e:	2f00      	cmp	r7, #0
 8005ca0:	d0a7      	beq.n	8005bf2 <__sflush_r+0x1a>
 8005ca2:	0793      	lsls	r3, r2, #30
 8005ca4:	680e      	ldr	r6, [r1, #0]
 8005ca6:	bf08      	it	eq
 8005ca8:	694b      	ldreq	r3, [r1, #20]
 8005caa:	600f      	str	r7, [r1, #0]
 8005cac:	bf18      	it	ne
 8005cae:	2300      	movne	r3, #0
 8005cb0:	eba6 0807 	sub.w	r8, r6, r7
 8005cb4:	608b      	str	r3, [r1, #8]
 8005cb6:	f1b8 0f00 	cmp.w	r8, #0
 8005cba:	dd9a      	ble.n	8005bf2 <__sflush_r+0x1a>
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	463a      	mov	r2, r7
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b0      	blx	r6
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	dc07      	bgt.n	8005cdc <__sflush_r+0x104>
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cdc:	4407      	add	r7, r0
 8005cde:	eba8 0800 	sub.w	r8, r8, r0
 8005ce2:	e7e8      	b.n	8005cb6 <__sflush_r+0xde>
 8005ce4:	20400001 	.word	0x20400001

08005ce8 <_fflush_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	690b      	ldr	r3, [r1, #16]
 8005cec:	4605      	mov	r5, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	b1db      	cbz	r3, 8005d2a <_fflush_r+0x42>
 8005cf2:	b118      	cbz	r0, 8005cfc <_fflush_r+0x14>
 8005cf4:	6983      	ldr	r3, [r0, #24]
 8005cf6:	b90b      	cbnz	r3, 8005cfc <_fflush_r+0x14>
 8005cf8:	f000 f860 	bl	8005dbc <__sinit>
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <_fflush_r+0x48>)
 8005cfe:	429c      	cmp	r4, r3
 8005d00:	d109      	bne.n	8005d16 <_fflush_r+0x2e>
 8005d02:	686c      	ldr	r4, [r5, #4]
 8005d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d08:	b17b      	cbz	r3, 8005d2a <_fflush_r+0x42>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d12:	f7ff bf61 	b.w	8005bd8 <__sflush_r>
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <_fflush_r+0x4c>)
 8005d18:	429c      	cmp	r4, r3
 8005d1a:	d101      	bne.n	8005d20 <_fflush_r+0x38>
 8005d1c:	68ac      	ldr	r4, [r5, #8]
 8005d1e:	e7f1      	b.n	8005d04 <_fflush_r+0x1c>
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_fflush_r+0x50>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	bf08      	it	eq
 8005d26:	68ec      	ldreq	r4, [r5, #12]
 8005d28:	e7ec      	b.n	8005d04 <_fflush_r+0x1c>
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	bd38      	pop	{r3, r4, r5, pc}
 8005d2e:	bf00      	nop
 8005d30:	08006a10 	.word	0x08006a10
 8005d34:	08006a30 	.word	0x08006a30
 8005d38:	080069f0 	.word	0x080069f0

08005d3c <_cleanup_r>:
 8005d3c:	4901      	ldr	r1, [pc, #4]	; (8005d44 <_cleanup_r+0x8>)
 8005d3e:	f000 b8a9 	b.w	8005e94 <_fwalk_reent>
 8005d42:	bf00      	nop
 8005d44:	08005ce9 	.word	0x08005ce9

08005d48 <std.isra.0>:
 8005d48:	2300      	movs	r3, #0
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	6003      	str	r3, [r0, #0]
 8005d50:	6043      	str	r3, [r0, #4]
 8005d52:	6083      	str	r3, [r0, #8]
 8005d54:	8181      	strh	r1, [r0, #12]
 8005d56:	6643      	str	r3, [r0, #100]	; 0x64
 8005d58:	81c2      	strh	r2, [r0, #14]
 8005d5a:	6103      	str	r3, [r0, #16]
 8005d5c:	6143      	str	r3, [r0, #20]
 8005d5e:	6183      	str	r3, [r0, #24]
 8005d60:	4619      	mov	r1, r3
 8005d62:	2208      	movs	r2, #8
 8005d64:	305c      	adds	r0, #92	; 0x5c
 8005d66:	f7ff fdf3 	bl	8005950 <memset>
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std.isra.0+0x38>)
 8005d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std.isra.0+0x3c>)
 8005d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <std.isra.0+0x40>)
 8005d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <std.isra.0+0x44>)
 8005d78:	6224      	str	r4, [r4, #32]
 8005d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	bf00      	nop
 8005d80:	080066bd 	.word	0x080066bd
 8005d84:	080066df 	.word	0x080066df
 8005d88:	08006717 	.word	0x08006717
 8005d8c:	0800673b 	.word	0x0800673b

08005d90 <__sfmoreglue>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	1e4a      	subs	r2, r1, #1
 8005d94:	2568      	movs	r5, #104	; 0x68
 8005d96:	4355      	muls	r5, r2
 8005d98:	460e      	mov	r6, r1
 8005d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d9e:	f000 f949 	bl	8006034 <_malloc_r>
 8005da2:	4604      	mov	r4, r0
 8005da4:	b140      	cbz	r0, 8005db8 <__sfmoreglue+0x28>
 8005da6:	2100      	movs	r1, #0
 8005da8:	e880 0042 	stmia.w	r0, {r1, r6}
 8005dac:	300c      	adds	r0, #12
 8005dae:	60a0      	str	r0, [r4, #8]
 8005db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005db4:	f7ff fdcc 	bl	8005950 <memset>
 8005db8:	4620      	mov	r0, r4
 8005dba:	bd70      	pop	{r4, r5, r6, pc}

08005dbc <__sinit>:
 8005dbc:	6983      	ldr	r3, [r0, #24]
 8005dbe:	b510      	push	{r4, lr}
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	bb33      	cbnz	r3, 8005e12 <__sinit+0x56>
 8005dc4:	6483      	str	r3, [r0, #72]	; 0x48
 8005dc6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005dc8:	6503      	str	r3, [r0, #80]	; 0x50
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <__sinit+0x58>)
 8005dcc:	4a12      	ldr	r2, [pc, #72]	; (8005e18 <__sinit+0x5c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6282      	str	r2, [r0, #40]	; 0x28
 8005dd2:	4298      	cmp	r0, r3
 8005dd4:	bf04      	itt	eq
 8005dd6:	2301      	moveq	r3, #1
 8005dd8:	6183      	streq	r3, [r0, #24]
 8005dda:	f000 f81f 	bl	8005e1c <__sfp>
 8005dde:	6060      	str	r0, [r4, #4]
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 f81b 	bl	8005e1c <__sfp>
 8005de6:	60a0      	str	r0, [r4, #8]
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 f817 	bl	8005e1c <__sfp>
 8005dee:	2200      	movs	r2, #0
 8005df0:	60e0      	str	r0, [r4, #12]
 8005df2:	2104      	movs	r1, #4
 8005df4:	6860      	ldr	r0, [r4, #4]
 8005df6:	f7ff ffa7 	bl	8005d48 <std.isra.0>
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	2109      	movs	r1, #9
 8005dfe:	68a0      	ldr	r0, [r4, #8]
 8005e00:	f7ff ffa2 	bl	8005d48 <std.isra.0>
 8005e04:	2202      	movs	r2, #2
 8005e06:	2112      	movs	r1, #18
 8005e08:	68e0      	ldr	r0, [r4, #12]
 8005e0a:	f7ff ff9d 	bl	8005d48 <std.isra.0>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	61a3      	str	r3, [r4, #24]
 8005e12:	bd10      	pop	{r4, pc}
 8005e14:	080069ec 	.word	0x080069ec
 8005e18:	08005d3d 	.word	0x08005d3d

08005e1c <__sfp>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	4b1c      	ldr	r3, [pc, #112]	; (8005e90 <__sfp+0x74>)
 8005e20:	681e      	ldr	r6, [r3, #0]
 8005e22:	69b3      	ldr	r3, [r6, #24]
 8005e24:	4607      	mov	r7, r0
 8005e26:	b913      	cbnz	r3, 8005e2e <__sfp+0x12>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7ff ffc7 	bl	8005dbc <__sinit>
 8005e2e:	3648      	adds	r6, #72	; 0x48
 8005e30:	68b4      	ldr	r4, [r6, #8]
 8005e32:	6873      	ldr	r3, [r6, #4]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	d503      	bpl.n	8005e40 <__sfp+0x24>
 8005e38:	6833      	ldr	r3, [r6, #0]
 8005e3a:	b133      	cbz	r3, 8005e4a <__sfp+0x2e>
 8005e3c:	6836      	ldr	r6, [r6, #0]
 8005e3e:	e7f7      	b.n	8005e30 <__sfp+0x14>
 8005e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e44:	b16d      	cbz	r5, 8005e62 <__sfp+0x46>
 8005e46:	3468      	adds	r4, #104	; 0x68
 8005e48:	e7f4      	b.n	8005e34 <__sfp+0x18>
 8005e4a:	2104      	movs	r1, #4
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f7ff ff9f 	bl	8005d90 <__sfmoreglue>
 8005e52:	6030      	str	r0, [r6, #0]
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d1f1      	bne.n	8005e3c <__sfp+0x20>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e66:	81e3      	strh	r3, [r4, #14]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	6665      	str	r5, [r4, #100]	; 0x64
 8005e6e:	6025      	str	r5, [r4, #0]
 8005e70:	60a5      	str	r5, [r4, #8]
 8005e72:	6065      	str	r5, [r4, #4]
 8005e74:	6125      	str	r5, [r4, #16]
 8005e76:	6165      	str	r5, [r4, #20]
 8005e78:	61a5      	str	r5, [r4, #24]
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e82:	f7ff fd65 	bl	8005950 <memset>
 8005e86:	6365      	str	r5, [r4, #52]	; 0x34
 8005e88:	63a5      	str	r5, [r4, #56]	; 0x38
 8005e8a:	64a5      	str	r5, [r4, #72]	; 0x48
 8005e8c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005e8e:	e7e6      	b.n	8005e5e <__sfp+0x42>
 8005e90:	080069ec 	.word	0x080069ec

08005e94 <_fwalk_reent>:
 8005e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4689      	mov	r9, r1
 8005e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ea0:	2600      	movs	r6, #0
 8005ea2:	b914      	cbnz	r4, 8005eaa <_fwalk_reent+0x16>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eaa:	68a5      	ldr	r5, [r4, #8]
 8005eac:	6867      	ldr	r7, [r4, #4]
 8005eae:	3f01      	subs	r7, #1
 8005eb0:	d501      	bpl.n	8005eb6 <_fwalk_reent+0x22>
 8005eb2:	6824      	ldr	r4, [r4, #0]
 8005eb4:	e7f5      	b.n	8005ea2 <_fwalk_reent+0xe>
 8005eb6:	89ab      	ldrh	r3, [r5, #12]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d907      	bls.n	8005ecc <_fwalk_reent+0x38>
 8005ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	d003      	beq.n	8005ecc <_fwalk_reent+0x38>
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	47c8      	blx	r9
 8005eca:	4306      	orrs	r6, r0
 8005ecc:	3568      	adds	r5, #104	; 0x68
 8005ece:	e7ee      	b.n	8005eae <_fwalk_reent+0x1a>

08005ed0 <__swhatbuf_r>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	460e      	mov	r6, r1
 8005ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	b090      	sub	sp, #64	; 0x40
 8005edc:	4614      	mov	r4, r2
 8005ede:	461d      	mov	r5, r3
 8005ee0:	da07      	bge.n	8005ef2 <__swhatbuf_r+0x22>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	89b3      	ldrh	r3, [r6, #12]
 8005ee8:	061a      	lsls	r2, r3, #24
 8005eea:	d410      	bmi.n	8005f0e <__swhatbuf_r+0x3e>
 8005eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef0:	e00e      	b.n	8005f10 <__swhatbuf_r+0x40>
 8005ef2:	aa01      	add	r2, sp, #4
 8005ef4:	f000 fc48 	bl	8006788 <_fstat_r>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	dbf2      	blt.n	8005ee2 <__swhatbuf_r+0x12>
 8005efc:	9a02      	ldr	r2, [sp, #8]
 8005efe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f06:	425a      	negs	r2, r3
 8005f08:	415a      	adcs	r2, r3
 8005f0a:	602a      	str	r2, [r5, #0]
 8005f0c:	e7ee      	b.n	8005eec <__swhatbuf_r+0x1c>
 8005f0e:	2340      	movs	r3, #64	; 0x40
 8005f10:	2000      	movs	r0, #0
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	b010      	add	sp, #64	; 0x40
 8005f16:	bd70      	pop	{r4, r5, r6, pc}

08005f18 <__smakebuf_r>:
 8005f18:	898b      	ldrh	r3, [r1, #12]
 8005f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f1c:	079d      	lsls	r5, r3, #30
 8005f1e:	4606      	mov	r6, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	d507      	bpl.n	8005f34 <__smakebuf_r+0x1c>
 8005f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	6123      	str	r3, [r4, #16]
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	6163      	str	r3, [r4, #20]
 8005f30:	b002      	add	sp, #8
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	ab01      	add	r3, sp, #4
 8005f36:	466a      	mov	r2, sp
 8005f38:	f7ff ffca 	bl	8005ed0 <__swhatbuf_r>
 8005f3c:	9900      	ldr	r1, [sp, #0]
 8005f3e:	4605      	mov	r5, r0
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 f877 	bl	8006034 <_malloc_r>
 8005f46:	b948      	cbnz	r0, 8005f5c <__smakebuf_r+0x44>
 8005f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4c:	059a      	lsls	r2, r3, #22
 8005f4e:	d4ef      	bmi.n	8005f30 <__smakebuf_r+0x18>
 8005f50:	f023 0303 	bic.w	r3, r3, #3
 8005f54:	f043 0302 	orr.w	r3, r3, #2
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	e7e3      	b.n	8005f24 <__smakebuf_r+0xc>
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <__smakebuf_r+0x7c>)
 8005f5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	6020      	str	r0, [r4, #0]
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	9b00      	ldr	r3, [sp, #0]
 8005f6c:	6163      	str	r3, [r4, #20]
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	6120      	str	r0, [r4, #16]
 8005f72:	b15b      	cbz	r3, 8005f8c <__smakebuf_r+0x74>
 8005f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 fc17 	bl	80067ac <_isatty_r>
 8005f7e:	b128      	cbz	r0, 8005f8c <__smakebuf_r+0x74>
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	f023 0303 	bic.w	r3, r3, #3
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	81a3      	strh	r3, [r4, #12]
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	431d      	orrs	r5, r3
 8005f90:	81a5      	strh	r5, [r4, #12]
 8005f92:	e7cd      	b.n	8005f30 <__smakebuf_r+0x18>
 8005f94:	08005d3d 	.word	0x08005d3d

08005f98 <_free_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	d045      	beq.n	800602c <_free_r+0x94>
 8005fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa4:	1f0c      	subs	r4, r1, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bfb8      	it	lt
 8005faa:	18e4      	addlt	r4, r4, r3
 8005fac:	f000 fc20 	bl	80067f0 <__malloc_lock>
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <_free_r+0x98>)
 8005fb2:	6813      	ldr	r3, [r2, #0]
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	b933      	cbnz	r3, 8005fc6 <_free_r+0x2e>
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	6014      	str	r4, [r2, #0]
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc2:	f000 bc16 	b.w	80067f2 <__malloc_unlock>
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	d90c      	bls.n	8005fe4 <_free_r+0x4c>
 8005fca:	6821      	ldr	r1, [r4, #0]
 8005fcc:	1862      	adds	r2, r4, r1
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	bf04      	itt	eq
 8005fd2:	681a      	ldreq	r2, [r3, #0]
 8005fd4:	685b      	ldreq	r3, [r3, #4]
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	bf04      	itt	eq
 8005fda:	1852      	addeq	r2, r2, r1
 8005fdc:	6022      	streq	r2, [r4, #0]
 8005fde:	6004      	str	r4, [r0, #0]
 8005fe0:	e7ec      	b.n	8005fbc <_free_r+0x24>
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	b10a      	cbz	r2, 8005fec <_free_r+0x54>
 8005fe8:	42a2      	cmp	r2, r4
 8005fea:	d9fa      	bls.n	8005fe2 <_free_r+0x4a>
 8005fec:	6819      	ldr	r1, [r3, #0]
 8005fee:	1858      	adds	r0, r3, r1
 8005ff0:	42a0      	cmp	r0, r4
 8005ff2:	d10b      	bne.n	800600c <_free_r+0x74>
 8005ff4:	6820      	ldr	r0, [r4, #0]
 8005ff6:	4401      	add	r1, r0
 8005ff8:	1858      	adds	r0, r3, r1
 8005ffa:	4282      	cmp	r2, r0
 8005ffc:	6019      	str	r1, [r3, #0]
 8005ffe:	d1dd      	bne.n	8005fbc <_free_r+0x24>
 8006000:	6810      	ldr	r0, [r2, #0]
 8006002:	6852      	ldr	r2, [r2, #4]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	4401      	add	r1, r0
 8006008:	6019      	str	r1, [r3, #0]
 800600a:	e7d7      	b.n	8005fbc <_free_r+0x24>
 800600c:	d902      	bls.n	8006014 <_free_r+0x7c>
 800600e:	230c      	movs	r3, #12
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	e7d3      	b.n	8005fbc <_free_r+0x24>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	1821      	adds	r1, r4, r0
 8006018:	428a      	cmp	r2, r1
 800601a:	bf04      	itt	eq
 800601c:	6811      	ldreq	r1, [r2, #0]
 800601e:	6852      	ldreq	r2, [r2, #4]
 8006020:	6062      	str	r2, [r4, #4]
 8006022:	bf04      	itt	eq
 8006024:	1809      	addeq	r1, r1, r0
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	605c      	str	r4, [r3, #4]
 800602a:	e7c7      	b.n	8005fbc <_free_r+0x24>
 800602c:	bd38      	pop	{r3, r4, r5, pc}
 800602e:	bf00      	nop
 8006030:	2000042c 	.word	0x2000042c

08006034 <_malloc_r>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	1ccd      	adds	r5, r1, #3
 8006038:	f025 0503 	bic.w	r5, r5, #3
 800603c:	3508      	adds	r5, #8
 800603e:	2d0c      	cmp	r5, #12
 8006040:	bf38      	it	cc
 8006042:	250c      	movcc	r5, #12
 8006044:	2d00      	cmp	r5, #0
 8006046:	4606      	mov	r6, r0
 8006048:	db01      	blt.n	800604e <_malloc_r+0x1a>
 800604a:	42a9      	cmp	r1, r5
 800604c:	d903      	bls.n	8006056 <_malloc_r+0x22>
 800604e:	230c      	movs	r3, #12
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	2000      	movs	r0, #0
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	f000 fbcb 	bl	80067f0 <__malloc_lock>
 800605a:	4a23      	ldr	r2, [pc, #140]	; (80060e8 <_malloc_r+0xb4>)
 800605c:	6814      	ldr	r4, [r2, #0]
 800605e:	4621      	mov	r1, r4
 8006060:	b991      	cbnz	r1, 8006088 <_malloc_r+0x54>
 8006062:	4c22      	ldr	r4, [pc, #136]	; (80060ec <_malloc_r+0xb8>)
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	b91b      	cbnz	r3, 8006070 <_malloc_r+0x3c>
 8006068:	4630      	mov	r0, r6
 800606a:	f000 fb17 	bl	800669c <_sbrk_r>
 800606e:	6020      	str	r0, [r4, #0]
 8006070:	4629      	mov	r1, r5
 8006072:	4630      	mov	r0, r6
 8006074:	f000 fb12 	bl	800669c <_sbrk_r>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d126      	bne.n	80060ca <_malloc_r+0x96>
 800607c:	230c      	movs	r3, #12
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	4630      	mov	r0, r6
 8006082:	f000 fbb6 	bl	80067f2 <__malloc_unlock>
 8006086:	e7e4      	b.n	8006052 <_malloc_r+0x1e>
 8006088:	680b      	ldr	r3, [r1, #0]
 800608a:	1b5b      	subs	r3, r3, r5
 800608c:	d41a      	bmi.n	80060c4 <_malloc_r+0x90>
 800608e:	2b0b      	cmp	r3, #11
 8006090:	d90f      	bls.n	80060b2 <_malloc_r+0x7e>
 8006092:	600b      	str	r3, [r1, #0]
 8006094:	50cd      	str	r5, [r1, r3]
 8006096:	18cc      	adds	r4, r1, r3
 8006098:	4630      	mov	r0, r6
 800609a:	f000 fbaa 	bl	80067f2 <__malloc_unlock>
 800609e:	f104 000b 	add.w	r0, r4, #11
 80060a2:	1d23      	adds	r3, r4, #4
 80060a4:	f020 0007 	bic.w	r0, r0, #7
 80060a8:	1ac3      	subs	r3, r0, r3
 80060aa:	d01b      	beq.n	80060e4 <_malloc_r+0xb0>
 80060ac:	425a      	negs	r2, r3
 80060ae:	50e2      	str	r2, [r4, r3]
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	428c      	cmp	r4, r1
 80060b4:	bf0d      	iteet	eq
 80060b6:	6863      	ldreq	r3, [r4, #4]
 80060b8:	684b      	ldrne	r3, [r1, #4]
 80060ba:	6063      	strne	r3, [r4, #4]
 80060bc:	6013      	streq	r3, [r2, #0]
 80060be:	bf18      	it	ne
 80060c0:	460c      	movne	r4, r1
 80060c2:	e7e9      	b.n	8006098 <_malloc_r+0x64>
 80060c4:	460c      	mov	r4, r1
 80060c6:	6849      	ldr	r1, [r1, #4]
 80060c8:	e7ca      	b.n	8006060 <_malloc_r+0x2c>
 80060ca:	1cc4      	adds	r4, r0, #3
 80060cc:	f024 0403 	bic.w	r4, r4, #3
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d005      	beq.n	80060e0 <_malloc_r+0xac>
 80060d4:	1a21      	subs	r1, r4, r0
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 fae0 	bl	800669c <_sbrk_r>
 80060dc:	3001      	adds	r0, #1
 80060de:	d0cd      	beq.n	800607c <_malloc_r+0x48>
 80060e0:	6025      	str	r5, [r4, #0]
 80060e2:	e7d9      	b.n	8006098 <_malloc_r+0x64>
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	bf00      	nop
 80060e8:	2000042c 	.word	0x2000042c
 80060ec:	20000430 	.word	0x20000430

080060f0 <__sfputc_r>:
 80060f0:	6893      	ldr	r3, [r2, #8]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	b410      	push	{r4}
 80060f8:	6093      	str	r3, [r2, #8]
 80060fa:	da09      	bge.n	8006110 <__sfputc_r+0x20>
 80060fc:	6994      	ldr	r4, [r2, #24]
 80060fe:	42a3      	cmp	r3, r4
 8006100:	db02      	blt.n	8006108 <__sfputc_r+0x18>
 8006102:	b2cb      	uxtb	r3, r1
 8006104:	2b0a      	cmp	r3, #10
 8006106:	d103      	bne.n	8006110 <__sfputc_r+0x20>
 8006108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800610c:	f7ff bca4 	b.w	8005a58 <__swbuf_r>
 8006110:	6813      	ldr	r3, [r2, #0]
 8006112:	1c58      	adds	r0, r3, #1
 8006114:	6010      	str	r0, [r2, #0]
 8006116:	7019      	strb	r1, [r3, #0]
 8006118:	b2c8      	uxtb	r0, r1
 800611a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800611e:	4770      	bx	lr

08006120 <__sfputs_r>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	4606      	mov	r6, r0
 8006124:	460f      	mov	r7, r1
 8006126:	4614      	mov	r4, r2
 8006128:	18d5      	adds	r5, r2, r3
 800612a:	42ac      	cmp	r4, r5
 800612c:	d101      	bne.n	8006132 <__sfputs_r+0x12>
 800612e:	2000      	movs	r0, #0
 8006130:	e007      	b.n	8006142 <__sfputs_r+0x22>
 8006132:	463a      	mov	r2, r7
 8006134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff ffd9 	bl	80060f0 <__sfputc_r>
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	d1f3      	bne.n	800612a <__sfputs_r+0xa>
 8006142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006144 <_vfiprintf_r>:
 8006144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006148:	b09d      	sub	sp, #116	; 0x74
 800614a:	460c      	mov	r4, r1
 800614c:	4617      	mov	r7, r2
 800614e:	9303      	str	r3, [sp, #12]
 8006150:	4606      	mov	r6, r0
 8006152:	b118      	cbz	r0, 800615c <_vfiprintf_r+0x18>
 8006154:	6983      	ldr	r3, [r0, #24]
 8006156:	b90b      	cbnz	r3, 800615c <_vfiprintf_r+0x18>
 8006158:	f7ff fe30 	bl	8005dbc <__sinit>
 800615c:	4b7c      	ldr	r3, [pc, #496]	; (8006350 <_vfiprintf_r+0x20c>)
 800615e:	429c      	cmp	r4, r3
 8006160:	d157      	bne.n	8006212 <_vfiprintf_r+0xce>
 8006162:	6874      	ldr	r4, [r6, #4]
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	0718      	lsls	r0, r3, #28
 8006168:	d55d      	bpl.n	8006226 <_vfiprintf_r+0xe2>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05a      	beq.n	8006226 <_vfiprintf_r+0xe2>
 8006170:	2300      	movs	r3, #0
 8006172:	9309      	str	r3, [sp, #36]	; 0x24
 8006174:	2320      	movs	r3, #32
 8006176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800617a:	2330      	movs	r3, #48	; 0x30
 800617c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006180:	f04f 0b01 	mov.w	fp, #1
 8006184:	46b8      	mov	r8, r7
 8006186:	4645      	mov	r5, r8
 8006188:	f815 3b01 	ldrb.w	r3, [r5], #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d155      	bne.n	800623c <_vfiprintf_r+0xf8>
 8006190:	ebb8 0a07 	subs.w	sl, r8, r7
 8006194:	d00b      	beq.n	80061ae <_vfiprintf_r+0x6a>
 8006196:	4653      	mov	r3, sl
 8006198:	463a      	mov	r2, r7
 800619a:	4621      	mov	r1, r4
 800619c:	4630      	mov	r0, r6
 800619e:	f7ff ffbf 	bl	8006120 <__sfputs_r>
 80061a2:	3001      	adds	r0, #1
 80061a4:	f000 80c4 	beq.w	8006330 <_vfiprintf_r+0x1ec>
 80061a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061aa:	4453      	add	r3, sl
 80061ac:	9309      	str	r3, [sp, #36]	; 0x24
 80061ae:	f898 3000 	ldrb.w	r3, [r8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 80bc 	beq.w	8006330 <_vfiprintf_r+0x1ec>
 80061b8:	2300      	movs	r3, #0
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	9304      	str	r3, [sp, #16]
 80061c0:	9307      	str	r3, [sp, #28]
 80061c2:	9205      	str	r2, [sp, #20]
 80061c4:	9306      	str	r3, [sp, #24]
 80061c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ca:	931a      	str	r3, [sp, #104]	; 0x68
 80061cc:	2205      	movs	r2, #5
 80061ce:	7829      	ldrb	r1, [r5, #0]
 80061d0:	4860      	ldr	r0, [pc, #384]	; (8006354 <_vfiprintf_r+0x210>)
 80061d2:	f7f9 ffd5 	bl	8000180 <memchr>
 80061d6:	f105 0801 	add.w	r8, r5, #1
 80061da:	9b04      	ldr	r3, [sp, #16]
 80061dc:	2800      	cmp	r0, #0
 80061de:	d131      	bne.n	8006244 <_vfiprintf_r+0x100>
 80061e0:	06d9      	lsls	r1, r3, #27
 80061e2:	bf44      	itt	mi
 80061e4:	2220      	movmi	r2, #32
 80061e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061ea:	071a      	lsls	r2, r3, #28
 80061ec:	bf44      	itt	mi
 80061ee:	222b      	movmi	r2, #43	; 0x2b
 80061f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061f4:	782a      	ldrb	r2, [r5, #0]
 80061f6:	2a2a      	cmp	r2, #42	; 0x2a
 80061f8:	d02c      	beq.n	8006254 <_vfiprintf_r+0x110>
 80061fa:	9a07      	ldr	r2, [sp, #28]
 80061fc:	2100      	movs	r1, #0
 80061fe:	200a      	movs	r0, #10
 8006200:	46a8      	mov	r8, r5
 8006202:	3501      	adds	r5, #1
 8006204:	f898 3000 	ldrb.w	r3, [r8]
 8006208:	3b30      	subs	r3, #48	; 0x30
 800620a:	2b09      	cmp	r3, #9
 800620c:	d96d      	bls.n	80062ea <_vfiprintf_r+0x1a6>
 800620e:	b371      	cbz	r1, 800626e <_vfiprintf_r+0x12a>
 8006210:	e026      	b.n	8006260 <_vfiprintf_r+0x11c>
 8006212:	4b51      	ldr	r3, [pc, #324]	; (8006358 <_vfiprintf_r+0x214>)
 8006214:	429c      	cmp	r4, r3
 8006216:	d101      	bne.n	800621c <_vfiprintf_r+0xd8>
 8006218:	68b4      	ldr	r4, [r6, #8]
 800621a:	e7a3      	b.n	8006164 <_vfiprintf_r+0x20>
 800621c:	4b4f      	ldr	r3, [pc, #316]	; (800635c <_vfiprintf_r+0x218>)
 800621e:	429c      	cmp	r4, r3
 8006220:	bf08      	it	eq
 8006222:	68f4      	ldreq	r4, [r6, #12]
 8006224:	e79e      	b.n	8006164 <_vfiprintf_r+0x20>
 8006226:	4621      	mov	r1, r4
 8006228:	4630      	mov	r0, r6
 800622a:	f7ff fc67 	bl	8005afc <__swsetup_r>
 800622e:	2800      	cmp	r0, #0
 8006230:	d09e      	beq.n	8006170 <_vfiprintf_r+0x2c>
 8006232:	f04f 30ff 	mov.w	r0, #4294967295
 8006236:	b01d      	add	sp, #116	; 0x74
 8006238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623c:	2b25      	cmp	r3, #37	; 0x25
 800623e:	d0a7      	beq.n	8006190 <_vfiprintf_r+0x4c>
 8006240:	46a8      	mov	r8, r5
 8006242:	e7a0      	b.n	8006186 <_vfiprintf_r+0x42>
 8006244:	4a43      	ldr	r2, [pc, #268]	; (8006354 <_vfiprintf_r+0x210>)
 8006246:	1a80      	subs	r0, r0, r2
 8006248:	fa0b f000 	lsl.w	r0, fp, r0
 800624c:	4318      	orrs	r0, r3
 800624e:	9004      	str	r0, [sp, #16]
 8006250:	4645      	mov	r5, r8
 8006252:	e7bb      	b.n	80061cc <_vfiprintf_r+0x88>
 8006254:	9a03      	ldr	r2, [sp, #12]
 8006256:	1d11      	adds	r1, r2, #4
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	9103      	str	r1, [sp, #12]
 800625c:	2a00      	cmp	r2, #0
 800625e:	db01      	blt.n	8006264 <_vfiprintf_r+0x120>
 8006260:	9207      	str	r2, [sp, #28]
 8006262:	e004      	b.n	800626e <_vfiprintf_r+0x12a>
 8006264:	4252      	negs	r2, r2
 8006266:	f043 0302 	orr.w	r3, r3, #2
 800626a:	9207      	str	r2, [sp, #28]
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	f898 3000 	ldrb.w	r3, [r8]
 8006272:	2b2e      	cmp	r3, #46	; 0x2e
 8006274:	d110      	bne.n	8006298 <_vfiprintf_r+0x154>
 8006276:	f898 3001 	ldrb.w	r3, [r8, #1]
 800627a:	2b2a      	cmp	r3, #42	; 0x2a
 800627c:	f108 0101 	add.w	r1, r8, #1
 8006280:	d137      	bne.n	80062f2 <_vfiprintf_r+0x1ae>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	9203      	str	r2, [sp, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfb8      	it	lt
 800628e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006292:	f108 0802 	add.w	r8, r8, #2
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	4d31      	ldr	r5, [pc, #196]	; (8006360 <_vfiprintf_r+0x21c>)
 800629a:	f898 1000 	ldrb.w	r1, [r8]
 800629e:	2203      	movs	r2, #3
 80062a0:	4628      	mov	r0, r5
 80062a2:	f7f9 ff6d 	bl	8000180 <memchr>
 80062a6:	b140      	cbz	r0, 80062ba <_vfiprintf_r+0x176>
 80062a8:	2340      	movs	r3, #64	; 0x40
 80062aa:	1b40      	subs	r0, r0, r5
 80062ac:	fa03 f000 	lsl.w	r0, r3, r0
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	4303      	orrs	r3, r0
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	f108 0801 	add.w	r8, r8, #1
 80062ba:	f898 1000 	ldrb.w	r1, [r8]
 80062be:	4829      	ldr	r0, [pc, #164]	; (8006364 <_vfiprintf_r+0x220>)
 80062c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062c4:	2206      	movs	r2, #6
 80062c6:	f108 0701 	add.w	r7, r8, #1
 80062ca:	f7f9 ff59 	bl	8000180 <memchr>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d034      	beq.n	800633c <_vfiprintf_r+0x1f8>
 80062d2:	4b25      	ldr	r3, [pc, #148]	; (8006368 <_vfiprintf_r+0x224>)
 80062d4:	bb03      	cbnz	r3, 8006318 <_vfiprintf_r+0x1d4>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	3307      	adds	r3, #7
 80062da:	f023 0307 	bic.w	r3, r3, #7
 80062de:	3308      	adds	r3, #8
 80062e0:	9303      	str	r3, [sp, #12]
 80062e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e4:	444b      	add	r3, r9
 80062e6:	9309      	str	r3, [sp, #36]	; 0x24
 80062e8:	e74c      	b.n	8006184 <_vfiprintf_r+0x40>
 80062ea:	fb00 3202 	mla	r2, r0, r2, r3
 80062ee:	2101      	movs	r1, #1
 80062f0:	e786      	b.n	8006200 <_vfiprintf_r+0xbc>
 80062f2:	2300      	movs	r3, #0
 80062f4:	9305      	str	r3, [sp, #20]
 80062f6:	4618      	mov	r0, r3
 80062f8:	250a      	movs	r5, #10
 80062fa:	4688      	mov	r8, r1
 80062fc:	3101      	adds	r1, #1
 80062fe:	f898 2000 	ldrb.w	r2, [r8]
 8006302:	3a30      	subs	r2, #48	; 0x30
 8006304:	2a09      	cmp	r2, #9
 8006306:	d903      	bls.n	8006310 <_vfiprintf_r+0x1cc>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0c5      	beq.n	8006298 <_vfiprintf_r+0x154>
 800630c:	9005      	str	r0, [sp, #20]
 800630e:	e7c3      	b.n	8006298 <_vfiprintf_r+0x154>
 8006310:	fb05 2000 	mla	r0, r5, r0, r2
 8006314:	2301      	movs	r3, #1
 8006316:	e7f0      	b.n	80062fa <_vfiprintf_r+0x1b6>
 8006318:	ab03      	add	r3, sp, #12
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	4622      	mov	r2, r4
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <_vfiprintf_r+0x228>)
 8006320:	a904      	add	r1, sp, #16
 8006322:	4630      	mov	r0, r6
 8006324:	f3af 8000 	nop.w
 8006328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800632c:	4681      	mov	r9, r0
 800632e:	d1d8      	bne.n	80062e2 <_vfiprintf_r+0x19e>
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	065b      	lsls	r3, r3, #25
 8006334:	f53f af7d 	bmi.w	8006232 <_vfiprintf_r+0xee>
 8006338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800633a:	e77c      	b.n	8006236 <_vfiprintf_r+0xf2>
 800633c:	ab03      	add	r3, sp, #12
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	4622      	mov	r2, r4
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <_vfiprintf_r+0x228>)
 8006344:	a904      	add	r1, sp, #16
 8006346:	4630      	mov	r0, r6
 8006348:	f000 f888 	bl	800645c <_printf_i>
 800634c:	e7ec      	b.n	8006328 <_vfiprintf_r+0x1e4>
 800634e:	bf00      	nop
 8006350:	08006a10 	.word	0x08006a10
 8006354:	08006a50 	.word	0x08006a50
 8006358:	08006a30 	.word	0x08006a30
 800635c:	080069f0 	.word	0x080069f0
 8006360:	08006a56 	.word	0x08006a56
 8006364:	08006a5a 	.word	0x08006a5a
 8006368:	00000000 	.word	0x00000000
 800636c:	08006121 	.word	0x08006121

08006370 <_printf_common>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	4691      	mov	r9, r2
 8006376:	461f      	mov	r7, r3
 8006378:	688a      	ldr	r2, [r1, #8]
 800637a:	690b      	ldr	r3, [r1, #16]
 800637c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006380:	4293      	cmp	r3, r2
 8006382:	bfb8      	it	lt
 8006384:	4613      	movlt	r3, r2
 8006386:	f8c9 3000 	str.w	r3, [r9]
 800638a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800638e:	4606      	mov	r6, r0
 8006390:	460c      	mov	r4, r1
 8006392:	b112      	cbz	r2, 800639a <_printf_common+0x2a>
 8006394:	3301      	adds	r3, #1
 8006396:	f8c9 3000 	str.w	r3, [r9]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	0699      	lsls	r1, r3, #26
 800639e:	bf42      	ittt	mi
 80063a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063a4:	3302      	addmi	r3, #2
 80063a6:	f8c9 3000 	strmi.w	r3, [r9]
 80063aa:	6825      	ldr	r5, [r4, #0]
 80063ac:	f015 0506 	ands.w	r5, r5, #6
 80063b0:	d107      	bne.n	80063c2 <_printf_common+0x52>
 80063b2:	f104 0a19 	add.w	sl, r4, #25
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	f8d9 2000 	ldr.w	r2, [r9]
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	429d      	cmp	r5, r3
 80063c0:	db29      	blt.n	8006416 <_printf_common+0xa6>
 80063c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	3300      	adds	r3, #0
 80063ca:	bf18      	it	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	0692      	lsls	r2, r2, #26
 80063d0:	d42e      	bmi.n	8006430 <_printf_common+0xc0>
 80063d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d6:	4639      	mov	r1, r7
 80063d8:	4630      	mov	r0, r6
 80063da:	47c0      	blx	r8
 80063dc:	3001      	adds	r0, #1
 80063de:	d021      	beq.n	8006424 <_printf_common+0xb4>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	68e5      	ldr	r5, [r4, #12]
 80063e4:	f8d9 2000 	ldr.w	r2, [r9]
 80063e8:	f003 0306 	and.w	r3, r3, #6
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	bf08      	it	eq
 80063f0:	1aad      	subeq	r5, r5, r2
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	bf0c      	ite	eq
 80063f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063fc:	2500      	movne	r5, #0
 80063fe:	4293      	cmp	r3, r2
 8006400:	bfc4      	itt	gt
 8006402:	1a9b      	subgt	r3, r3, r2
 8006404:	18ed      	addgt	r5, r5, r3
 8006406:	f04f 0900 	mov.w	r9, #0
 800640a:	341a      	adds	r4, #26
 800640c:	454d      	cmp	r5, r9
 800640e:	d11b      	bne.n	8006448 <_printf_common+0xd8>
 8006410:	2000      	movs	r0, #0
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	2301      	movs	r3, #1
 8006418:	4652      	mov	r2, sl
 800641a:	4639      	mov	r1, r7
 800641c:	4630      	mov	r0, r6
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d103      	bne.n	800642c <_printf_common+0xbc>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	3501      	adds	r5, #1
 800642e:	e7c2      	b.n	80063b6 <_printf_common+0x46>
 8006430:	18e1      	adds	r1, r4, r3
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	2030      	movs	r0, #48	; 0x30
 8006436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800643a:	4422      	add	r2, r4
 800643c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006444:	3302      	adds	r3, #2
 8006446:	e7c4      	b.n	80063d2 <_printf_common+0x62>
 8006448:	2301      	movs	r3, #1
 800644a:	4622      	mov	r2, r4
 800644c:	4639      	mov	r1, r7
 800644e:	4630      	mov	r0, r6
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d0e6      	beq.n	8006424 <_printf_common+0xb4>
 8006456:	f109 0901 	add.w	r9, r9, #1
 800645a:	e7d7      	b.n	800640c <_printf_common+0x9c>

0800645c <_printf_i>:
 800645c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006460:	4617      	mov	r7, r2
 8006462:	7e0a      	ldrb	r2, [r1, #24]
 8006464:	b085      	sub	sp, #20
 8006466:	2a6e      	cmp	r2, #110	; 0x6e
 8006468:	4698      	mov	r8, r3
 800646a:	4606      	mov	r6, r0
 800646c:	460c      	mov	r4, r1
 800646e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006470:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006474:	f000 80bc 	beq.w	80065f0 <_printf_i+0x194>
 8006478:	d81a      	bhi.n	80064b0 <_printf_i+0x54>
 800647a:	2a63      	cmp	r2, #99	; 0x63
 800647c:	d02e      	beq.n	80064dc <_printf_i+0x80>
 800647e:	d80a      	bhi.n	8006496 <_printf_i+0x3a>
 8006480:	2a00      	cmp	r2, #0
 8006482:	f000 80c8 	beq.w	8006616 <_printf_i+0x1ba>
 8006486:	2a58      	cmp	r2, #88	; 0x58
 8006488:	f000 808a 	beq.w	80065a0 <_printf_i+0x144>
 800648c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006490:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006494:	e02a      	b.n	80064ec <_printf_i+0x90>
 8006496:	2a64      	cmp	r2, #100	; 0x64
 8006498:	d001      	beq.n	800649e <_printf_i+0x42>
 800649a:	2a69      	cmp	r2, #105	; 0x69
 800649c:	d1f6      	bne.n	800648c <_printf_i+0x30>
 800649e:	6821      	ldr	r1, [r4, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80064a6:	d023      	beq.n	80064f0 <_printf_i+0x94>
 80064a8:	1d11      	adds	r1, r2, #4
 80064aa:	6019      	str	r1, [r3, #0]
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	e027      	b.n	8006500 <_printf_i+0xa4>
 80064b0:	2a73      	cmp	r2, #115	; 0x73
 80064b2:	f000 80b4 	beq.w	800661e <_printf_i+0x1c2>
 80064b6:	d808      	bhi.n	80064ca <_printf_i+0x6e>
 80064b8:	2a6f      	cmp	r2, #111	; 0x6f
 80064ba:	d02a      	beq.n	8006512 <_printf_i+0xb6>
 80064bc:	2a70      	cmp	r2, #112	; 0x70
 80064be:	d1e5      	bne.n	800648c <_printf_i+0x30>
 80064c0:	680a      	ldr	r2, [r1, #0]
 80064c2:	f042 0220 	orr.w	r2, r2, #32
 80064c6:	600a      	str	r2, [r1, #0]
 80064c8:	e003      	b.n	80064d2 <_printf_i+0x76>
 80064ca:	2a75      	cmp	r2, #117	; 0x75
 80064cc:	d021      	beq.n	8006512 <_printf_i+0xb6>
 80064ce:	2a78      	cmp	r2, #120	; 0x78
 80064d0:	d1dc      	bne.n	800648c <_printf_i+0x30>
 80064d2:	2278      	movs	r2, #120	; 0x78
 80064d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80064d8:	496e      	ldr	r1, [pc, #440]	; (8006694 <_printf_i+0x238>)
 80064da:	e064      	b.n	80065a6 <_printf_i+0x14a>
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80064e2:	1d11      	adds	r1, r2, #4
 80064e4:	6019      	str	r1, [r3, #0]
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0a3      	b.n	8006638 <_printf_i+0x1dc>
 80064f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80064f4:	f102 0104 	add.w	r1, r2, #4
 80064f8:	6019      	str	r1, [r3, #0]
 80064fa:	d0d7      	beq.n	80064ac <_printf_i+0x50>
 80064fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006500:	2b00      	cmp	r3, #0
 8006502:	da03      	bge.n	800650c <_printf_i+0xb0>
 8006504:	222d      	movs	r2, #45	; 0x2d
 8006506:	425b      	negs	r3, r3
 8006508:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800650c:	4962      	ldr	r1, [pc, #392]	; (8006698 <_printf_i+0x23c>)
 800650e:	220a      	movs	r2, #10
 8006510:	e017      	b.n	8006542 <_printf_i+0xe6>
 8006512:	6820      	ldr	r0, [r4, #0]
 8006514:	6819      	ldr	r1, [r3, #0]
 8006516:	f010 0f80 	tst.w	r0, #128	; 0x80
 800651a:	d003      	beq.n	8006524 <_printf_i+0xc8>
 800651c:	1d08      	adds	r0, r1, #4
 800651e:	6018      	str	r0, [r3, #0]
 8006520:	680b      	ldr	r3, [r1, #0]
 8006522:	e006      	b.n	8006532 <_printf_i+0xd6>
 8006524:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006528:	f101 0004 	add.w	r0, r1, #4
 800652c:	6018      	str	r0, [r3, #0]
 800652e:	d0f7      	beq.n	8006520 <_printf_i+0xc4>
 8006530:	880b      	ldrh	r3, [r1, #0]
 8006532:	4959      	ldr	r1, [pc, #356]	; (8006698 <_printf_i+0x23c>)
 8006534:	2a6f      	cmp	r2, #111	; 0x6f
 8006536:	bf14      	ite	ne
 8006538:	220a      	movne	r2, #10
 800653a:	2208      	moveq	r2, #8
 800653c:	2000      	movs	r0, #0
 800653e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006542:	6865      	ldr	r5, [r4, #4]
 8006544:	60a5      	str	r5, [r4, #8]
 8006546:	2d00      	cmp	r5, #0
 8006548:	f2c0 809c 	blt.w	8006684 <_printf_i+0x228>
 800654c:	6820      	ldr	r0, [r4, #0]
 800654e:	f020 0004 	bic.w	r0, r0, #4
 8006552:	6020      	str	r0, [r4, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d13f      	bne.n	80065d8 <_printf_i+0x17c>
 8006558:	2d00      	cmp	r5, #0
 800655a:	f040 8095 	bne.w	8006688 <_printf_i+0x22c>
 800655e:	4675      	mov	r5, lr
 8006560:	2a08      	cmp	r2, #8
 8006562:	d10b      	bne.n	800657c <_printf_i+0x120>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07da      	lsls	r2, r3, #31
 8006568:	d508      	bpl.n	800657c <_printf_i+0x120>
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6862      	ldr	r2, [r4, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	bfde      	ittt	le
 8006572:	2330      	movle	r3, #48	; 0x30
 8006574:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006578:	f105 35ff 	addle.w	r5, r5, #4294967295
 800657c:	ebae 0305 	sub.w	r3, lr, r5
 8006580:	6123      	str	r3, [r4, #16]
 8006582:	f8cd 8000 	str.w	r8, [sp]
 8006586:	463b      	mov	r3, r7
 8006588:	aa03      	add	r2, sp, #12
 800658a:	4621      	mov	r1, r4
 800658c:	4630      	mov	r0, r6
 800658e:	f7ff feef 	bl	8006370 <_printf_common>
 8006592:	3001      	adds	r0, #1
 8006594:	d155      	bne.n	8006642 <_printf_i+0x1e6>
 8006596:	f04f 30ff 	mov.w	r0, #4294967295
 800659a:	b005      	add	sp, #20
 800659c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065a0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80065a4:	493c      	ldr	r1, [pc, #240]	; (8006698 <_printf_i+0x23c>)
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80065ae:	f100 0504 	add.w	r5, r0, #4
 80065b2:	601d      	str	r5, [r3, #0]
 80065b4:	d001      	beq.n	80065ba <_printf_i+0x15e>
 80065b6:	6803      	ldr	r3, [r0, #0]
 80065b8:	e002      	b.n	80065c0 <_printf_i+0x164>
 80065ba:	0655      	lsls	r5, r2, #25
 80065bc:	d5fb      	bpl.n	80065b6 <_printf_i+0x15a>
 80065be:	8803      	ldrh	r3, [r0, #0]
 80065c0:	07d0      	lsls	r0, r2, #31
 80065c2:	bf44      	itt	mi
 80065c4:	f042 0220 	orrmi.w	r2, r2, #32
 80065c8:	6022      	strmi	r2, [r4, #0]
 80065ca:	b91b      	cbnz	r3, 80065d4 <_printf_i+0x178>
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	f022 0220 	bic.w	r2, r2, #32
 80065d2:	6022      	str	r2, [r4, #0]
 80065d4:	2210      	movs	r2, #16
 80065d6:	e7b1      	b.n	800653c <_printf_i+0xe0>
 80065d8:	4675      	mov	r5, lr
 80065da:	fbb3 f0f2 	udiv	r0, r3, r2
 80065de:	fb02 3310 	mls	r3, r2, r0, r3
 80065e2:	5ccb      	ldrb	r3, [r1, r3]
 80065e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065e8:	4603      	mov	r3, r0
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d1f5      	bne.n	80065da <_printf_i+0x17e>
 80065ee:	e7b7      	b.n	8006560 <_printf_i+0x104>
 80065f0:	6808      	ldr	r0, [r1, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	6949      	ldr	r1, [r1, #20]
 80065f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80065fa:	d004      	beq.n	8006606 <_printf_i+0x1aa>
 80065fc:	1d10      	adds	r0, r2, #4
 80065fe:	6018      	str	r0, [r3, #0]
 8006600:	6813      	ldr	r3, [r2, #0]
 8006602:	6019      	str	r1, [r3, #0]
 8006604:	e007      	b.n	8006616 <_printf_i+0x1ba>
 8006606:	f010 0f40 	tst.w	r0, #64	; 0x40
 800660a:	f102 0004 	add.w	r0, r2, #4
 800660e:	6018      	str	r0, [r3, #0]
 8006610:	6813      	ldr	r3, [r2, #0]
 8006612:	d0f6      	beq.n	8006602 <_printf_i+0x1a6>
 8006614:	8019      	strh	r1, [r3, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	4675      	mov	r5, lr
 800661c:	e7b1      	b.n	8006582 <_printf_i+0x126>
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	1d11      	adds	r1, r2, #4
 8006622:	6019      	str	r1, [r3, #0]
 8006624:	6815      	ldr	r5, [r2, #0]
 8006626:	6862      	ldr	r2, [r4, #4]
 8006628:	2100      	movs	r1, #0
 800662a:	4628      	mov	r0, r5
 800662c:	f7f9 fda8 	bl	8000180 <memchr>
 8006630:	b108      	cbz	r0, 8006636 <_printf_i+0x1da>
 8006632:	1b40      	subs	r0, r0, r5
 8006634:	6060      	str	r0, [r4, #4]
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	2300      	movs	r3, #0
 800663c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006640:	e79f      	b.n	8006582 <_printf_i+0x126>
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	462a      	mov	r2, r5
 8006646:	4639      	mov	r1, r7
 8006648:	4630      	mov	r0, r6
 800664a:	47c0      	blx	r8
 800664c:	3001      	adds	r0, #1
 800664e:	d0a2      	beq.n	8006596 <_printf_i+0x13a>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	079b      	lsls	r3, r3, #30
 8006654:	d507      	bpl.n	8006666 <_printf_i+0x20a>
 8006656:	2500      	movs	r5, #0
 8006658:	f104 0919 	add.w	r9, r4, #25
 800665c:	68e3      	ldr	r3, [r4, #12]
 800665e:	9a03      	ldr	r2, [sp, #12]
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	429d      	cmp	r5, r3
 8006664:	db05      	blt.n	8006672 <_printf_i+0x216>
 8006666:	68e0      	ldr	r0, [r4, #12]
 8006668:	9b03      	ldr	r3, [sp, #12]
 800666a:	4298      	cmp	r0, r3
 800666c:	bfb8      	it	lt
 800666e:	4618      	movlt	r0, r3
 8006670:	e793      	b.n	800659a <_printf_i+0x13e>
 8006672:	2301      	movs	r3, #1
 8006674:	464a      	mov	r2, r9
 8006676:	4639      	mov	r1, r7
 8006678:	4630      	mov	r0, r6
 800667a:	47c0      	blx	r8
 800667c:	3001      	adds	r0, #1
 800667e:	d08a      	beq.n	8006596 <_printf_i+0x13a>
 8006680:	3501      	adds	r5, #1
 8006682:	e7eb      	b.n	800665c <_printf_i+0x200>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1a7      	bne.n	80065d8 <_printf_i+0x17c>
 8006688:	780b      	ldrb	r3, [r1, #0]
 800668a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800668e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006692:	e765      	b.n	8006560 <_printf_i+0x104>
 8006694:	08006a72 	.word	0x08006a72
 8006698:	08006a61 	.word	0x08006a61

0800669c <_sbrk_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4c06      	ldr	r4, [pc, #24]	; (80066b8 <_sbrk_r+0x1c>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4605      	mov	r5, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	f7fe fdfc 	bl	80052a4 <_sbrk>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_sbrk_r+0x1a>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_sbrk_r+0x1a>
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	20001e74 	.word	0x20001e74

080066bc <__sread>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c4:	f000 f896 	bl	80067f4 <_read_r>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	bfab      	itete	ge
 80066cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ce:	89a3      	ldrhlt	r3, [r4, #12]
 80066d0:	181b      	addge	r3, r3, r0
 80066d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066d6:	bfac      	ite	ge
 80066d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066da:	81a3      	strhlt	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__swrite>:
 80066de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e2:	461f      	mov	r7, r3
 80066e4:	898b      	ldrh	r3, [r1, #12]
 80066e6:	05db      	lsls	r3, r3, #23
 80066e8:	4605      	mov	r5, r0
 80066ea:	460c      	mov	r4, r1
 80066ec:	4616      	mov	r6, r2
 80066ee:	d505      	bpl.n	80066fc <__swrite+0x1e>
 80066f0:	2302      	movs	r3, #2
 80066f2:	2200      	movs	r2, #0
 80066f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f8:	f000 f868 	bl	80067cc <_lseek_r>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	4632      	mov	r2, r6
 800670a:	463b      	mov	r3, r7
 800670c:	4628      	mov	r0, r5
 800670e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006712:	f000 b817 	b.w	8006744 <_write_r>

08006716 <__sseek>:
 8006716:	b510      	push	{r4, lr}
 8006718:	460c      	mov	r4, r1
 800671a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671e:	f000 f855 	bl	80067cc <_lseek_r>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	bf15      	itete	ne
 8006728:	6560      	strne	r0, [r4, #84]	; 0x54
 800672a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800672e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006732:	81a3      	strheq	r3, [r4, #12]
 8006734:	bf18      	it	ne
 8006736:	81a3      	strhne	r3, [r4, #12]
 8006738:	bd10      	pop	{r4, pc}

0800673a <__sclose>:
 800673a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673e:	f000 b813 	b.w	8006768 <_close_r>
	...

08006744 <_write_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4c07      	ldr	r4, [pc, #28]	; (8006764 <_write_r+0x20>)
 8006748:	4605      	mov	r5, r0
 800674a:	4608      	mov	r0, r1
 800674c:	4611      	mov	r1, r2
 800674e:	2200      	movs	r2, #0
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	f7fe fac8 	bl	8004ce8 <_write>
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	d102      	bne.n	8006762 <_write_r+0x1e>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	b103      	cbz	r3, 8006762 <_write_r+0x1e>
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	20001e74 	.word	0x20001e74

08006768 <_close_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4c06      	ldr	r4, [pc, #24]	; (8006784 <_close_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4605      	mov	r5, r0
 8006770:	4608      	mov	r0, r1
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	f7fe fdb0 	bl	80052d8 <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_close_r+0x1a>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	b103      	cbz	r3, 8006782 <_close_r+0x1a>
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20001e74 	.word	0x20001e74

08006788 <_fstat_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4c07      	ldr	r4, [pc, #28]	; (80067a8 <_fstat_r+0x20>)
 800678c:	2300      	movs	r3, #0
 800678e:	4605      	mov	r5, r0
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	f7fe fda2 	bl	80052de <_fstat>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d102      	bne.n	80067a4 <_fstat_r+0x1c>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	b103      	cbz	r3, 80067a4 <_fstat_r+0x1c>
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	20001e74 	.word	0x20001e74

080067ac <_isatty_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4c06      	ldr	r4, [pc, #24]	; (80067c8 <_isatty_r+0x1c>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4605      	mov	r5, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	f7fe fd96 	bl	80052e8 <_isatty>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_isatty_r+0x1a>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_isatty_r+0x1a>
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20001e74 	.word	0x20001e74

080067cc <_lseek_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4c07      	ldr	r4, [pc, #28]	; (80067ec <_lseek_r+0x20>)
 80067d0:	4605      	mov	r5, r0
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	6022      	str	r2, [r4, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fe fd86 	bl	80052ec <_lseek>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_lseek_r+0x1e>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_lseek_r+0x1e>
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20001e74 	.word	0x20001e74

080067f0 <__malloc_lock>:
 80067f0:	4770      	bx	lr

080067f2 <__malloc_unlock>:
 80067f2:	4770      	bx	lr

080067f4 <_read_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4c07      	ldr	r4, [pc, #28]	; (8006814 <_read_r+0x20>)
 80067f8:	4605      	mov	r5, r0
 80067fa:	4608      	mov	r0, r1
 80067fc:	4611      	mov	r1, r2
 80067fe:	2200      	movs	r2, #0
 8006800:	6022      	str	r2, [r4, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	f7fe fd40 	bl	8005288 <_read>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_read_r+0x1e>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	b103      	cbz	r3, 8006812 <_read_r+0x1e>
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	20001e74 	.word	0x20001e74

08006818 <_init>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr

08006824 <_fini>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr

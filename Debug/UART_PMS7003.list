
UART_PMS7003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000004  08006358  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001bc4  200001e8  0800653c  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00001504  20001dac  0800653c  00021dac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000272d2  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005115  00000000  00000000  000474ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e3f6  00000000  00000000  0004c5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014d8  00000000  00000000  0005a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ff8  00000000  00000000  0005bed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b4f9  00000000  00000000  0005dec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008596  00000000  00000000  000693c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00071957  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003fb0  00000000  00000000  000719d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	080060dc 	.word	0x080060dc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	080060dc 	.word	0x080060dc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000532:	4c10      	ldr	r4, [pc, #64]	; (8000574 <HAL_InitTick+0x44>)
 8000534:	7823      	ldrb	r3, [r4, #0]
{
 8000536:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000538:	b90b      	cbnz	r3, 800053e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800053a:	2001      	movs	r0, #1
 800053c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800053e:	f001 fbeb 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8000542:	7822      	ldrb	r2, [r4, #0]
 8000544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000548:	fbb3 f3f2 	udiv	r3, r3, r2
 800054c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000550:	f000 f896 	bl	8000680 <HAL_SYSTICK_Config>
 8000554:	4604      	mov	r4, r0
 8000556:	2800      	cmp	r0, #0
 8000558:	d1ef      	bne.n	800053a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	2d0f      	cmp	r5, #15
 800055c:	d8ed      	bhi.n	800053a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055e:	4602      	mov	r2, r0
 8000560:	4629      	mov	r1, r5
 8000562:	f04f 30ff 	mov.w	r0, #4294967295
 8000566:	f000 f849 	bl	80005fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_InitTick+0x48>)
 800056c:	4620      	mov	r0, r4
 800056e:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000570:	bd38      	pop	{r3, r4, r5, pc}
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	20000008 	.word	0x20000008

0800057c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <HAL_Init+0x28>)
 800057e:	6813      	ldr	r3, [r2, #0]
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000584:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	f000 f825 	bl	80005d8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffce 	bl	8000530 <HAL_InitTick>
 8000594:	4604      	mov	r4, r0
 8000596:	b918      	cbnz	r0, 80005a0 <HAL_Init+0x24>
    HAL_MspInit();
 8000598:	f004 f9fb 	bl	8004992 <HAL_MspInit>
}
 800059c:	4620      	mov	r0, r4
 800059e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005a0:	2401      	movs	r4, #1
 80005a2:	e7fb      	b.n	800059c <HAL_Init+0x20>
 80005a4:	58004000 	.word	0x58004000

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000434 	.word	0x20000434
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000434 	.word	0x20000434

080005cc <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <HAL_GetTickPrio+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000008 	.word	0x20000008

080005d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	0c1b      	lsrs	r3, r3, #16
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	0200      	lsls	r0, r0, #8
 80005ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f4:	60d3      	str	r3, [r2, #12]
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	68dc      	ldr	r4, [r3, #12]
 8000602:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000606:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060c:	2b04      	cmp	r3, #4
 800060e:	bf28      	it	cs
 8000610:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	f04f 0501 	mov.w	r5, #1
 8000618:	fa05 f303 	lsl.w	r3, r5, r3
 800061c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000620:	bf8c      	ite	hi
 8000622:	3c03      	subhi	r4, #3
 8000624:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000626:	4019      	ands	r1, r3
 8000628:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062a:	fa05 f404 	lsl.w	r4, r5, r4
 800062e:	3c01      	subs	r4, #1
 8000630:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000632:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	ea42 0201 	orr.w	r2, r2, r1
 8000638:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	bfad      	iteet	ge
 800063e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	f000 000f 	andlt.w	r0, r0, #15
 8000646:	4b06      	ldrlt	r3, [pc, #24]	; (8000660 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	bfb5      	itete	lt
 800064e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00
 8000660:	e000ed14 	.word	0xe000ed14

08000664 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000664:	2800      	cmp	r0, #0
 8000666:	db08      	blt.n	800067a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000668:	0942      	lsrs	r2, r0, #5
 800066a:	2301      	movs	r3, #1
 800066c:	f000 001f 	and.w	r0, r0, #31
 8000670:	fa03 f000 	lsl.w	r0, r3, r0
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <HAL_NVIC_EnableIRQ+0x18>)
 8000676:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100

08000680 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	3801      	subs	r0, #1
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000686:	d20a      	bcs.n	800069e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000696:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e010 	.word	0xe000e010
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80006ae:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80006b0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80006b2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80006b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80006b6:	b114      	cbz	r4, 80006be <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80006b8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80006ba:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80006bc:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80006c0:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80006c2:	f004 051c 	and.w	r5, r4, #28
 80006c6:	2401      	movs	r4, #1
 80006c8:	40ac      	lsls	r4, r5
 80006ca:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80006cc:	6804      	ldr	r4, [r0, #0]
 80006ce:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80006d0:	6883      	ldr	r3, [r0, #8]
 80006d2:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80006d4:	bf0b      	itete	eq
 80006d6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80006d8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80006da:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80006dc:	60e2      	strne	r2, [r4, #12]
 80006de:	bd70      	pop	{r4, r5, r6, pc}

080006e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80006e0:	6803      	ldr	r3, [r0, #0]
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006e8:	bf88      	it	hi
 80006ea:	490f      	ldrhi	r1, [pc, #60]	; (8000728 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006ec:	f022 0203 	bic.w	r2, r2, #3
 80006f0:	bf9b      	ittet	ls
 80006f2:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 80006f6:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006fa:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006fc:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006fe:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8000702:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000704:	f1a3 0308 	sub.w	r3, r3, #8
 8000708:	f04f 0214 	mov.w	r2, #20
 800070c:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000710:	f04f 0201 	mov.w	r2, #1
 8000714:	f003 031c 	and.w	r3, r3, #28
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800071c:	bf88      	it	hi
 800071e:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000720:	6503      	str	r3, [r0, #80]	; 0x50
 8000722:	4770      	bx	lr
 8000724:	40020407 	.word	0x40020407
 8000728:	4002081c 	.word	0x4002081c
 800072c:	40020880 	.word	0x40020880

08000730 <HAL_DMA_Init>:
{
 8000730:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8000732:	4604      	mov	r4, r0
 8000734:	2800      	cmp	r0, #0
 8000736:	d05d      	beq.n	80007f4 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000738:	6801      	ldr	r1, [r0, #0]
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <HAL_DMA_Init+0xc8>)
 800073c:	4299      	cmp	r1, r3
 800073e:	f04f 0014 	mov.w	r0, #20
 8000742:	d84a      	bhi.n	80007da <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000744:	4a2d      	ldr	r2, [pc, #180]	; (80007fc <HAL_DMA_Init+0xcc>)
 8000746:	440a      	add	r2, r1
 8000748:	fbb2 f2f0 	udiv	r2, r2, r0
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000750:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8000754:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000756:	2302      	movs	r3, #2
 8000758:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800075c:	68e0      	ldr	r0, [r4, #12]
 800075e:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8000760:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000762:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000764:	6920      	ldr	r0, [r4, #16]
 8000766:	4303      	orrs	r3, r0
 8000768:	6960      	ldr	r0, [r4, #20]
 800076a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800076c:	69a0      	ldr	r0, [r4, #24]
 800076e:	4303      	orrs	r3, r0
 8000770:	69e0      	ldr	r0, [r4, #28]
 8000772:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000774:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000776:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800077a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800077e:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000780:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8000782:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000784:	4620      	mov	r0, r4
 8000786:	f7ff ffab 	bl	80006e0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800078a:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800078c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800078e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000794:	bf04      	itt	eq
 8000796:	2300      	moveq	r3, #0
 8000798:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800079a:	6862      	ldr	r2, [r4, #4]
 800079c:	b2d3      	uxtb	r3, r2
 800079e:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007a0:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007a4:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007a6:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007a8:	d81f      	bhi.n	80007ea <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80007ac:	4815      	ldr	r0, [pc, #84]	; (8000804 <HAL_DMA_Init+0xd4>)
 80007ae:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007b0:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007b2:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007b4:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007b6:	2101      	movs	r1, #1
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007c0:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007c2:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007c6:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007c8:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ca:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80007cc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ce:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80007d0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80007d4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 80007d8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_DMA_Init+0xd8>)
 80007dc:	440b      	add	r3, r1
 80007de:	fbb3 f3f0 	udiv	r3, r3, r0
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_DMA_Init+0xdc>)
 80007e8:	e7b4      	b.n	8000754 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80007ee:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80007f0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80007f2:	e7ea      	b.n	80007ca <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80007f4:	2001      	movs	r0, #1
}
 80007f6:	bd10      	pop	{r4, pc}
 80007f8:	40020407 	.word	0x40020407
 80007fc:	bffdfff8 	.word	0xbffdfff8
 8000800:	1000823f 	.word	0x1000823f
 8000804:	40020940 	.word	0x40020940
 8000808:	bffdfbf8 	.word	0xbffdfbf8
 800080c:	40020400 	.word	0x40020400

08000810 <HAL_DMA_Start_IT>:
{
 8000810:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000812:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8000816:	2d01      	cmp	r5, #1
{
 8000818:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800081a:	d039      	beq.n	8000890 <HAL_DMA_Start_IT+0x80>
 800081c:	2501      	movs	r5, #1
 800081e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8000822:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8000826:	2d01      	cmp	r5, #1
 8000828:	f04f 0600 	mov.w	r6, #0
 800082c:	f04f 0502 	mov.w	r5, #2
 8000830:	d12c      	bne.n	800088c <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000832:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000836:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000838:	6806      	ldr	r6, [r0, #0]
 800083a:	6835      	ldr	r5, [r6, #0]
 800083c:	f025 0501 	bic.w	r5, r5, #1
 8000840:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000842:	f7ff ff33 	bl	80006ac <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8000846:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000848:	6803      	ldr	r3, [r0, #0]
 800084a:	b1ba      	cbz	r2, 800087c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000852:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000854:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000856:	6811      	ldr	r1, [r2, #0]
 8000858:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800085a:	bf42      	ittt	mi
 800085c:	6811      	ldrmi	r1, [r2, #0]
 800085e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8000862:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8000864:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000866:	b11a      	cbz	r2, 8000870 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000868:	6811      	ldr	r1, [r2, #0]
 800086a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800086e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f042 0201 	orr.w	r2, r2, #1
 8000876:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000878:	2000      	movs	r0, #0
 800087a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	f022 0204 	bic.w	r2, r2, #4
 8000882:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	f042 020a 	orr.w	r2, r2, #10
 800088a:	e7e2      	b.n	8000852 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 800088c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000890:	2002      	movs	r0, #2
}
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000894:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000898:	2b02      	cmp	r3, #2
{
 800089a:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800089c:	d003      	beq.n	80008a6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800089e:	2304      	movs	r3, #4
 80008a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
 80008a4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008a6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80008a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	f022 020e 	bic.w	r2, r2, #14
 80008b0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f022 0201 	bic.w	r2, r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80008ba:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008c2:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80008c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008c6:	f003 021c 	and.w	r2, r3, #28
 80008ca:	2301      	movs	r3, #1
 80008cc:	4093      	lsls	r3, r2
 80008ce:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80008d2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80008d4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80008d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80008d8:	b133      	cbz	r3, 80008e8 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80008e4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008e6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008e8:	2301      	movs	r3, #1
 80008ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 80008ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80008f0:	2400      	movs	r4, #0
 80008f2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80008f6:	b113      	cbz	r3, 80008fe <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80008f8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008fa:	4620      	mov	r0, r4
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	4618      	mov	r0, r3
}
 8000900:	bd10      	pop	{r4, pc}

08000902 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000902:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000904:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000906:	6803      	ldr	r3, [r0, #0]
{
 8000908:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800090a:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800090e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000910:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000912:	2404      	movs	r4, #4
 8000914:	4094      	lsls	r4, r2
 8000916:	4226      	tst	r6, r4
 8000918:	d00e      	beq.n	8000938 <HAL_DMA_IRQHandler+0x36>
 800091a:	f015 0f04 	tst.w	r5, #4
 800091e:	d00b      	beq.n	8000938 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000924:	bf5e      	ittt	pl
 8000926:	681a      	ldrpl	r2, [r3, #0]
 8000928:	f022 0204 	bicpl.w	r2, r2, #4
 800092c:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800092e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8000930:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8000932:	b373      	cbz	r3, 8000992 <HAL_DMA_IRQHandler+0x90>
}
 8000934:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000936:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000938:	2402      	movs	r4, #2
 800093a:	4094      	lsls	r4, r2
 800093c:	4226      	tst	r6, r4
 800093e:	d012      	beq.n	8000966 <HAL_DMA_IRQHandler+0x64>
 8000940:	f015 0f02 	tst.w	r5, #2
 8000944:	d00f      	beq.n	8000966 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	0695      	lsls	r5, r2, #26
 800094a:	d406      	bmi.n	800095a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	f022 020a 	bic.w	r2, r2, #10
 8000952:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000954:	2301      	movs	r3, #1
 8000956:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800095a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800095c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800095e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8000962:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000964:	e7e5      	b.n	8000932 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000966:	2408      	movs	r4, #8
 8000968:	4094      	lsls	r4, r2
 800096a:	4234      	tst	r4, r6
 800096c:	d011      	beq.n	8000992 <HAL_DMA_IRQHandler+0x90>
 800096e:	072c      	lsls	r4, r5, #28
 8000970:	d50f      	bpl.n	8000992 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000972:	681c      	ldr	r4, [r3, #0]
 8000974:	f024 040e 	bic.w	r4, r4, #14
 8000978:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800097a:	2301      	movs	r3, #1
 800097c:	fa03 f202 	lsl.w	r2, r3, r2
 8000980:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000982:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000984:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000988:	2300      	movs	r3, #0
 800098a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800098e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000990:	e7cf      	b.n	8000932 <HAL_DMA_IRQHandler+0x30>
}
 8000992:	bc70      	pop	{r4, r5, r6}
 8000994:	4770      	bx	lr

08000996 <HAL_DMA_GetState>:
  return hdma->State;
 8000996:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 800099a:	4770      	bx	lr

0800099c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a0:	680b      	ldr	r3, [r1, #0]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009a2:	4a59      	ldr	r2, [pc, #356]	; (8000b08 <HAL_GPIO_Init+0x16c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a4:	9301      	str	r3, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009a6:	f04f 0803 	mov.w	r8, #3
  uint32_t position = 0x00u;
 80009aa:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ac:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b0:	9c01      	ldr	r4, [sp, #4]
 80009b2:	40dc      	lsrs	r4, r3
 80009b4:	d102      	bne.n	80009bc <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  }
}
 80009b6:	b003      	add	sp, #12
 80009b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009bc:	2401      	movs	r4, #1
 80009be:	fa04 fe03 	lsl.w	lr, r4, r3
    if (iocurrent != 0x00u)
 80009c2:	9c01      	ldr	r4, [sp, #4]
 80009c4:	ea14 050e 	ands.w	r5, r4, lr
 80009c8:	f000 8094 	beq.w	8000af4 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009cc:	684c      	ldr	r4, [r1, #4]
 80009ce:	f024 0c10 	bic.w	ip, r4, #16
 80009d2:	f10c 36ff 	add.w	r6, ip, #4294967295
 80009d6:	2e01      	cmp	r6, #1
 80009d8:	ea4f 0643 	mov.w	r6, r3, lsl #1
 80009dc:	d812      	bhi.n	8000a04 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 80009de:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009e0:	fa08 fa06 	lsl.w	sl, r8, r6
 80009e4:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e8:	68cf      	ldr	r7, [r1, #12]
 80009ea:	40b7      	lsls	r7, r6
 80009ec:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80009f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009fc:	409f      	lsls	r7, r3
 80009fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a02:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a04:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a06:	fa08 fe06 	lsl.w	lr, r8, r6
 8000a0a:	ea6f 0e0e 	mvn.w	lr, lr
 8000a0e:	ea07 0a0e 	and.w	sl, r7, lr
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a12:	688f      	ldr	r7, [r1, #8]
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1a:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000a1e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a20:	d114      	bne.n	8000a4c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a26:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a2a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000a2e:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a32:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000a36:	fa09 fb0a 	lsl.w	fp, r9, sl
 8000a3a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a3e:	690f      	ldr	r7, [r1, #16]
 8000a40:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a44:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8000a48:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8000a4c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a4e:	ea0e 0e07 	and.w	lr, lr, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a52:	f004 0703 	and.w	r7, r4, #3
 8000a56:	fa07 f606 	lsl.w	r6, r7, r6
 8000a5a:	ea46 060e 	orr.w	r6, r6, lr
      GPIOx->MODER = temp;
 8000a5e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a60:	00e6      	lsls	r6, r4, #3
 8000a62:	d547      	bpl.n	8000af4 <HAL_GPIO_Init+0x158>
 8000a64:	f023 0703 	bic.w	r7, r3, #3
 8000a68:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a6c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a70:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a74:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a76:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a7a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a7e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a82:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a86:	d037      	beq.n	8000af8 <HAL_GPIO_Init+0x15c>
 8000a88:	4e20      	ldr	r6, [pc, #128]	; (8000b0c <HAL_GPIO_Init+0x170>)
 8000a8a:	42b0      	cmp	r0, r6
 8000a8c:	d036      	beq.n	8000afc <HAL_GPIO_Init+0x160>
 8000a8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a92:	42b0      	cmp	r0, r6
 8000a94:	d034      	beq.n	8000b00 <HAL_GPIO_Init+0x164>
 8000a96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a9a:	42b0      	cmp	r0, r6
 8000a9c:	d032      	beq.n	8000b04 <HAL_GPIO_Init+0x168>
 8000a9e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000aa2:	42b0      	cmp	r0, r6
 8000aa4:	bf14      	ite	ne
 8000aa6:	2607      	movne	r6, #7
 8000aa8:	2604      	moveq	r6, #4
 8000aaa:	fa06 f60e 	lsl.w	r6, r6, lr
 8000aae:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000ab4:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8000ab8:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000abe:	bf0c      	ite	eq
 8000ac0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ac2:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000ac4:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8000ac8:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000acc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000ad0:	bf0c      	ite	eq
 8000ad2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ad4:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000ad6:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000ada:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000adc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000ae0:	bf0c      	ite	eq
 8000ae2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ae4:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000ae6:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8000ae8:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aea:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000aec:	bf54      	ite	pl
 8000aee:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000af0:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000af2:	6056      	str	r6, [r2, #4]
    position++;
 8000af4:	3301      	adds	r3, #1
 8000af6:	e75b      	b.n	80009b0 <HAL_GPIO_Init+0x14>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af8:	2600      	movs	r6, #0
 8000afa:	e7d6      	b.n	8000aaa <HAL_GPIO_Init+0x10e>
 8000afc:	2601      	movs	r6, #1
 8000afe:	e7d4      	b.n	8000aaa <HAL_GPIO_Init+0x10e>
 8000b00:	2602      	movs	r6, #2
 8000b02:	e7d2      	b.n	8000aaa <HAL_GPIO_Init+0x10e>
 8000b04:	2603      	movs	r6, #3
 8000b06:	e7d0      	b.n	8000aaa <HAL_GPIO_Init+0x10e>
 8000b08:	58000800 	.word	0x58000800
 8000b0c:	48000400 	.word	0x48000400

08000b10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b10:	b10a      	cbz	r2, 8000b16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b12:	6181      	str	r1, [r0, #24]
 8000b14:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b16:	6281      	str	r1, [r0, #40]	; 0x28
 8000b18:	4770      	bx	lr

08000b1a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b1a:	6943      	ldr	r3, [r0, #20]
 8000b1c:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b1e:	bf14      	ite	ne
 8000b20:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b22:	6181      	streq	r1, [r0, #24]
 8000b24:	4770      	bx	lr

08000b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b26:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b28:	4604      	mov	r4, r0
{
 8000b2a:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d057      	beq.n	8000be0 <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b30:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000b34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b38:	b91b      	cbnz	r3, 8000b42 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b3a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b3e:	f004 f911 	bl	8004d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b42:	2303      	movs	r3, #3
 8000b44:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	f002 fc18 	bl	800337e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b52:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b54:	4615      	mov	r5, r2
 8000b56:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	d820      	bhi.n	8000ba2 <HAL_PCD_Init+0x7c>
 8000b60:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b62:	4611      	mov	r1, r2
 8000b64:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b66:	4298      	cmp	r0, r3
 8000b68:	f102 0201 	add.w	r2, r2, #1
 8000b6c:	d828      	bhi.n	8000bc0 <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b6e:	f104 0610 	add.w	r6, r4, #16
 8000b72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b74:	466d      	mov	r5, sp
 8000b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b78:	6833      	ldr	r3, [r6, #0]
 8000b7a:	602b      	str	r3, [r5, #0]
 8000b7c:	1d23      	adds	r3, r4, #4
 8000b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	f002 fc06 	bl	8003392 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000b86:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8000b88:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000b8a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000b8e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b92:	69e3      	ldr	r3, [r4, #28]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d102      	bne.n	8000b9e <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f000 fbbc 	bl	8001316 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	e01f      	b.n	8000be2 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 8000ba2:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8000ba6:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000baa:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bac:	3302      	adds	r3, #2
 8000bae:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8000bb0:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bb4:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bb8:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bba:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bbc:	50e5      	str	r5, [r4, r3]
 8000bbe:	e7ca      	b.n	8000b56 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8000bc0:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8000bc4:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bc8:	330a      	adds	r3, #10
 8000bca:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000bcc:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bd0:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bd4:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bd8:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bdc:	50e1      	str	r1, [r4, r3]
 8000bde:	e7c1      	b.n	8000b64 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000be0:	2001      	movs	r0, #1
}
 8000be2:	b006      	add	sp, #24
 8000be4:	bd70      	pop	{r4, r5, r6, pc}

08000be6 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000be6:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8000bea:	2b01      	cmp	r3, #1
{
 8000bec:	b510      	push	{r4, lr}
 8000bee:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000bf0:	d00c      	beq.n	8000c0c <HAL_PCD_Start+0x26>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8000bf8:	6800      	ldr	r0, [r0, #0]
 8000bfa:	f002 feac 	bl	8003956 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000bfe:	6820      	ldr	r0, [r4, #0]
 8000c00:	f002 fbb2 	bl	8003368 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000c0a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c0c:	2002      	movs	r0, #2
}
 8000c0e:	bd10      	pop	{r4, pc}

08000c10 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000c10:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8000c14:	2a01      	cmp	r2, #1
{
 8000c16:	b510      	push	{r4, lr}
 8000c18:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c1a:	d00b      	beq.n	8000c34 <HAL_PCD_SetAddress+0x24>
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8000c22:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c26:	6800      	ldr	r0, [r0, #0]
 8000c28:	f002 fe8f 	bl	800394a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8000c32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c34:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000c36:	bd10      	pop	{r4, pc}

08000c38 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	f001 0007 	and.w	r0, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c40:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000c44:	b2c5      	uxtb	r5, r0
 8000c46:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c4a:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8000c4e:	bf15      	itete	ne
 8000c50:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8000c54:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c58:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c5a:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 1U;
 8000c5e:	bf15      	itete	ne
 8000c60:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000c62:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000c64:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8000c68:	f885 6129 	strbeq.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8000c6c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000c6e:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000c70:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c72:	b2c0      	uxtb	r0, r0
 8000c74:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000c76:	b102      	cbz	r2, 8000c7a <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c78:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c7a:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8000c7c:	bf04      	itt	eq
 8000c7e:	2300      	moveq	r3, #0
 8000c80:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000c82:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d009      	beq.n	8000c9e <HAL_PCD_EP_Open+0x66>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c90:	6820      	ldr	r0, [r4, #0]
 8000c92:	f002 fb9b 	bl	80033cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 8000c9c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000c9e:	2002      	movs	r0, #2
}
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}

08000ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ca2:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ca6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cb0:	fb01 0102 	mla	r1, r1, r2, r0
{
 8000cb4:	b510      	push	{r4, lr}
 8000cb6:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8000cb8:	bf19      	ittee	ne
 8000cba:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cbe:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cc0:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 8000cc4:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 8000cc8:	bf15      	itete	ne
 8000cca:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8000ccc:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8000cce:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 8000cd2:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000cd6:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8000cd8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d009      	beq.n	8000cf4 <HAL_PCD_EP_Close+0x52>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000ce6:	6820      	ldr	r0, [r4, #0]
 8000ce8:	f002 fce2 	bl	80036b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000cf2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000cf4:	2002      	movs	r0, #2
}
 8000cf6:	bd10      	pop	{r4, pc}

08000cf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cfe:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8000d02:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000d04:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d06:	f886 1128 	strb.w	r1, [r6, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d0a:	f504 7194 	add.w	r1, r4, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d0e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d10:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
  ep->xfer_len = len;
 8000d14:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
  ep->xfer_count = 0U;
 8000d18:	f8c6 5144 	str.w	r5, [r6, #324]	; 0x144
  ep->is_in = 0U;
 8000d1c:	f886 5129 	strb.w	r5, [r6, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d20:	6800      	ldr	r0, [r0, #0]
 8000d22:	f002 fe39 	bl	8003998 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000d26:	4628      	mov	r0, r5
 8000d28:	bd70      	pop	{r4, r5, r6, pc}

08000d2a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d2a:	f001 0107 	and.w	r1, r1, #7
 8000d2e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000d32:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8000d36:	4770      	bx	lr

08000d38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d3e:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8000d42:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8000d44:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8000d46:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000d48:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d4a:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d4e:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d52:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d54:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000d56:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8000d58:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d5c:	6800      	ldr	r0, [r0, #0]
 8000d5e:	f002 fe1b 	bl	8003998 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000d62:	4630      	mov	r0, r6
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d68 <HAL_PCD_IRQHandler>:
{
 8000d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d6c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d6e:	6800      	ldr	r0, [r0, #0]
 8000d70:	f002 fdfc 	bl	800396c <USB_ReadInterrupts>
 8000d74:	0402      	lsls	r2, r0, #16
 8000d76:	f100 823a 	bmi.w	80011ee <HAL_PCD_IRQHandler+0x486>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	f002 fdf6 	bl	800396c <USB_ReadInterrupts>
 8000d80:	0543      	lsls	r3, r0, #21
 8000d82:	d50f      	bpl.n	8000da4 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d84:	6822      	ldr	r2, [r4, #0]
 8000d86:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d8e:	041b      	lsls	r3, r3, #16
 8000d90:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000d92:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d94:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d98:	f004 f835 	bl	8004e06 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff ff36 	bl	8000c10 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	f002 fde1 	bl	800396c <USB_ReadInterrupts>
 8000daa:	0443      	lsls	r3, r0, #17
 8000dac:	d508      	bpl.n	8000dc0 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db8:	041b      	lsls	r3, r3, #16
 8000dba:	0c1b      	lsrs	r3, r3, #16
 8000dbc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	f002 fdd3 	bl	800396c <USB_ReadInterrupts>
 8000dc6:	0487      	lsls	r7, r0, #18
 8000dc8:	d508      	bpl.n	8000ddc <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dca:	6822      	ldr	r2, [r4, #0]
 8000dcc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dd4:	041b      	lsls	r3, r3, #16
 8000dd6:	0c1b      	lsrs	r3, r3, #16
 8000dd8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ddc:	6820      	ldr	r0, [r4, #0]
 8000dde:	f002 fdc5 	bl	800396c <USB_ReadInterrupts>
 8000de2:	04c6      	lsls	r6, r0, #19
 8000de4:	d526      	bpl.n	8000e34 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000de6:	6822      	ldr	r2, [r4, #0]
 8000de8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	041b      	lsls	r3, r3, #16
 8000df2:	0c1b      	lsrs	r3, r3, #16
 8000df4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000df8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000dfc:	f023 0308 	bic.w	r3, r3, #8
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8000e08:	f894 3260 	ldrb.w	r3, [r4, #608]	; 0x260
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d105      	bne.n	8000e1c <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8000e10:	2100      	movs	r1, #0
 8000e12:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e16:	4620      	mov	r0, r4
 8000e18:	f004 f8f8 	bl	800500c <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f004 f815 	bl	8004e4c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e22:	6822      	ldr	r2, [r4, #0]
 8000e24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e2c:	041b      	lsls	r3, r3, #16
 8000e2e:	0c1b      	lsrs	r3, r3, #16
 8000e30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e34:	6820      	ldr	r0, [r4, #0]
 8000e36:	f002 fd99 	bl	800396c <USB_ReadInterrupts>
 8000e3a:	0505      	lsls	r5, r0, #20
 8000e3c:	d51d      	bpl.n	8000e7a <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e3e:	6820      	ldr	r0, [r4, #0]
 8000e40:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e4e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e56:	041b      	lsls	r3, r3, #16
 8000e58:	0c1b      	lsrs	r3, r3, #16
 8000e5a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e5e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000e6c:	f002 fd7e 	bl	800396c <USB_ReadInterrupts>
 8000e70:	04c0      	lsls	r0, r0, #19
 8000e72:	d402      	bmi.n	8000e7a <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8000e74:	4620      	mov	r0, r4
 8000e76:	f003 ffd9 	bl	8004e2c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000e7a:	6820      	ldr	r0, [r4, #0]
 8000e7c:	f002 fd76 	bl	800396c <USB_ReadInterrupts>
 8000e80:	0601      	lsls	r1, r0, #24
 8000e82:	d529      	bpl.n	8000ed8 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e8e:	0412      	lsls	r2, r2, #16
 8000e90:	0c12      	lsrs	r2, r2, #16
 8000e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000e96:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	f040 81ac 	bne.w	80011f8 <HAL_PCD_IRQHandler+0x490>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000ea0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000ea4:	b292      	uxth	r2, r2
 8000ea6:	f042 0204 	orr.w	r2, r2, #4
 8000eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000eae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	f042 0208 	orr.w	r2, r2, #8
 8000eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000ebc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000ec0:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8000ec4:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000ec6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8000eca:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000ece:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f004 f89a 	bl	800500c <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	f002 fd47 	bl	800396c <USB_ReadInterrupts>
 8000ede:	0582      	lsls	r2, r0, #22
 8000ee0:	d50b      	bpl.n	8000efa <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f003 ff82 	bl	8004dfe <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000efa:	6820      	ldr	r0, [r4, #0]
 8000efc:	f002 fd36 	bl	800396c <USB_ReadInterrupts>
 8000f00:	05c3      	lsls	r3, r0, #23
 8000f02:	d508      	bpl.n	8000f16 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000f1a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000f1e:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000f20:	f011 070f 	ands.w	r7, r1, #15
 8000f24:	f040 80ab 	bne.w	800107e <HAL_PCD_IRQHandler+0x316>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f28:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f2a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f2e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f30:	d12b      	bne.n	8000f8a <HAL_PCD_IRQHandler+0x222>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f32:	ea03 030a 	and.w	r3, r3, sl
 8000f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f3c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f40:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000f44:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000f48:	fa10 f083 	uxtah	r0, r0, r3
 8000f4c:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8000f50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f56:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f58:	4413      	add	r3, r2
 8000f5a:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f003 ff47 	bl	8004df0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f62:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f66:	b153      	cbz	r3, 8000f7e <HAL_PCD_IRQHandler+0x216>
 8000f68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f6a:	b942      	cbnz	r2, 8000f7e <HAL_PCD_IRQHandler+0x216>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f6c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f70:	6821      	ldr	r1, [r4, #0]
 8000f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f76:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f7a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f7e:	6820      	ldr	r0, [r4, #0]
 8000f80:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000f84:	041a      	lsls	r2, r3, #16
 8000f86:	d4c8      	bmi.n	8000f1a <HAL_PCD_IRQHandler+0x1b2>
 8000f88:	e6f7      	b.n	8000d7a <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f8a:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8000f8e:	d020      	beq.n	8000fd2 <HAL_PCD_IRQHandler+0x26a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f94:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000f98:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000f9c:	fa11 f383 	uxtah	r3, r1, r3

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fa0:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000fa4:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000fa8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fb0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fb4:	f002 fdd2 	bl	8003b5c <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	8813      	ldrh	r3, [r2, #0]
 8000fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fc0:	051b      	lsls	r3, r3, #20
 8000fc2:	0d1b      	lsrs	r3, r3, #20
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f003 ff02 	bl	8004dd4 <HAL_PCD_SetupStageCallback>
 8000fd0:	e7d5      	b.n	8000f7e <HAL_PCD_IRQHandler+0x216>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fd2:	041f      	lsls	r7, r3, #16
 8000fd4:	d5d3      	bpl.n	8000f7e <HAL_PCD_IRQHandler+0x216>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fd6:	8803      	ldrh	r3, [r0, #0]
 8000fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fdc:	051b      	lsls	r3, r3, #20
 8000fde:	0d1b      	lsrs	r3, r3, #20
 8000fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe4:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fe6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fea:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000fee:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000ff2:	fa11 f383 	uxtah	r3, r1, r3
 8000ff6:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffe:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001002:	b18b      	cbz	r3, 8001028 <HAL_PCD_IRQHandler+0x2c0>
 8001004:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001008:	b171      	cbz	r1, 8001028 <HAL_PCD_IRQHandler+0x2c0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800100a:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800100e:	f002 fda5 	bl	8003b5c <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8001012:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001016:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 800101a:	4413      	add	r3, r2
 800101c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001020:	4629      	mov	r1, r5
 8001022:	4620      	mov	r0, r4
 8001024:	f003 fedc 	bl	8004de0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001028:	6820      	ldr	r0, [r4, #0]
 800102a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800102e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001032:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001036:	b292      	uxth	r2, r2
 8001038:	b933      	cbnz	r3, 8001048 <HAL_PCD_IRQHandler+0x2e0>
 800103a:	5aab      	ldrh	r3, [r5, r2]
 800103c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001040:	ea43 030b 	orr.w	r3, r3, fp
 8001044:	52ab      	strh	r3, [r5, r2]
 8001046:	e007      	b.n	8001058 <HAL_PCD_IRQHandler+0x2f0>
 8001048:	2b3d      	cmp	r3, #61	; 0x3d
 800104a:	d814      	bhi.n	8001076 <HAL_PCD_IRQHandler+0x30e>
 800104c:	0859      	lsrs	r1, r3, #1
 800104e:	07de      	lsls	r6, r3, #31
 8001050:	bf48      	it	mi
 8001052:	3101      	addmi	r1, #1
 8001054:	0289      	lsls	r1, r1, #10
 8001056:	52a9      	strh	r1, [r5, r2]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001058:	8803      	ldrh	r3, [r0, #0]
 800105a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800105e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	0c1b      	lsrs	r3, r3, #16
 8001066:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001072:	8003      	strh	r3, [r0, #0]
 8001074:	e783      	b.n	8000f7e <HAL_PCD_IRQHandler+0x216>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	ea4b 2383 	orr.w	r3, fp, r3, lsl #10
 800107c:	e7e2      	b.n	8001044 <HAL_PCD_IRQHandler+0x2dc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800107e:	b23e      	sxth	r6, r7
 8001080:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 8001084:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001088:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800108c:	d040      	beq.n	8001110 <HAL_PCD_IRQHandler+0x3a8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800108e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8001092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001096:	051b      	lsls	r3, r3, #20
 8001098:	0d1b      	lsrs	r3, r3, #20
 800109a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800109e:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80010a2:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80010a6:	eb04 0108 	add.w	r1, r4, r8
 80010aa:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d159      	bne.n	8001166 <HAL_PCD_IRQHandler+0x3fe>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010b2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010b6:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 80010ba:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80010be:	fa15 f383 	uxtah	r3, r5, r3
 80010c2:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80010c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80010ca:	b135      	cbz	r5, 80010da <HAL_PCD_IRQHandler+0x372>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80010cc:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 80010d0:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80010d4:	462b      	mov	r3, r5
 80010d6:	f002 fd41 	bl	8003b5c <USB_ReadPMA>
 80010da:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 80010de:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 80010e2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80010e6:	442a      	add	r2, r5
 80010e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        ep->xfer_buff += count;
 80010ec:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 80010f0:	442a      	add	r2, r5
 80010f2:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80010f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fa:	b11b      	cbz	r3, 8001104 <HAL_PCD_IRQHandler+0x39c>
 80010fc:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001100:	4285      	cmp	r5, r0
 8001102:	d26b      	bcs.n	80011dc <HAL_PCD_IRQHandler+0x474>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001104:	44a0      	add	r8, r4
 8001106:	4620      	mov	r0, r4
 8001108:	f898 1128 	ldrb.w	r1, [r8, #296]	; 0x128
 800110c:	f003 fe68 	bl	8004de0 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001110:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001114:	f43f af33 	beq.w	8000f7e <HAL_PCD_IRQHandler+0x216>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001118:	6822      	ldr	r2, [r4, #0]
 800111a:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 800111e:	b29b      	uxth	r3, r3
 8001120:	ea03 030a 	and.w	r3, r3, sl
 8001124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001128:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800112c:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 8001130:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001134:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001138:	f202 4202 	addw	r2, r2, #1026	; 0x402
 800113c:	fa12 f283 	uxtah	r2, r2, r3
 8001140:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001144:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
 8001148:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800114c:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800114e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001150:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001154:	441a      	add	r2, r3
 8001156:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001158:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800115a:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 800115c:	2b00      	cmp	r3, #0
 800115e:	d143      	bne.n	80011e8 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001160:	f003 fe46 	bl	8004df0 <HAL_PCD_DataInStageCallback>
 8001164:	e70b      	b.n	8000f7e <HAL_PCD_IRQHandler+0x216>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001166:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 800116a:	b213      	sxth	r3, r2
 800116c:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8001170:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001174:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001178:	d022      	beq.n	80011c0 <HAL_PCD_IRQHandler+0x458>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800117a:	f200 4502 	addw	r5, r0, #1026	; 0x402
 800117e:	fa15 f383 	uxtah	r3, r5, r3
 8001182:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001186:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800118a:	b135      	cbz	r5, 800119a <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800118c:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 8001190:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001192:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001196:	f002 fce1 	bl	8003b5c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800119a:	eb04 0308 	add.w	r3, r4, r8
 800119e:	6822      	ldr	r2, [r4, #0]
 80011a0:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80011a4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011ba:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80011be:	e78c      	b.n	80010da <HAL_PCD_IRQHandler+0x372>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011c0:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80011c4:	fa15 f383 	uxtah	r3, r5, r3
 80011c8:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80011cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80011d0:	2d00      	cmp	r5, #0
 80011d2:	d0e2      	beq.n	800119a <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011d4:	462b      	mov	r3, r5
 80011d6:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 80011da:	e7da      	b.n	8001192 <HAL_PCD_IRQHandler+0x42a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80011dc:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff fd89 	bl	8000cf8 <HAL_PCD_EP_Receive>
 80011e6:	e793      	b.n	8001110 <HAL_PCD_IRQHandler+0x3a8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80011e8:	f7ff fda6 	bl	8000d38 <HAL_PCD_EP_Transmit>
 80011ec:	e6c7      	b.n	8000f7e <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80011ee:	f8df a010 	ldr.w	sl, [pc, #16]	; 8001200 <HAL_PCD_IRQHandler+0x498>
 80011f2:	f8df b010 	ldr.w	fp, [pc, #16]	; 8001204 <HAL_PCD_IRQHandler+0x49c>
 80011f6:	e6c2      	b.n	8000f7e <HAL_PCD_IRQHandler+0x216>
      HAL_PCD_SuspendCallback(hpcd);
 80011f8:	4620      	mov	r0, r4
 80011fa:	f003 fe17 	bl	8004e2c <HAL_PCD_SuspendCallback>
 80011fe:	e66b      	b.n	8000ed8 <HAL_PCD_IRQHandler+0x170>
 8001200:	ffff8f0f 	.word	0xffff8f0f
 8001204:	ffff8000 	.word	0xffff8000

08001208 <HAL_PCD_EP_SetStall>:
{
 8001208:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800120a:	6843      	ldr	r3, [r0, #4]
 800120c:	f001 0507 	and.w	r5, r1, #7
 8001210:	429d      	cmp	r5, r3
{
 8001212:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001214:	d82d      	bhi.n	8001272 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001216:	f011 0f80 	tst.w	r1, #128	; 0x80
 800121a:	f04f 0320 	mov.w	r3, #32
 800121e:	d01e      	beq.n	800125e <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8001220:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001224:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001228:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800122a:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 800122c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 8001230:	2201      	movs	r2, #1
 8001232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001234:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001236:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
 800123a:	4291      	cmp	r1, r2
 800123c:	d01b      	beq.n	8001276 <HAL_PCD_EP_SetStall+0x6e>
 800123e:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001242:	4619      	mov	r1, r3
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	f002 fb13 	bl	8003870 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800124a:	b925      	cbnz	r5, 8001256 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800124c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001250:	6820      	ldr	r0, [r4, #0]
 8001252:	f002 fb8f 	bl	8003974 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001256:	2000      	movs	r0, #0
 8001258:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 800125c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800125e:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 8001262:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001266:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001268:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 800126c:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
 8001270:	e7de      	b.n	8001230 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
 8001274:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001276:	2002      	movs	r0, #2
}
 8001278:	bd38      	pop	{r3, r4, r5, pc}

0800127a <HAL_PCD_EP_ClrStall>:
{
 800127a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800127c:	6843      	ldr	r3, [r0, #4]
 800127e:	f001 020f 	and.w	r2, r1, #15
 8001282:	429a      	cmp	r2, r3
{
 8001284:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001286:	d82a      	bhi.n	80012de <HAL_PCD_EP_ClrStall+0x64>
 8001288:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 800128c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001290:	b2da      	uxtb	r2, r3
 8001292:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001296:	fb01 0102 	mla	r1, r1, r2, r0
 800129a:	bf19      	ittee	ne
 800129c:	3128      	addne	r1, #40	; 0x28
    ep->is_in = 1U;
 800129e:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012a2:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 80012a6:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 80012aa:	bf14      	ite	ne
 80012ac:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80012ae:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80012b0:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80012b4:	bf14      	ite	ne
 80012b6:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 80012ba:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 80012be:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012c0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80012c2:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d00b      	beq.n	80012e2 <HAL_PCD_EP_ClrStall+0x68>
 80012ca:	2301      	movs	r3, #1
 80012cc:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	f002 faee 	bl	80038b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012d6:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 80012da:	4628      	mov	r0, r5
 80012dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80012de:	2001      	movs	r0, #1
 80012e0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80012e2:	2002      	movs	r0, #2
}
 80012e4:	bd38      	pop	{r3, r4, r5, pc}

080012e6 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80012e6:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ea:	bf1b      	ittet	ne
 80012ec:	f001 0107 	andne.w	r1, r1, #7
 80012f0:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012f4:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f8:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80012fa:	bf08      	it	eq
 80012fc:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001300:	b91a      	cbnz	r2, 800130a <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001302:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001304:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001306:	2000      	movs	r0, #0
 8001308:	4770      	bx	lr
    ep->doublebuffer = 1U;
 800130a:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800130c:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800130e:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001310:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001312:	8143      	strh	r3, [r0, #10]
 8001314:	e7f7      	b.n	8001306 <HAL_PCDEx_PMAConfig+0x20>

08001316 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001316:	6802      	ldr	r2, [r0, #0]
{
 8001318:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 800131a:	2101      	movs	r1, #1
 800131c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001320:	2000      	movs	r0, #0
 8001322:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001326:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800132a:	b29b      	uxth	r3, r3
 800132c:	430b      	orrs	r3, r1
 800132e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001332:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001336:	b29b      	uxth	r3, r3
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001340:	4770      	bx	lr
	...

08001344 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001344:	4a02      	ldr	r2, [pc, #8]	; (8001350 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4770      	bx	lr
 8001350:	58000400 	.word	0x58000400

08001354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <HAL_PWREx_GetVoltageRange+0xc>)
 8001356:	6818      	ldr	r0, [r3, #0]
}
 8001358:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	58000400 	.word	0x58000400

08001364 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001364:	4a02      	ldr	r2, [pc, #8]	; (8001370 <HAL_PWREx_EnableVddUSB+0xc>)
 8001366:	6853      	ldr	r3, [r2, #4]
 8001368:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136c:	6053      	str	r3, [r2, #4]
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001378:	6818      	ldr	r0, [r3, #0]
}
 800137a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800137e:	4770      	bx	lr

08001380 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	6818      	ldr	r0, [r3, #0]
}
 8001386:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800138a:	4770      	bx	lr

0800138c <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001390:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8001394:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001398:	4770      	bx	lr

0800139a <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139e:	6818      	ldr	r0, [r3, #0]
}
 80013a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80013a4:	4770      	bx	lr

080013a6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80013a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013b0:	4318      	orrs	r0, r3
 80013b2:	6010      	str	r0, [r2, #0]
 80013b4:	4770      	bx	lr

080013b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 80013c0:	28b0      	cmp	r0, #176	; 0xb0
 80013c2:	bf28      	it	cs
 80013c4:	20b0      	movcs	r0, #176	; 0xb0
 80013c6:	4770      	bx	lr

080013c8 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80013c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013cc:	6853      	ldr	r3, [r2, #4]
 80013ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80013d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80013d6:	6050      	str	r0, [r2, #4]
 80013d8:	4770      	bx	lr
	...

080013dc <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80013dc:	28b0      	cmp	r0, #176	; 0xb0
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80013e0:	4a32      	ldr	r2, [pc, #200]	; (80014ac <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80013e2:	bf98      	it	ls
 80013e4:	0900      	lsrls	r0, r0, #4
{
 80013e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80013e8:	bf8c      	ite	hi
 80013ea:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80013ec:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80013f0:	4c2f      	ldr	r4, [pc, #188]	; (80014b0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80013f6:	b08d      	sub	sp, #52	; 0x34
 80013f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80013fc:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001400:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 800140c:	fbb5 f5f3 	udiv	r5, r5, r3
 8001410:	f7ff ffa0 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 8001414:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800141a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800141e:	f104 0210 	add.w	r2, r4, #16
 8001422:	ca07      	ldmia	r2, {r0, r1, r2}
 8001424:	ab01      	add	r3, sp, #4
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001426:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800142c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001434:	ac0c      	add	r4, sp, #48	; 0x30
 8001436:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800143a:	d11f      	bne.n	800147c <RCC_SetFlashLatencyFromMSIRange+0xa0>
 800143c:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800143e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8001442:	4295      	cmp	r5, r2
 8001444:	d815      	bhi.n	8001472 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001446:	aa0c      	add	r2, sp, #48	; 0x30
 8001448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800144c:	f853 4c10 	ldr.w	r4, [r3, #-16]
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001450:	4d19      	ldr	r5, [pc, #100]	; (80014b8 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	f023 0307 	bic.w	r3, r3, #7
 8001458:	4323      	orrs	r3, r4
 800145a:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800145c:	f7ff f8b0 	bl	80005c0 <HAL_GetTick>
 8001460:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	429c      	cmp	r4, r3
 800146a:	d116      	bne.n	800149a <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
}
 800146e:	b00d      	add	sp, #52	; 0x34
 8001470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001472:	3301      	adds	r3, #1
 8001474:	2b04      	cmp	r3, #4
 8001476:	d1e2      	bne.n	800143e <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001478:	2400      	movs	r4, #0
 800147a:	e7e9      	b.n	8001450 <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800147c:	9b01      	ldr	r3, [sp, #4]
 800147e:	429d      	cmp	r5, r3
 8001480:	d907      	bls.n	8001492 <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8001482:	9b02      	ldr	r3, [sp, #8]
 8001484:	429d      	cmp	r5, r3
 8001486:	d906      	bls.n	8001496 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8001488:	9b03      	ldr	r3, [sp, #12]
 800148a:	429d      	cmp	r5, r3
 800148c:	d8f4      	bhi.n	8001478 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800148e:	2302      	movs	r3, #2
 8001490:	e7d9      	b.n	8001446 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001492:	2300      	movs	r3, #0
 8001494:	e7d7      	b.n	8001446 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001496:	2301      	movs	r3, #1
 8001498:	e7d5      	b.n	8001446 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800149a:	f7ff f891 	bl	80005c0 <HAL_GetTick>
 800149e:	1b80      	subs	r0, r0, r6
 80014a0:	2802      	cmp	r0, #2
 80014a2:	d9de      	bls.n	8001462 <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
 80014a6:	e7e2      	b.n	800146e <RCC_SetFlashLatencyFromMSIRange+0x92>
 80014a8:	08006228 	.word	0x08006228
 80014ac:	080061c8 	.word	0x080061c8
 80014b0:	080060f4 	.word	0x080060f4
 80014b4:	000f4240 	.word	0x000f4240
 80014b8:	58004000 	.word	0x58004000

080014bc <HAL_RCC_OscConfig>:
{
 80014bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 80014be:	4604      	mov	r4, r0
 80014c0:	b908      	cbnz	r0, 80014c6 <HAL_RCC_OscConfig+0xa>
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c6:	6803      	ldr	r3, [r0, #0]
 80014c8:	069f      	lsls	r7, r3, #26
 80014ca:	d52a      	bpl.n	8001522 <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d0:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80014d2:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014d4:	f013 030c 	ands.w	r3, r3, #12
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2a>
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d146      	bne.n	800156c <HAL_RCC_OscConfig+0xb0>
 80014de:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d142      	bne.n	800156c <HAL_RCC_OscConfig+0xb0>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e6:	f7ff ff58 	bl	800139a <LL_RCC_MSI_IsReady>
 80014ea:	b110      	cbz	r0, 80014f2 <HAL_RCC_OscConfig+0x36>
 80014ec:	69e3      	ldr	r3, [r4, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0e7      	beq.n	80014c2 <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014f4:	f7ff ff5f 	bl	80013b6 <LL_RCC_MSI_GetRange>
 80014f8:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014fc:	d92b      	bls.n	8001556 <HAL_RCC_OscConfig+0x9a>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fe:	f7ff ff6d 	bl	80013dc <RCC_SetFlashLatencyFromMSIRange>
 8001502:	2800      	cmp	r0, #0
 8001504:	d1dd      	bne.n	80014c2 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001506:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001508:	f7ff ff4d 	bl	80013a6 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150c:	6a20      	ldr	r0, [r4, #32]
 800150e:	f7ff ff5b 	bl	80013c8 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 8001512:	f003 fb83 	bl	8004c1c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001516:	4bb8      	ldr	r3, [pc, #736]	; (80017f8 <HAL_RCC_OscConfig+0x33c>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	f7ff f809 	bl	8000530 <HAL_InitTick>
 800151e:	2800      	cmp	r0, #0
 8001520:	d1cf      	bne.n	80014c2 <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	07de      	lsls	r6, r3, #31
 8001526:	d44e      	bmi.n	80015c6 <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	079d      	lsls	r5, r3, #30
 800152c:	f100 8098 	bmi.w	8001660 <HAL_RCC_OscConfig+0x1a4>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	f013 0f18 	tst.w	r3, #24
 8001536:	f040 80d9 	bne.w	80016ec <HAL_RCC_OscConfig+0x230>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	0758      	lsls	r0, r3, #29
 800153e:	f100 8168 	bmi.w	8001812 <HAL_RCC_OscConfig+0x356>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	0658      	lsls	r0, r3, #25
 8001546:	f100 81ba 	bmi.w	80018be <HAL_RCC_OscConfig+0x402>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800154c:	2900      	cmp	r1, #0
 800154e:	f040 81e2 	bne.w	8001916 <HAL_RCC_OscConfig+0x45a>
  return HAL_OK;
 8001552:	2000      	movs	r0, #0
 8001554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001556:	f7ff ff26 	bl	80013a6 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155a:	6a20      	ldr	r0, [r4, #32]
 800155c:	f7ff ff34 	bl	80013c8 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001560:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001562:	f7ff ff3b 	bl	80013dc <RCC_SetFlashLatencyFromMSIRange>
 8001566:	2800      	cmp	r0, #0
 8001568:	d0d3      	beq.n	8001512 <HAL_RCC_OscConfig+0x56>
 800156a:	e7aa      	b.n	80014c2 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800156c:	69e2      	ldr	r2, [r4, #28]
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	b1ba      	cbz	r2, 80015a4 <HAL_RCC_OscConfig+0xe8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800157c:	f7ff f820 	bl	80005c0 <HAL_GetTick>
 8001580:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8001582:	f7ff ff0a 	bl	800139a <LL_RCC_MSI_IsReady>
 8001586:	b130      	cbz	r0, 8001596 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800158a:	f7ff ff0c 	bl	80013a6 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158e:	6a20      	ldr	r0, [r4, #32]
 8001590:	f7ff ff1a 	bl	80013c8 <LL_RCC_MSI_SetCalibTrimming>
 8001594:	e7c5      	b.n	8001522 <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001596:	f7ff f813 	bl	80005c0 <HAL_GetTick>
 800159a:	1b40      	subs	r0, r0, r5
 800159c:	2802      	cmp	r0, #2
 800159e:	d9f0      	bls.n	8001582 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80015a0:	2003      	movs	r0, #3
 80015a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015ac:	f7ff f808 	bl	80005c0 <HAL_GetTick>
 80015b0:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 80015b2:	f7ff fef2 	bl	800139a <LL_RCC_MSI_IsReady>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d0b3      	beq.n	8001522 <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ba:	f7ff f801 	bl	80005c0 <HAL_GetTick>
 80015be:	1b40      	subs	r0, r0, r5
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d9f6      	bls.n	80015b2 <HAL_RCC_OscConfig+0xf6>
 80015c4:	e7ec      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ca:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015cc:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015ce:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x126>
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d10b      	bne.n	80015f2 <HAL_RCC_OscConfig+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015da:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_OscConfig+0x136>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	f7ff fec7 	bl	8001374 <LL_RCC_HSE_IsReady>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d09e      	beq.n	8001528 <HAL_RCC_OscConfig+0x6c>
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d19b      	bne.n	8001528 <HAL_RCC_OscConfig+0x6c>
 80015f0:	e767      	b.n	80014c2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	6862      	ldr	r2, [r4, #4]
 80015f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fc:	d110      	bne.n	8001620 <HAL_RCC_OscConfig+0x164>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001604:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001606:	f7fe ffdb 	bl	80005c0 <HAL_GetTick>
 800160a:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 800160c:	f7ff feb2 	bl	8001374 <LL_RCC_HSE_IsReady>
 8001610:	2800      	cmp	r0, #0
 8001612:	d189      	bne.n	8001528 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7fe ffd4 	bl	80005c0 <HAL_GetTick>
 8001618:	1b40      	subs	r0, r0, r5
 800161a:	2864      	cmp	r0, #100	; 0x64
 800161c:	d9f6      	bls.n	800160c <HAL_RCC_OscConfig+0x150>
 800161e:	e7bf      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001624:	d104      	bne.n	8001630 <HAL_RCC_OscConfig+0x174>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e7e6      	b.n	80015fe <HAL_RCC_OscConfig+0x142>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001636:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800163e:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	2a00      	cmp	r2, #0
 8001642:	d1e0      	bne.n	8001606 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 8001644:	f7fe ffbc 	bl	80005c0 <HAL_GetTick>
 8001648:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 800164a:	f7ff fe93 	bl	8001374 <LL_RCC_HSE_IsReady>
 800164e:	2800      	cmp	r0, #0
 8001650:	f43f af6a 	beq.w	8001528 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7fe ffb4 	bl	80005c0 <HAL_GetTick>
 8001658:	1b40      	subs	r0, r0, r5
 800165a:	2864      	cmp	r0, #100	; 0x64
 800165c:	d9f5      	bls.n	800164a <HAL_RCC_OscConfig+0x18e>
 800165e:	e79f      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001664:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001666:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001668:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800166c:	2b04      	cmp	r3, #4
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x1c0>
 8001670:	2b0c      	cmp	r3, #12
 8001672:	d114      	bne.n	800169e <HAL_RCC_OscConfig+0x1e2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001674:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001678:	2b02      	cmp	r3, #2
 800167a:	d110      	bne.n	800169e <HAL_RCC_OscConfig+0x1e2>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167c:	f7ff fe80 	bl	8001380 <LL_RCC_HSI_IsReady>
 8001680:	b118      	cbz	r0, 800168a <HAL_RCC_OscConfig+0x1ce>
 8001682:	68e3      	ldr	r3, [r4, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f43f af1c 	beq.w	80014c2 <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800168a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168e:	6921      	ldr	r1, [r4, #16]
 8001690:	6853      	ldr	r3, [r2, #4]
 8001692:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001696:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800169a:	6053      	str	r3, [r2, #4]
 800169c:	e748      	b.n	8001530 <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169e:	68e2      	ldr	r2, [r4, #12]
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a4:	b182      	cbz	r2, 80016c8 <HAL_RCC_OscConfig+0x20c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ae:	f7fe ff87 	bl	80005c0 <HAL_GetTick>
 80016b2:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 80016b4:	f7ff fe64 	bl	8001380 <LL_RCC_HSI_IsReady>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d1e6      	bne.n	800168a <HAL_RCC_OscConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016bc:	f7fe ff80 	bl	80005c0 <HAL_GetTick>
 80016c0:	1b40      	subs	r0, r0, r5
 80016c2:	2802      	cmp	r0, #2
 80016c4:	d9f6      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1f8>
 80016c6:	e76b      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016d0:	f7fe ff76 	bl	80005c0 <HAL_GetTick>
 80016d4:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 80016d6:	f7ff fe53 	bl	8001380 <LL_RCC_HSI_IsReady>
 80016da:	2800      	cmp	r0, #0
 80016dc:	f43f af28 	beq.w	8001530 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7fe ff6e 	bl	80005c0 <HAL_GetTick>
 80016e4:	1b40      	subs	r0, r0, r5
 80016e6:	2802      	cmp	r0, #2
 80016e8:	d9f5      	bls.n	80016d6 <HAL_RCC_OscConfig+0x21a>
 80016ea:	e759      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ec:	6962      	ldr	r2, [r4, #20]
 80016ee:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80016f2:	2a00      	cmp	r2, #0
 80016f4:	d06b      	beq.n	80017ce <HAL_RCC_OscConfig+0x312>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80016f6:	06d9      	lsls	r1, r3, #27
 80016f8:	d543      	bpl.n	8001782 <HAL_RCC_OscConfig+0x2c6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 80016fa:	f7ff fe47 	bl	800138c <LL_RCC_LSI1_IsReady>
 80016fe:	b310      	cbz	r0, 8001746 <HAL_RCC_OscConfig+0x28a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001700:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001704:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001710:	f7fe ff56 	bl	80005c0 <HAL_GetTick>
 8001714:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001716:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800171a:	071a      	lsls	r2, r3, #28
 800171c:	f140 8199 	bpl.w	8001a52 <HAL_RCC_OscConfig+0x596>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001720:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001724:	69a2      	ldr	r2, [r4, #24]
 8001726:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800172a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800172e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001732:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800173e:	f7fe ff3f 	bl	80005c0 <HAL_GetTick>
 8001742:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001744:	e018      	b.n	8001778 <HAL_RCC_OscConfig+0x2bc>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001746:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8001752:	f7fe ff35 	bl	80005c0 <HAL_GetTick>
 8001756:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001758:	f7ff fe18 	bl	800138c <LL_RCC_LSI1_IsReady>
 800175c:	2800      	cmp	r0, #0
 800175e:	d1cf      	bne.n	8001700 <HAL_RCC_OscConfig+0x244>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001760:	f7fe ff2e 	bl	80005c0 <HAL_GetTick>
 8001764:	1b40      	subs	r0, r0, r5
 8001766:	2802      	cmp	r0, #2
 8001768:	d9f6      	bls.n	8001758 <HAL_RCC_OscConfig+0x29c>
 800176a:	e719      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800176c:	f7fe ff28 	bl	80005c0 <HAL_GetTick>
 8001770:	1b40      	subs	r0, r0, r5
 8001772:	2802      	cmp	r0, #2
 8001774:	f63f af14 	bhi.w	80015a0 <HAL_RCC_OscConfig+0xe4>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001778:	f7ff fe08 	bl	800138c <LL_RCC_LSI1_IsReady>
 800177c:	2800      	cmp	r0, #0
 800177e:	d1f5      	bne.n	800176c <HAL_RCC_OscConfig+0x2b0>
 8001780:	e6db      	b.n	800153a <HAL_RCC_OscConfig+0x7e>
 8001782:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800178e:	f7fe ff17 	bl	80005c0 <HAL_GetTick>
 8001792:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001794:	f7ff fdfa 	bl	800138c <LL_RCC_LSI1_IsReady>
 8001798:	b198      	cbz	r0, 80017c2 <HAL_RCC_OscConfig+0x306>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800179a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800179e:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80017a4:	f022 0204 	bic.w	r2, r2, #4
 80017a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017ac:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80017b0:	071b      	lsls	r3, r3, #28
 80017b2:	f57f aec2 	bpl.w	800153a <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017b6:	f7fe ff03 	bl	80005c0 <HAL_GetTick>
 80017ba:	1b80      	subs	r0, r0, r6
 80017bc:	2803      	cmp	r0, #3
 80017be:	d9f5      	bls.n	80017ac <HAL_RCC_OscConfig+0x2f0>
 80017c0:	e6ee      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017c2:	f7fe fefd 	bl	80005c0 <HAL_GetTick>
 80017c6:	1b80      	subs	r0, r0, r6
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d9e3      	bls.n	8001794 <HAL_RCC_OscConfig+0x2d8>
 80017cc:	e6e8      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017ce:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017da:	f7fe fef1 	bl	80005c0 <HAL_GetTick>
 80017de:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017e0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80017e4:	071f      	lsls	r7, r3, #28
 80017e6:	f140 813b 	bpl.w	8001a60 <HAL_RCC_OscConfig+0x5a4>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017ea:	f7fe fee9 	bl	80005c0 <HAL_GetTick>
 80017ee:	1b80      	subs	r0, r0, r6
 80017f0:	2803      	cmp	r0, #3
 80017f2:	d9f5      	bls.n	80017e0 <HAL_RCC_OscConfig+0x324>
 80017f4:	e6d4      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017fc:	f7fe fee0 	bl	80005c0 <HAL_GetTick>
 8001800:	1b40      	subs	r0, r0, r5
 8001802:	2802      	cmp	r0, #2
 8001804:	f63f aecc 	bhi.w	80015a0 <HAL_RCC_OscConfig+0xe4>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001808:	f7ff fdc0 	bl	800138c <LL_RCC_LSI1_IsReady>
 800180c:	2800      	cmp	r0, #0
 800180e:	d1f5      	bne.n	80017fc <HAL_RCC_OscConfig+0x340>
 8001810:	e693      	b.n	800153a <HAL_RCC_OscConfig+0x7e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001812:	4d98      	ldr	r5, [pc, #608]	; (8001a74 <HAL_RCC_OscConfig+0x5b8>)
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	05d9      	lsls	r1, r3, #23
 8001818:	d51c      	bpl.n	8001854 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181a:	68a3      	ldr	r3, [r4, #8]
 800181c:	2b01      	cmp	r3, #1
 800181e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001822:	d125      	bne.n	8001870 <HAL_RCC_OscConfig+0x3b4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001824:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001830:	f7fe fec6 	bl	80005c0 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001834:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001838:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f241 3588 	movw	r5, #5000	; 0x1388
 800183e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001842:	079b      	lsls	r3, r3, #30
 8001844:	f53f ae7d 	bmi.w	8001542 <HAL_RCC_OscConfig+0x86>
 8001848:	f7fe feba 	bl	80005c0 <HAL_GetTick>
 800184c:	1b80      	subs	r0, r0, r6
 800184e:	42a8      	cmp	r0, r5
 8001850:	d9f5      	bls.n	800183e <HAL_RCC_OscConfig+0x382>
 8001852:	e6a5      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
      HAL_PWR_EnableBkUpAccess();
 8001854:	f7ff fd76 	bl	8001344 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001858:	f7fe feb2 	bl	80005c0 <HAL_GetTick>
 800185c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	682b      	ldr	r3, [r5, #0]
 8001860:	05da      	lsls	r2, r3, #23
 8001862:	d4da      	bmi.n	800181a <HAL_RCC_OscConfig+0x35e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7fe feac 	bl	80005c0 <HAL_GetTick>
 8001868:	1b80      	subs	r0, r0, r6
 800186a:	2802      	cmp	r0, #2
 800186c:	d9f7      	bls.n	800185e <HAL_RCC_OscConfig+0x3a2>
 800186e:	e697      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	2b05      	cmp	r3, #5
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x3c6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001874:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001880:	e7d0      	b.n	8001824 <HAL_RCC_OscConfig+0x368>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001882:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001886:	f022 0201 	bic.w	r2, r2, #1
 800188a:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800188e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001892:	f022 0204 	bic.w	r2, r2, #4
 8001896:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1c8      	bne.n	8001830 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 800189e:	f7fe fe8f 	bl	80005c0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018a6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018a8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80018ac:	0798      	lsls	r0, r3, #30
 80018ae:	f57f ae48 	bpl.w	8001542 <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7fe fe85 	bl	80005c0 <HAL_GetTick>
 80018b6:	1bc0      	subs	r0, r0, r7
 80018b8:	42b0      	cmp	r0, r6
 80018ba:	d9f5      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3ec>
 80018bc:	e670      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018c0:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80018c4:	b19b      	cbz	r3, 80018ee <HAL_RCC_OscConfig+0x432>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018c6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80018d2:	f7fe fe75 	bl	80005c0 <HAL_GetTick>
 80018d6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018d8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018dc:	0799      	lsls	r1, r3, #30
 80018de:	f53f ae34 	bmi.w	800154a <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e2:	f7fe fe6d 	bl	80005c0 <HAL_GetTick>
 80018e6:	1b80      	subs	r0, r0, r6
 80018e8:	2802      	cmp	r0, #2
 80018ea:	d9f5      	bls.n	80018d8 <HAL_RCC_OscConfig+0x41c>
 80018ec:	e658      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018ee:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80018fa:	f7fe fe61 	bl	80005c0 <HAL_GetTick>
 80018fe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001900:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001904:	079a      	lsls	r2, r3, #30
 8001906:	f57f ae20 	bpl.w	800154a <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800190a:	f7fe fe59 	bl	80005c0 <HAL_GetTick>
 800190e:	1b80      	subs	r0, r0, r6
 8001910:	2802      	cmp	r0, #2
 8001912:	d9f5      	bls.n	8001900 <HAL_RCC_OscConfig+0x444>
 8001914:	e644      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001916:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800191a:	2902      	cmp	r1, #2
 800191c:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800191e:	68eb      	ldr	r3, [r5, #12]
 8001920:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001924:	d177      	bne.n	8001a16 <HAL_RCC_OscConfig+0x55a>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001928:	f003 0103 	and.w	r1, r3, #3
 800192c:	4281      	cmp	r1, r0
 800192e:	d118      	bne.n	8001962 <HAL_RCC_OscConfig+0x4a6>
 8001930:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001932:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	4281      	cmp	r1, r0
 8001938:	d113      	bne.n	8001962 <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800193a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800193c:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001940:	4281      	cmp	r1, r0
 8001942:	d10e      	bne.n	8001962 <HAL_RCC_OscConfig+0x4a6>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001944:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001946:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800194a:	4281      	cmp	r1, r0
 800194c:	d109      	bne.n	8001962 <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800194e:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001950:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001954:	4281      	cmp	r1, r0
 8001956:	d104      	bne.n	8001962 <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001958:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800195a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800195e:	428b      	cmp	r3, r1
 8001960:	d040      	beq.n	80019e4 <HAL_RCC_OscConfig+0x528>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001962:	2a0c      	cmp	r2, #12
 8001964:	f43f adad 	beq.w	80014c2 <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001968:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	f53f ada7 	bmi.w	80014c2 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800197a:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800197c:	f7fe fe20 	bl	80005c0 <HAL_GetTick>
 8001980:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	019f      	lsls	r7, r3, #6
 8001986:	d427      	bmi.n	80019d8 <HAL_RCC_OscConfig+0x51c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001988:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800198a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800198c:	68e9      	ldr	r1, [r5, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	4a39      	ldr	r2, [pc, #228]	; (8001a78 <HAL_RCC_OscConfig+0x5bc>)
 8001992:	400a      	ands	r2, r1
 8001994:	4313      	orrs	r3, r2
 8001996:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001998:	4313      	orrs	r3, r2
 800199a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800199c:	4313      	orrs	r3, r2
 800199e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019a0:	4313      	orrs	r3, r2
 80019a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019a8:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b0:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b2:	68eb      	ldr	r3, [r5, #12]
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80019ba:	f7fe fe01 	bl	80005c0 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 80019c2:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	0198      	lsls	r0, r3, #6
 80019c8:	f53f adc3 	bmi.w	8001552 <HAL_RCC_OscConfig+0x96>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7fe fdf8 	bl	80005c0 <HAL_GetTick>
 80019d0:	1b40      	subs	r0, r0, r5
 80019d2:	2802      	cmp	r0, #2
 80019d4:	d9f6      	bls.n	80019c4 <HAL_RCC_OscConfig+0x508>
 80019d6:	e5e3      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7fe fdf2 	bl	80005c0 <HAL_GetTick>
 80019dc:	1b80      	subs	r0, r0, r6
 80019de:	2802      	cmp	r0, #2
 80019e0:	d9cf      	bls.n	8001982 <HAL_RCC_OscConfig+0x4c6>
 80019e2:	e5dd      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	0199      	lsls	r1, r3, #6
 80019e8:	f53f adb3 	bmi.w	8001552 <HAL_RCC_OscConfig+0x96>
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f4:	68eb      	ldr	r3, [r5, #12]
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 80019fc:	f7fe fde0 	bl	80005c0 <HAL_GetTick>
 8001a00:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	019a      	lsls	r2, r3, #6
 8001a06:	f53f ada4 	bmi.w	8001552 <HAL_RCC_OscConfig+0x96>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7fe fdd9 	bl	80005c0 <HAL_GetTick>
 8001a0e:	1b00      	subs	r0, r0, r4
 8001a10:	2802      	cmp	r0, #2
 8001a12:	d9f6      	bls.n	8001a02 <HAL_RCC_OscConfig+0x546>
 8001a14:	e5c4      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a16:	2a0c      	cmp	r2, #12
 8001a18:	f43f ad53 	beq.w	80014c2 <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a22:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a24:	68eb      	ldr	r3, [r5, #12]
 8001a26:	f023 0303 	bic.w	r3, r3, #3
 8001a2a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001a2c:	68eb      	ldr	r3, [r5, #12]
 8001a2e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001a38:	f7fe fdc2 	bl	80005c0 <HAL_GetTick>
 8001a3c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	f57f ad86 	bpl.w	8001552 <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7fe fdbb 	bl	80005c0 <HAL_GetTick>
 8001a4a:	1b00      	subs	r0, r0, r4
 8001a4c:	2802      	cmp	r0, #2
 8001a4e:	d9f6      	bls.n	8001a3e <HAL_RCC_OscConfig+0x582>
 8001a50:	e5a6      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001a52:	f7fe fdb5 	bl	80005c0 <HAL_GetTick>
 8001a56:	1b80      	subs	r0, r0, r6
 8001a58:	2803      	cmp	r0, #3
 8001a5a:	f67f ae5c 	bls.w	8001716 <HAL_RCC_OscConfig+0x25a>
 8001a5e:	e59f      	b.n	80015a0 <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a60:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001a6c:	f7fe fda8 	bl	80005c0 <HAL_GetTick>
 8001a70:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001a72:	e6c9      	b.n	8001808 <HAL_RCC_OscConfig+0x34c>
 8001a74:	58000400 	.word	0x58000400
 8001a78:	11c1808c 	.word	0x11c1808c

08001a7c <HAL_RCC_ClockConfig>:
{
 8001a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a80:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001a82:	4604      	mov	r4, r0
 8001a84:	b910      	cbnz	r0, 8001a8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
 8001a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4e7a      	ldr	r6, [pc, #488]	; (8001c78 <HAL_RCC_ClockConfig+0x1fc>)
 8001a8e:	6833      	ldr	r3, [r6, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	428b      	cmp	r3, r1
 8001a96:	d372      	bcc.n	8001b7e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	0799      	lsls	r1, r3, #30
 8001a9c:	d50e      	bpl.n	8001abc <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a9e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001aa2:	68a2      	ldr	r2, [r4, #8]
 8001aa4:	68b3      	ldr	r3, [r6, #8]
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001aae:	f7fe fd87 	bl	80005c0 <HAL_GetTick>
 8001ab2:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ab4:	68b3      	ldr	r3, [r6, #8]
 8001ab6:	03db      	lsls	r3, r3, #15
 8001ab8:	f140 80ba 	bpl.w	8001c30 <HAL_RCC_ClockConfig+0x1b4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001abc:	6823      	ldr	r3, [r4, #0]
 8001abe:	069a      	lsls	r2, r3, #26
 8001ac0:	d511      	bpl.n	8001ae6 <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001ac2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001ac6:	6962      	ldr	r2, [r4, #20]
 8001ac8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001ad6:	f7fe fd73 	bl	80005c0 <HAL_GetTick>
 8001ada:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001adc:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001ae0:	0399      	lsls	r1, r3, #14
 8001ae2:	f140 80ac 	bpl.w	8001c3e <HAL_RCC_ClockConfig+0x1c2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	0658      	lsls	r0, r3, #25
 8001aea:	d512      	bpl.n	8001b12 <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001aec:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001af0:	69a2      	ldr	r2, [r4, #24]
 8001af2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001af6:	f023 030f 	bic.w	r3, r3, #15
 8001afa:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001afe:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001b02:	f7fe fd5d 	bl	80005c0 <HAL_GetTick>
 8001b06:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b08:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001b0c:	03db      	lsls	r3, r3, #15
 8001b0e:	f140 809d 	bpl.w	8001c4c <HAL_RCC_ClockConfig+0x1d0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	075a      	lsls	r2, r3, #29
 8001b16:	d50e      	bpl.n	8001b36 <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b18:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001b1c:	68e2      	ldr	r2, [r4, #12]
 8001b1e:	68b3      	ldr	r3, [r6, #8]
 8001b20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b28:	f7fe fd4a 	bl	80005c0 <HAL_GetTick>
 8001b2c:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b2e:	68b3      	ldr	r3, [r6, #8]
 8001b30:	0398      	lsls	r0, r3, #14
 8001b32:	f140 8092 	bpl.w	8001c5a <HAL_RCC_ClockConfig+0x1de>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	071e      	lsls	r6, r3, #28
 8001b3a:	d50f      	bpl.n	8001b5c <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b3c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b40:	6922      	ldr	r2, [r4, #16]
 8001b42:	68b3      	ldr	r3, [r6, #8]
 8001b44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b4c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b4e:	f7fe fd37 	bl	80005c0 <HAL_GetTick>
 8001b52:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b54:	68b3      	ldr	r3, [r6, #8]
 8001b56:	035a      	lsls	r2, r3, #13
 8001b58:	f140 8086 	bpl.w	8001c68 <HAL_RCC_ClockConfig+0x1ec>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	07d9      	lsls	r1, r3, #31
 8001b60:	d423      	bmi.n	8001baa <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b62:	4c45      	ldr	r4, [pc, #276]	; (8001c78 <HAL_RCC_ClockConfig+0x1fc>)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	429d      	cmp	r5, r3
 8001b6c:	d34d      	bcc.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
  SystemCoreClockUpdate();
 8001b6e:	f003 f855 	bl	8004c1c <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8001b72:	f7fe fd2b 	bl	80005cc <HAL_GetTickPrio>
}
 8001b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8001b7a:	f7fe bcd9 	b.w	8000530 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	6833      	ldr	r3, [r6, #0]
 8001b80:	f023 0307 	bic.w	r3, r3, #7
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b88:	f7fe fd1a 	bl	80005c0 <HAL_GetTick>
 8001b8c:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	6833      	ldr	r3, [r6, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	429d      	cmp	r5, r3
 8001b96:	f43f af7f 	beq.w	8001a98 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b9a:	f7fe fd11 	bl	80005c0 <HAL_GetTick>
 8001b9e:	1bc0      	subs	r0, r0, r7
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	d9f4      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d103      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x13c>
      if (LL_RCC_HSE_IsReady() == 0U)
 8001bb0:	f7ff fbe0 	bl	8001374 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001bb4:	b940      	cbnz	r0, 8001bc8 <HAL_RCC_ClockConfig+0x14c>
 8001bb6:	e766      	b.n	8001a86 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d11f      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	019b      	lsls	r3, r3, #6
 8001bc4:	f57f af5f 	bpl.w	8001a86 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bc8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001bcc:	6862      	ldr	r2, [r4, #4]
 8001bce:	68b3      	ldr	r3, [r6, #8]
 8001bd0:	f023 0303 	bic.w	r3, r3, #3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001bd8:	f7fe fcf2 	bl	80005c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001be0:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001be2:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bee:	d0b8      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7fe fce6 	bl	80005c0 <HAL_GetTick>
 8001bf4:	1bc0      	subs	r0, r0, r7
 8001bf6:	4540      	cmp	r0, r8
 8001bf8:	d9f3      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x166>
 8001bfa:	e7d3      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bfc:	b913      	cbnz	r3, 8001c04 <HAL_RCC_ClockConfig+0x188>
      if (LL_RCC_MSI_IsReady() == 0U)
 8001bfe:	f7ff fbcc 	bl	800139a <LL_RCC_MSI_IsReady>
 8001c02:	e7d7      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001c04:	f7ff fbbc 	bl	8001380 <LL_RCC_HSI_IsReady>
 8001c08:	e7d4      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	f023 0307 	bic.w	r3, r3, #7
 8001c10:	432b      	orrs	r3, r5
 8001c12:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001c14:	f7fe fcd4 	bl	80005c0 <HAL_GetTick>
 8001c18:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	429d      	cmp	r5, r3
 8001c22:	d0a4      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c24:	f7fe fccc 	bl	80005c0 <HAL_GetTick>
 8001c28:	1b80      	subs	r0, r0, r6
 8001c2a:	2802      	cmp	r0, #2
 8001c2c:	d9f5      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x19e>
 8001c2e:	e7b9      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c30:	f7fe fcc6 	bl	80005c0 <HAL_GetTick>
 8001c34:	1bc0      	subs	r0, r0, r7
 8001c36:	2802      	cmp	r0, #2
 8001c38:	f67f af3c 	bls.w	8001ab4 <HAL_RCC_ClockConfig+0x38>
 8001c3c:	e7b2      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c3e:	f7fe fcbf 	bl	80005c0 <HAL_GetTick>
 8001c42:	1bc0      	subs	r0, r0, r7
 8001c44:	2802      	cmp	r0, #2
 8001c46:	f67f af49 	bls.w	8001adc <HAL_RCC_ClockConfig+0x60>
 8001c4a:	e7ab      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c4c:	f7fe fcb8 	bl	80005c0 <HAL_GetTick>
 8001c50:	1bc0      	subs	r0, r0, r7
 8001c52:	2802      	cmp	r0, #2
 8001c54:	f67f af58 	bls.w	8001b08 <HAL_RCC_ClockConfig+0x8c>
 8001c58:	e7a4      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c5a:	f7fe fcb1 	bl	80005c0 <HAL_GetTick>
 8001c5e:	1bc0      	subs	r0, r0, r7
 8001c60:	2802      	cmp	r0, #2
 8001c62:	f67f af64 	bls.w	8001b2e <HAL_RCC_ClockConfig+0xb2>
 8001c66:	e79d      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c68:	f7fe fcaa 	bl	80005c0 <HAL_GetTick>
 8001c6c:	1bc0      	subs	r0, r0, r7
 8001c6e:	2802      	cmp	r0, #2
 8001c70:	f67f af70 	bls.w	8001b54 <HAL_RCC_ClockConfig+0xd8>
 8001c74:	e796      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x128>
 8001c76:	bf00      	nop
 8001c78:	58004000 	.word	0x58004000

08001c7c <HAL_RCC_GetSysClockFreq>:
 8001c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001c80:	b508      	push	{r3, lr}
 8001c82:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c84:	f013 030c 	ands.w	r3, r3, #12
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c8a:	f7ff fb94 	bl	80013b6 <LL_RCC_MSI_GetRange>
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x90>)
 8001c90:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001c94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c98:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d033      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ca2:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8001ca4:	481a      	ldr	r0, [pc, #104]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cac:	bf08      	it	eq
 8001cae:	4618      	moveq	r0, r3
 8001cb0:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cb2:	68d3      	ldr	r3, [r2, #12]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d022      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x86>
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d118      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001cc0:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE;
 8001cc2:	4814      	ldr	r0, [pc, #80]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cca:	bf08      	it	eq
 8001ccc:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd2:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cd4:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cd6:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cd8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001cdc:	4358      	muls	r0, r3
 8001cde:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ce8:	0f53      	lsrs	r3, r2, #29
 8001cea:	3301      	adds	r3, #1
 8001cec:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cf0:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001cf2:	f7ff fb60 	bl	80013b6 <LL_RCC_MSI_GetRange>
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x90>)
 8001cf8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001cfc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d00:	e7e5      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8001d02:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d04:	e7e3      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8001d06:	4802      	ldr	r0, [pc, #8]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x94>)
}
 8001d08:	bd08      	pop	{r3, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08006228 	.word	0x08006228
 8001d10:	00f42400 	.word	0x00f42400
 8001d14:	01e84800 	.word	0x01e84800

08001d18 <HAL_RCC_GetHCLKFreq>:
{
 8001d18:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d1a:	f7ff ffaf 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x1c>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d32:	bd08      	pop	{r3, pc}
 8001d34:	080061c8 	.word	0x080061c8

08001d38 <HAL_RCC_GetPCLK1Freq>:
{
 8001d38:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d3a:	f7ff ffed 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	f003 031f 	and.w	r3, r3, #31
}
 8001d52:	40d8      	lsrs	r0, r3
 8001d54:	bd08      	pop	{r3, pc}
 8001d56:	bf00      	nop
 8001d58:	08006208 	.word	0x08006208

08001d5c <HAL_RCC_GetPCLK2Freq>:
{
 8001d5c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001d5e:	f7ff ffdb 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	f003 031f 	and.w	r3, r3, #31
}
 8001d76:	40d8      	lsrs	r0, r3
 8001d78:	bd08      	pop	{r3, pc}
 8001d7a:	bf00      	nop
 8001d7c:	08006208 	.word	0x08006208

08001d80 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8001d88:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001d8c:	4770      	bx	lr

08001d8e <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	0902      	lsrs	r2, r0, #4
 8001d94:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d98:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8001d9c:	0100      	lsls	r0, r0, #4
 8001d9e:	ea23 0302 	bic.w	r3, r3, r2
 8001da2:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8001da6:	4318      	orrs	r0, r3
 8001da8:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db2:	6813      	ldr	r3, [r2, #0]
 8001db4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dce:	6818      	ldr	r0, [r3, #0]
}
 8001dd0:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd8:	6805      	ldr	r5, [r0, #0]
 8001dda:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8001dde:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001de0:	d043      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001de2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de8:	d015      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001dea:	d802      	bhi.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001dec:	b1d3      	cbz	r3, 8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001dee:	2501      	movs	r5, #1
 8001df0:	e03b      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001df6:	d002      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001df8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dfc:	d1f7      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e08:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e12:	2500      	movs	r5, #0
 8001e14:	e029      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8001e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e1a:	68d3      	ldr	r3, [r2, #12]
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	60d3      	str	r3, [r2, #12]
        break;
 8001e22:	e7ec      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001e24:	f7ff ffca 	bl	8001dbc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e28:	f7fe fbca 	bl	80005c0 <HAL_GetTick>
 8001e2c:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001e2e:	f7ff ffcc 	bl	8001dca <LL_RCC_PLLSAI1_IsReady>
 8001e32:	b9a0      	cbnz	r0, 8001e5e <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e38:	6861      	ldr	r1, [r4, #4]
 8001e3a:	6913      	ldr	r3, [r2, #16]
 8001e3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e44:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8001e46:	6913      	ldr	r3, [r2, #16]
 8001e48:	68a1      	ldr	r1, [r4, #8]
 8001e4a:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001e52:	f7ff ffac 	bl	8001dae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e56:	f7fe fbb3 	bl	80005c0 <HAL_GetTick>
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	e0cd      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e5e:	f7fe fbaf 	bl	80005c0 <HAL_GetTick>
 8001e62:	1b40      	subs	r0, r0, r5
 8001e64:	2802      	cmp	r0, #2
 8001e66:	d9e2      	bls.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001e68:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	051a      	lsls	r2, r3, #20
 8001e6e:	d515      	bpl.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001e70:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e76:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8001e7a:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001e7e:	42bb      	cmp	r3, r7
 8001e80:	d00c      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8001e82:	f7ff fa5f 	bl	8001344 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001e86:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001e8a:	2f00      	cmp	r7, #0
 8001e8c:	f040 80c0 	bne.w	8002010 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8001e90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	07df      	lsls	r7, r3, #31
 8001ea0:	d509      	bpl.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea6:	69a0      	ldr	r0, [r4, #24]
 8001ea8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001eac:	f022 0203 	bic.w	r2, r2, #3
 8001eb0:	4302      	orrs	r2, r0
 8001eb2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eb6:	079e      	lsls	r6, r3, #30
 8001eb8:	d509      	bpl.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ebe:	69e0      	ldr	r0, [r4, #28]
 8001ec0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ec4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ece:	06d8      	lsls	r0, r3, #27
 8001ed0:	d50c      	bpl.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001ed4:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001ed8:	0c31      	lsrs	r1, r6, #16
 8001eda:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001ede:	0409      	lsls	r1, r1, #16
 8001ee0:	ea22 0201 	bic.w	r2, r2, r1
 8001ee4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001ee8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001eec:	0699      	lsls	r1, r3, #26
 8001eee:	d50c      	bpl.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ef2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001ef6:	0c31      	lsrs	r1, r6, #16
 8001ef8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001efc:	0409      	lsls	r1, r1, #16
 8001efe:	ea22 0201 	bic.w	r2, r2, r1
 8001f02:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001f06:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f0a:	075a      	lsls	r2, r3, #29
 8001f0c:	d502      	bpl.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f0e:	6a20      	ldr	r0, [r4, #32]
 8001f10:	f7ff ff3d 	bl	8001d8e <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	071b      	lsls	r3, r3, #28
 8001f18:	d502      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001f1c:	f7ff ff37 	bl	8001d8e <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	05df      	lsls	r7, r3, #23
 8001f24:	d511      	bpl.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f30:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f34:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f36:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001f3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f3e:	f040 8090 	bne.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001f42:	68d3      	ldr	r3, [r2, #12]
 8001f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f48:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	059e      	lsls	r6, r3, #22
 8001f4e:	d51a      	bpl.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f52:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	d003      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8001f5c:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8001f60:	f040 80b7 	bne.w	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001f64:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001f68:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001f6c:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f6e:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8001f72:	bf08      	it	eq
 8001f74:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001f78:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8001f7c:	bf02      	ittt	eq
 8001f7e:	68d3      	ldreq	r3, [r2, #12]
 8001f80:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8001f84:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	0558      	lsls	r0, r3, #21
 8001f8a:	d511      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f96:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f9a:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001f9c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fa4:	f040 80a3 	bne.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fa8:	68d3      	ldr	r3, [r2, #12]
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	04d1      	lsls	r1, r2, #19
 8001fb4:	d509      	bpl.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001fbc:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001fc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fc4:	4303      	orrs	r3, r0
 8001fc6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001fca:	0493      	lsls	r3, r2, #18
 8001fcc:	d50d      	bpl.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001fd4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001fd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001fde:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001fe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001fea:	4628      	mov	r0, r5
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fee:	f7fe fae7 	bl	80005c0 <HAL_GetTick>
 8001ff2:	1b40      	subs	r0, r0, r5
 8001ff4:	2802      	cmp	r0, #2
 8001ff6:	f63f af37 	bhi.w	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001ffa:	f7ff fee6 	bl	8001dca <LL_RCC_PLLSAI1_IsReady>
 8001ffe:	2801      	cmp	r0, #1
 8002000:	d1f5      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002006:	6961      	ldr	r1, [r4, #20]
 8002008:	6913      	ldr	r3, [r2, #16]
 800200a:	430b      	orrs	r3, r1
 800200c:	6113      	str	r3, [r2, #16]
 800200e:	e6f6      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002010:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002014:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002018:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800201c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002020:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002024:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002028:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800202a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202e:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 8002030:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002034:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002038:	07db      	lsls	r3, r3, #31
 800203a:	f57f af2f 	bpl.w	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 800203e:	f7fe fabf 	bl	80005c0 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8002046:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8002048:	e004      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x27e>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe fab9 	bl	80005c0 <HAL_GetTick>
 800204e:	1bc0      	subs	r0, r0, r7
 8002050:	42b0      	cmp	r0, r6
 8002052:	d804      	bhi.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x288>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002054:	f7ff fe94 	bl	8001d80 <LL_RCC_LSE_IsReady>
 8002058:	2801      	cmp	r0, #1
 800205a:	d1f6      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x274>
 800205c:	e71e      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 800205e:	2503      	movs	r5, #3
 8002060:	e71c      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002062:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002066:	f47f af70 	bne.w	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800206a:	f7ff fea7 	bl	8001dbc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800206e:	f7fe faa7 	bl	80005c0 <HAL_GetTick>
 8002072:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002074:	f7ff fea9 	bl	8001dca <LL_RCC_PLLSAI1_IsReady>
 8002078:	b9a0      	cbnz	r0, 80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800207a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207e:	6861      	ldr	r1, [r4, #4]
 8002080:	6913      	ldr	r3, [r2, #16]
 8002082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002086:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800208a:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800208c:	6913      	ldr	r3, [r2, #16]
 800208e:	68e1      	ldr	r1, [r4, #12]
 8002090:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8002094:	430b      	orrs	r3, r1
 8002096:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002098:	f7ff fe89 	bl	8001dae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209c:	f7fe fa90 	bl	80005c0 <HAL_GetTick>
 80020a0:	4606      	mov	r6, r0
 80020a2:	e00b      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020a4:	f7fe fa8c 	bl	80005c0 <HAL_GetTick>
 80020a8:	1b80      	subs	r0, r0, r6
 80020aa:	2802      	cmp	r0, #2
 80020ac:	d9e2      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x29e>
              ret = HAL_TIMEOUT;
 80020ae:	2503      	movs	r5, #3
 80020b0:	e74b      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020b2:	f7fe fa85 	bl	80005c0 <HAL_GetTick>
 80020b6:	1b80      	subs	r0, r0, r6
 80020b8:	2802      	cmp	r0, #2
 80020ba:	d8f8      	bhi.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80020bc:	f7ff fe85 	bl	8001dca <LL_RCC_PLLSAI1_IsReady>
 80020c0:	2801      	cmp	r0, #1
 80020c2:	d1f6      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c8:	6961      	ldr	r1, [r4, #20]
 80020ca:	6913      	ldr	r3, [r2, #16]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6113      	str	r3, [r2, #16]
 80020d0:	e73b      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80020d2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80020d6:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80020da:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80020de:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020e2:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80020e6:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 80020ea:	4301      	orrs	r1, r0
 80020ec:	e73f      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x198>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020ee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80020f2:	f47f af5d 	bne.w	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80020f6:	f7ff fe61 	bl	8001dbc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80020fa:	f7fe fa61 	bl	80005c0 <HAL_GetTick>
 80020fe:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002100:	f7ff fe63 	bl	8001dca <LL_RCC_PLLSAI1_IsReady>
 8002104:	b9a0      	cbnz	r0, 8002130 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210a:	6861      	ldr	r1, [r4, #4]
 800210c:	6913      	ldr	r3, [r2, #16]
 800210e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002112:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002116:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002118:	6913      	ldr	r3, [r2, #16]
 800211a:	6921      	ldr	r1, [r4, #16]
 800211c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002120:	430b      	orrs	r3, r1
 8002122:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002124:	f7ff fe43 	bl	8001dae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002128:	f7fe fa4a 	bl	80005c0 <HAL_GetTick>
 800212c:	4606      	mov	r6, r0
 800212e:	e00b      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002130:	f7fe fa46 	bl	80005c0 <HAL_GetTick>
 8002134:	1b80      	subs	r0, r0, r6
 8002136:	2802      	cmp	r0, #2
 8002138:	d9e2      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x32a>
              ret = HAL_TIMEOUT;
 800213a:	2503      	movs	r5, #3
 800213c:	e738      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800213e:	f7fe fa3f 	bl	80005c0 <HAL_GetTick>
 8002142:	1b80      	subs	r0, r0, r6
 8002144:	2802      	cmp	r0, #2
 8002146:	d8f8      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x364>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002148:	f7ff fe3f 	bl	8001dca <LL_RCC_PLLSAI1_IsReady>
 800214c:	2801      	cmp	r0, #1
 800214e:	d1f6      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x368>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002154:	6961      	ldr	r1, [r4, #20]
 8002156:	6913      	ldr	r3, [r2, #16]
 8002158:	430b      	orrs	r3, r1
 800215a:	6113      	str	r3, [r2, #16]
 800215c:	e728      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1da>

0800215e <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800215e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002162:	6813      	ldr	r3, [r2, #0]
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4770      	bx	lr

0800216c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216c:	6803      	ldr	r3, [r0, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_TIM_Base_Start_IT+0x28>)
 800217a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217c:	2a06      	cmp	r2, #6
 800217e:	d006      	beq.n	800218e <HAL_TIM_Base_Start_IT+0x22>
 8002180:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002184:	bf1e      	ittt	ne
 8002186:	681a      	ldrne	r2, [r3, #0]
 8002188:	f042 0201 	orrne.w	r2, r2, #1
 800218c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800218e:	2000      	movs	r0, #0
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	00010007 	.word	0x00010007

08002198 <HAL_TIM_OC_DelayElapsedCallback>:
 8002198:	4770      	bx	lr

0800219a <HAL_TIM_IC_CaptureCallback>:
 800219a:	4770      	bx	lr

0800219c <HAL_TIM_PWM_PulseFinishedCallback>:
 800219c:	4770      	bx	lr

0800219e <HAL_TIM_TriggerCallback>:
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a0:	6803      	ldr	r3, [r0, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	0791      	lsls	r1, r2, #30
{
 80021a6:	b510      	push	{r4, lr}
 80021a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021aa:	d50f      	bpl.n	80021cc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	0792      	lsls	r2, r2, #30
 80021b0:	d50c      	bpl.n	80021cc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b2:	f06f 0202 	mvn.w	r2, #2
 80021b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ba:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021be:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c0:	f000 8085 	beq.w	80022ce <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021c4:	f7ff ffe9 	bl	800219a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c8:	2300      	movs	r3, #0
 80021ca:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	0752      	lsls	r2, r2, #29
 80021d2:	d510      	bpl.n	80021f6 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	0750      	lsls	r0, r2, #29
 80021d8:	d50d      	bpl.n	80021f6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021da:	f06f 0204 	mvn.w	r2, #4
 80021de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021e2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021e8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ec:	d075      	beq.n	80022da <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	f7ff ffd4 	bl	800219a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	2300      	movs	r3, #0
 80021f4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	0711      	lsls	r1, r2, #28
 80021fc:	d50f      	bpl.n	800221e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	0712      	lsls	r2, r2, #28
 8002202:	d50c      	bpl.n	800221e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002204:	f06f 0208 	mvn.w	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002210:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002214:	d067      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	f7ff ffc0 	bl	800219a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	2300      	movs	r3, #0
 800221c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	06d0      	lsls	r0, r2, #27
 8002224:	d510      	bpl.n	8002248 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	06d1      	lsls	r1, r2, #27
 800222a:	d50d      	bpl.n	8002248 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002232:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002234:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002236:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800223a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223e:	d058      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002240:	f7ff ffab 	bl	800219a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002244:	2300      	movs	r3, #0
 8002246:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	07d2      	lsls	r2, r2, #31
 800224e:	d508      	bpl.n	8002262 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	07d0      	lsls	r0, r2, #31
 8002254:	d505      	bpl.n	8002262 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002256:	f06f 0201 	mvn.w	r2, #1
 800225a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225c:	4620      	mov	r0, r4
 800225e:	f002 fb6d 	bl	800493c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	0611      	lsls	r1, r2, #24
 8002268:	d508      	bpl.n	800227c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	0612      	lsls	r2, r2, #24
 800226e:	d505      	bpl.n	800227c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002276:	4620      	mov	r0, r4
 8002278:	f000 f897 	bl	80023aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	05d0      	lsls	r0, r2, #23
 8002282:	d508      	bpl.n	8002296 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	0611      	lsls	r1, r2, #24
 8002288:	d505      	bpl.n	8002296 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800228a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800228e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002290:	4620      	mov	r0, r4
 8002292:	f000 f88b 	bl	80023ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	0652      	lsls	r2, r2, #25
 800229c:	d508      	bpl.n	80022b0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	0650      	lsls	r0, r2, #25
 80022a2:	d505      	bpl.n	80022b0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff ff77 	bl	800219e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	0691      	lsls	r1, r2, #26
 80022b6:	d522      	bpl.n	80022fe <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	0692      	lsls	r2, r2, #26
 80022bc:	d51f      	bpl.n	80022fe <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022be:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80022ca:	f000 b86d 	b.w	80023a8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	f7ff ff63 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff ff62 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
 80022d8:	e776      	b.n	80021c8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	f7ff ff5d 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022de:	4620      	mov	r0, r4
 80022e0:	f7ff ff5c 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
 80022e4:	e785      	b.n	80021f2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	f7ff ff57 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff ff56 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
 80022f0:	e793      	b.n	800221a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	f7ff ff51 	bl	8002198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff ff50 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
 80022fc:	e7a2      	b.n	8002244 <HAL_TIM_IRQHandler+0xa4>
 80022fe:	bd10      	pop	{r4, pc}

08002300 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002300:	4a1a      	ldr	r2, [pc, #104]	; (800236c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002302:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002304:	4290      	cmp	r0, r2
{
 8002306:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002308:	d002      	beq.n	8002310 <TIM_Base_SetConfig+0x10>
 800230a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800230e:	d109      	bne.n	8002324 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002310:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002316:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002318:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231c:	d009      	beq.n	8002332 <TIM_Base_SetConfig+0x32>
 800231e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002322:	d006      	beq.n	8002332 <TIM_Base_SetConfig+0x32>
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <TIM_Base_SetConfig+0x70>)
 8002326:	4290      	cmp	r0, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x32>
 800232a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800232e:	4290      	cmp	r0, r2
 8002330:	d103      	bne.n	800233a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002338:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233a:	694a      	ldr	r2, [r1, #20]
 800233c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002340:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002342:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002344:	688b      	ldr	r3, [r1, #8]
 8002346:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002348:	680b      	ldr	r3, [r1, #0]
 800234a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <TIM_Base_SetConfig+0x6c>)
 800234e:	4298      	cmp	r0, r3
 8002350:	d007      	beq.n	8002362 <TIM_Base_SetConfig+0x62>
 8002352:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8002356:	4298      	cmp	r0, r3
 8002358:	d003      	beq.n	8002362 <TIM_Base_SetConfig+0x62>
 800235a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800235e:	4298      	cmp	r0, r3
 8002360:	d101      	bne.n	8002366 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002362:	690b      	ldr	r3, [r1, #16]
 8002364:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002366:	2301      	movs	r3, #1
 8002368:	6143      	str	r3, [r0, #20]
 800236a:	bd10      	pop	{r4, pc}
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40014400 	.word	0x40014400

08002374 <HAL_TIM_Base_Init>:
{
 8002374:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002376:	4604      	mov	r4, r0
 8002378:	b1a0      	cbz	r0, 80023a4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800237e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002382:	b91b      	cbnz	r3, 800238c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002384:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002388:	f002 fb9a 	bl	8004ac0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	2302      	movs	r3, #2
 800238e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	1d21      	adds	r1, r4, #4
 8002396:	f7ff ffb3 	bl	8002300 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800239a:	2301      	movs	r3, #1
 800239c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80023a0:	2000      	movs	r0, #0
 80023a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
}
 80023a6:	bd10      	pop	{r4, pc}

080023a8 <HAL_TIMEx_CommutCallback>:
 80023a8:	4770      	bx	lr

080023aa <HAL_TIMEx_BreakCallback>:
 80023aa:	4770      	bx	lr

080023ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023ac:	4770      	bx	lr

080023ae <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80023ae:	6802      	ldr	r2, [r0, #0]
 80023b0:	6813      	ldr	r3, [r2, #0]
 80023b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023b6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80023b8:	6893      	ldr	r3, [r2, #8]
 80023ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023c4:	2320      	movs	r3, #32
 80023c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	66c3      	str	r3, [r0, #108]	; 0x6c
 80023ce:	4770      	bx	lr

080023d0 <HAL_UART_Receive_DMA>:
{
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80023d2:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 80023d6:	2f20      	cmp	r7, #32
{
 80023d8:	4604      	mov	r4, r0
 80023da:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80023dc:	d13a      	bne.n	8002454 <HAL_UART_Receive_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 80023de:	b331      	cbz	r1, 800242e <HAL_UART_Receive_DMA+0x5e>
 80023e0:	b32a      	cbz	r2, 800242e <HAL_UART_Receive_DMA+0x5e>
    __HAL_LOCK(huart);
 80023e2:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80023e6:	2a01      	cmp	r2, #1
 80023e8:	d034      	beq.n	8002454 <HAL_UART_Receive_DMA+0x84>
 80023ea:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ec:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ee:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f0:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 80023f4:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->pRxBuffPtr = pData;
 80023f8:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 80023fa:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023fe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 8002402:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8002404:	b1a8      	cbz	r0, 8002432 <HAL_UART_Receive_DMA+0x62>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_UART_Receive_DMA+0x88>)
 8002408:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_UART_Receive_DMA+0x8c>)
 800240c:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800240e:	4a14      	ldr	r2, [pc, #80]	; (8002460 <HAL_UART_Receive_DMA+0x90>)
 8002410:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002412:	460a      	mov	r2, r1
 8002414:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferAbortCallback = NULL;
 8002416:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002418:	3124      	adds	r1, #36	; 0x24
 800241a:	f7fe f9f9 	bl	8000810 <HAL_DMA_Start_IT>
 800241e:	b140      	cbz	r0, 8002432 <HAL_UART_Receive_DMA+0x62>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002420:	2310      	movs	r3, #16
 8002422:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8002426:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800242a:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
 8002430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002436:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_UNLOCK(huart);
 800243c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002440:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002450:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002454:	2002      	movs	r0, #2
}
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002458:	08002465 	.word	0x08002465
 800245c:	080024a1 	.word	0x080024a1
 8002460:	080024ad 	.word	0x080024ad

08002464 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002464:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002466:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002468:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f013 0320 	ands.w	r3, r3, #32
 8002470:	d111      	bne.n	8002496 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
 8002472:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002476:	6813      	ldr	r3, [r2, #0]
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800247e:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	f021 0101 	bic.w	r1, r1, #1
 8002486:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800248e:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002490:	2320      	movs	r3, #32
 8002492:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002496:	4610      	mov	r0, r2
 8002498:	f002 fa46 	bl	8004928 <HAL_UART_RxCpltCallback>
 800249c:	bd08      	pop	{r3, pc}

0800249e <HAL_UART_RxHalfCpltCallback>:
 800249e:	4770      	bx	lr

080024a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024a0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80024a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80024a4:	f7ff fffb 	bl	800249e <HAL_UART_RxHalfCpltCallback>
 80024a8:	bd08      	pop	{r3, pc}

080024aa <HAL_UART_ErrorCallback>:
 80024aa:	4770      	bx	lr

080024ac <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024ac:	6a81      	ldr	r1, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80024ae:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80024b0:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80024b4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 80024b8:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80024ba:	689c      	ldr	r4, [r3, #8]
 80024bc:	0624      	lsls	r4, r4, #24
 80024be:	d50f      	bpl.n	80024e0 <UART_DMAError+0x34>
 80024c0:	2a21      	cmp	r2, #33	; 0x21
 80024c2:	d10d      	bne.n	80024e0 <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024d0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80024d8:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 80024da:	2220      	movs	r2, #32
 80024dc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	065b      	lsls	r3, r3, #25
 80024e4:	d507      	bpl.n	80024f6 <UART_DMAError+0x4a>
 80024e6:	2822      	cmp	r0, #34	; 0x22
 80024e8:	d105      	bne.n	80024f6 <UART_DMAError+0x4a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80024f0:	4608      	mov	r0, r1
 80024f2:	f7ff ff5c 	bl	80023ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80024f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002502:	4608      	mov	r0, r1
 8002504:	f7ff ffd1 	bl	80024aa <HAL_UART_ErrorCallback>
 8002508:	bd10      	pop	{r4, pc}
	...

0800250c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800250c:	6802      	ldr	r2, [r0, #0]
 800250e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002510:	6811      	ldr	r1, [r2, #0]
{
 8002512:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8002514:	f640 050f 	movw	r5, #2063	; 0x80f
 8002518:	422b      	tst	r3, r5
{
 800251a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800251c:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800251e:	d10d      	bne.n	800253c <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002520:	069e      	lsls	r6, r3, #26
 8002522:	f140 8087 	bpl.w	8002634 <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002526:	068d      	lsls	r5, r1, #26
 8002528:	d402      	bmi.n	8002530 <HAL_UART_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800252a:	00c6      	lsls	r6, r0, #3
 800252c:	f140 8082 	bpl.w	8002634 <HAL_UART_IRQHandler+0x128>
      if (huart->RxISR != NULL)
 8002530:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80b5 	beq.w	80026a2 <HAL_UART_IRQHandler+0x196>
      huart->TxISR(huart);
 8002538:	4620      	mov	r0, r4
 800253a:	e06f      	b.n	800261c <HAL_UART_IRQHandler+0x110>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800253c:	4e59      	ldr	r6, [pc, #356]	; (80026a4 <HAL_UART_IRQHandler+0x198>)
 800253e:	4006      	ands	r6, r0
 8002540:	d102      	bne.n	8002548 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002542:	4d59      	ldr	r5, [pc, #356]	; (80026a8 <HAL_UART_IRQHandler+0x19c>)
 8002544:	4229      	tst	r1, r5
 8002546:	d075      	beq.n	8002634 <HAL_UART_IRQHandler+0x128>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002548:	07dd      	lsls	r5, r3, #31
 800254a:	d509      	bpl.n	8002560 <HAL_UART_IRQHandler+0x54>
 800254c:	05cd      	lsls	r5, r1, #23
 800254e:	d507      	bpl.n	8002560 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002550:	2501      	movs	r5, #1
 8002552:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002554:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002558:	f045 0501 	orr.w	r5, r5, #1
 800255c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002560:	079d      	lsls	r5, r3, #30
 8002562:	d509      	bpl.n	8002578 <HAL_UART_IRQHandler+0x6c>
 8002564:	07c5      	lsls	r5, r0, #31
 8002566:	d507      	bpl.n	8002578 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002568:	2502      	movs	r5, #2
 800256a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800256c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002570:	f045 0504 	orr.w	r5, r5, #4
 8002574:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002578:	075d      	lsls	r5, r3, #29
 800257a:	d509      	bpl.n	8002590 <HAL_UART_IRQHandler+0x84>
 800257c:	07c5      	lsls	r5, r0, #31
 800257e:	d507      	bpl.n	8002590 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002580:	2504      	movs	r5, #4
 8002582:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002584:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002588:	f045 0502 	orr.w	r5, r5, #2
 800258c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002590:	071d      	lsls	r5, r3, #28
 8002592:	d50a      	bpl.n	80025aa <HAL_UART_IRQHandler+0x9e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002594:	068d      	lsls	r5, r1, #26
 8002596:	d400      	bmi.n	800259a <HAL_UART_IRQHandler+0x8e>
 8002598:	b13e      	cbz	r6, 80025aa <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800259a:	2508      	movs	r5, #8
 800259c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800259e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80025a2:	f045 0508 	orr.w	r5, r5, #8
 80025a6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025aa:	051e      	lsls	r6, r3, #20
 80025ac:	d50a      	bpl.n	80025c4 <HAL_UART_IRQHandler+0xb8>
 80025ae:	014d      	lsls	r5, r1, #5
 80025b0:	d508      	bpl.n	80025c4 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025b2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80025b6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025b8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025c4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d06a      	beq.n	80026a2 <HAL_UART_IRQHandler+0x196>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025cc:	069e      	lsls	r6, r3, #26
 80025ce:	d507      	bpl.n	80025e0 <HAL_UART_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025d0:	068d      	lsls	r5, r1, #26
 80025d2:	d401      	bmi.n	80025d8 <HAL_UART_IRQHandler+0xcc>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025d4:	00c0      	lsls	r0, r0, #3
 80025d6:	d503      	bpl.n	80025e0 <HAL_UART_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 80025d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80025da:	b10b      	cbz	r3, 80025e0 <HAL_UART_IRQHandler+0xd4>
          huart->RxISR(huart);
 80025dc:	4620      	mov	r0, r4
 80025de:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025e0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80025e2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025e6:	6892      	ldr	r2, [r2, #8]
 80025e8:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 80025ea:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025ec:	d402      	bmi.n	80025f4 <HAL_UART_IRQHandler+0xe8>
 80025ee:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80025f2:	d01a      	beq.n	800262a <HAL_UART_IRQHandler+0x11e>
        UART_EndRxTransfer(huart);
 80025f4:	f7ff fedb 	bl	80023ae <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	0652      	lsls	r2, r2, #25
 80025fe:	d510      	bpl.n	8002622 <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002600:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002602:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002608:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800260a:	b150      	cbz	r0, 8002622 <HAL_UART_IRQHandler+0x116>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_UART_IRQHandler+0x1a0>)
 800260e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002610:	f7fe f940 	bl	8000894 <HAL_DMA_Abort_IT>
 8002614:	2800      	cmp	r0, #0
 8002616:	d044      	beq.n	80026a2 <HAL_UART_IRQHandler+0x196>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002618:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800261a:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 800261c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002620:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff ff41 	bl	80024aa <HAL_UART_ErrorCallback>
 8002628:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800262a:	f7ff ff3e 	bl	80024aa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8002632:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002634:	02de      	lsls	r6, r3, #11
 8002636:	d509      	bpl.n	800264c <HAL_UART_IRQHandler+0x140>
 8002638:	0245      	lsls	r5, r0, #9
 800263a:	d507      	bpl.n	800264c <HAL_UART_IRQHandler+0x140>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800263c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002640:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002642:	6213      	str	r3, [r2, #32]
}
 8002644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002648:	f000 be28 	b.w	800329c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800264c:	061e      	lsls	r6, r3, #24
 800264e:	d505      	bpl.n	800265c <HAL_UART_IRQHandler+0x150>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002650:	060d      	lsls	r5, r1, #24
 8002652:	d401      	bmi.n	8002658 <HAL_UART_IRQHandler+0x14c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002654:	0200      	lsls	r0, r0, #8
 8002656:	d501      	bpl.n	800265c <HAL_UART_IRQHandler+0x150>
    if (huart->TxISR != NULL)
 8002658:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800265a:	e76a      	b.n	8002532 <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800265c:	065e      	lsls	r6, r3, #25
 800265e:	d50e      	bpl.n	800267e <HAL_UART_IRQHandler+0x172>
 8002660:	064d      	lsls	r5, r1, #25
 8002662:	d50c      	bpl.n	800267e <HAL_UART_IRQHandler+0x172>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266a:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800266c:	2320      	movs	r3, #32
 800266e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	6723      	str	r3, [r4, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002676:	4620      	mov	r0, r4
 8002678:	f002 f954 	bl	8004924 <HAL_UART_TxCpltCallback>
 800267c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800267e:	0218      	lsls	r0, r3, #8
 8002680:	d506      	bpl.n	8002690 <HAL_UART_IRQHandler+0x184>
 8002682:	004a      	lsls	r2, r1, #1
 8002684:	d504      	bpl.n	8002690 <HAL_UART_IRQHandler+0x184>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002686:	4620      	mov	r0, r4
}
 8002688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800268c:	f000 be08 	b.w	80032a0 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002690:	01db      	lsls	r3, r3, #7
 8002692:	d506      	bpl.n	80026a2 <HAL_UART_IRQHandler+0x196>
 8002694:	2900      	cmp	r1, #0
 8002696:	da04      	bge.n	80026a2 <HAL_UART_IRQHandler+0x196>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002698:	4620      	mov	r0, r4
}
 800269a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800269e:	f000 bdfe 	b.w	800329e <HAL_UARTEx_RxFifoFullCallback>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	10000001 	.word	0x10000001
 80026a8:	04000120 	.word	0x04000120
 80026ac:	080026b1 	.word	0x080026b1

080026b0 <UART_DMAAbortOnError>:
{
 80026b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80026ba:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80026be:	f7ff fef4 	bl	80024aa <HAL_UART_ErrorCallback>
 80026c2:	bd08      	pop	{r3, pc}

080026c4 <HAL_UART_GetState>:
  temp1 = huart->gState;
 80026c4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 80026c8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 80026cc:	4310      	orrs	r0, r2
 80026ce:	4770      	bx	lr

080026d0 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 80026d0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d2:	69c1      	ldr	r1, [r0, #28]
 80026d4:	6883      	ldr	r3, [r0, #8]
{
 80026d6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80026da:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026dc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026de:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026e0:	4303      	orrs	r3, r0
 80026e2:	6960      	ldr	r0, [r4, #20]
 80026e4:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 80026e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026e8:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 80026ea:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ec:	48ac      	ldr	r0, [pc, #688]	; (80029a0 <UART_SetConfig+0x2d0>)
 80026ee:	4028      	ands	r0, r5
 80026f0:	4303      	orrs	r3, r0
 80026f2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f4:	6853      	ldr	r3, [r2, #4]
 80026f6:	68e0      	ldr	r0, [r4, #12]
 80026f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026fc:	4303      	orrs	r3, r0
 80026fe:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002700:	4ba8      	ldr	r3, [pc, #672]	; (80029a4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002702:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002704:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002706:	bf1c      	itt	ne
 8002708:	6a23      	ldrne	r3, [r4, #32]
 800270a:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800270c:	6893      	ldr	r3, [r2, #8]
 800270e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002712:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002716:	4303      	orrs	r3, r0
 8002718:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800271a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800271c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800271e:	f020 000f 	bic.w	r0, r0, #15
 8002722:	4318      	orrs	r0, r3
 8002724:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002726:	48a0      	ldr	r0, [pc, #640]	; (80029a8 <UART_SetConfig+0x2d8>)
 8002728:	4282      	cmp	r2, r0
 800272a:	d11a      	bne.n	8002762 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800272c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002730:	489e      	ldr	r0, [pc, #632]	; (80029ac <UART_SetConfig+0x2dc>)
 8002732:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002736:	f002 0203 	and.w	r2, r2, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800273e:	5c82      	ldrb	r2, [r0, r2]
 8002740:	f102 32ff 	add.w	r2, r2, #4294967295
 8002744:	f000 8220 	beq.w	8002b88 <UART_SetConfig+0x4b8>
    switch (clocksource)
 8002748:	2a07      	cmp	r2, #7
 800274a:	f200 83e7 	bhi.w	8002f1c <UART_SetConfig+0x84c>
 800274e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002752:	0327      	.short	0x0327
 8002754:	03e50349 	.word	0x03e50349
 8002758:	03e5038c 	.word	0x03e5038c
 800275c:	03e503e5 	.word	0x03e503e5
 8002760:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002762:	4890      	ldr	r0, [pc, #576]	; (80029a4 <UART_SetConfig+0x2d4>)
 8002764:	4282      	cmp	r2, r0
 8002766:	f040 83d5 	bne.w	8002f14 <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800276a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002772:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002776:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800277a:	f000 8094 	beq.w	80028a6 <UART_SetConfig+0x1d6>
 800277e:	d80c      	bhi.n	800279a <UART_SetConfig+0xca>
 8002780:	b3ca      	cbz	r2, 80027f6 <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 8002782:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 8002784:	2301      	movs	r3, #1
 8002786:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800278a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8002792:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002794:	4610      	mov	r0, r2
 8002796:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800279a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800279e:	d064      	beq.n	800286a <UART_SetConfig+0x19a>
 80027a0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80027a4:	d1ed      	bne.n	8002782 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80e1 	beq.w	800296e <UART_SetConfig+0x29e>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f000 80e1 	beq.w	8002974 <UART_SetConfig+0x2a4>
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	f000 80e1 	beq.w	800297a <UART_SetConfig+0x2aa>
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	f000 80e1 	beq.w	8002980 <UART_SetConfig+0x2b0>
 80027be:	2b04      	cmp	r3, #4
 80027c0:	f000 80e1 	beq.w	8002986 <UART_SetConfig+0x2b6>
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	f000 80e1 	beq.w	800298c <UART_SetConfig+0x2bc>
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	f000 80e1 	beq.w	8002992 <UART_SetConfig+0x2c2>
 80027d0:	2b07      	cmp	r3, #7
 80027d2:	f000 80e1 	beq.w	8002998 <UART_SetConfig+0x2c8>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	f000 8100 	beq.w	80029dc <UART_SetConfig+0x30c>
 80027dc:	2b09      	cmp	r3, #9
 80027de:	f000 8100 	beq.w	80029e2 <UART_SetConfig+0x312>
 80027e2:	2b0a      	cmp	r3, #10
 80027e4:	f000 8100 	beq.w	80029e8 <UART_SetConfig+0x318>
 80027e8:	2b0b      	cmp	r3, #11
 80027ea:	bf14      	ite	ne
 80027ec:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80027f0:	2080      	moveq	r0, #128	; 0x80
 80027f2:	2308      	movs	r3, #8
 80027f4:	e093      	b.n	800291e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80027f6:	f7ff fa9f 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 80027fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027fc:	b1fb      	cbz	r3, 800283e <UART_SetConfig+0x16e>
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d01f      	beq.n	8002842 <UART_SetConfig+0x172>
 8002802:	2b02      	cmp	r3, #2
 8002804:	d01f      	beq.n	8002846 <UART_SetConfig+0x176>
 8002806:	2b03      	cmp	r3, #3
 8002808:	d01f      	beq.n	800284a <UART_SetConfig+0x17a>
 800280a:	2b04      	cmp	r3, #4
 800280c:	d01f      	beq.n	800284e <UART_SetConfig+0x17e>
 800280e:	2b05      	cmp	r3, #5
 8002810:	d01f      	beq.n	8002852 <UART_SetConfig+0x182>
 8002812:	2b06      	cmp	r3, #6
 8002814:	d01f      	beq.n	8002856 <UART_SetConfig+0x186>
 8002816:	2b07      	cmp	r3, #7
 8002818:	d01f      	beq.n	800285a <UART_SetConfig+0x18a>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d01f      	beq.n	800285e <UART_SetConfig+0x18e>
 800281e:	2b09      	cmp	r3, #9
 8002820:	d01f      	beq.n	8002862 <UART_SetConfig+0x192>
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d01f      	beq.n	8002866 <UART_SetConfig+0x196>
 8002826:	2b0b      	cmp	r3, #11
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002830:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002834:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002836:	2800      	cmp	r0, #0
 8002838:	d171      	bne.n	800291e <UART_SetConfig+0x24e>
 800283a:	4602      	mov	r2, r0
 800283c:	e7a2      	b.n	8002784 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800283e:	2301      	movs	r3, #1
 8002840:	e7f6      	b.n	8002830 <UART_SetConfig+0x160>
 8002842:	2302      	movs	r3, #2
 8002844:	e7f4      	b.n	8002830 <UART_SetConfig+0x160>
 8002846:	2304      	movs	r3, #4
 8002848:	e7f2      	b.n	8002830 <UART_SetConfig+0x160>
 800284a:	2306      	movs	r3, #6
 800284c:	e7f0      	b.n	8002830 <UART_SetConfig+0x160>
 800284e:	2308      	movs	r3, #8
 8002850:	e7ee      	b.n	8002830 <UART_SetConfig+0x160>
 8002852:	230a      	movs	r3, #10
 8002854:	e7ec      	b.n	8002830 <UART_SetConfig+0x160>
 8002856:	230c      	movs	r3, #12
 8002858:	e7ea      	b.n	8002830 <UART_SetConfig+0x160>
 800285a:	2310      	movs	r3, #16
 800285c:	e7e8      	b.n	8002830 <UART_SetConfig+0x160>
 800285e:	2320      	movs	r3, #32
 8002860:	e7e6      	b.n	8002830 <UART_SetConfig+0x160>
 8002862:	2340      	movs	r3, #64	; 0x40
 8002864:	e7e4      	b.n	8002830 <UART_SetConfig+0x160>
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	e7e2      	b.n	8002830 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800286a:	2b00      	cmp	r3, #0
 800286c:	d052      	beq.n	8002914 <UART_SetConfig+0x244>
 800286e:	2b01      	cmp	r3, #1
 8002870:	d052      	beq.n	8002918 <UART_SetConfig+0x248>
 8002872:	2b02      	cmp	r3, #2
 8002874:	d052      	beq.n	800291c <UART_SetConfig+0x24c>
 8002876:	2b03      	cmp	r3, #3
 8002878:	d069      	beq.n	800294e <UART_SetConfig+0x27e>
 800287a:	2b04      	cmp	r3, #4
 800287c:	d069      	beq.n	8002952 <UART_SetConfig+0x282>
 800287e:	2b05      	cmp	r3, #5
 8002880:	d069      	beq.n	8002956 <UART_SetConfig+0x286>
 8002882:	2b06      	cmp	r3, #6
 8002884:	d069      	beq.n	800295a <UART_SetConfig+0x28a>
 8002886:	2b07      	cmp	r3, #7
 8002888:	d069      	beq.n	800295e <UART_SetConfig+0x28e>
 800288a:	2b08      	cmp	r3, #8
 800288c:	d069      	beq.n	8002962 <UART_SetConfig+0x292>
 800288e:	2b09      	cmp	r3, #9
 8002890:	d069      	beq.n	8002966 <UART_SetConfig+0x296>
 8002892:	2b0a      	cmp	r3, #10
 8002894:	d069      	beq.n	800296a <UART_SetConfig+0x29a>
 8002896:	4846      	ldr	r0, [pc, #280]	; (80029b0 <UART_SetConfig+0x2e0>)
 8002898:	f24f 4224 	movw	r2, #62500	; 0xf424
 800289c:	2b0b      	cmp	r3, #11
 800289e:	bf08      	it	eq
 80028a0:	4610      	moveq	r0, r2
 80028a2:	2302      	movs	r3, #2
 80028a4:	e03b      	b.n	800291e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80028a6:	f7ff f9e9 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 80028aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ac:	b1e3      	cbz	r3, 80028e8 <UART_SetConfig+0x218>
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d01c      	beq.n	80028ec <UART_SetConfig+0x21c>
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d01c      	beq.n	80028f0 <UART_SetConfig+0x220>
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d01c      	beq.n	80028f4 <UART_SetConfig+0x224>
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d01c      	beq.n	80028f8 <UART_SetConfig+0x228>
 80028be:	2b05      	cmp	r3, #5
 80028c0:	d01c      	beq.n	80028fc <UART_SetConfig+0x22c>
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d01c      	beq.n	8002900 <UART_SetConfig+0x230>
 80028c6:	2b07      	cmp	r3, #7
 80028c8:	d01c      	beq.n	8002904 <UART_SetConfig+0x234>
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d01c      	beq.n	8002908 <UART_SetConfig+0x238>
 80028ce:	2b09      	cmp	r3, #9
 80028d0:	d01c      	beq.n	800290c <UART_SetConfig+0x23c>
 80028d2:	2b0a      	cmp	r3, #10
 80028d4:	d01c      	beq.n	8002910 <UART_SetConfig+0x240>
 80028d6:	2b0b      	cmp	r3, #11
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80028e0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80028e4:	2304      	movs	r3, #4
 80028e6:	e7a6      	b.n	8002836 <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80028e8:	2301      	movs	r3, #1
 80028ea:	e7f9      	b.n	80028e0 <UART_SetConfig+0x210>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e7f7      	b.n	80028e0 <UART_SetConfig+0x210>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e7f5      	b.n	80028e0 <UART_SetConfig+0x210>
 80028f4:	2306      	movs	r3, #6
 80028f6:	e7f3      	b.n	80028e0 <UART_SetConfig+0x210>
 80028f8:	2308      	movs	r3, #8
 80028fa:	e7f1      	b.n	80028e0 <UART_SetConfig+0x210>
 80028fc:	230a      	movs	r3, #10
 80028fe:	e7ef      	b.n	80028e0 <UART_SetConfig+0x210>
 8002900:	230c      	movs	r3, #12
 8002902:	e7ed      	b.n	80028e0 <UART_SetConfig+0x210>
 8002904:	2310      	movs	r3, #16
 8002906:	e7eb      	b.n	80028e0 <UART_SetConfig+0x210>
 8002908:	2320      	movs	r3, #32
 800290a:	e7e9      	b.n	80028e0 <UART_SetConfig+0x210>
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	e7e7      	b.n	80028e0 <UART_SetConfig+0x210>
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	e7e5      	b.n	80028e0 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002914:	4826      	ldr	r0, [pc, #152]	; (80029b0 <UART_SetConfig+0x2e0>)
 8002916:	e7c4      	b.n	80028a2 <UART_SetConfig+0x1d2>
 8002918:	4826      	ldr	r0, [pc, #152]	; (80029b4 <UART_SetConfig+0x2e4>)
 800291a:	e7c2      	b.n	80028a2 <UART_SetConfig+0x1d2>
 800291c:	4826      	ldr	r0, [pc, #152]	; (80029b8 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800291e:	6862      	ldr	r2, [r4, #4]
 8002920:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002924:	4281      	cmp	r1, r0
 8002926:	f63f af2c 	bhi.w	8002782 <UART_SetConfig+0xb2>
 800292a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800292e:	f63f af28 	bhi.w	8002782 <UART_SetConfig+0xb2>
        switch (clocksource)
 8002932:	2b08      	cmp	r3, #8
 8002934:	f200 8125 	bhi.w	8002b82 <UART_SetConfig+0x4b2>
 8002938:	e8df f013 	tbh	[pc, r3, lsl #1]
 800293c:	01230059 	.word	0x01230059
 8002940:	01230095 	.word	0x01230095
 8002944:	012300d1 	.word	0x012300d1
 8002948:	01230123 	.word	0x01230123
 800294c:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800294e:	481b      	ldr	r0, [pc, #108]	; (80029bc <UART_SetConfig+0x2ec>)
 8002950:	e7a7      	b.n	80028a2 <UART_SetConfig+0x1d2>
 8002952:	481b      	ldr	r0, [pc, #108]	; (80029c0 <UART_SetConfig+0x2f0>)
 8002954:	e7a5      	b.n	80028a2 <UART_SetConfig+0x1d2>
 8002956:	481b      	ldr	r0, [pc, #108]	; (80029c4 <UART_SetConfig+0x2f4>)
 8002958:	e7a3      	b.n	80028a2 <UART_SetConfig+0x1d2>
 800295a:	481b      	ldr	r0, [pc, #108]	; (80029c8 <UART_SetConfig+0x2f8>)
 800295c:	e7a1      	b.n	80028a2 <UART_SetConfig+0x1d2>
 800295e:	481b      	ldr	r0, [pc, #108]	; (80029cc <UART_SetConfig+0x2fc>)
 8002960:	e79f      	b.n	80028a2 <UART_SetConfig+0x1d2>
 8002962:	481b      	ldr	r0, [pc, #108]	; (80029d0 <UART_SetConfig+0x300>)
 8002964:	e79d      	b.n	80028a2 <UART_SetConfig+0x1d2>
 8002966:	481b      	ldr	r0, [pc, #108]	; (80029d4 <UART_SetConfig+0x304>)
 8002968:	e79b      	b.n	80028a2 <UART_SetConfig+0x1d2>
 800296a:	481b      	ldr	r0, [pc, #108]	; (80029d8 <UART_SetConfig+0x308>)
 800296c:	e799      	b.n	80028a2 <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800296e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002972:	e73e      	b.n	80027f2 <UART_SetConfig+0x122>
 8002974:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002978:	e73b      	b.n	80027f2 <UART_SetConfig+0x122>
 800297a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800297e:	e738      	b.n	80027f2 <UART_SetConfig+0x122>
 8002980:	f241 5055 	movw	r0, #5461	; 0x1555
 8002984:	e735      	b.n	80027f2 <UART_SetConfig+0x122>
 8002986:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800298a:	e732      	b.n	80027f2 <UART_SetConfig+0x122>
 800298c:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002990:	e72f      	b.n	80027f2 <UART_SetConfig+0x122>
 8002992:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8002996:	e72c      	b.n	80027f2 <UART_SetConfig+0x122>
 8002998:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800299c:	e729      	b.n	80027f2 <UART_SetConfig+0x122>
 800299e:	bf00      	nop
 80029a0:	cfff69f3 	.word	0xcfff69f3
 80029a4:	40008000 	.word	0x40008000
 80029a8:	40013800 	.word	0x40013800
 80029ac:	08006120 	.word	0x08006120
 80029b0:	00f42400 	.word	0x00f42400
 80029b4:	007a1200 	.word	0x007a1200
 80029b8:	003d0900 	.word	0x003d0900
 80029bc:	0028b0aa 	.word	0x0028b0aa
 80029c0:	001e8480 	.word	0x001e8480
 80029c4:	00186a00 	.word	0x00186a00
 80029c8:	00145855 	.word	0x00145855
 80029cc:	000f4240 	.word	0x000f4240
 80029d0:	0007a120 	.word	0x0007a120
 80029d4:	0003d090 	.word	0x0003d090
 80029d8:	0001e848 	.word	0x0001e848
 80029dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029e0:	e79d      	b.n	800291e <UART_SetConfig+0x24e>
 80029e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029e6:	e704      	b.n	80027f2 <UART_SetConfig+0x122>
 80029e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029ec:	e701      	b.n	80027f2 <UART_SetConfig+0x122>
            pclk = HAL_RCC_GetPCLK1Freq();
 80029ee:	f7ff f9a3 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8089 	beq.w	8002b0c <UART_SetConfig+0x43c>
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d072      	beq.n	8002ae4 <UART_SetConfig+0x414>
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d072      	beq.n	8002ae8 <UART_SetConfig+0x418>
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d072      	beq.n	8002aec <UART_SetConfig+0x41c>
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d072      	beq.n	8002af0 <UART_SetConfig+0x420>
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d072      	beq.n	8002af4 <UART_SetConfig+0x424>
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d072      	beq.n	8002af8 <UART_SetConfig+0x428>
 8002a12:	2b07      	cmp	r3, #7
 8002a14:	d072      	beq.n	8002afc <UART_SetConfig+0x42c>
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d072      	beq.n	8002b00 <UART_SetConfig+0x430>
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d072      	beq.n	8002b04 <UART_SetConfig+0x434>
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d072      	beq.n	8002b08 <UART_SetConfig+0x438>
 8002a22:	2b0b      	cmp	r3, #11
 8002a24:	d172      	bne.n	8002b0c <UART_SetConfig+0x43c>
 8002a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	f7fd fbf7 	bl	8000220 <__aeabi_uldivmod>
 8002a32:	6865      	ldr	r5, [r4, #4]
 8002a34:	020f      	lsls	r7, r1, #8
 8002a36:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002a3a:	0206      	lsls	r6, r0, #8
 8002a3c:	0868      	lsrs	r0, r5, #1
 8002a3e:	eb16 0b00 	adds.w	fp, r6, r0
 8002a42:	f147 0c00 	adc.w	ip, r7, #0
 8002a46:	462a      	mov	r2, r5
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4658      	mov	r0, fp
 8002a4c:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a4e:	f7fd fbe7 	bl	8000220 <__aeabi_uldivmod>
            break;
 8002a52:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a54:	4b9a      	ldr	r3, [pc, #616]	; (8002cc0 <UART_SetConfig+0x5f0>)
 8002a56:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002a5a:	4299      	cmp	r1, r3
 8002a5c:	f63f ae91 	bhi.w	8002782 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	60d8      	str	r0, [r3, #12]
 8002a64:	e68e      	b.n	8002784 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d036      	beq.n	8002ada <UART_SetConfig+0x40a>
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d016      	beq.n	8002a9e <UART_SetConfig+0x3ce>
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d016      	beq.n	8002aa2 <UART_SetConfig+0x3d2>
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d016      	beq.n	8002aa6 <UART_SetConfig+0x3d6>
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d01e      	beq.n	8002aba <UART_SetConfig+0x3ea>
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d01e      	beq.n	8002abe <UART_SetConfig+0x3ee>
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d01e      	beq.n	8002ac2 <UART_SetConfig+0x3f2>
 8002a84:	2b07      	cmp	r3, #7
 8002a86:	d020      	beq.n	8002aca <UART_SetConfig+0x3fa>
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d020      	beq.n	8002ace <UART_SetConfig+0x3fe>
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	d020      	beq.n	8002ad2 <UART_SetConfig+0x402>
 8002a90:	2b0a      	cmp	r3, #10
 8002a92:	d020      	beq.n	8002ad6 <UART_SetConfig+0x406>
 8002a94:	2b0b      	cmp	r3, #11
 8002a96:	d120      	bne.n	8002ada <UART_SetConfig+0x40a>
 8002a98:	488a      	ldr	r0, [pc, #552]	; (8002cc4 <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	e006      	b.n	8002aac <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a9e:	488a      	ldr	r0, [pc, #552]	; (8002cc8 <UART_SetConfig+0x5f8>)
 8002aa0:	e7fb      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002aa2:	488a      	ldr	r0, [pc, #552]	; (8002ccc <UART_SetConfig+0x5fc>)
 8002aa4:	e7f9      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002aa6:	a182      	add	r1, pc, #520	; (adr r1, 8002cb0 <UART_SetConfig+0x5e0>)
 8002aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aac:	0855      	lsrs	r5, r2, #1
 8002aae:	1940      	adds	r0, r0, r5
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	f141 0100 	adc.w	r1, r1, #0
 8002ab8:	e7c9      	b.n	8002a4e <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aba:	4885      	ldr	r0, [pc, #532]	; (8002cd0 <UART_SetConfig+0x600>)
 8002abc:	e7ed      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002abe:	4885      	ldr	r0, [pc, #532]	; (8002cd4 <UART_SetConfig+0x604>)
 8002ac0:	e7eb      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002ac2:	a17d      	add	r1, pc, #500	; (adr r1, 8002cb8 <UART_SetConfig+0x5e8>)
 8002ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ac8:	e7f0      	b.n	8002aac <UART_SetConfig+0x3dc>
 8002aca:	4883      	ldr	r0, [pc, #524]	; (8002cd8 <UART_SetConfig+0x608>)
 8002acc:	e7e5      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002ace:	4883      	ldr	r0, [pc, #524]	; (8002cdc <UART_SetConfig+0x60c>)
 8002ad0:	e7e3      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002ad2:	4883      	ldr	r0, [pc, #524]	; (8002ce0 <UART_SetConfig+0x610>)
 8002ad4:	e7e1      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002ad6:	4883      	ldr	r0, [pc, #524]	; (8002ce4 <UART_SetConfig+0x614>)
 8002ad8:	e7df      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002ada:	4883      	ldr	r0, [pc, #524]	; (8002ce8 <UART_SetConfig+0x618>)
 8002adc:	e7dd      	b.n	8002a9a <UART_SetConfig+0x3ca>
            pclk = HAL_RCC_GetSysClockFreq();
 8002ade:	f7ff f8cd 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8002ae2:	e786      	b.n	80029f2 <UART_SetConfig+0x322>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	e7a0      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002ae8:	2204      	movs	r2, #4
 8002aea:	e79e      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002aec:	2206      	movs	r2, #6
 8002aee:	e79c      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002af0:	2208      	movs	r2, #8
 8002af2:	e79a      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002af4:	220a      	movs	r2, #10
 8002af6:	e798      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002af8:	220c      	movs	r2, #12
 8002afa:	e796      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002afc:	2210      	movs	r2, #16
 8002afe:	e794      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002b00:	2220      	movs	r2, #32
 8002b02:	e792      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	e790      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	e78e      	b.n	8002a2a <UART_SetConfig+0x35a>
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	e78c      	b.n	8002a2a <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b12:	b39b      	cbz	r3, 8002b7c <UART_SetConfig+0x4ac>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d016      	beq.n	8002b46 <UART_SetConfig+0x476>
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d017      	beq.n	8002b4c <UART_SetConfig+0x47c>
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d018      	beq.n	8002b52 <UART_SetConfig+0x482>
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d018      	beq.n	8002b56 <UART_SetConfig+0x486>
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d019      	beq.n	8002b5c <UART_SetConfig+0x48c>
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d019      	beq.n	8002b60 <UART_SetConfig+0x490>
 8002b2c:	2b07      	cmp	r3, #7
 8002b2e:	d019      	beq.n	8002b64 <UART_SetConfig+0x494>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d01a      	beq.n	8002b6a <UART_SetConfig+0x49a>
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d01b      	beq.n	8002b70 <UART_SetConfig+0x4a0>
 8002b38:	2b0a      	cmp	r3, #10
 8002b3a:	d01c      	beq.n	8002b76 <UART_SetConfig+0x4a6>
 8002b3c:	2b0b      	cmp	r3, #11
 8002b3e:	d11d      	bne.n	8002b7c <UART_SetConfig+0x4ac>
 8002b40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b44:	e7a9      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b46:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002b4a:	e7a6      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b50:	e7a3      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b52:	4866      	ldr	r0, [pc, #408]	; (8002cec <UART_SetConfig+0x61c>)
 8002b54:	e7a1      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b5a:	e79e      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b5c:	4864      	ldr	r0, [pc, #400]	; (8002cf0 <UART_SetConfig+0x620>)
 8002b5e:	e79c      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b60:	4864      	ldr	r0, [pc, #400]	; (8002cf4 <UART_SetConfig+0x624>)
 8002b62:	e79a      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b68:	e797      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b6a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b6e:	e794      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b74:	e791      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002b7a:	e78e      	b.n	8002a9a <UART_SetConfig+0x3ca>
 8002b7c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b80:	e78b      	b.n	8002a9a <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 8002b82:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002b84:	2000      	movs	r0, #0
 8002b86:	e765      	b.n	8002a54 <UART_SetConfig+0x384>
    switch (clocksource)
 8002b88:	2a07      	cmp	r2, #7
 8002b8a:	f200 8106 	bhi.w	8002d9a <UART_SetConfig+0x6ca>
 8002b8e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002b92:	0008      	.short	0x0008
 8002b94:	0104003f 	.word	0x0104003f
 8002b98:	01040076 	.word	0x01040076
 8002b9c:	01040104 	.word	0x01040104
 8002ba0:	00c7      	.short	0x00c7
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba2:	f7ff f8db 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ba6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ba8:	2900      	cmp	r1, #0
 8002baa:	d06b      	beq.n	8002c84 <UART_SetConfig+0x5b4>
 8002bac:	2901      	cmp	r1, #1
 8002bae:	d06b      	beq.n	8002c88 <UART_SetConfig+0x5b8>
 8002bb0:	2902      	cmp	r1, #2
 8002bb2:	d06b      	beq.n	8002c8c <UART_SetConfig+0x5bc>
 8002bb4:	2903      	cmp	r1, #3
 8002bb6:	d06b      	beq.n	8002c90 <UART_SetConfig+0x5c0>
 8002bb8:	2904      	cmp	r1, #4
 8002bba:	d06b      	beq.n	8002c94 <UART_SetConfig+0x5c4>
 8002bbc:	2905      	cmp	r1, #5
 8002bbe:	d06b      	beq.n	8002c98 <UART_SetConfig+0x5c8>
 8002bc0:	2906      	cmp	r1, #6
 8002bc2:	d06b      	beq.n	8002c9c <UART_SetConfig+0x5cc>
 8002bc4:	2907      	cmp	r1, #7
 8002bc6:	d06b      	beq.n	8002ca0 <UART_SetConfig+0x5d0>
 8002bc8:	2908      	cmp	r1, #8
 8002bca:	d06b      	beq.n	8002ca4 <UART_SetConfig+0x5d4>
 8002bcc:	2909      	cmp	r1, #9
 8002bce:	d06b      	beq.n	8002ca8 <UART_SetConfig+0x5d8>
 8002bd0:	290a      	cmp	r1, #10
 8002bd2:	d06b      	beq.n	8002cac <UART_SetConfig+0x5dc>
 8002bd4:	290b      	cmp	r1, #11
 8002bd6:	bf14      	ite	ne
 8002bd8:	2201      	movne	r2, #1
 8002bda:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8002bde:	6861      	ldr	r1, [r4, #4]
 8002be0:	fbb0 f2f2 	udiv	r2, r0, r2
 8002be4:	084b      	lsrs	r3, r1, #1
 8002be6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf0:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf2:	f1a3 0010 	sub.w	r0, r3, #16
 8002bf6:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002bfa:	4288      	cmp	r0, r1
 8002bfc:	f63f adc1 	bhi.w	8002782 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c00:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002c04:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c06:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	60c3      	str	r3, [r0, #12]
 8002c0e:	e5b9      	b.n	8002784 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c10:	b1fb      	cbz	r3, 8002c52 <UART_SetConfig+0x582>
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d01f      	beq.n	8002c56 <UART_SetConfig+0x586>
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d01f      	beq.n	8002c5a <UART_SetConfig+0x58a>
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d01f      	beq.n	8002c5e <UART_SetConfig+0x58e>
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d01f      	beq.n	8002c62 <UART_SetConfig+0x592>
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d01f      	beq.n	8002c66 <UART_SetConfig+0x596>
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d01f      	beq.n	8002c6a <UART_SetConfig+0x59a>
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	d01f      	beq.n	8002c6e <UART_SetConfig+0x59e>
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d01f      	beq.n	8002c72 <UART_SetConfig+0x5a2>
 8002c32:	2b09      	cmp	r3, #9
 8002c34:	d01f      	beq.n	8002c76 <UART_SetConfig+0x5a6>
 8002c36:	2b0a      	cmp	r3, #10
 8002c38:	d01f      	beq.n	8002c7a <UART_SetConfig+0x5aa>
 8002c3a:	492f      	ldr	r1, [pc, #188]	; (8002cf8 <UART_SetConfig+0x628>)
 8002c3c:	4a29      	ldr	r2, [pc, #164]	; (8002ce4 <UART_SetConfig+0x614>)
 8002c3e:	2b0b      	cmp	r3, #11
 8002c40:	bf14      	ite	ne
 8002c42:	4613      	movne	r3, r2
 8002c44:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c46:	6862      	ldr	r2, [r4, #4]
 8002c48:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c50:	e7cd      	b.n	8002bee <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <UART_SetConfig+0x614>)
 8002c54:	e7f7      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <UART_SetConfig+0x5f4>)
 8002c58:	e7f5      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <UART_SetConfig+0x62c>)
 8002c5c:	e7f3      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <UART_SetConfig+0x630>)
 8002c60:	e7f1      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <UART_SetConfig+0x634>)
 8002c64:	e7ef      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <UART_SetConfig+0x638>)
 8002c68:	e7ed      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <UART_SetConfig+0x63c>)
 8002c6c:	e7eb      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <UART_SetConfig+0x640>)
 8002c70:	e7e9      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <UART_SetConfig+0x644>)
 8002c74:	e7e7      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <UART_SetConfig+0x648>)
 8002c78:	e7e5      	b.n	8002c46 <UART_SetConfig+0x576>
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <UART_SetConfig+0x64c>)
 8002c7c:	e7e3      	b.n	8002c46 <UART_SetConfig+0x576>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7e:	f7fe fffd 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8002c82:	e790      	b.n	8002ba6 <UART_SetConfig+0x4d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c84:	2201      	movs	r2, #1
 8002c86:	e7aa      	b.n	8002bde <UART_SetConfig+0x50e>
 8002c88:	2202      	movs	r2, #2
 8002c8a:	e7a8      	b.n	8002bde <UART_SetConfig+0x50e>
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	e7a6      	b.n	8002bde <UART_SetConfig+0x50e>
 8002c90:	2206      	movs	r2, #6
 8002c92:	e7a4      	b.n	8002bde <UART_SetConfig+0x50e>
 8002c94:	2208      	movs	r2, #8
 8002c96:	e7a2      	b.n	8002bde <UART_SetConfig+0x50e>
 8002c98:	220a      	movs	r2, #10
 8002c9a:	e7a0      	b.n	8002bde <UART_SetConfig+0x50e>
 8002c9c:	220c      	movs	r2, #12
 8002c9e:	e79e      	b.n	8002bde <UART_SetConfig+0x50e>
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	e79c      	b.n	8002bde <UART_SetConfig+0x50e>
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	e79a      	b.n	8002bde <UART_SetConfig+0x50e>
 8002ca8:	2240      	movs	r2, #64	; 0x40
 8002caa:	e798      	b.n	8002bde <UART_SetConfig+0x50e>
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	e796      	b.n	8002bde <UART_SetConfig+0x50e>
 8002cb0:	28b0aa00 	.word	0x28b0aa00
 8002cb4:	00000000 	.word	0x00000000
 8002cb8:	14585500 	.word	0x14585500
 8002cbc:	00000000 	.word	0x00000000
 8002cc0:	000ffcff 	.word	0x000ffcff
 8002cc4:	00f42400 	.word	0x00f42400
 8002cc8:	7a120000 	.word	0x7a120000
 8002ccc:	3d090000 	.word	0x3d090000
 8002cd0:	1e848000 	.word	0x1e848000
 8002cd4:	186a0000 	.word	0x186a0000
 8002cd8:	0f424000 	.word	0x0f424000
 8002cdc:	07a12000 	.word	0x07a12000
 8002ce0:	03d09000 	.word	0x03d09000
 8002ce4:	01e84800 	.word	0x01e84800
 8002ce8:	f4240000 	.word	0xf4240000
 8002cec:	00155500 	.word	0x00155500
 8002cf0:	000ccc00 	.word	0x000ccc00
 8002cf4:	000aaa00 	.word	0x000aaa00
 8002cf8:	0001e848 	.word	0x0001e848
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	00516154 	.word	0x00516154
 8002d04:	003d0900 	.word	0x003d0900
 8002d08:	0030d400 	.word	0x0030d400
 8002d0c:	0028b0aa 	.word	0x0028b0aa
 8002d10:	001e8480 	.word	0x001e8480
 8002d14:	000f4240 	.word	0x000f4240
 8002d18:	0007a120 	.word	0x0007a120
 8002d1c:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d20:	b1d3      	cbz	r3, 8002d58 <UART_SetConfig+0x688>
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d01b      	beq.n	8002d5e <UART_SetConfig+0x68e>
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d01c      	beq.n	8002d64 <UART_SetConfig+0x694>
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d01d      	beq.n	8002d6a <UART_SetConfig+0x69a>
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d01e      	beq.n	8002d70 <UART_SetConfig+0x6a0>
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d01f      	beq.n	8002d76 <UART_SetConfig+0x6a6>
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d020      	beq.n	8002d7c <UART_SetConfig+0x6ac>
 8002d3a:	2b07      	cmp	r3, #7
 8002d3c:	d021      	beq.n	8002d82 <UART_SetConfig+0x6b2>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d022      	beq.n	8002d88 <UART_SetConfig+0x6b8>
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	d023      	beq.n	8002d8e <UART_SetConfig+0x6be>
 8002d46:	2b0a      	cmp	r3, #10
 8002d48:	d024      	beq.n	8002d94 <UART_SetConfig+0x6c4>
 8002d4a:	2b0b      	cmp	r3, #11
 8002d4c:	bf14      	ite	ne
 8002d4e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8002d52:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002d56:	e776      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d5c:	e773      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d62:	e770      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d68:	e76d      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d6a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8002d6e:	e76a      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d74:	e767      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d76:	f641 1398 	movw	r3, #6552	; 0x1998
 8002d7a:	e764      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d7c:	f241 5354 	movw	r3, #5460	; 0x1554
 8002d80:	e761      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d86:	e75e      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8c:	e75b      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d92:	e758      	b.n	8002c46 <UART_SetConfig+0x576>
 8002d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d98:	e755      	b.n	8002c46 <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8002d9a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e728      	b.n	8002bf2 <UART_SetConfig+0x522>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da0:	f7fe ffdc 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d062      	beq.n	8002e70 <UART_SetConfig+0x7a0>
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d062      	beq.n	8002e74 <UART_SetConfig+0x7a4>
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d062      	beq.n	8002e78 <UART_SetConfig+0x7a8>
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d062      	beq.n	8002e7c <UART_SetConfig+0x7ac>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d062      	beq.n	8002e80 <UART_SetConfig+0x7b0>
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d062      	beq.n	8002e84 <UART_SetConfig+0x7b4>
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d062      	beq.n	8002e88 <UART_SetConfig+0x7b8>
 8002dc2:	2b07      	cmp	r3, #7
 8002dc4:	d062      	beq.n	8002e8c <UART_SetConfig+0x7bc>
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d062      	beq.n	8002e90 <UART_SetConfig+0x7c0>
 8002dca:	2b09      	cmp	r3, #9
 8002dcc:	d062      	beq.n	8002e94 <UART_SetConfig+0x7c4>
 8002dce:	2b0a      	cmp	r3, #10
 8002dd0:	d062      	beq.n	8002e98 <UART_SetConfig+0x7c8>
 8002dd2:	2b0b      	cmp	r3, #11
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002ddc:	6862      	ldr	r2, [r4, #4]
 8002dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de2:	e01c      	b.n	8002e1e <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002de4:	b35b      	cbz	r3, 8002e3e <UART_SetConfig+0x76e>
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d02b      	beq.n	8002e42 <UART_SetConfig+0x772>
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d02b      	beq.n	8002e46 <UART_SetConfig+0x776>
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d02b      	beq.n	8002e4a <UART_SetConfig+0x77a>
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d02b      	beq.n	8002e4e <UART_SetConfig+0x77e>
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d02b      	beq.n	8002e52 <UART_SetConfig+0x782>
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d02b      	beq.n	8002e56 <UART_SetConfig+0x786>
 8002dfe:	2b07      	cmp	r3, #7
 8002e00:	d02b      	beq.n	8002e5a <UART_SetConfig+0x78a>
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d02b      	beq.n	8002e5e <UART_SetConfig+0x78e>
 8002e06:	2b09      	cmp	r3, #9
 8002e08:	d02b      	beq.n	8002e62 <UART_SetConfig+0x792>
 8002e0a:	2b0a      	cmp	r3, #10
 8002e0c:	d02b      	beq.n	8002e66 <UART_SetConfig+0x796>
 8002e0e:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <UART_SetConfig+0x854>)
 8002e10:	f24f 4124 	movw	r1, #62500	; 0xf424
 8002e14:	2b0b      	cmp	r3, #11
 8002e16:	bf14      	ite	ne
 8002e18:	4613      	movne	r3, r2
 8002e1a:	460b      	moveq	r3, r1
 8002e1c:	6862      	ldr	r2, [r4, #4]
 8002e1e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002e22:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e26:	2200      	movs	r2, #0
 8002e28:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e2a:	f1a3 0010 	sub.w	r0, r3, #16
 8002e2e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002e32:	4288      	cmp	r0, r1
 8002e34:	f63f aca5 	bhi.w	8002782 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	60cb      	str	r3, [r1, #12]
 8002e3c:	e4a2      	b.n	8002784 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e3e:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <UART_SetConfig+0x854>)
 8002e40:	e7ec      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <UART_SetConfig+0x858>)
 8002e44:	e7ea      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <UART_SetConfig+0x85c>)
 8002e48:	e7e8      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <UART_SetConfig+0x860>)
 8002e4c:	e7e6      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <UART_SetConfig+0x864>)
 8002e50:	e7e4      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <UART_SetConfig+0x868>)
 8002e54:	e7e2      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <UART_SetConfig+0x86c>)
 8002e58:	e7e0      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e5a:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <UART_SetConfig+0x870>)
 8002e5c:	e7de      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e5e:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <UART_SetConfig+0x874>)
 8002e60:	e7dc      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e62:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <UART_SetConfig+0x878>)
 8002e64:	e7da      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <UART_SetConfig+0x87c>)
 8002e68:	e7d8      	b.n	8002e1c <UART_SetConfig+0x74c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6a:	f7fe ff07 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8002e6e:	e799      	b.n	8002da4 <UART_SetConfig+0x6d4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e70:	2301      	movs	r3, #1
 8002e72:	e7b3      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e7b1      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e7af      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e7c:	2306      	movs	r3, #6
 8002e7e:	e7ad      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e80:	2308      	movs	r3, #8
 8002e82:	e7ab      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e84:	230a      	movs	r3, #10
 8002e86:	e7a9      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e88:	230c      	movs	r3, #12
 8002e8a:	e7a7      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	e7a5      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e90:	2320      	movs	r3, #32
 8002e92:	e7a3      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e94:	2340      	movs	r3, #64	; 0x40
 8002e96:	e7a1      	b.n	8002ddc <UART_SetConfig+0x70c>
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	e79f      	b.n	8002ddc <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e9c:	b1cb      	cbz	r3, 8002ed2 <UART_SetConfig+0x802>
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d01a      	beq.n	8002ed8 <UART_SetConfig+0x808>
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d01b      	beq.n	8002ede <UART_SetConfig+0x80e>
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d01c      	beq.n	8002ee4 <UART_SetConfig+0x814>
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d01d      	beq.n	8002eea <UART_SetConfig+0x81a>
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d01e      	beq.n	8002ef0 <UART_SetConfig+0x820>
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d01f      	beq.n	8002ef6 <UART_SetConfig+0x826>
 8002eb6:	2b07      	cmp	r3, #7
 8002eb8:	d020      	beq.n	8002efc <UART_SetConfig+0x82c>
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d021      	beq.n	8002f02 <UART_SetConfig+0x832>
 8002ebe:	2b09      	cmp	r3, #9
 8002ec0:	d022      	beq.n	8002f08 <UART_SetConfig+0x838>
 8002ec2:	2b0a      	cmp	r3, #10
 8002ec4:	d023      	beq.n	8002f0e <UART_SetConfig+0x83e>
 8002ec6:	2b0b      	cmp	r3, #11
 8002ec8:	bf14      	ite	ne
 8002eca:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8002ece:	2380      	moveq	r3, #128	; 0x80
 8002ed0:	e7a4      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed6:	e7a1      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002ed8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002edc:	e79e      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee2:	e79b      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002ee4:	f241 5355 	movw	r3, #5461	; 0x1555
 8002ee8:	e798      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eee:	e795      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002ef0:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002ef4:	e792      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002ef6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002efa:	e78f      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002efc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f00:	e78c      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f06:	e789      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0c:	e786      	b.n	8002e1c <UART_SetConfig+0x74c>
 8002f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f12:	e783      	b.n	8002e1c <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f14:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f18:	f43f af3f 	beq.w	8002d9a <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8002f1c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e783      	b.n	8002e2a <UART_SetConfig+0x75a>
 8002f22:	bf00      	nop
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	007a1200 	.word	0x007a1200
 8002f2c:	003d0900 	.word	0x003d0900
 8002f30:	0028b0aa 	.word	0x0028b0aa
 8002f34:	001e8480 	.word	0x001e8480
 8002f38:	00186a00 	.word	0x00186a00
 8002f3c:	00145855 	.word	0x00145855
 8002f40:	000f4240 	.word	0x000f4240
 8002f44:	0007a120 	.word	0x0007a120
 8002f48:	0003d090 	.word	0x0003d090
 8002f4c:	0001e848 	.word	0x0001e848

08002f50 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f52:	07da      	lsls	r2, r3, #31
{
 8002f54:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f56:	d506      	bpl.n	8002f66 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f58:	6801      	ldr	r1, [r0, #0]
 8002f5a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002f5c:	684a      	ldr	r2, [r1, #4]
 8002f5e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f62:	4322      	orrs	r2, r4
 8002f64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f66:	079c      	lsls	r4, r3, #30
 8002f68:	d506      	bpl.n	8002f78 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f6a:	6801      	ldr	r1, [r0, #0]
 8002f6c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002f6e:	684a      	ldr	r2, [r1, #4]
 8002f70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f74:	4322      	orrs	r2, r4
 8002f76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f78:	0759      	lsls	r1, r3, #29
 8002f7a:	d506      	bpl.n	8002f8a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f7c:	6801      	ldr	r1, [r0, #0]
 8002f7e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f80:	684a      	ldr	r2, [r1, #4]
 8002f82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f86:	4322      	orrs	r2, r4
 8002f88:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f8a:	071a      	lsls	r2, r3, #28
 8002f8c:	d506      	bpl.n	8002f9c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f8e:	6801      	ldr	r1, [r0, #0]
 8002f90:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f92:	684a      	ldr	r2, [r1, #4]
 8002f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f98:	4322      	orrs	r2, r4
 8002f9a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f9c:	06dc      	lsls	r4, r3, #27
 8002f9e:	d506      	bpl.n	8002fae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fa0:	6801      	ldr	r1, [r0, #0]
 8002fa2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002fa4:	688a      	ldr	r2, [r1, #8]
 8002fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002faa:	4322      	orrs	r2, r4
 8002fac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fae:	0699      	lsls	r1, r3, #26
 8002fb0:	d506      	bpl.n	8002fc0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fb2:	6801      	ldr	r1, [r0, #0]
 8002fb4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002fb6:	688a      	ldr	r2, [r1, #8]
 8002fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fbc:	4322      	orrs	r2, r4
 8002fbe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fc0:	065a      	lsls	r2, r3, #25
 8002fc2:	d50f      	bpl.n	8002fe4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc4:	6801      	ldr	r1, [r0, #0]
 8002fc6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002fc8:	684a      	ldr	r2, [r1, #4]
 8002fca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002fce:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fd4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fd6:	d105      	bne.n	8002fe4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fd8:	684a      	ldr	r2, [r1, #4]
 8002fda:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002fdc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002fe0:	4322      	orrs	r2, r4
 8002fe2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	d506      	bpl.n	8002ff6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe8:	6802      	ldr	r2, [r0, #0]
 8002fea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002fec:	6853      	ldr	r3, [r2, #4]
 8002fee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	6053      	str	r3, [r2, #4]
 8002ff6:	bd10      	pop	{r4, pc}

08002ff8 <UART_WaitOnFlagUntilTimeout>:
{
 8002ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffc:	9d06      	ldr	r5, [sp, #24]
 8002ffe:	4604      	mov	r4, r0
 8003000:	460f      	mov	r7, r1
 8003002:	4616      	mov	r6, r2
 8003004:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003006:	6821      	ldr	r1, [r4, #0]
 8003008:	69ca      	ldr	r2, [r1, #28]
 800300a:	ea37 0302 	bics.w	r3, r7, r2
 800300e:	bf0c      	ite	eq
 8003010:	2201      	moveq	r2, #1
 8003012:	2200      	movne	r2, #0
 8003014:	42b2      	cmp	r2, r6
 8003016:	d002      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003018:	2000      	movs	r0, #0
}
 800301a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800301e:	1c68      	adds	r0, r5, #1
 8003020:	d0f2      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fd facd 	bl	80005c0 <HAL_GetTick>
 8003026:	eba0 0008 	sub.w	r0, r0, r8
 800302a:	4285      	cmp	r5, r0
 800302c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800302e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	d300      	bcc.n	8003034 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003032:	b98d      	cbnz	r5, 8003058 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003038:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	6883      	ldr	r3, [r0, #8]
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003042:	2320      	movs	r3, #32
 8003044:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800304c:	2300      	movs	r3, #0
 800304e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8003052:	2003      	movs	r0, #3
 8003054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003058:	075a      	lsls	r2, r3, #29
 800305a:	d5d4      	bpl.n	8003006 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800305c:	69c3      	ldr	r3, [r0, #28]
 800305e:	051b      	lsls	r3, r3, #20
 8003060:	d5d1      	bpl.n	8003006 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003066:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800306e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	6883      	ldr	r3, [r0, #8]
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003078:	2320      	movs	r3, #32
 800307a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800307e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003082:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003086:	e7e1      	b.n	800304c <UART_WaitOnFlagUntilTimeout+0x54>

08003088 <HAL_UART_Transmit>:
{
 8003088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800308c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800308e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003092:	2b20      	cmp	r3, #32
{
 8003094:	4604      	mov	r4, r0
 8003096:	460e      	mov	r6, r1
 8003098:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800309a:	d14f      	bne.n	800313c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800309c:	2900      	cmp	r1, #0
 800309e:	d04b      	beq.n	8003138 <HAL_UART_Transmit+0xb0>
 80030a0:	2a00      	cmp	r2, #0
 80030a2:	d049      	beq.n	8003138 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 80030a4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d047      	beq.n	800313c <HAL_UART_Transmit+0xb4>
 80030ac:	2301      	movs	r3, #1
 80030ae:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b2:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b6:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ba:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 80030be:	f7fd fa7f 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80030c4:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80030cc:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80030ce:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d2:	d103      	bne.n	80030dc <HAL_UART_Transmit+0x54>
 80030d4:	6923      	ldr	r3, [r4, #16]
 80030d6:	b90b      	cbnz	r3, 80030dc <HAL_UART_Transmit+0x54>
 80030d8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80030da:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80030dc:	2300      	movs	r3, #0
 80030de:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 80030e2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80030ea:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ec:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 80030ee:	b942      	cbnz	r2, 8003102 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030f0:	2140      	movs	r1, #64	; 0x40
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff ff80 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 80030f8:	b948      	cbnz	r0, 800310e <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 80030fa:	2320      	movs	r3, #32
 80030fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8003100:	e006      	b.n	8003110 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003102:	2200      	movs	r2, #0
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff ff76 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 800310c:	b118      	cbz	r0, 8003116 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 800310e:	2003      	movs	r0, #3
}
 8003110:	b003      	add	sp, #12
 8003112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003116:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003118:	b95e      	cbnz	r6, 8003132 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003122:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003124:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003128:	3b01      	subs	r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8003130:	e7d7      	b.n	80030e2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003132:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003136:	e7f4      	b.n	8003122 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8003138:	2001      	movs	r0, #1
 800313a:	e7e9      	b.n	8003110 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800313c:	2002      	movs	r0, #2
 800313e:	e7e7      	b.n	8003110 <HAL_UART_Transmit+0x88>

08003140 <UART_CheckIdleState>:
{
 8003140:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003142:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	2600      	movs	r6, #0
 8003146:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800314a:	f7fd fa39 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003154:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003156:	d417      	bmi.n	8003188 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	075b      	lsls	r3, r3, #29
 800315e:	d50a      	bpl.n	8003176 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	462b      	mov	r3, r5
 800316a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800316e:	4620      	mov	r0, r4
 8003170:	f7ff ff42 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8003174:	b9a0      	cbnz	r0, 80031a0 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003176:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003178:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800317a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800317e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003182:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8003186:	e00c      	b.n	80031a2 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4632      	mov	r2, r6
 8003190:	4603      	mov	r3, r0
 8003192:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff ff2e 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 800319c:	2800      	cmp	r0, #0
 800319e:	d0db      	beq.n	8003158 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80031a0:	2003      	movs	r0, #3
}
 80031a2:	b002      	add	sp, #8
 80031a4:	bd70      	pop	{r4, r5, r6, pc}

080031a6 <HAL_UART_Init>:
{
 80031a6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80031a8:	4604      	mov	r4, r0
 80031aa:	b350      	cbz	r0, 8003202 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80031ac:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80031b0:	b91b      	cbnz	r3, 80031ba <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80031b2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80031b6:	f001 fbed 	bl	8004994 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80031ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031bc:	2324      	movs	r3, #36	; 0x24
 80031be:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff fa80 	bl	80026d0 <UART_SetConfig>
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d016      	beq.n	8003202 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031d6:	b113      	cbz	r3, 80031de <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80031d8:	4620      	mov	r0, r4
 80031da:	f7ff feb9 	bl	8002f50 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ee:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80031f6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80031fe:	f7ff bf9f 	b.w	8003140 <UART_CheckIdleState>
}
 8003202:	2001      	movs	r0, #1
 8003204:	bd10      	pop	{r4, pc}

08003206 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003206:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003208:	2203      	movs	r2, #3
 800320a:	f88d 2003 	strb.w	r2, [sp, #3]
 800320e:	2207      	movs	r2, #7
 8003210:	f88d 2004 	strb.w	r2, [sp, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f88d 2006 	strb.w	r2, [sp, #6]
 800321a:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800321e:	2208      	movs	r2, #8
 8003220:	f88d 2008 	strb.w	r2, [sp, #8]
 8003224:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003228:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800322a:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800322c:	2104      	movs	r1, #4
 800322e:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003230:	f88d 3000 	strb.w	r3, [sp]
 8003234:	f88d 3001 	strb.w	r3, [sp, #1]
 8003238:	f88d 3002 	strb.w	r3, [sp, #2]
 800323c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003240:	f88d 1009 	strb.w	r1, [sp, #9]
 8003244:	f88d 400a 	strb.w	r4, [sp, #10]
 8003248:	f88d 100b 	strb.w	r1, [sp, #11]
 800324c:	f88d 300d 	strb.w	r3, [sp, #13]
 8003250:	f88d 300e 	strb.w	r3, [sp, #14]
 8003254:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003258:	b92a      	cbnz	r2, 8003266 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 800325a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800325e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8003262:	b004      	add	sp, #16
 8003264:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003266:	6802      	ldr	r2, [r0, #0]
 8003268:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800326a:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800326c:	aa04      	add	r2, sp, #16
 800326e:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003272:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003276:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800327a:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	fb92 f2f1 	sdiv	r2, r2, r1
 8003284:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003288:	aa04      	add	r2, sp, #16
 800328a:	4413      	add	r3, r2
 800328c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003290:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003294:	00d2      	lsls	r2, r2, #3
 8003296:	fb92 f3f3 	sdiv	r3, r2, r3
 800329a:	e7e0      	b.n	800325e <UARTEx_SetNbDataToProcess+0x58>

0800329c <HAL_UARTEx_WakeupCallback>:
 800329c:	4770      	bx	lr

0800329e <HAL_UARTEx_RxFifoFullCallback>:
 800329e:	4770      	bx	lr

080032a0 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 80032a0:	4770      	bx	lr

080032a2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80032a2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d014      	beq.n	80032d4 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032aa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	2324      	movs	r3, #36	; 0x24
 80032ae:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032b2:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032bc:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032c4:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032c6:	2220      	movs	r2, #32
 80032c8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80032cc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80032d0:	4618      	mov	r0, r3
 80032d2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80032d4:	2002      	movs	r0, #2
}
 80032d6:	4770      	bx	lr

080032d8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80032d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80032da:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80032de:	2b01      	cmp	r3, #1
{
 80032e0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80032e2:	d01b      	beq.n	800331c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80032e4:	2301      	movs	r3, #1
 80032e6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80032ea:	2324      	movs	r3, #36	; 0x24
 80032ec:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032f0:	6803      	ldr	r3, [r0, #0]
 80032f2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003302:	4311      	orrs	r1, r2
 8003304:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003306:	f7ff ff7e 	bl	8003206 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800330e:	2320      	movs	r3, #32
 8003310:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003314:	2000      	movs	r0, #0
 8003316:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 800331a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800331c:	2002      	movs	r0, #2
}
 800331e:	bd38      	pop	{r3, r4, r5, pc}

08003320 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003320:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003322:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003326:	2b01      	cmp	r3, #1
{
 8003328:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800332a:	d01b      	beq.n	8003364 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800332c:	2301      	movs	r3, #1
 800332e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003332:	2324      	movs	r3, #36	; 0x24
 8003334:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003338:	6803      	ldr	r3, [r0, #0]
 800333a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800334a:	4311      	orrs	r1, r2
 800334c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800334e:	f7ff ff5a 	bl	8003206 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003352:	6803      	ldr	r3, [r0, #0]
 8003354:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003356:	2320      	movs	r3, #32
 8003358:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800335c:	2000      	movs	r0, #0
 800335e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003362:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003364:	2002      	movs	r0, #2
}
 8003366:	bd38      	pop	{r3, r4, r5, pc}

08003368 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003368:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800336c:	b29b      	uxth	r3, r3
 800336e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800337a:	2000      	movs	r0, #0
 800337c:	4770      	bx	lr

0800337e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800337e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003382:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003386:	045b      	lsls	r3, r3, #17
 8003388:	0c5b      	lsrs	r3, r3, #17
 800338a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800338e:	2000      	movs	r0, #0
 8003390:	4770      	bx	lr

08003392 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003392:	b084      	sub	sp, #16
 8003394:	b510      	push	{r4, lr}
 8003396:	ac03      	add	r4, sp, #12
 8003398:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800339c:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 800339e:	2301      	movs	r3, #1
 80033a0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80033a4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80033a8:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80033ac:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80033b0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80033b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80033be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80033c6:	b004      	add	sp, #16
 80033c8:	4610      	mov	r0, r2
 80033ca:	4770      	bx	lr

080033cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033ce:	780d      	ldrb	r5, [r1, #0]
 80033d0:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80033d4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 80033d8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033da:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80033de:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033e0:	0412      	lsls	r2, r2, #16
 80033e2:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80033e4:	2803      	cmp	r0, #3
 80033e6:	d84f      	bhi.n	8003488 <USB_ActivateEndpoint+0xbc>
 80033e8:	e8df f000 	tbb	[pc, r0]
 80033ec:	48044b02 	.word	0x48044b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80033f4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80033f6:	f248 0480 	movw	r4, #32896	; 0x8080
 80033fa:	4322      	orrs	r2, r4
 80033fc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003400:	780f      	ldrb	r7, [r1, #0]
 8003402:	4da8      	ldr	r5, [pc, #672]	; (80036a4 <USB_ActivateEndpoint+0x2d8>)
 8003404:	b23e      	sxth	r6, r7
 8003406:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 800340a:	b292      	uxth	r2, r2
 800340c:	402a      	ands	r2, r5
 800340e:	433a      	orrs	r2, r7
 8003410:	4322      	orrs	r2, r4
 8003412:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8003416:	7b0c      	ldrb	r4, [r1, #12]
 8003418:	780a      	ldrb	r2, [r1, #0]
 800341a:	2c00      	cmp	r4, #0
 800341c:	d17f      	bne.n	800351e <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
 800341e:	784f      	ldrb	r7, [r1, #1]
 8003420:	88ce      	ldrh	r6, [r1, #6]
 8003422:	2408      	movs	r4, #8
 8003424:	b397      	cbz	r7, 800348c <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003426:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800342a:	fb14 3202 	smlabb	r2, r4, r2, r3
 800342e:	fa12 f287 	uxtah	r2, r2, r7
 8003432:	f026 0601 	bic.w	r6, r6, #1
 8003436:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800343a:	780a      	ldrb	r2, [r1, #0]
 800343c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003440:	0666      	lsls	r6, r4, #25
 8003442:	d509      	bpl.n	8003458 <USB_ActivateEndpoint+0x8c>
 8003444:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003448:	b2a4      	uxth	r4, r4
 800344a:	402c      	ands	r4, r5
 800344c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003450:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003454:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003458:	78ca      	ldrb	r2, [r1, #3]
 800345a:	7809      	ldrb	r1, [r1, #0]
 800345c:	4c92      	ldr	r4, [pc, #584]	; (80036a8 <USB_ActivateEndpoint+0x2dc>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800345e:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003460:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003462:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003466:	b292      	uxth	r2, r2
 8003468:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800346c:	d001      	beq.n	8003472 <USB_ActivateEndpoint+0xa6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800346e:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800347a:	e0c3      	b.n	8003604 <USB_ActivateEndpoint+0x238>
      wEpRegVal |= USB_EP_INTERRUPT;
 800347c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003480:	e7b8      	b.n	80033f4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003482:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003486:	e7b5      	b.n	80033f4 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003488:	2001      	movs	r0, #1
 800348a:	e7b4      	b.n	80033f6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800348c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003490:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003494:	fa12 f285 	uxtah	r2, r2, r5
 8003498:	f026 0601 	bic.w	r6, r6, #1
 800349c:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80034a0:	780a      	ldrb	r2, [r1, #0]
 80034a2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80034a6:	fb14 3202 	smlabb	r2, r4, r2, r3
 80034aa:	690c      	ldr	r4, [r1, #16]
 80034ac:	b2ad      	uxth	r5, r5
 80034ae:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80034b2:	b944      	cbnz	r4, 80034c6 <USB_ActivateEndpoint+0xfa>
 80034b4:	5b54      	ldrh	r4, [r2, r5]
 80034b6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80034ba:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80034be:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80034c2:	5354      	strh	r4, [r2, r5]
 80034c4:	e007      	b.n	80034d6 <USB_ActivateEndpoint+0x10a>
 80034c6:	2c3d      	cmp	r4, #61	; 0x3d
 80034c8:	d824      	bhi.n	8003514 <USB_ActivateEndpoint+0x148>
 80034ca:	0866      	lsrs	r6, r4, #1
 80034cc:	07e4      	lsls	r4, r4, #31
 80034ce:	bf48      	it	mi
 80034d0:	3601      	addmi	r6, #1
 80034d2:	02b6      	lsls	r6, r6, #10
 80034d4:	5356      	strh	r6, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034d6:	780c      	ldrb	r4, [r1, #0]
 80034d8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034dc:	0457      	lsls	r7, r2, #17
 80034de:	d50d      	bpl.n	80034fc <USB_ActivateEndpoint+0x130>
 80034e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034e4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80034e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034ec:	0412      	lsls	r2, r2, #16
 80034ee:	0c12      	lsrs	r2, r2, #16
 80034f0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034fc:	7809      	ldrb	r1, [r1, #0]
 80034fe:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003502:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800350a:	0412      	lsls	r2, r2, #16
 800350c:	0c12      	lsrs	r2, r2, #16
 800350e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003512:	e7ae      	b.n	8003472 <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003514:	4e65      	ldr	r6, [pc, #404]	; (80036ac <USB_ActivateEndpoint+0x2e0>)
 8003516:	0964      	lsrs	r4, r4, #5
 8003518:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 800351c:	e7d1      	b.n	80034c2 <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800351e:	b212      	sxth	r2, r2
 8003520:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003524:	b2a4      	uxth	r4, r4
 8003526:	402c      	ands	r4, r5
 8003528:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800352c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003530:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003534:	780e      	ldrb	r6, [r1, #0]
 8003536:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800353a:	2208      	movs	r2, #8
 800353c:	fb12 3606 	smlabb	r6, r2, r6, r3
 8003540:	fa16 f484 	uxtah	r4, r6, r4
 8003544:	890e      	ldrh	r6, [r1, #8]
 8003546:	f026 0601 	bic.w	r6, r6, #1
 800354a:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 800354e:	780e      	ldrb	r6, [r1, #0]
 8003550:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003554:	fb12 3206 	smlabb	r2, r2, r6, r3
 8003558:	fa12 f284 	uxtah	r2, r2, r4
 800355c:	894c      	ldrh	r4, [r1, #10]
 800355e:	f024 0401 	bic.w	r4, r4, #1
 8003562:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003566:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8003568:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800356a:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 800356c:	2c00      	cmp	r4, #0
 800356e:	d14c      	bne.n	800360a <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003570:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003574:	0466      	lsls	r6, r4, #17
 8003576:	d509      	bpl.n	800358c <USB_ActivateEndpoint+0x1c0>
 8003578:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800357c:	b2a4      	uxth	r4, r4
 800357e:	402c      	ands	r4, r5
 8003580:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003584:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003588:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800358c:	780c      	ldrb	r4, [r1, #0]
 800358e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003592:	0655      	lsls	r5, r2, #25
 8003594:	d50d      	bpl.n	80035b2 <USB_ActivateEndpoint+0x1e6>
 8003596:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800359a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800359e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035a2:	0412      	lsls	r2, r2, #16
 80035a4:	0c12      	lsrs	r2, r2, #16
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035aa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80035ae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80035b2:	780c      	ldrb	r4, [r1, #0]
 80035b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035c0:	0412      	lsls	r2, r2, #16
 80035c2:	0c12      	lsrs	r2, r2, #16
 80035c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035c8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80035cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035d0:	780d      	ldrb	r5, [r1, #0]
 80035d2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80035d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035de:	0412      	lsls	r2, r2, #16
 80035e0:	0c12      	lsrs	r2, r2, #16
 80035e2:	f248 0480 	movw	r4, #32896	; 0x8080
 80035e6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80035ea:	4322      	orrs	r2, r4
 80035ec:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035f0:	7809      	ldrb	r1, [r1, #0]
 80035f2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80035f6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fe:	0412      	lsls	r2, r2, #16
 8003600:	0c12      	lsrs	r2, r2, #16
 8003602:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003604:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8003608:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800360a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800360e:	0464      	lsls	r4, r4, #17
 8003610:	d509      	bpl.n	8003626 <USB_ActivateEndpoint+0x25a>
 8003612:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003616:	b2a4      	uxth	r4, r4
 8003618:	402c      	ands	r4, r5
 800361a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800361e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003622:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003626:	780c      	ldrb	r4, [r1, #0]
 8003628:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800362c:	0652      	lsls	r2, r2, #25
 800362e:	d50d      	bpl.n	800364c <USB_ActivateEndpoint+0x280>
 8003630:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003634:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003638:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800363c:	0412      	lsls	r2, r2, #16
 800363e:	0c12      	lsrs	r2, r2, #16
 8003640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003644:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003648:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800364c:	780c      	ldrb	r4, [r1, #0]
 800364e:	4d16      	ldr	r5, [pc, #88]	; (80036a8 <USB_ActivateEndpoint+0x2dc>)
 8003650:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003654:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003658:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800365c:	0412      	lsls	r2, r2, #16
 800365e:	0c12      	lsrs	r2, r2, #16
 8003660:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003668:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800366c:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 800366e:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003670:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8003672:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003674:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003678:	b292      	uxth	r2, r2
 800367a:	ea02 0205 	and.w	r2, r2, r5
 800367e:	bf18      	it	ne
 8003680:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003688:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800368c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003690:	7809      	ldrb	r1, [r1, #0]
 8003692:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800369a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800369e:	0412      	lsls	r2, r2, #16
 80036a0:	0c12      	lsrs	r2, r2, #16
 80036a2:	e6e6      	b.n	8003472 <USB_ActivateEndpoint+0xa6>
 80036a4:	ffff8f8f 	.word	0xffff8f8f
 80036a8:	ffff8fbf 	.word	0xffff8fbf
 80036ac:	ffff8000 	.word	0xffff8000

080036b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036b0:	b510      	push	{r4, lr}
 80036b2:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80036b4:	7b0c      	ldrb	r4, [r1, #12]
 80036b6:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036b8:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 80036ba:	2c00      	cmp	r4, #0
 80036bc:	d13d      	bne.n	800373a <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 80036be:	b312      	cbz	r2, 8003706 <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036c0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036c4:	0652      	lsls	r2, r2, #25
 80036c6:	d50d      	bpl.n	80036e4 <USB_DeactivateEndpoint+0x34>
 80036c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80036d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036d4:	0412      	lsls	r2, r2, #16
 80036d6:	0c12      	lsrs	r2, r2, #16
 80036d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80036e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036e4:	780a      	ldrb	r2, [r1, #0]
 80036e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003702:	2000      	movs	r0, #0
 8003704:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003706:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800370a:	0454      	lsls	r4, r2, #17
 800370c:	d50d      	bpl.n	800372a <USB_DeactivateEndpoint+0x7a>
 800370e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003712:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003716:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800371a:	0412      	lsls	r2, r2, #16
 800371c:	0c12      	lsrs	r2, r2, #16
 800371e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003726:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800372a:	780a      	ldrb	r2, [r1, #0]
 800372c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	e7db      	b.n	80036f2 <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 800373a:	2a00      	cmp	r2, #0
 800373c:	d14e      	bne.n	80037dc <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800373e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003742:	0452      	lsls	r2, r2, #17
 8003744:	d50d      	bpl.n	8003762 <USB_DeactivateEndpoint+0xb2>
 8003746:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800374a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800374e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003752:	0412      	lsls	r2, r2, #16
 8003754:	0c12      	lsrs	r2, r2, #16
 8003756:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800375a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800375e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003762:	780a      	ldrb	r2, [r1, #0]
 8003764:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003768:	065c      	lsls	r4, r3, #25
 800376a:	d50d      	bpl.n	8003788 <USB_DeactivateEndpoint+0xd8>
 800376c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	041b      	lsls	r3, r3, #16
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003780:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003784:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003788:	780a      	ldrb	r2, [r1, #0]
 800378a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037a6:	780c      	ldrb	r4, [r1, #0]
 80037a8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80037ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	f248 0280 	movw	r2, #32896	; 0x8080
 80037bc:	4313      	orrs	r3, r2
 80037be:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037c2:	7809      	ldrb	r1, [r1, #0]
 80037c4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80037c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80037da:	e792      	b.n	8003702 <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80037e0:	0452      	lsls	r2, r2, #17
 80037e2:	d50d      	bpl.n	8003800 <USB_DeactivateEndpoint+0x150>
 80037e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80037e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80037ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037f0:	0412      	lsls	r2, r2, #16
 80037f2:	0c12      	lsrs	r2, r2, #16
 80037f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80037f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037fc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003800:	780a      	ldrb	r2, [r1, #0]
 8003802:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003806:	065b      	lsls	r3, r3, #25
 8003808:	d50d      	bpl.n	8003826 <USB_DeactivateEndpoint+0x176>
 800380a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003822:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003826:	780a      	ldrb	r2, [r1, #0]
 8003828:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800382c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800383c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003840:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003844:	780c      	ldrb	r4, [r1, #0]
 8003846:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f248 0280 	movw	r2, #32896	; 0x8080
 800385a:	4313      	orrs	r3, r2
 800385c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003860:	7809      	ldrb	r1, [r1, #0]
 8003862:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	e7af      	b.n	80037d0 <USB_DeactivateEndpoint+0x120>

08003870 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003870:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003872:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003874:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 8003876:	b18b      	cbz	r3, 800389c <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003878:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	0c1b      	lsrs	r3, r3, #16
 8003888:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800388c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003894:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003898:	2000      	movs	r0, #0
 800389a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800389c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038b0:	e7ec      	b.n	800388c <USB_EPSetStall+0x1c>

080038b2 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80038b2:	7b0b      	ldrb	r3, [r1, #12]
 80038b4:	bb4b      	cbnz	r3, 800390a <USB_EPClearStall+0x58>
 80038b6:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 80038b8:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038ba:	b212      	sxth	r2, r2
    if (ep->is_in != 0U)
 80038bc:	b33b      	cbz	r3, 800390e <USB_EPClearStall+0x5c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038c2:	065b      	lsls	r3, r3, #25
 80038c4:	d50d      	bpl.n	80038e2 <USB_EPClearStall+0x30>
 80038c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80038e2:	78cb      	ldrb	r3, [r1, #3]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d010      	beq.n	800390a <USB_EPClearStall+0x58>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038e8:	780a      	ldrb	r2, [r1, #0]
 80038ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003906:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800390a:	2000      	movs	r0, #0
 800390c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800390e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003912:	045b      	lsls	r3, r3, #17
 8003914:	d50d      	bpl.n	8003932 <USB_EPClearStall+0x80>
 8003916:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800391a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800392a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003932:	780a      	ldrb	r2, [r1, #0]
 8003934:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	0c1b      	lsrs	r3, r3, #16
 8003944:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003948:	e7d9      	b.n	80038fe <USB_EPClearStall+0x4c>

0800394a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800394a:	b911      	cbnz	r1, 8003952 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003952:	2000      	movs	r0, #0
 8003954:	4770      	bx	lr

08003956 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003956:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800395a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003962:	b29b      	uxth	r3, r3
 8003964:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003968:	2000      	movs	r0, #0
 800396a:	4770      	bx	lr

0800396c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800396c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003970:	b280      	uxth	r0, r0
 8003972:	4770      	bx	lr

08003974 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003974:	2000      	movs	r0, #0
 8003976:	4770      	bx	lr

08003978 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800397c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800397e:	4402      	add	r2, r0
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	440b      	add	r3, r1
 8003986:	1a52      	subs	r2, r2, r1

  for (i = n; i != 0U; i--)
 8003988:	4299      	cmp	r1, r3
 800398a:	d100      	bne.n	800398e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800398c:	4770      	bx	lr
 800398e:	8808      	ldrh	r0, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 8003990:	5288      	strh	r0, [r1, r2]
 8003992:	3102      	adds	r1, #2
 8003994:	e7f8      	b.n	8003988 <USB_WritePMA+0x10>
	...

08003998 <USB_EPStartXfer>:
{
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800399c:	7848      	ldrb	r0, [r1, #1]
 800399e:	698a      	ldr	r2, [r1, #24]
 80039a0:	690b      	ldr	r3, [r1, #16]
 80039a2:	7b0f      	ldrb	r7, [r1, #12]
 80039a4:	2801      	cmp	r0, #1
{
 80039a6:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 80039a8:	d16b      	bne.n	8003a82 <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 80039aa:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80039ac:	bf97      	itett	ls
 80039ae:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80039b0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80039b2:	618b      	strls	r3, [r1, #24]
 80039b4:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80039b6:	bf88      	it	hi
 80039b8:	618a      	strhi	r2, [r1, #24]
 80039ba:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80039bc:	bb0f      	cbnz	r7, 8003a02 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80039be:	88ca      	ldrh	r2, [r1, #6]
 80039c0:	6949      	ldr	r1, [r1, #20]
 80039c2:	4633      	mov	r3, r6
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7ff ffd7 	bl	8003978 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80039ca:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80039ce:	782a      	ldrb	r2, [r5, #0]
 80039d0:	f204 4102 	addw	r1, r4, #1026	; 0x402
 80039d4:	fa11 f383 	uxtah	r3, r1, r3
 80039d8:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80039dc:	782a      	ldrb	r2, [r5, #0]
 80039de:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80039fe:	2000      	movs	r0, #0
 8003a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a02:	7809      	ldrb	r1, [r1, #0]
 8003a04:	b20a      	sxth	r2, r1
 8003a06:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8003a0a:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a0e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003a12:	bf15      	itete	ne
 8003a14:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a18:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a1c:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a20:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a24:	bf15      	itete	ne
 8003a26:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a2a:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 8003a2e:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8003a30:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a32:	6969      	ldr	r1, [r5, #20]
 8003a34:	4633      	mov	r3, r6
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7ff ff9e 	bl	8003978 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003a3c:	786b      	ldrb	r3, [r5, #1]
 8003a3e:	782a      	ldrb	r2, [r5, #0]
 8003a40:	b97b      	cbnz	r3, 8003a62 <USB_EPStartXfer+0xca>
 8003a42:	b212      	sxth	r2, r2
 8003a44:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a5c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003a60:	e7bc      	b.n	80039dc <USB_EPStartXfer+0x44>
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d1ba      	bne.n	80039dc <USB_EPStartXfer+0x44>
 8003a66:	b212      	sxth	r2, r2
 8003a68:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	0c1b      	lsrs	r3, r3, #16
 8003a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a80:	e7ec      	b.n	8003a5c <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8003a82:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003a84:	bf95      	itete	ls
 8003a86:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003a88:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8003a8a:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 8003a8c:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 8003a8e:	bf98      	it	ls
 8003a90:	4613      	movls	r3, r2
 8003a92:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 8003a94:	b98f      	cbnz	r7, 8003aba <USB_EPStartXfer+0x122>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003a96:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003a9a:	f204 4006 	addw	r0, r4, #1030	; 0x406
 8003a9e:	fa10 f282 	uxtah	r2, r0, r2
 8003aa2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003aa6:	bb9b      	cbnz	r3, 8003b10 <USB_EPStartXfer+0x178>
 8003aa8:	8813      	ldrh	r3, [r2, #0]
 8003aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab6:	8013      	strh	r3, [r2, #0]
 8003ab8:	e032      	b.n	8003b20 <USB_EPStartXfer+0x188>
 8003aba:	b980      	cbnz	r0, 8003ade <USB_EPStartXfer+0x146>
 8003abc:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003ac0:	f204 4002 	addw	r0, r4, #1026	; 0x402
 8003ac4:	fa10 f282 	uxtah	r2, r0, r2
 8003ac8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003acc:	b99b      	cbnz	r3, 8003af6 <USB_EPStartXfer+0x15e>
 8003ace:	8811      	ldrh	r1, [r2, #0]
 8003ad0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003ad4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003ad8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003adc:	8011      	strh	r1, [r2, #0]
 8003ade:	786a      	ldrb	r2, [r5, #1]
 8003ae0:	7828      	ldrb	r0, [r5, #0]
 8003ae2:	bb72      	cbnz	r2, 8003b42 <USB_EPStartXfer+0x1aa>
 8003ae4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003ae8:	f204 4106 	addw	r1, r4, #1030	; 0x406
 8003aec:	fa11 f282 	uxtah	r2, r1, r2
 8003af0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003af4:	e7d7      	b.n	8003aa6 <USB_EPStartXfer+0x10e>
 8003af6:	2b3d      	cmp	r3, #61	; 0x3d
 8003af8:	d805      	bhi.n	8003b06 <USB_EPStartXfer+0x16e>
 8003afa:	0859      	lsrs	r1, r3, #1
 8003afc:	07d8      	lsls	r0, r3, #31
 8003afe:	bf48      	it	mi
 8003b00:	3101      	addmi	r1, #1
 8003b02:	0289      	lsls	r1, r1, #10
 8003b04:	e7ea      	b.n	8003adc <USB_EPStartXfer+0x144>
 8003b06:	4814      	ldr	r0, [pc, #80]	; (8003b58 <USB_EPStartXfer+0x1c0>)
 8003b08:	0959      	lsrs	r1, r3, #5
 8003b0a:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8003b0e:	e7e5      	b.n	8003adc <USB_EPStartXfer+0x144>
 8003b10:	2b3d      	cmp	r3, #61	; 0x3d
 8003b12:	d811      	bhi.n	8003b38 <USB_EPStartXfer+0x1a0>
 8003b14:	0859      	lsrs	r1, r3, #1
 8003b16:	07db      	lsls	r3, r3, #31
 8003b18:	bf48      	it	mi
 8003b1a:	3101      	addmi	r1, #1
 8003b1c:	0289      	lsls	r1, r1, #10
 8003b1e:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b20:	782a      	ldrb	r2, [r5, #0]
 8003b22:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b36:	e75c      	b.n	80039f2 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003b38:	0959      	lsrs	r1, r3, #5
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <USB_EPStartXfer+0x1c0>)
 8003b3c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003b40:	e7b9      	b.n	8003ab6 <USB_EPStartXfer+0x11e>
 8003b42:	2a01      	cmp	r2, #1
 8003b44:	bf01      	itttt	eq
 8003b46:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8003b4a:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8003b4e:	fa12 f181 	uxtaheq	r1, r2, r1
 8003b52:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8003b56:	e7e3      	b.n	8003b20 <USB_EPStartXfer+0x188>
 8003b58:	ffff8000 	.word	0xffff8000

08003b5c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8003b60:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b62:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003b64:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 8003b66:	460d      	mov	r5, r1
 8003b68:	4632      	mov	r2, r6
 8003b6a:	1a47      	subs	r7, r0, r1
 8003b6c:	197c      	adds	r4, r7, r5
 8003b6e:	3502      	adds	r5, #2
 8003b70:	b932      	cbnz	r2, 8003b80 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003b72:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003b74:	bf44      	itt	mi
 8003b76:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b7a:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
 8003b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003b80:	8824      	ldrh	r4, [r4, #0]
 8003b82:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b84:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003b88:	0a24      	lsrs	r4, r4, #8
 8003b8a:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	e7ec      	b.n	8003b6c <USB_ReadPMA+0x10>

08003b92 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003b92:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003b96:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b98:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003b9c:	b15b      	cbz	r3, 8003bb6 <USBD_CDC_EP0_RxReady+0x24>
 8003b9e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003ba2:	28ff      	cmp	r0, #255	; 0xff
 8003ba4:	d007      	beq.n	8003bb6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003bac:	4621      	mov	r1, r4
 8003bae:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003bb0:	23ff      	movs	r3, #255	; 0xff
 8003bb2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	bd10      	pop	{r4, pc}
	...

08003bbc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003bbc:	2343      	movs	r3, #67	; 0x43
 8003bbe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003bc0:	4800      	ldr	r0, [pc, #0]	; (8003bc4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003bc2:	4770      	bx	lr
 8003bc4:	20000044 	.word	0x20000044

08003bc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003bc8:	2343      	movs	r3, #67	; 0x43
 8003bca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003bcc:	4800      	ldr	r0, [pc, #0]	; (8003bd0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003bce:	4770      	bx	lr
 8003bd0:	20000088 	.word	0x20000088

08003bd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003bd4:	2343      	movs	r3, #67	; 0x43
 8003bd6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003bd8:	4800      	ldr	r0, [pc, #0]	; (8003bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003bda:	4770      	bx	lr
 8003bdc:	200000d8 	.word	0x200000d8

08003be0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003be0:	230a      	movs	r3, #10
 8003be2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003be4:	4800      	ldr	r0, [pc, #0]	; (8003be8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003be6:	4770      	bx	lr
 8003be8:	200000cc 	.word	0x200000cc

08003bec <USBD_CDC_DataOut>:
{
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003bf0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003bf4:	f001 fa06 	bl	8005004 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003bf8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003bfc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003c00:	b14b      	cbz	r3, 8003c16 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003c02:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003c06:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003c10:	4798      	blx	r3
    return USBD_OK;
 8003c12:	2000      	movs	r0, #0
 8003c14:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003c16:	2002      	movs	r0, #2
}
 8003c18:	bd38      	pop	{r3, r4, r5, pc}

08003c1a <USBD_CDC_DataIn>:
{
 8003c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003c1c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003c20:	b1ce      	cbz	r6, 8003c56 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003c22:	2314      	movs	r3, #20
 8003c24:	fb03 0301 	mla	r3, r3, r1, r0
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	b182      	cbz	r2, 8003c4e <USBD_CDC_DataIn+0x34>
 8003c2c:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003c30:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003c34:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003c36:	fbb2 f4f5 	udiv	r4, r2, r5
 8003c3a:	fb05 2414 	mls	r4, r5, r4, r2
 8003c3e:	b934      	cbnz	r4, 8003c4e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8003c40:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003c42:	4622      	mov	r2, r4
 8003c44:	4623      	mov	r3, r4
 8003c46:	f001 f9c1 	bl	8004fcc <USBD_LL_Transmit>
    return USBD_OK;
 8003c4a:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8003c56:	2002      	movs	r0, #2
}
 8003c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c5a <USBD_CDC_Setup>:
{
 8003c5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c5e:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c60:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003c64:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c68:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8003c70:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003c74:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c78:	d028      	beq.n	8003ccc <USBD_CDC_Setup+0x72>
 8003c7a:	2c20      	cmp	r4, #32
 8003c7c:	d147      	bne.n	8003d0e <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8003c7e:	88cc      	ldrh	r4, [r1, #6]
 8003c80:	784b      	ldrb	r3, [r1, #1]
 8003c82:	b1e4      	cbz	r4, 8003cbe <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003c84:	0612      	lsls	r2, r2, #24
 8003c86:	d511      	bpl.n	8003cac <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003c88:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003c8c:	4639      	mov	r1, r7
 8003c8e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	4622      	mov	r2, r4
 8003c96:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003c98:	88f2      	ldrh	r2, [r6, #6]
 8003c9a:	4639      	mov	r1, r7
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 fc37 	bl	8004510 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003ca2:	4644      	mov	r4, r8
}
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	b003      	add	sp, #12
 8003ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003cac:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003cb0:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	f000 fc3f 	bl	800453a <USBD_CtlPrepareRx>
 8003cbc:	e7f1      	b.n	8003ca2 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003cbe:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	6895      	ldr	r5, [r2, #8]
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	47a8      	blx	r5
 8003cca:	e7eb      	b.n	8003ca4 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003ccc:	784f      	ldrb	r7, [r1, #1]
 8003cce:	2f0a      	cmp	r7, #10
 8003cd0:	d00d      	beq.n	8003cee <USBD_CDC_Setup+0x94>
 8003cd2:	2f0b      	cmp	r7, #11
 8003cd4:	d015      	beq.n	8003d02 <USBD_CDC_Setup+0xa8>
 8003cd6:	b9d7      	cbnz	r7, 8003d0e <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003cd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d114      	bne.n	8003d0a <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f10d 0106 	add.w	r1, sp, #6
 8003ce6:	f000 fc13 	bl	8004510 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003cea:	463c      	mov	r4, r7
 8003cec:	e7da      	b.n	8003ca4 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003cee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d109      	bne.n	8003d0a <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f10d 0105 	add.w	r1, sp, #5
 8003cfc:	f000 fc08 	bl	8004510 <USBD_CtlSendData>
 8003d00:	e7d0      	b.n	8003ca4 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003d02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d0cc      	beq.n	8003ca4 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8003d0a:	4631      	mov	r1, r6
 8003d0c:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8003d0e:	f000 fbd8 	bl	80044c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8003d12:	2402      	movs	r4, #2
      break;
 8003d14:	e7c6      	b.n	8003ca4 <USBD_CDC_Setup+0x4a>

08003d16 <USBD_CDC_DeInit>:
{
 8003d16:	b538      	push	{r3, r4, r5, lr}
 8003d18:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d1a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d1c:	2181      	movs	r1, #129	; 0x81
 8003d1e:	f001 f90d 	bl	8004f3c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d22:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d24:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d26:	4620      	mov	r0, r4
 8003d28:	f001 f908 	bl	8004f3c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d2c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d30:	2182      	movs	r1, #130	; 0x82
 8003d32:	4620      	mov	r0, r4
 8003d34:	f001 f902 	bl	8004f3c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003d38:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003d3c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003d3e:	b14b      	cbz	r3, 8003d54 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d40:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003d48:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003d4c:	f001 f986 	bl	800505c <USBD_static_free>
    pdev->pClassData = NULL;
 8003d50:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003d54:	2000      	movs	r0, #0
 8003d56:	bd38      	pop	{r3, r4, r5, pc}

08003d58 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d58:	7c03      	ldrb	r3, [r0, #16]
{
 8003d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d60:	bbcb      	cbnz	r3, 8003dd6 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d66:	2202      	movs	r2, #2
 8003d68:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d6a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d6c:	f001 f8d6 	bl	8004f1c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d70:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d72:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d76:	4629      	mov	r1, r5
 8003d78:	2202      	movs	r2, #2
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f001 f8ce 	bl	8004f1c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003d80:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003d84:	2308      	movs	r3, #8
 8003d86:	2203      	movs	r2, #3
 8003d88:	2182      	movs	r1, #130	; 0x82
 8003d8a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003d8c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003d8e:	f001 f8c5 	bl	8004f1c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003d92:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003d94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003d98:	f001 f95c 	bl	8005054 <USBD_static_malloc>
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003da2:	b358      	cbz	r0, 8003dfc <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003da4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003dac:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003db0:	2700      	movs	r7, #0
 8003db2:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8003db6:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003dba:	f1b8 0f00 	cmp.w	r8, #0
 8003dbe:	d113      	bne.n	8003de8 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003dc8:	4629      	mov	r1, r5
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f001 f90c 	bl	8004fe8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	2202      	movs	r2, #2
 8003dda:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003ddc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003dde:	f001 f89d 	bl	8004f1c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003de2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003de4:	2340      	movs	r3, #64	; 0x40
 8003de6:	e7c6      	b.n	8003d76 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003de8:	2340      	movs	r3, #64	; 0x40
 8003dea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003dee:	4629      	mov	r1, r5
 8003df0:	4620      	mov	r0, r4
 8003df2:	f001 f8f9 	bl	8004fe8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003df6:	4638      	mov	r0, r7
 8003df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8003dfc:	4628      	mov	r0, r5
}
 8003dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e02 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003e02:	b119      	cbz	r1, 8003e0c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003e04:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003e08:	2000      	movs	r0, #0
 8003e0a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003e0c:	2002      	movs	r0, #2
  }

  return ret;
}
 8003e0e:	4770      	bx	lr

08003e10 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003e14:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003e16:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003e1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003e1e:	4770      	bx	lr

08003e20 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003e20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003e24:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003e26:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003e2a:	4770      	bx	lr

08003e2c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e2c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003e30:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003e32:	b162      	cbz	r2, 8003e4e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e34:	7c04      	ldrb	r4, [r0, #16]
 8003e36:	b944      	cbnz	r4, 8003e4a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e38:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e3c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003e40:	2101      	movs	r1, #1
 8003e42:	f001 f8d1 	bl	8004fe8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003e46:	2000      	movs	r0, #0
 8003e48:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003e4a:	2340      	movs	r3, #64	; 0x40
 8003e4c:	e7f6      	b.n	8003e3c <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003e4e:	2002      	movs	r0, #2
  }
}
 8003e50:	bd10      	pop	{r4, pc}

08003e52 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003e52:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003e54:	b180      	cbz	r0, 8003e78 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003e56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e5a:	b113      	cbz	r3, 8003e62 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003e62:	b109      	cbz	r1, 8003e68 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003e64:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8003e6e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003e70:	f001 f800 	bl	8004e74 <USBD_LL_Init>

  return USBD_OK;
 8003e74:	2000      	movs	r0, #0
 8003e76:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003e78:	2002      	movs	r0, #2
}
 8003e7a:	bd08      	pop	{r3, pc}

08003e7c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003e7c:	b119      	cbz	r1, 8003e86 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003e7e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003e82:	2000      	movs	r0, #0
 8003e84:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003e86:	2002      	movs	r0, #2
  }

  return status;
}
 8003e88:	4770      	bx	lr

08003e8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003e8a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003e8c:	f001 f838 	bl	8004f00 <USBD_LL_Start>

  return USBD_OK;
}
 8003e90:	2000      	movs	r0, #0
 8003e92:	bd08      	pop	{r3, pc}

08003e94 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e94:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003e96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e9a:	b90b      	cbnz	r3, 8003ea0 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4798      	blx	r3
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d1f9      	bne.n	8003e9c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003ea8:	bd08      	pop	{r3, pc}

08003eaa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003eaa:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003eac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4798      	blx	r3

  return USBD_OK;
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	bd08      	pop	{r3, pc}

08003eb8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003ebc:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 faea 	bl	800449a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003ec6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003ec8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003ecc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003ed0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003ed4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003ed8:	f001 031f 	and.w	r3, r1, #31
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d00e      	beq.n	8003efe <USBD_LL_SetupStage+0x46>
 8003ee0:	d307      	bcc.n	8003ef2 <USBD_LL_SetupStage+0x3a>
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d010      	beq.n	8003f08 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003ee6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003eea:	4620      	mov	r0, r4
 8003eec:	f001 f834 	bl	8004f58 <USBD_LL_StallEP>
      break;
 8003ef0:	e003      	b.n	8003efa <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f000 f8f7 	bl	80040e8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003efa:	2000      	movs	r0, #0
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003efe:	4629      	mov	r1, r5
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 fa1d 	bl	8004340 <USBD_StdItfReq>
      break;
 8003f06:	e7f8      	b.n	8003efa <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 fa3d 	bl	800438a <USBD_StdEPReq>
      break;
 8003f10:	e7f3      	b.n	8003efa <USBD_LL_SetupStage+0x42>

08003f12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003f12:	b570      	push	{r4, r5, r6, lr}
 8003f14:	4605      	mov	r5, r0
 8003f16:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003f18:	bb49      	cbnz	r1, 8003f6e <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003f1a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d11e      	bne.n	8003f60 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003f22:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8003f26:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d90b      	bls.n	8003f46 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8003f2e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003f30:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003f32:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003f36:	bf8c      	ite	hi
 8003f38:	b29a      	uxthhi	r2, r3
 8003f3a:	b292      	uxthls	r2, r2
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	f000 fb0b 	bl	8004558 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003f42:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003f46:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	b123      	cbz	r3, 8003f58 <USBD_LL_DataOutStage+0x46>
 8003f4e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003f52:	2a03      	cmp	r2, #3
 8003f54:	d100      	bne.n	8003f58 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003f56:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 fb05 	bl	8004568 <USBD_CtlSendStatus>
 8003f5e:	e7f0      	b.n	8003f42 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d1ee      	bne.n	8003f42 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003f64:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003f68:	f000 fff6 	bl	8004f58 <USBD_LL_StallEP>
 8003f6c:	e7e9      	b.n	8003f42 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003f6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	b12b      	cbz	r3, 8003f82 <USBD_LL_DataOutStage+0x70>
 8003f76:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003f7a:	2a03      	cmp	r2, #3
 8003f7c:	d101      	bne.n	8003f82 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003f7e:	4798      	blx	r3
 8003f80:	e7df      	b.n	8003f42 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003f82:	2002      	movs	r0, #2
}
 8003f84:	bd70      	pop	{r4, r5, r6, pc}

08003f86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003f86:	b570      	push	{r4, r5, r6, lr}
 8003f88:	4613      	mov	r3, r2
 8003f8a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003f8c:	460e      	mov	r6, r1
 8003f8e:	2900      	cmp	r1, #0
 8003f90:	d148      	bne.n	8004024 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003f92:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003f96:	2a02      	cmp	r2, #2
 8003f98:	d13d      	bne.n	8004016 <USBD_LL_DataInStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003f9a:	6a05      	ldr	r5, [r0, #32]
 8003f9c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003f9e:	4295      	cmp	r5, r2
 8003fa0:	d914      	bls.n	8003fcc <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8003fa2:	1aaa      	subs	r2, r5, r2
 8003fa4:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	f000 fabe 	bl	800452a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fae:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f001 f817 	bl	8004fe8 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003fba:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	d13a      	bne.n	800403c <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003fc6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003fcc:	69c3      	ldr	r3, [r0, #28]
 8003fce:	fbb3 f5f2 	udiv	r5, r3, r2
 8003fd2:	fb02 3515 	mls	r5, r2, r5, r3
 8003fd6:	b965      	cbnz	r5, 8003ff2 <USBD_LL_DataInStage+0x6c>
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d80a      	bhi.n	8003ff2 <USBD_LL_DataInStage+0x6c>
            (pep->total_length >= pep->maxpacket) &&
 8003fdc:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d206      	bcs.n	8003ff2 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	f000 faa0 	bl	800452a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003fea:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fee:	462b      	mov	r3, r5
 8003ff0:	e7de      	b.n	8003fb0 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ff2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	b12b      	cbz	r3, 8004006 <USBD_LL_DataInStage+0x80>
 8003ffa:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003ffe:	2a03      	cmp	r2, #3
 8004000:	d101      	bne.n	8004006 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8004002:	4620      	mov	r0, r4
 8004004:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	4620      	mov	r0, r4
 800400a:	f000 ffa5 	bl	8004f58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800400e:	4620      	mov	r0, r4
 8004010:	f000 fab5 	bl	800457e <USBD_CtlReceiveStatus>
 8004014:	e7d1      	b.n	8003fba <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004016:	f032 0304 	bics.w	r3, r2, #4
 800401a:	d1ce      	bne.n	8003fba <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	f000 ff9b 	bl	8004f58 <USBD_LL_StallEP>
 8004022:	e7ca      	b.n	8003fba <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004024:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	b133      	cbz	r3, 800403a <USBD_LL_DataInStage+0xb4>
 800402c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004030:	2a03      	cmp	r2, #3
 8004032:	d102      	bne.n	800403a <USBD_LL_DataInStage+0xb4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004034:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004036:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004038:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800403a:	2002      	movs	r0, #2
}
 800403c:	bd70      	pop	{r4, r5, r6, pc}

0800403e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800403e:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004040:	2200      	movs	r2, #0
{
 8004042:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004044:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004046:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004048:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	f000 ff66 	bl	8004f1c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004050:	4633      	mov	r3, r6
 8004052:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004054:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004058:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800405c:	2200      	movs	r2, #0
 800405e:	4620      	mov	r0, r4
 8004060:	f000 ff5c 	bl	8004f1c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004064:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004068:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800406a:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800406c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800406e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004072:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004076:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004078:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800407c:	b123      	cbz	r3, 8004088 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800407e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004082:	4620      	mov	r0, r4
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004088:	2000      	movs	r0, #0
 800408a:	bd70      	pop	{r4, r5, r6, pc}

0800408c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800408c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800408e:	2000      	movs	r0, #0
 8004090:	4770      	bx	lr

08004092 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004092:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004096:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800409a:	2304      	movs	r3, #4
 800409c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80040a0:	2000      	movs	r0, #0
 80040a2:	4770      	bx	lr

080040a4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80040a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040a8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80040aa:	bf04      	itt	eq
 80040ac:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80040b0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80040b4:	2000      	movs	r0, #0
 80040b6:	4770      	bx	lr

080040b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80040b8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040ba:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80040be:	2a03      	cmp	r2, #3
 80040c0:	d104      	bne.n	80040cc <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80040c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	b103      	cbz	r3, 80040cc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80040ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80040cc:	2000      	movs	r0, #0
 80040ce:	bd08      	pop	{r3, pc}

080040d0 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80040d0:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80040d2:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80040d4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80040d6:	f000 ff3f 	bl	8004f58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80040da:	4620      	mov	r0, r4
 80040dc:	2100      	movs	r1, #0
}
 80040de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80040e2:	f000 bf39 	b.w	8004f58 <USBD_LL_StallEP>
	...

080040e8 <USBD_StdDevReq>:
{
 80040e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040ea:	780b      	ldrb	r3, [r1, #0]
 80040ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040f0:	2b20      	cmp	r3, #32
{
 80040f2:	4604      	mov	r4, r0
 80040f4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040f6:	d011      	beq.n	800411c <USBD_StdDevReq+0x34>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d00f      	beq.n	800411c <USBD_StdDevReq+0x34>
 80040fc:	bb73      	cbnz	r3, 800415c <USBD_StdDevReq+0x74>
      switch (req->bRequest)
 80040fe:	784b      	ldrb	r3, [r1, #1]
 8004100:	2b09      	cmp	r3, #9
 8004102:	d82a      	bhi.n	800415a <USBD_StdDevReq+0x72>
 8004104:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004108:	010e00f2 	.word	0x010e00f2
 800410c:	01070029 	.word	0x01070029
 8004110:	008b0029 	.word	0x008b0029
 8004114:	00290013 	.word	0x00290013
 8004118:	00a700da 	.word	0x00a700da
      pdev->pClass->Setup(pdev, req);
 800411c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004120:	4629      	mov	r1, r5
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4620      	mov	r0, r4
 8004126:	4798      	blx	r3
}
 8004128:	2000      	movs	r0, #0
 800412a:	b003      	add	sp, #12
 800412c:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004134:	884b      	ldrh	r3, [r1, #2]
 8004136:	0a1a      	lsrs	r2, r3, #8
 8004138:	3a01      	subs	r2, #1
 800413a:	2a0e      	cmp	r2, #14
 800413c:	d80d      	bhi.n	800415a <USBD_StdDevReq+0x72>
 800413e:	e8df f002 	tbb	[pc, r2]
 8004142:	2c10      	.short	0x2c10
 8004144:	590c0c39 	.word	0x590c0c39
 8004148:	0c0c0c63 	.word	0x0c0c0c63
 800414c:	0c0c0c0c 	.word	0x0c0c0c0c
 8004150:	08          	.byte	0x08
 8004151:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004152:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004156:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004158:	b933      	cbnz	r3, 8004168 <USBD_StdDevReq+0x80>
          USBD_CtlError(pdev, req);
 800415a:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800415c:	f7ff ffb8 	bl	80040d0 <USBD_CtlError.constprop.1>
  return ret;
 8004160:	e7e2      	b.n	8004128 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004162:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004166:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004168:	7c20      	ldrb	r0, [r4, #16]
 800416a:	f10d 0106 	add.w	r1, sp, #6
 800416e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004170:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004174:	b152      	cbz	r2, 800418c <USBD_StdDevReq+0xa4>
 8004176:	88eb      	ldrh	r3, [r5, #6]
 8004178:	b143      	cbz	r3, 800418c <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 800417a:	429a      	cmp	r2, r3
 800417c:	bf28      	it	cs
 800417e:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004180:	4601      	mov	r1, r0
 8004182:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8004184:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004188:	f000 f9c2 	bl	8004510 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800418c:	88eb      	ldrh	r3, [r5, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1ca      	bne.n	8004128 <USBD_StdDevReq+0x40>
        USBD_CtlSendStatus(pdev);
 8004192:	4620      	mov	r0, r4
 8004194:	f000 f9e8 	bl	8004568 <USBD_CtlSendStatus>
 8004198:	e7c6      	b.n	8004128 <USBD_StdDevReq+0x40>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800419a:	7c02      	ldrb	r2, [r0, #16]
 800419c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041a0:	b932      	cbnz	r2, 80041b0 <USBD_StdDevReq+0xc8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80041a4:	f10d 0006 	add.w	r0, sp, #6
 80041a8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80041aa:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80041ac:	7043      	strb	r3, [r0, #1]
 80041ae:	e7df      	b.n	8004170 <USBD_StdDevReq+0x88>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	e7f7      	b.n	80041a4 <USBD_StdDevReq+0xbc>
      switch ((uint8_t)(req->wValue))
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d8cf      	bhi.n	800415a <USBD_StdDevReq+0x72>
 80041ba:	e8df f003 	tbb	[pc, r3]
 80041be:	0703      	.short	0x0703
 80041c0:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80041c4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	e7c5      	b.n	8004158 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80041cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	e7c1      	b.n	8004158 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80041d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	e7bd      	b.n	8004158 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80041dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	e7b9      	b.n	8004158 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80041e4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	e7b5      	b.n	8004158 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80041ec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	e7b1      	b.n	8004158 <USBD_StdDevReq+0x70>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041f4:	7c03      	ldrb	r3, [r0, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1af      	bne.n	800415a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80041fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041fe:	f10d 0006 	add.w	r0, sp, #6
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	4798      	blx	r3
 8004206:	e7b3      	b.n	8004170 <USBD_StdDevReq+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004208:	7c03      	ldrb	r3, [r0, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1a5      	bne.n	800415a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800420e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004212:	f10d 0006 	add.w	r0, sp, #6
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800421a:	2307      	movs	r3, #7
 800421c:	e7c6      	b.n	80041ac <USBD_StdDevReq+0xc4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800421e:	888b      	ldrh	r3, [r1, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d19a      	bne.n	800415a <USBD_StdDevReq+0x72>
 8004224:	88cb      	ldrh	r3, [r1, #6]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d197      	bne.n	800415a <USBD_StdDevReq+0x72>
 800422a:	884d      	ldrh	r5, [r1, #2]
 800422c:	2d7f      	cmp	r5, #127	; 0x7f
 800422e:	d894      	bhi.n	800415a <USBD_StdDevReq+0x72>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004230:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004234:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004236:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004238:	d08f      	beq.n	800415a <USBD_StdDevReq+0x72>
      pdev->dev_address = dev_addr;
 800423a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800423e:	f000 feb7 	bl	8004fb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004242:	4620      	mov	r0, r4
 8004244:	f000 f990 	bl	8004568 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004248:	b11d      	cbz	r5, 8004252 <USBD_StdDevReq+0x16a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800424a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800424c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004250:	e76a      	b.n	8004128 <USBD_StdDevReq+0x40>
 8004252:	2301      	movs	r3, #1
 8004254:	e7fa      	b.n	800424c <USBD_StdDevReq+0x164>
  cfgidx = (uint8_t)(req->wValue);
 8004256:	7889      	ldrb	r1, [r1, #2]
 8004258:	4d38      	ldr	r5, [pc, #224]	; (800433c <USBD_StdDevReq+0x254>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800425a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800425c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800425e:	f63f af7c 	bhi.w	800415a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 8004262:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004266:	2b02      	cmp	r3, #2
 8004268:	d008      	beq.n	800427c <USBD_StdDevReq+0x194>
 800426a:	2b03      	cmp	r3, #3
 800426c:	d014      	beq.n	8004298 <USBD_StdDevReq+0x1b0>
        USBD_CtlError(pdev, req);
 800426e:	f7ff ff2f 	bl	80040d0 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004272:	7829      	ldrb	r1, [r5, #0]
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff fe18 	bl	8003eaa <USBD_ClrClassConfig>
 800427a:	e755      	b.n	8004128 <USBD_StdDevReq+0x40>
        if (cfgidx)
 800427c:	2900      	cmp	r1, #0
 800427e:	d088      	beq.n	8004192 <USBD_StdDevReq+0xaa>
          pdev->dev_config = cfgidx;
 8004280:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004282:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004284:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004286:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800428a:	4620      	mov	r0, r4
 800428c:	f7ff fe02 	bl	8003e94 <USBD_SetClassConfig>
 8004290:	2802      	cmp	r0, #2
 8004292:	f47f af7e 	bne.w	8004192 <USBD_StdDevReq+0xaa>
 8004296:	e760      	b.n	800415a <USBD_StdDevReq+0x72>
        if (cfgidx == 0U)
 8004298:	b931      	cbnz	r1, 80042a8 <USBD_StdDevReq+0x1c0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800429a:	2302      	movs	r3, #2
 800429c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80042a0:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80042a2:	f7ff fe02 	bl	8003eaa <USBD_ClrClassConfig>
 80042a6:	e774      	b.n	8004192 <USBD_StdDevReq+0xaa>
        else if (cfgidx != pdev->dev_config)
 80042a8:	6841      	ldr	r1, [r0, #4]
 80042aa:	2901      	cmp	r1, #1
 80042ac:	f43f af71 	beq.w	8004192 <USBD_StdDevReq+0xaa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80042b0:	b2c9      	uxtb	r1, r1
 80042b2:	f7ff fdfa 	bl	8003eaa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80042b6:	7829      	ldrb	r1, [r5, #0]
 80042b8:	6061      	str	r1, [r4, #4]
 80042ba:	e7e6      	b.n	800428a <USBD_StdDevReq+0x1a2>
  if (req->wLength != 1U)
 80042bc:	88ca      	ldrh	r2, [r1, #6]
 80042be:	2a01      	cmp	r2, #1
 80042c0:	f47f af4b 	bne.w	800415a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 80042c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f43f af46 	beq.w	800415a <USBD_StdDevReq+0x72>
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d904      	bls.n	80042dc <USBD_StdDevReq+0x1f4>
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	f47f af41 	bne.w	800415a <USBD_StdDevReq+0x72>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80042d8:	1d01      	adds	r1, r0, #4
 80042da:	e003      	b.n	80042e4 <USBD_StdDevReq+0x1fc>
        pdev->dev_default_config = 0U;
 80042dc:	4601      	mov	r1, r0
 80042de:	2300      	movs	r3, #0
 80042e0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f000 f913 	bl	8004510 <USBD_CtlSendData>
 80042ea:	e71d      	b.n	8004128 <USBD_StdDevReq+0x40>
  switch (pdev->dev_state)
 80042ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042f0:	3b01      	subs	r3, #1
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	f63f af31 	bhi.w	800415a <USBD_StdDevReq+0x72>
      if (req->wLength != 0x2U)
 80042f8:	88cb      	ldrh	r3, [r1, #6]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	f47f af2d 	bne.w	800415a <USBD_StdDevReq+0x72>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004300:	2301      	movs	r3, #1
 8004302:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004304:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004308:	b10b      	cbz	r3, 800430e <USBD_StdDevReq+0x226>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800430a:	2303      	movs	r3, #3
 800430c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800430e:	2202      	movs	r2, #2
 8004310:	f104 010c 	add.w	r1, r4, #12
 8004314:	e7e6      	b.n	80042e4 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004316:	884b      	ldrh	r3, [r1, #2]
 8004318:	2b01      	cmp	r3, #1
 800431a:	f47f af05 	bne.w	8004128 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 800431e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8004322:	e736      	b.n	8004192 <USBD_StdDevReq+0xaa>
  switch (pdev->dev_state)
 8004324:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004328:	3b01      	subs	r3, #1
 800432a:	2b02      	cmp	r3, #2
 800432c:	f63f af15 	bhi.w	800415a <USBD_StdDevReq+0x72>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004330:	884b      	ldrh	r3, [r1, #2]
 8004332:	2b01      	cmp	r3, #1
 8004334:	f47f aef8 	bne.w	8004128 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	e7f0      	b.n	800431e <USBD_StdDevReq+0x236>
 800433c:	20000204 	.word	0x20000204

08004340 <USBD_StdItfReq>:
{
 8004340:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004342:	780b      	ldrb	r3, [r1, #0]
 8004344:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004348:	2b20      	cmp	r3, #32
{
 800434a:	4604      	mov	r4, r0
 800434c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800434e:	d002      	beq.n	8004356 <USBD_StdItfReq+0x16>
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d000      	beq.n	8004356 <USBD_StdItfReq+0x16>
 8004354:	b9b3      	cbnz	r3, 8004384 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 8004356:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800435a:	3b01      	subs	r3, #1
 800435c:	2b02      	cmp	r3, #2
 800435e:	d810      	bhi.n	8004382 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004360:	792b      	ldrb	r3, [r5, #4]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d80d      	bhi.n	8004382 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004366:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800436a:	4629      	mov	r1, r5
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4620      	mov	r0, r4
 8004370:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004372:	88eb      	ldrh	r3, [r5, #6]
 8004374:	b91b      	cbnz	r3, 800437e <USBD_StdItfReq+0x3e>
 8004376:	b910      	cbnz	r0, 800437e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004378:	4620      	mov	r0, r4
 800437a:	f000 f8f5 	bl	8004568 <USBD_CtlSendStatus>
}
 800437e:	2000      	movs	r0, #0
 8004380:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004382:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8004384:	f7ff fea4 	bl	80040d0 <USBD_CtlError.constprop.1>
      break;
 8004388:	e7f9      	b.n	800437e <USBD_StdItfReq+0x3e>

0800438a <USBD_StdEPReq>:
{
 800438a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800438c:	780a      	ldrb	r2, [r1, #0]
 800438e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004392:	2a20      	cmp	r2, #32
{
 8004394:	4604      	mov	r4, r0
 8004396:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004398:	d013      	beq.n	80043c2 <USBD_StdEPReq+0x38>
 800439a:	2a40      	cmp	r2, #64	; 0x40
 800439c:	d011      	beq.n	80043c2 <USBD_StdEPReq+0x38>
 800439e:	b96a      	cbnz	r2, 80043bc <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 80043a0:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80043a2:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80043a4:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80043a6:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 80043a8:	d01f      	beq.n	80043ea <USBD_StdEPReq+0x60>
 80043aa:	d335      	bcc.n	8004418 <USBD_StdEPReq+0x8e>
 80043ac:	2d03      	cmp	r5, #3
 80043ae:	d105      	bne.n	80043bc <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80043b0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80043b4:	2a02      	cmp	r2, #2
 80043b6:	d026      	beq.n	8004406 <USBD_StdEPReq+0x7c>
 80043b8:	2a03      	cmp	r2, #3
 80043ba:	d00a      	beq.n	80043d2 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 80043bc:	f7ff fe88 	bl	80040d0 <USBD_CtlError.constprop.1>
      break;
 80043c0:	e005      	b.n	80043ce <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 80043c2:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80043c6:	4619      	mov	r1, r3
 80043c8:	6892      	ldr	r2, [r2, #8]
 80043ca:	4620      	mov	r0, r4
 80043cc:	4790      	blx	r2
}
 80043ce:	2000      	movs	r0, #0
 80043d0:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043d2:	885a      	ldrh	r2, [r3, #2]
 80043d4:	b92a      	cbnz	r2, 80043e2 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 80043d6:	064a      	lsls	r2, r1, #25
 80043d8:	d003      	beq.n	80043e2 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80043da:	88db      	ldrh	r3, [r3, #6]
 80043dc:	b90b      	cbnz	r3, 80043e2 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 80043de:	f000 fdbb 	bl	8004f58 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 f8c0 	bl	8004568 <USBD_CtlSendStatus>
              break;
 80043e8:	e7f1      	b.n	80043ce <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80043ea:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80043ee:	2a02      	cmp	r2, #2
 80043f0:	d009      	beq.n	8004406 <USBD_StdEPReq+0x7c>
 80043f2:	2a03      	cmp	r2, #3
 80043f4:	d1e2      	bne.n	80043bc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043f6:	885b      	ldrh	r3, [r3, #2]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e8      	bne.n	80043ce <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 80043fc:	064d      	lsls	r5, r1, #25
 80043fe:	d0f0      	beq.n	80043e2 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004400:	f000 fdb8 	bl	8004f74 <USBD_LL_ClearStallEP>
 8004404:	e7ed      	b.n	80043e2 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004406:	064b      	lsls	r3, r1, #25
 8004408:	d017      	beq.n	800443a <USBD_StdEPReq+0xb0>
                USBD_LL_StallEP(pdev, ep_addr);
 800440a:	f000 fda5 	bl	8004f58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800440e:	2180      	movs	r1, #128	; 0x80
 8004410:	4620      	mov	r0, r4
 8004412:	f000 fda1 	bl	8004f58 <USBD_LL_StallEP>
 8004416:	e7da      	b.n	80043ce <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8004418:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800441c:	2b02      	cmp	r3, #2
 800441e:	d00e      	beq.n	800443e <USBD_StdEPReq+0xb4>
 8004420:	2b03      	cmp	r3, #3
 8004422:	d1cb      	bne.n	80043bc <USBD_StdEPReq+0x32>
              if ((ep_addr & 0x80U) == 0x80U)
 8004424:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004428:	f04f 0314 	mov.w	r3, #20
 800442c:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004430:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004434:	d012      	beq.n	800445c <USBD_StdEPReq+0xd2>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004436:	6992      	ldr	r2, [r2, #24]
 8004438:	b9da      	cbnz	r2, 8004472 <USBD_StdEPReq+0xe8>
                USBD_CtlError(pdev, req);
 800443a:	4620      	mov	r0, r4
 800443c:	e7be      	b.n	80043bc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800443e:	0649      	lsls	r1, r1, #25
 8004440:	d1fb      	bne.n	800443a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004442:	0613      	lsls	r3, r2, #24
 8004444:	bf4c      	ite	mi
 8004446:	f100 0114 	addmi.w	r1, r0, #20
 800444a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800444e:	2300      	movs	r3, #0
 8004450:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004452:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004454:	4620      	mov	r0, r4
 8004456:	f000 f85b 	bl	8004510 <USBD_CtlSendData>
              break;
 800445a:	e7b8      	b.n	80043ce <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800445c:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004460:	2a00      	cmp	r2, #0
 8004462:	d0ea      	beq.n	800443a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004464:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004468:	fb03 0505 	mla	r5, r3, r5, r0
 800446c:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004470:	e004      	b.n	800447c <USBD_StdEPReq+0xf2>
 8004472:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004476:	fb05 3503 	mla	r5, r5, r3, r3
 800447a:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800447c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004480:	d103      	bne.n	800448a <USBD_StdEPReq+0x100>
                pep->status = 0x0001U;
 8004482:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004484:	2202      	movs	r2, #2
 8004486:	4629      	mov	r1, r5
 8004488:	e7e4      	b.n	8004454 <USBD_StdEPReq+0xca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800448a:	4620      	mov	r0, r4
 800448c:	f000 fd80 	bl	8004f90 <USBD_LL_IsStallEP>
 8004490:	b108      	cbz	r0, 8004496 <USBD_StdEPReq+0x10c>
                pep->status = 0x0001U;
 8004492:	2301      	movs	r3, #1
 8004494:	e7f5      	b.n	8004482 <USBD_StdEPReq+0xf8>
                pep->status = 0x0000U;
 8004496:	6028      	str	r0, [r5, #0]
 8004498:	e7f4      	b.n	8004484 <USBD_StdEPReq+0xfa>

0800449a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800449a:	780b      	ldrb	r3, [r1, #0]
 800449c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800449e:	784b      	ldrb	r3, [r1, #1]
 80044a0:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80044a2:	78ca      	ldrb	r2, [r1, #3]
 80044a4:	788b      	ldrb	r3, [r1, #2]
 80044a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044aa:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80044ac:	794a      	ldrb	r2, [r1, #5]
 80044ae:	790b      	ldrb	r3, [r1, #4]
 80044b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044b4:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80044b6:	79ca      	ldrb	r2, [r1, #7]
 80044b8:	798b      	ldrb	r3, [r1, #6]
 80044ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044be:	80c3      	strh	r3, [r0, #6]
 80044c0:	4770      	bx	lr

080044c2 <USBD_CtlError>:
{
 80044c2:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 80044c4:	2180      	movs	r1, #128	; 0x80
{
 80044c6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80044c8:	f000 fd46 	bl	8004f58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80044cc:	4620      	mov	r0, r4
 80044ce:	2100      	movs	r1, #0
}
 80044d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80044d4:	f000 bd40 	b.w	8004f58 <USBD_LL_StallEP>

080044d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80044d8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80044da:	b188      	cbz	r0, 8004500 <USBD_GetString+0x28>
 80044dc:	4605      	mov	r5, r0
 80044de:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80044e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2c00      	cmp	r4, #0
 80044e8:	d1f9      	bne.n	80044de <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80044f0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80044f2:	2303      	movs	r3, #3
 80044f4:	704b      	strb	r3, [r1, #1]
 80044f6:	3801      	subs	r0, #1
 80044f8:	2302      	movs	r3, #2
    while (*desc != '\0')
 80044fa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80044fe:	b905      	cbnz	r5, 8004502 <USBD_GetString+0x2a>
 8004500:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8004508:	3302      	adds	r3, #2
 800450a:	b2db      	uxtb	r3, r3
 800450c:	548c      	strb	r4, [r1, r2]
 800450e:	e7f4      	b.n	80044fa <USBD_GetString+0x22>

08004510 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004510:	b510      	push	{r4, lr}
 8004512:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004514:	2202      	movs	r2, #2
 8004516:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800451a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800451c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800451e:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004520:	2100      	movs	r1, #0
 8004522:	f000 fd53 	bl	8004fcc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004526:	2000      	movs	r0, #0
 8004528:	bd10      	pop	{r4, pc}

0800452a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800452a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800452c:	4613      	mov	r3, r2
 800452e:	460a      	mov	r2, r1
 8004530:	2100      	movs	r1, #0
 8004532:	f000 fd4b 	bl	8004fcc <USBD_LL_Transmit>

  return USBD_OK;
}
 8004536:	2000      	movs	r0, #0
 8004538:	bd08      	pop	{r3, pc}

0800453a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800453a:	b510      	push	{r4, lr}
 800453c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800453e:	2203      	movs	r2, #3
 8004540:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004544:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004548:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800454a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800454e:	2100      	movs	r1, #0
 8004550:	f000 fd4a 	bl	8004fe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004554:	2000      	movs	r0, #0
 8004556:	bd10      	pop	{r4, pc}

08004558 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004558:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800455a:	4613      	mov	r3, r2
 800455c:	460a      	mov	r2, r1
 800455e:	2100      	movs	r1, #0
 8004560:	f000 fd42 	bl	8004fe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004564:	2000      	movs	r0, #0
 8004566:	bd08      	pop	{r3, pc}

08004568 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004568:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800456a:	2304      	movs	r3, #4
 800456c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004570:	2300      	movs	r3, #0
 8004572:	461a      	mov	r2, r3
 8004574:	4619      	mov	r1, r3
 8004576:	f000 fd29 	bl	8004fcc <USBD_LL_Transmit>

  return USBD_OK;
}
 800457a:	2000      	movs	r0, #0
 800457c:	bd08      	pop	{r3, pc}

0800457e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800457e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004580:	2305      	movs	r3, #5
 8004582:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004586:	2300      	movs	r3, #0
 8004588:	461a      	mov	r2, r3
 800458a:	4619      	mov	r1, r3
 800458c:	f000 fd2c 	bl	8004fe8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004590:	2000      	movs	r0, #0
 8004592:	bd08      	pop	{r3, pc}

08004594 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8004598:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800459a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800459c:	4302      	orrs	r2, r0
 800459e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	4018      	ands	r0, r3
 80045a4:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80045a6:	9b01      	ldr	r3, [sp, #4]
}
 80045a8:	b002      	add	sp, #8
 80045aa:	4770      	bx	lr

080045ac <print_PMS7003>:
static void MX_LPUART1_UART_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */

void print_PMS7003(void)
{
 80045ac:	b570      	push	{r4, r5, r6, lr}
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;

	check_byte_receive=pms7003_Buffer[30]<<8|pms7003_Buffer[31];
 80045ae:	4c2f      	ldr	r4, [pc, #188]	; (800466c <print_PMS7003+0xc0>)
 80045b0:	7fa3      	ldrb	r3, [r4, #30]
 80045b2:	7fe6      	ldrb	r6, [r4, #31]
 80045b4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 80045b8:	2300      	movs	r3, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 80045ba:	461d      	mov	r5, r3

	for(uint8_t i=0;i<30;i++)
	{
		check_byte_calculate+=pms7003_Buffer[i];
 80045bc:	5ce2      	ldrb	r2, [r4, r3]
 80045be:	3301      	adds	r3, #1
 80045c0:	4415      	add	r5, r2
	for(uint8_t i=0;i<30;i++)
 80045c2:	2b1e      	cmp	r3, #30
		check_byte_calculate+=pms7003_Buffer[i];
 80045c4:	b2ad      	uxth	r5, r5
	for(uint8_t i=0;i<30;i++)
 80045c6:	d1f9      	bne.n	80045bc <print_PMS7003+0x10>
	}

	printf("pms : 0x%X	crc_cal : 0x%X\r\n",check_byte_receive,check_byte_calculate);
 80045c8:	462a      	mov	r2, r5
 80045ca:	4631      	mov	r1, r6
 80045cc:	4828      	ldr	r0, [pc, #160]	; (8004670 <print_PMS7003+0xc4>)
 80045ce:	f000 fe29 	bl	8005224 <iprintf>

	if(check_byte_receive==check_byte_calculate)
 80045d2:	42ae      	cmp	r6, r5
 80045d4:	d144      	bne.n	8004660 <print_PMS7003+0xb4>
	{
		printf("PM1.0 : %d	",(combine_value=(pms7003_Buffer[10]<<8)|pms7003_Buffer[11]));
 80045d6:	7ae3      	ldrb	r3, [r4, #11]
 80045d8:	7aa1      	ldrb	r1, [r4, #10]
 80045da:	4826      	ldr	r0, [pc, #152]	; (8004674 <print_PMS7003+0xc8>)
 80045dc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80045e0:	f000 fe20 	bl	8005224 <iprintf>
		printf("PM2.5 : %d	",(combine_value=(pms7003_Buffer[12]<<8)|pms7003_Buffer[13]));
 80045e4:	7b63      	ldrb	r3, [r4, #13]
 80045e6:	7b21      	ldrb	r1, [r4, #12]
 80045e8:	4823      	ldr	r0, [pc, #140]	; (8004678 <print_PMS7003+0xcc>)
 80045ea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80045ee:	f000 fe19 	bl	8005224 <iprintf>
		printf("PM10 : %d	",(combine_value=(pms7003_Buffer[14]<<8)|pms7003_Buffer[15]));
 80045f2:	7be3      	ldrb	r3, [r4, #15]
 80045f4:	7ba1      	ldrb	r1, [r4, #14]
 80045f6:	4821      	ldr	r0, [pc, #132]	; (800467c <print_PMS7003+0xd0>)
 80045f8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80045fc:	f000 fe12 	bl	8005224 <iprintf>
		printf("0.3um : %d	",(combine_value=(pms7003_Buffer[16]<<8)|pms7003_Buffer[17]));
 8004600:	7c63      	ldrb	r3, [r4, #17]
 8004602:	7c21      	ldrb	r1, [r4, #16]
 8004604:	481e      	ldr	r0, [pc, #120]	; (8004680 <print_PMS7003+0xd4>)
 8004606:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800460a:	f000 fe0b 	bl	8005224 <iprintf>
		printf("0.5um : %d	",(combine_value=(pms7003_Buffer[18]<<8)|pms7003_Buffer[19]));
 800460e:	7ce3      	ldrb	r3, [r4, #19]
 8004610:	7ca1      	ldrb	r1, [r4, #18]
 8004612:	481c      	ldr	r0, [pc, #112]	; (8004684 <print_PMS7003+0xd8>)
 8004614:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004618:	f000 fe04 	bl	8005224 <iprintf>
		printf("1.0um : %d	",(combine_value=(pms7003_Buffer[20]<<8)|pms7003_Buffer[21]));
 800461c:	7d63      	ldrb	r3, [r4, #21]
 800461e:	7d21      	ldrb	r1, [r4, #20]
 8004620:	4819      	ldr	r0, [pc, #100]	; (8004688 <print_PMS7003+0xdc>)
 8004622:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004626:	f000 fdfd 	bl	8005224 <iprintf>
		printf("2.5um : %d	",(combine_value=(pms7003_Buffer[22]<<8)|pms7003_Buffer[23]));
 800462a:	7de3      	ldrb	r3, [r4, #23]
 800462c:	7da1      	ldrb	r1, [r4, #22]
 800462e:	4817      	ldr	r0, [pc, #92]	; (800468c <print_PMS7003+0xe0>)
 8004630:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004634:	f000 fdf6 	bl	8005224 <iprintf>
		printf("5.0um : %d	",(combine_value=(pms7003_Buffer[24]<<8)|pms7003_Buffer[25]));
 8004638:	7e63      	ldrb	r3, [r4, #25]
 800463a:	7e21      	ldrb	r1, [r4, #24]
 800463c:	4814      	ldr	r0, [pc, #80]	; (8004690 <print_PMS7003+0xe4>)
 800463e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004642:	f000 fdef 	bl	8005224 <iprintf>
		printf("10.0um : %d\n",(combine_value=(pms7003_Buffer[26]<<8)|pms7003_Buffer[27]));
 8004646:	7ea1      	ldrb	r1, [r4, #26]
 8004648:	7ee3      	ldrb	r3, [r4, #27]
 800464a:	4812      	ldr	r0, [pc, #72]	; (8004694 <print_PMS7003+0xe8>)
 800464c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004650:	f000 fde8 	bl	8005224 <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004654:	2101      	movs	r1, #1
 8004656:	4810      	ldr	r0, [pc, #64]	; (8004698 <print_PMS7003+0xec>)
	}
	else
	{
		printf("Check bytes not matched\r\n");
	}
}
 8004658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800465c:	f7fc ba5d 	b.w	8000b1a <HAL_GPIO_TogglePin>
		printf("Check bytes not matched\r\n");
 8004660:	480e      	ldr	r0, [pc, #56]	; (800469c <print_PMS7003+0xf0>)
}
 8004662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Check bytes not matched\r\n");
 8004666:	f000 be51 	b.w	800530c <puts>
 800466a:	bf00      	nop
 800466c:	20000438 	.word	0x20000438
 8004670:	08006124 	.word	0x08006124
 8004674:	08006140 	.word	0x08006140
 8004678:	0800614c 	.word	0x0800614c
 800467c:	08006158 	.word	0x08006158
 8004680:	08006163 	.word	0x08006163
 8004684:	0800616f 	.word	0x0800616f
 8004688:	0800617b 	.word	0x0800617b
 800468c:	08006187 	.word	0x08006187
 8004690:	08006193 	.word	0x08006193
 8004694:	0800619f 	.word	0x0800619f
 8004698:	48000400 	.word	0x48000400
 800469c:	080061ac 	.word	0x080061ac

080046a0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 80046a0:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 80046a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80046a6:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <_write+0x14>)
 80046aa:	b292      	uxth	r2, r2
 80046ac:	f7fe fcec 	bl	8003088 <HAL_UART_Transmit>
  return len;
}
 80046b0:	4620      	mov	r0, r4
 80046b2:	bd10      	pop	{r4, pc}
 80046b4:	200004e4 	.word	0x200004e4

080046b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046b8:	b530      	push	{r4, r5, lr}
 80046ba:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046bc:	2248      	movs	r2, #72	; 0x48
 80046be:	2100      	movs	r1, #0
 80046c0:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80046c2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046c6:	f000 fda5 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046ca:	221c      	movs	r2, #28
 80046cc:	2100      	movs	r1, #0
 80046ce:	a801      	add	r0, sp, #4
 80046d0:	f000 fda0 	bl	8005214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046d4:	2100      	movs	r1, #0
 80046d6:	2250      	movs	r2, #80	; 0x50
 80046d8:	a81a      	add	r0, sp, #104	; 0x68
 80046da:	f000 fd9b 	bl	8005214 <memset>
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80046de:	68e3      	ldr	r3, [r4, #12]
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	60e3      	str	r3, [r4, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80046e6:	68e3      	ldr	r3, [r4, #12]
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	60e3      	str	r3, [r4, #12]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80046f2:	f7fc fe27 	bl	8001344 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80046f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046fa:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <SystemClock_Config+0xe8>)
 80046fc:	f023 0318 	bic.w	r3, r3, #24
 8004700:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004704:	6813      	ldr	r3, [r2, #0]
 8004706:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800470a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	6813      	ldr	r3, [r2, #0]
 8004712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800471a:	2327      	movs	r3, #39	; 0x27
 800471c:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800471e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004722:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004728:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800472a:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800472c:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800472e:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004730:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004732:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004734:	2360      	movs	r3, #96	; 0x60
 8004736:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004738:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800473a:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800473c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800473e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004740:	f7fc febc 	bl	80014bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004744:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004746:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004748:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800474a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800474c:	2302      	movs	r3, #2
 800474e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004750:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004752:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004754:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004756:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004758:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800475a:	f7fd f98f 	bl	8001a7c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800475e:	f242 1303 	movw	r3, #8451	; 0x2103
 8004762:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8004764:	2318      	movs	r3, #24
 8004766:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800476c:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800476e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004772:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004774:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004778:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800477a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800477e:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004784:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004786:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004788:	2310      	movs	r3, #16
 800478a:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800478c:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800478e:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004790:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004792:	f7fd fb20 	bl	8001dd6 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004796:	f7fd fce2 	bl	800215e <HAL_RCCEx_EnableMSIPLLMode>
}
 800479a:	b02f      	add	sp, #188	; 0xbc
 800479c:	bd30      	pop	{r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	58000400 	.word	0x58000400

080047a4 <main>:
{
 80047a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 80047a6:	f7fb fee9 	bl	800057c <HAL_Init>
  SystemClock_Config();
 80047aa:	f7ff ff85 	bl	80046b8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ae:	2214      	movs	r2, #20
 80047b0:	2100      	movs	r1, #0
 80047b2:	a801      	add	r0, sp, #4
 80047b4:	f000 fd2e 	bl	8005214 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b8:	2004      	movs	r0, #4
 80047ba:	f7ff feeb 	bl	8004594 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047be:	2002      	movs	r0, #2
 80047c0:	f7ff fee8 	bl	8004594 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c4:	2001      	movs	r0, #1
 80047c6:	f7ff fee5 	bl	8004594 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047ca:	2008      	movs	r0, #8
 80047cc:	f7ff fee2 	bl	8004594 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80047d0:	2200      	movs	r2, #0
 80047d2:	2123      	movs	r1, #35	; 0x23
 80047d4:	4849      	ldr	r0, [pc, #292]	; (80048fc <main+0x158>)
  huart1.Instance = USART1;
 80047d6:	4d4a      	ldr	r5, [pc, #296]	; (8004900 <main+0x15c>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80047d8:	f7fc f99a 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80047dc:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047de:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = B1_Pin;
 80047e0:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80047e2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047e4:	4b47      	ldr	r3, [pc, #284]	; (8004904 <main+0x160>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80047e6:	4848      	ldr	r0, [pc, #288]	; (8004908 <main+0x164>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047e8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ea:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80047ec:	f7fc f8d6 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80047f0:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f2:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047f4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047f8:	4840      	ldr	r0, [pc, #256]	; (80048fc <main+0x158>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80047fa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fe:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004800:	f7fc f8cc 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004804:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004806:	a901      	add	r1, sp, #4
 8004808:	4840      	ldr	r0, [pc, #256]	; (800490c <main+0x168>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800480a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800480c:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004810:	f7fc f8c4 	bl	800099c <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8004814:	4a3e      	ldr	r2, [pc, #248]	; (8004910 <main+0x16c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004816:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 8004818:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800481c:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800481e:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8004820:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004824:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004826:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004828:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800482a:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800482c:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800482e:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004830:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004832:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004834:	f7fe fcb7 	bl	80031a6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004838:	4621      	mov	r1, r4
 800483a:	4628      	mov	r0, r5
 800483c:	f7fe fd4c 	bl	80032d8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004840:	4621      	mov	r1, r4
 8004842:	4628      	mov	r0, r5
 8004844:	f7fe fd6c 	bl	8003320 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004848:	4628      	mov	r0, r5
 800484a:	f7fe fd2a 	bl	80032a2 <HAL_UARTEx_DisableFifoMode>
  SET_BIT(RCC->AHB1ENR, Periphs);
 800484e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 8004852:	210a      	movs	r1, #10
 8004854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  hlpuart1.Instance = LPUART1;
 8004856:	4d2f      	ldr	r5, [pc, #188]	; (8004914 <main+0x170>)
 8004858:	f042 0204 	orr.w	r2, r2, #4
 800485c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800485e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004860:	f002 0204 	and.w	r2, r2, #4
 8004864:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004866:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004872:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 8004876:	4622      	mov	r2, r4
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	200b      	movs	r0, #11
  (void)tmpreg;
 800487c:	9b00      	ldr	r3, [sp, #0]
 800487e:	f7fb febd 	bl	80005fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004882:	200b      	movs	r0, #11
 8004884:	f7fb feee 	bl	8000664 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 10, 0);
 8004888:	4622      	mov	r2, r4
 800488a:	210a      	movs	r1, #10
 800488c:	4630      	mov	r0, r6
 800488e:	f7fb feb5 	bl	80005fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004892:	4630      	mov	r0, r6
 8004894:	f7fb fee6 	bl	8000664 <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 9600;
 8004898:	491f      	ldr	r1, [pc, #124]	; (8004918 <main+0x174>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800489a:	60ac      	str	r4, [r5, #8]
  hlpuart1.Init.BaudRate = 9600;
 800489c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80048a0:	4628      	mov	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 80048a2:	e885 000a 	stmia.w	r5, {r1, r3}
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80048a6:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80048a8:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80048aa:	616e      	str	r6, [r5, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ac:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048ae:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048b0:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048b2:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80048b4:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80048b6:	f7fe fc76 	bl	80031a6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f7fe fd0b 	bl	80032d8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048c2:	4621      	mov	r1, r4
 80048c4:	4628      	mov	r0, r5
 80048c6:	f7fe fd2b 	bl	8003320 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7fe fce9 	bl	80032a2 <HAL_UARTEx_DisableFifoMode>
  htim16.Instance = TIM16;
 80048d0:	4d12      	ldr	r5, [pc, #72]	; (800491c <main+0x178>)
  MX_USB_Device_Init();
 80048d2:	f000 f9f9 	bl	8004cc8 <MX_USB_Device_Init>
  htim16.Init.Prescaler = 32000-1;
 80048d6:	4812      	ldr	r0, [pc, #72]	; (8004920 <main+0x17c>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048d8:	60ac      	str	r4, [r5, #8]
  htim16.Init.Prescaler = 32000-1;
 80048da:	f647 43ff 	movw	r3, #31999	; 0x7cff
 80048de:	e885 0009 	stmia.w	r5, {r0, r3}
  htim16.Init.Period = 5000-1;
 80048e2:	f241 3387 	movw	r3, #4999	; 0x1387
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80048e6:	4628      	mov	r0, r5
  htim16.Init.Period = 5000-1;
 80048e8:	60eb      	str	r3, [r5, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ea:	612c      	str	r4, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 80048ec:	616c      	str	r4, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ee:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80048f0:	f7fd fd40 	bl	8002374 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 80048f4:	4628      	mov	r0, r5
 80048f6:	f7fd fc39 	bl	800216c <HAL_TIM_Base_Start_IT>
 80048fa:	e7fe      	b.n	80048fa <main+0x156>
 80048fc:	48000400 	.word	0x48000400
 8004900:	200004e4 	.word	0x200004e4
 8004904:	10110000 	.word	0x10110000
 8004908:	48000800 	.word	0x48000800
 800490c:	48000c00 	.word	0x48000c00
 8004910:	40013800 	.word	0x40013800
 8004914:	20000458 	.word	0x20000458
 8004918:	40008000 	.word	0x40008000
 800491c:	20000630 	.word	0x20000630
 8004920:	40014400 	.word	0x40014400

08004924 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004924:	4770      	bx	lr
	...

08004928 <HAL_UART_RxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==LPUART1)
 8004928:	6802      	ldr	r2, [r0, #0]
 800492a:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_UART_RxCpltCallback+0x10>)
 800492c:	429a      	cmp	r2, r3
 800492e:	d101      	bne.n	8004934 <HAL_UART_RxCpltCallback+0xc>
	{
		print_PMS7003();
 8004930:	f7ff be3c 	b.w	80045ac <print_PMS7003>
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40008000 	.word	0x40008000

0800493c <HAL_TIM_PeriodElapsedCallback>:
//  {
//  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b538      	push	{r3, r4, r5, lr}
	if(htim->Instance==TIM16)
 800493e:	6802      	ldr	r2, [r0, #0]
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004942:	429a      	cmp	r2, r3
 8004944:	d11b      	bne.n	800497e <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		if((HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY)&&
 8004946:	4c0f      	ldr	r4, [pc, #60]	; (8004984 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004948:	4620      	mov	r0, r4
 800494a:	f7fd febb 	bl	80026c4 <HAL_UART_GetState>
 800494e:	2820      	cmp	r0, #32
 8004950:	4605      	mov	r5, r0
 8004952:	d114      	bne.n	800497e <HAL_TIM_PeriodElapsedCallback+0x42>
		   (HAL_DMA_GetState(&hdma_lpuart1_rx)==HAL_DMA_STATE_READY))
 8004954:	480c      	ldr	r0, [pc, #48]	; (8004988 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004956:	f7fc f81e 	bl	8000996 <HAL_DMA_GetState>
		if((HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY)&&
 800495a:	2801      	cmp	r0, #1
 800495c:	d10f      	bne.n	800497e <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			__HAL_UART_FLUSH_DRREGISTER(&hlpuart1);
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	6999      	ldr	r1, [r3, #24]
 8004962:	f041 0108 	orr.w	r1, r1, #8
 8004966:	6199      	str	r1, [r3, #24]
 8004968:	6999      	ldr	r1, [r3, #24]
 800496a:	f041 0110 	orr.w	r1, r1, #16
 800496e:	6199      	str	r1, [r3, #24]
			if(HAL_UART_Receive_DMA(&hlpuart1, pms7003_Buffer, 32)!=HAL_OK)
 8004970:	462a      	mov	r2, r5
 8004972:	4620      	mov	r0, r4
 8004974:	4905      	ldr	r1, [pc, #20]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x50>)
			{
				//HAL_UART_Receive_DMA execution fail
			}
		}
	}
}
 8004976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			if(HAL_UART_Receive_DMA(&hlpuart1, pms7003_Buffer, 32)!=HAL_OK)
 800497a:	f7fd bd29 	b.w	80023d0 <HAL_UART_Receive_DMA>
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	40014400 	.word	0x40014400
 8004984:	20000458 	.word	0x20000458
 8004988:	200005d0 	.word	0x200005d0
 800498c:	20000438 	.word	0x20000438

08004990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004990:	4770      	bx	lr

08004992 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004992:	4770      	bx	lr

08004994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004994:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004996:	2214      	movs	r2, #20
{
 8004998:	b08b      	sub	sp, #44	; 0x2c
 800499a:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499c:	2100      	movs	r1, #0
 800499e:	eb0d 0002 	add.w	r0, sp, r2
 80049a2:	f000 fc37 	bl	8005214 <memset>
  if(huart->Instance==LPUART1)
 80049a6:	682b      	ldr	r3, [r5, #0]
 80049a8:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <HAL_UART_MspInit+0x10c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d155      	bne.n	8004a5a <HAL_UART_MspInit+0xc6>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b2:	483c      	ldr	r0, [pc, #240]	; (8004aa4 <HAL_UART_MspInit+0x110>)
 80049b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80049b6:	4c3c      	ldr	r4, [pc, #240]	; (8004aa8 <HAL_UART_MspInit+0x114>)
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80049be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049c0:	f002 0201 	and.w	r2, r2, #1
 80049c4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80049c6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049ca:	f042 0204 	orr.w	r2, r2, #4
 80049ce:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80049d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049da:	2303      	movs	r3, #3
 80049dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049de:	2302      	movs	r3, #2
 80049e0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80049e4:	2308      	movs	r3, #8
 80049e6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e8:	f7fb ffd8 	bl	800099c <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80049ec:	482f      	ldr	r0, [pc, #188]	; (8004aac <HAL_UART_MspInit+0x118>)
 80049ee:	2310      	movs	r3, #16
 80049f0:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049f4:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049f6:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80049f8:	4620      	mov	r0, r4
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049fa:	60a3      	str	r3, [r4, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049fc:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049fe:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a00:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a02:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8004a04:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a06:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004a08:	f7fb fe92 	bl	8000730 <HAL_DMA_Init>
 8004a0c:	b108      	cbz	r0, 8004a12 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8004a0e:	f7ff ffbf 	bl	8004990 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_UART_MspInit+0x11c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8004a14:	67ac      	str	r4, [r5, #120]	; 0x78
 8004a16:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8004a18:	4c26      	ldr	r4, [pc, #152]	; (8004ab4 <HAL_UART_MspInit+0x120>)
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a1a:	f04f 0c11 	mov.w	ip, #17
 8004a1e:	f04f 0e10 	mov.w	lr, #16
 8004a22:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a26:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a28:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004a2a:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a2c:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a2e:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a30:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a32:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004a34:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a36:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004a38:	f7fb fe7a 	bl	8000730 <HAL_DMA_Init>
 8004a3c:	b108      	cbz	r0, 8004a42 <HAL_UART_MspInit+0xae>
    {
      Error_Handler();
 8004a3e:	f7ff ffa7 	bl	8004990 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004a42:	2200      	movs	r2, #0
 8004a44:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8004a46:	676c      	str	r4, [r5, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004a48:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8004a4a:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004a4c:	f7fb fdd6 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004a50:	2025      	movs	r0, #37	; 0x25
 8004a52:	f7fb fe07 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a56:	b00b      	add	sp, #44	; 0x2c
 8004a58:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART1)
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <HAL_UART_MspInit+0x124>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d1fa      	bne.n	8004a56 <HAL_UART_MspInit+0xc2>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	a905      	add	r1, sp, #20
 8004a66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a68:	4814      	ldr	r0, [pc, #80]	; (8004abc <HAL_UART_MspInit+0x128>)
 8004a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a72:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a76:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8004a78:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a7c:	f042 0202 	orr.w	r2, r2, #2
 8004a80:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004a8a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004a8c:	23c0      	movs	r3, #192	; 0xc0
 8004a8e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a94:	2307      	movs	r3, #7
 8004a96:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a98:	f7fb ff80 	bl	800099c <HAL_GPIO_Init>
}
 8004a9c:	e7db      	b.n	8004a56 <HAL_UART_MspInit+0xc2>
 8004a9e:	bf00      	nop
 8004aa0:	40008000 	.word	0x40008000
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	200005d0 	.word	0x200005d0
 8004aac:	40020008 	.word	0x40020008
 8004ab0:	4002001c 	.word	0x4002001c
 8004ab4:	20000570 	.word	0x20000570
 8004ab8:	40013800 	.word	0x40013800
 8004abc:	48000400 	.word	0x48000400

08004ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_TIM_Base_MspInit+0x38>)
 8004ac4:	6802      	ldr	r2, [r0, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d112      	bne.n	8004af0 <HAL_TIM_Base_MspInit+0x30>
  SET_BIT(RCC->APB2ENR, Periphs);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 6, 0);
 8004ace:	2019      	movs	r0, #25
 8004ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ad2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004ad6:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2106      	movs	r1, #6
  (void)tmpreg;
 8004ae4:	9b01      	ldr	r3, [sp, #4]
 8004ae6:	f7fb fd89 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004aea:	2019      	movs	r0, #25
 8004aec:	f7fb fdba 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004af0:	b003      	add	sp, #12
 8004af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004af6:	bf00      	nop
 8004af8:	40014400 	.word	0x40014400

08004afc <NMI_Handler>:
 8004afc:	4770      	bx	lr

08004afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004afe:	e7fe      	b.n	8004afe <HardFault_Handler>

08004b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b00:	e7fe      	b.n	8004b00 <MemManage_Handler>

08004b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b02:	e7fe      	b.n	8004b02 <BusFault_Handler>

08004b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b04:	e7fe      	b.n	8004b04 <UsageFault_Handler>

08004b06 <SVC_Handler>:
 8004b06:	4770      	bx	lr

08004b08 <DebugMon_Handler>:
 8004b08:	4770      	bx	lr

08004b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b0a:	4770      	bx	lr

08004b0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b0c:	f7fb bd4c 	b.w	80005a8 <HAL_IncTick>

08004b10 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//	printf("rx dma\r\n");
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <DMA1_Channel1_IRQHandler+0x8>)
 8004b12:	f7fb bef6 	b.w	8000902 <HAL_DMA_IRQHandler>
 8004b16:	bf00      	nop
 8004b18:	200005d0 	.word	0x200005d0

08004b1c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <DMA1_Channel2_IRQHandler+0x8>)
 8004b1e:	f7fb bef0 	b.w	8000902 <HAL_DMA_IRQHandler>
 8004b22:	bf00      	nop
 8004b24:	20000570 	.word	0x20000570

08004b28 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004b28:	4801      	ldr	r0, [pc, #4]	; (8004b30 <USB_LP_IRQHandler+0x8>)
 8004b2a:	f7fc b91d 	b.w	8000d68 <HAL_PCD_IRQHandler>
 8004b2e:	bf00      	nop
 8004b30:	20001934 	.word	0x20001934

08004b34 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <TIM1_UP_TIM16_IRQHandler+0x8>)
 8004b36:	f7fd bb33 	b.w	80021a0 <HAL_TIM_IRQHandler>
 8004b3a:	bf00      	nop
 8004b3c:	20000630 	.word	0x20000630

08004b40 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <LPUART1_IRQHandler+0x8>)
 8004b42:	f7fd bce3 	b.w	800250c <HAL_UART_IRQHandler>
 8004b46:	bf00      	nop
 8004b48:	20000458 	.word	0x20000458

08004b4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	460e      	mov	r6, r1
 8004b50:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b52:	460c      	mov	r4, r1
 8004b54:	1ba3      	subs	r3, r4, r6
 8004b56:	429d      	cmp	r5, r3
 8004b58:	dc01      	bgt.n	8004b5e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004b5e:	f3af 8000 	nop.w
 8004b62:	f804 0b01 	strb.w	r0, [r4], #1
 8004b66:	e7f5      	b.n	8004b54 <_read+0x8>

08004b68 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004b68:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <_sbrk+0x2c>)
 8004b6c:	6819      	ldr	r1, [r3, #0]
{
 8004b6e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004b70:	b909      	cbnz	r1, 8004b76 <_sbrk+0xe>
		heap_end = &end;
 8004b72:	4909      	ldr	r1, [pc, #36]	; (8004b98 <_sbrk+0x30>)
 8004b74:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004b76:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004b78:	4669      	mov	r1, sp
 8004b7a:	4402      	add	r2, r0
 8004b7c:	428a      	cmp	r2, r1
 8004b7e:	d906      	bls.n	8004b8e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004b80:	f000 fb1e 	bl	80051c0 <__errno>
 8004b84:	230c      	movs	r3, #12
 8004b86:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004b8e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004b90:	bd08      	pop	{r3, pc}
 8004b92:	bf00      	nop
 8004b94:	20000208 	.word	0x20000208
 8004b98:	20001db0 	.word	0x20001db0

08004b9c <_close>:

int _close(int file)
{
	return -1;
}
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	4770      	bx	lr

08004ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ba6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004ba8:	2000      	movs	r0, #0
 8004baa:	4770      	bx	lr

08004bac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004bac:	2001      	movs	r0, #1
 8004bae:	4770      	bx	lr

08004bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	4770      	bx	lr

08004bb4 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004bb4:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <SystemInit+0x60>)
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bbe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004bca:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8004bd6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004bda:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8004be2:	4462      	add	r2, ip
 8004be4:	4002      	ands	r2, r0
 8004be6:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004be8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004bec:	f022 0205 	bic.w	r2, r2, #5
 8004bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004bf4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004c00:	4a05      	ldr	r2, [pc, #20]	; (8004c18 <SystemInit+0x64>)
 8004c02:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004c04:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c0e:	6199      	str	r1, [r3, #24]
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000ed00 	.word	0xe000ed00
 8004c18:	22041000 	.word	0x22041000

08004c1c <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c20:	4924      	ldr	r1, [pc, #144]	; (8004cb4 <SystemCoreClockUpdate+0x98>)
 8004c22:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c24:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004c26:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2a:	f000 000c 	and.w	r0, r0, #12
{
 8004c2e:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004c30:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4a20      	ldr	r2, [pc, #128]	; (8004cb8 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c38:	280c      	cmp	r0, #12
 8004c3a:	d839      	bhi.n	8004cb0 <SystemCoreClockUpdate+0x94>
 8004c3c:	e8df f000 	tbb	[pc, r0]
 8004c40:	38383838 	.word	0x38383838
 8004c44:	38383807 	.word	0x38383807
 8004c48:	38383816 	.word	0x38383816
 8004c4c:	18          	.byte	0x18
 8004c4d:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8004c4e:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8004c50:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8004c56:	481a      	ldr	r0, [pc, #104]	; (8004cc0 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c58:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8004c5a:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c5c:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8004c60:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <SystemCoreClockUpdate+0xa8>)
 8004c6e:	e7ef      	b.n	8004c50 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c70:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004c72:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c74:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004c78:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004c7c:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004c7e:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004c82:	d10e      	bne.n	8004ca2 <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8004c84:	490d      	ldr	r1, [pc, #52]	; (8004cbc <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 8004c86:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c8e:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8004c90:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c92:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8004c96:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c98:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8004c9a:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8004c9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ca0:	e7d6      	b.n	8004c50 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8004ca2:	2803      	cmp	r0, #3
 8004ca4:	d101      	bne.n	8004caa <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 8004ca6:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <SystemCoreClockUpdate+0xa8>)
 8004ca8:	e7ed      	b.n	8004c86 <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8004caa:	fbb4 f3f3 	udiv	r3, r4, r3
 8004cae:	e7ec      	b.n	8004c8a <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8004cb0:	6014      	str	r4, [r2, #0]
      break;
 8004cb2:	e7ce      	b.n	8004c52 <SystemCoreClockUpdate+0x36>
 8004cb4:	08006228 	.word	0x08006228
 8004cb8:	2000011c 	.word	0x2000011c
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	080061c8 	.word	0x080061c8
 8004cc4:	01e84800 	.word	0x01e84800

08004cc8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8004cc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8004cca:	2200      	movs	r2, #0
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <MX_USB_Device_Init+0x40>)
 8004cce:	480f      	ldr	r0, [pc, #60]	; (8004d0c <MX_USB_Device_Init+0x44>)
 8004cd0:	f7ff f8bf 	bl	8003e52 <USBD_Init>
 8004cd4:	b108      	cbz	r0, 8004cda <MX_USB_Device_Init+0x12>
    Error_Handler();
 8004cd6:	f7ff fe5b 	bl	8004990 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8004cda:	490d      	ldr	r1, [pc, #52]	; (8004d10 <MX_USB_Device_Init+0x48>)
 8004cdc:	480b      	ldr	r0, [pc, #44]	; (8004d0c <MX_USB_Device_Init+0x44>)
 8004cde:	f7ff f8cd 	bl	8003e7c <USBD_RegisterClass>
 8004ce2:	b108      	cbz	r0, 8004ce8 <MX_USB_Device_Init+0x20>
    Error_Handler();
 8004ce4:	f7ff fe54 	bl	8004990 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8004ce8:	490a      	ldr	r1, [pc, #40]	; (8004d14 <MX_USB_Device_Init+0x4c>)
 8004cea:	4808      	ldr	r0, [pc, #32]	; (8004d0c <MX_USB_Device_Init+0x44>)
 8004cec:	f7ff f889 	bl	8003e02 <USBD_CDC_RegisterInterface>
 8004cf0:	b108      	cbz	r0, 8004cf6 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8004cf2:	f7ff fe4d 	bl	8004990 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8004cf6:	4805      	ldr	r0, [pc, #20]	; (8004d0c <MX_USB_Device_Init+0x44>)
 8004cf8:	f7ff f8c7 	bl	8003e8a <USBD_Start>
 8004cfc:	b118      	cbz	r0, 8004d06 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8004cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004d02:	f7ff be45 	b.w	8004990 <Error_Handler>
 8004d06:	bd08      	pop	{r3, pc}
 8004d08:	20000130 	.word	0x20000130
 8004d0c:	20000670 	.word	0x20000670
 8004d10:	2000000c 	.word	0x2000000c
 8004d14:	20000120 	.word	0x20000120

08004d18 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004d18:	2000      	movs	r0, #0
 8004d1a:	4770      	bx	lr

08004d1c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	4770      	bx	lr

08004d20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004d20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004d22:	4c05      	ldr	r4, [pc, #20]	; (8004d38 <CDC_Receive_FS+0x18>)
 8004d24:	4601      	mov	r1, r0
 8004d26:	4620      	mov	r0, r4
 8004d28:	f7ff f87a 	bl	8003e20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff f87d 	bl	8003e2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004d32:	2000      	movs	r0, #0
 8004d34:	bd10      	pop	{r4, pc}
 8004d36:	bf00      	nop
 8004d38:	20000670 	.word	0x20000670

08004d3c <CDC_Init_FS>:
{
 8004d3c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004d3e:	4c06      	ldr	r4, [pc, #24]	; (8004d58 <CDC_Init_FS+0x1c>)
 8004d40:	4906      	ldr	r1, [pc, #24]	; (8004d5c <CDC_Init_FS+0x20>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7ff f863 	bl	8003e10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004d4a:	4905      	ldr	r1, [pc, #20]	; (8004d60 <CDC_Init_FS+0x24>)
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff f867 	bl	8003e20 <USBD_CDC_SetRxBuffer>
}
 8004d52:	2000      	movs	r0, #0
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	bf00      	nop
 8004d58:	20000670 	.word	0x20000670
 8004d5c:	20001134 	.word	0x20001134
 8004d60:	20000934 	.word	0x20000934

08004d64 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8004d64:	b510      	push	{r4, lr}
 8004d66:	4604      	mov	r4, r0
 8004d68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d6a:	2214      	movs	r2, #20
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	a803      	add	r0, sp, #12
 8004d70:	f000 fa50 	bl	8005214 <memset>
  if(pcdHandle->Instance==USB)
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <HAL_PCD_MspInit+0x6c>)
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d127      	bne.n	8004dcc <HAL_PCD_MspInit+0x68>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d7c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d80:	a903      	add	r1, sp, #12
 8004d82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004d92:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004d94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004da2:	230a      	movs	r3, #10
 8004da4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da6:	f7fb fdf9 	bl	800099c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004daa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004db0:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004db2:	6da3      	ldr	r3, [r4, #88]	; 0x58

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8004db4:	2200      	movs	r2, #0
 8004db6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	2014      	movs	r0, #20
 8004dbe:	4611      	mov	r1, r2
  (void)tmpreg;
 8004dc0:	9b01      	ldr	r3, [sp, #4]
 8004dc2:	f7fb fc1b 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8004dc6:	2014      	movs	r0, #20
 8004dc8:	f7fb fc4c 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004dcc:	b008      	add	sp, #32
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	40006800 	.word	0x40006800

08004dd4 <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8004dd4:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8004dd8:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004ddc:	f7ff b86c 	b.w	8003eb8 <USBD_LL_SetupStage>

08004de0 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8004de0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004de4:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004de8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004dec:	f7ff b891 	b.w	8003f12 <USBD_LL_DataOutStage>

08004df0 <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8004df0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004df4:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dfa:	f7ff b8c4 	b.w	8003f86 <USBD_LL_DataInStage>

08004dfe <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8004dfe:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004e02:	f7ff b959 	b.w	80040b8 <USBD_LL_SOF>

08004e06 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004e06:	6883      	ldr	r3, [r0, #8]
 8004e08:	2b02      	cmp	r3, #2
{ 
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004e0e:	d001      	beq.n	8004e14 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004e10:	f7ff fdbe 	bl	8004990 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004e14:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
 8004e18:	2101      	movs	r1, #1
 8004e1a:	f7ff f937 	bl	800408c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004e1e:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8004e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004e26:	f7ff b90a 	b.w	800403e <USBD_LL_Reset>
	...

08004e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004e30:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004e34:	f7ff f92d 	bl	8004092 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004e38:	69a3      	ldr	r3, [r4, #24]
 8004e3a:	b123      	cbz	r3, 8004e46 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004e3c:	4a02      	ldr	r2, [pc, #8]	; (8004e48 <HAL_PCD_SuspendCallback+0x1c>)
 8004e3e:	6913      	ldr	r3, [r2, #16]
 8004e40:	f043 0306 	orr.w	r3, r3, #6
 8004e44:	6113      	str	r3, [r2, #16]
 8004e46:	bd10      	pop	{r4, pc}
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8004e4c:	6983      	ldr	r3, [r0, #24]
{
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8004e52:	b133      	cbz	r3, 8004e62 <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004e54:	4a06      	ldr	r2, [pc, #24]	; (8004e70 <HAL_PCD_ResumeCallback+0x24>)
 8004e56:	6913      	ldr	r3, [r2, #16]
 8004e58:	f023 0306 	bic.w	r3, r3, #6
 8004e5c:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8004e5e:	f7ff fc2b 	bl	80046b8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004e62:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 8004e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004e6a:	f7ff b91b 	b.w	80040a4 <USBD_LL_Resume>
 8004e6e:	bf00      	nop
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <USBD_LL_Init>:
{
 8004e74:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 8004e76:	4c20      	ldr	r4, [pc, #128]	; (8004ef8 <USBD_LL_Init+0x84>)
  pdev->pData = &hpcd_USB_FS;
 8004e78:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
{
 8004e7c:	4605      	mov	r5, r0
  hpcd_USB_FS.pData = pdev;
 8004e7e:	f8c4 0270 	str.w	r0, [r4, #624]	; 0x270
  HAL_PWREx_EnableVddUSB();
 8004e82:	f7fc fa6f 	bl	8001364 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004e86:	481d      	ldr	r0, [pc, #116]	; (8004efc <USBD_LL_Init+0x88>)
 8004e88:	2308      	movs	r3, #8
 8004e8a:	e884 0009 	stmia.w	r4, {r0, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	60a3      	str	r3, [r4, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004e92:	6123      	str	r3, [r4, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004e94:	4620      	mov	r0, r4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	6163      	str	r3, [r4, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004e9a:	61a3      	str	r3, [r4, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004e9c:	61e3      	str	r3, [r4, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004e9e:	6223      	str	r3, [r4, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004ea0:	f7fb fe41 	bl	8000b26 <HAL_PCD_Init>
 8004ea4:	b108      	cbz	r0, 8004eaa <USBD_LL_Init+0x36>
    Error_Handler( );
 8004ea6:	f7ff fd73 	bl	8004990 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4611      	mov	r1, r2
 8004eae:	2318      	movs	r3, #24
 8004eb0:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004eb4:	f7fc fa17 	bl	80012e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004eb8:	2358      	movs	r3, #88	; 0x58
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2180      	movs	r1, #128	; 0x80
 8004ebe:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004ec2:	f7fc fa10 	bl	80012e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004ec6:	23c0      	movs	r3, #192	; 0xc0
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2181      	movs	r1, #129	; 0x81
 8004ecc:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004ed0:	f7fc fa09 	bl	80012e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004ed4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2101      	movs	r1, #1
 8004edc:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004ee0:	f7fc fa01 	bl	80012e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2182      	movs	r1, #130	; 0x82
 8004eec:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004ef0:	f7fc f9f9 	bl	80012e6 <HAL_PCDEx_PMAConfig>
}
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20001934 	.word	0x20001934
 8004efc:	40006800 	.word	0x40006800

08004f00 <USBD_LL_Start>:
{
 8004f00:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004f02:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f06:	f7fb fe6e 	bl	8000be6 <HAL_PCD_Start>
 8004f0a:	2803      	cmp	r0, #3
 8004f0c:	bf9a      	itte	ls
 8004f0e:	4b02      	ldrls	r3, [pc, #8]	; (8004f18 <USBD_LL_Start+0x18>)
 8004f10:	5c18      	ldrbls	r0, [r3, r0]
 8004f12:	2002      	movhi	r0, #2
}
 8004f14:	bd08      	pop	{r3, pc}
 8004f16:	bf00      	nop
 8004f18:	08006268 	.word	0x08006268

08004f1c <USBD_LL_OpenEP>:
{
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004f20:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f24:	4613      	mov	r3, r2
 8004f26:	4622      	mov	r2, r4
 8004f28:	f7fb fe86 	bl	8000c38 <HAL_PCD_EP_Open>
 8004f2c:	2803      	cmp	r0, #3
 8004f2e:	bf9a      	itte	ls
 8004f30:	4b01      	ldrls	r3, [pc, #4]	; (8004f38 <USBD_LL_OpenEP+0x1c>)
 8004f32:	5c18      	ldrbls	r0, [r3, r0]
 8004f34:	2002      	movhi	r0, #2
}
 8004f36:	bd10      	pop	{r4, pc}
 8004f38:	08006268 	.word	0x08006268

08004f3c <USBD_LL_CloseEP>:
{
 8004f3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004f3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f42:	f7fb feae 	bl	8000ca2 <HAL_PCD_EP_Close>
 8004f46:	2803      	cmp	r0, #3
 8004f48:	bf9a      	itte	ls
 8004f4a:	4b02      	ldrls	r3, [pc, #8]	; (8004f54 <USBD_LL_CloseEP+0x18>)
 8004f4c:	5c18      	ldrbls	r0, [r3, r0]
 8004f4e:	2002      	movhi	r0, #2
}
 8004f50:	bd08      	pop	{r3, pc}
 8004f52:	bf00      	nop
 8004f54:	08006268 	.word	0x08006268

08004f58 <USBD_LL_StallEP>:
{
 8004f58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004f5a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f5e:	f7fc f953 	bl	8001208 <HAL_PCD_EP_SetStall>
 8004f62:	2803      	cmp	r0, #3
 8004f64:	bf9a      	itte	ls
 8004f66:	4b02      	ldrls	r3, [pc, #8]	; (8004f70 <USBD_LL_StallEP+0x18>)
 8004f68:	5c18      	ldrbls	r0, [r3, r0]
 8004f6a:	2002      	movhi	r0, #2
}
 8004f6c:	bd08      	pop	{r3, pc}
 8004f6e:	bf00      	nop
 8004f70:	08006268 	.word	0x08006268

08004f74 <USBD_LL_ClearStallEP>:
{
 8004f74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004f76:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f7a:	f7fc f97e 	bl	800127a <HAL_PCD_EP_ClrStall>
 8004f7e:	2803      	cmp	r0, #3
 8004f80:	bf9a      	itte	ls
 8004f82:	4b02      	ldrls	r3, [pc, #8]	; (8004f8c <USBD_LL_ClearStallEP+0x18>)
 8004f84:	5c18      	ldrbls	r0, [r3, r0]
 8004f86:	2002      	movhi	r0, #2
}
 8004f88:	bd08      	pop	{r3, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08006268 	.word	0x08006268

08004f90 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8004f90:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004f92:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004f96:	bf45      	ittet	mi
 8004f98:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004f9c:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004fa0:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004fa4:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004fa8:	bf58      	it	pl
 8004faa:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
}
 8004fae:	4770      	bx	lr

08004fb0 <USBD_LL_SetUSBAddress>:
{
 8004fb0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004fb2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004fb6:	f7fb fe2b 	bl	8000c10 <HAL_PCD_SetAddress>
 8004fba:	2803      	cmp	r0, #3
 8004fbc:	bf9a      	itte	ls
 8004fbe:	4b02      	ldrls	r3, [pc, #8]	; (8004fc8 <USBD_LL_SetUSBAddress+0x18>)
 8004fc0:	5c18      	ldrbls	r0, [r3, r0]
 8004fc2:	2002      	movhi	r0, #2
}
 8004fc4:	bd08      	pop	{r3, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08006268 	.word	0x08006268

08004fcc <USBD_LL_Transmit>:
{
 8004fcc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004fce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004fd2:	f7fb feb1 	bl	8000d38 <HAL_PCD_EP_Transmit>
 8004fd6:	2803      	cmp	r0, #3
 8004fd8:	bf9a      	itte	ls
 8004fda:	4b02      	ldrls	r3, [pc, #8]	; (8004fe4 <USBD_LL_Transmit+0x18>)
 8004fdc:	5c18      	ldrbls	r0, [r3, r0]
 8004fde:	2002      	movhi	r0, #2
}
 8004fe0:	bd08      	pop	{r3, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08006268 	.word	0x08006268

08004fe8 <USBD_LL_PrepareReceive>:
{
 8004fe8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004fea:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004fee:	f7fb fe83 	bl	8000cf8 <HAL_PCD_EP_Receive>
 8004ff2:	2803      	cmp	r0, #3
 8004ff4:	bf9a      	itte	ls
 8004ff6:	4b02      	ldrls	r3, [pc, #8]	; (8005000 <USBD_LL_PrepareReceive+0x18>)
 8004ff8:	5c18      	ldrbls	r0, [r3, r0]
 8004ffa:	2002      	movhi	r0, #2
}
 8004ffc:	bd08      	pop	{r3, pc}
 8004ffe:	bf00      	nop
 8005000:	08006268 	.word	0x08006268

08005004 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005004:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005008:	f7fb be8f 	b.w	8000d2a <HAL_PCD_EP_GetRxCount>

0800500c <HAL_PCDEx_LPM_Callback>:
{
 800500c:	b510      	push	{r4, lr}
 800500e:	4604      	mov	r4, r0
  switch (msg)
 8005010:	b111      	cbz	r1, 8005018 <HAL_PCDEx_LPM_Callback+0xc>
 8005012:	2901      	cmp	r1, #1
 8005014:	d00f      	beq.n	8005036 <HAL_PCDEx_LPM_Callback+0x2a>
 8005016:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8005018:	6983      	ldr	r3, [r0, #24]
 800501a:	b133      	cbz	r3, 800502a <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 800501c:	f7ff fb4c 	bl	80046b8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005020:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <HAL_PCDEx_LPM_Callback+0x44>)
 8005022:	6913      	ldr	r3, [r2, #16]
 8005024:	f023 0306 	bic.w	r3, r3, #6
 8005028:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800502a:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 800502e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8005032:	f7ff b837 	b.w	80040a4 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8005036:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 800503a:	f7ff f82a 	bl	8004092 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800503e:	69a3      	ldr	r3, [r4, #24]
 8005040:	b123      	cbz	r3, 800504c <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005042:	4a03      	ldr	r2, [pc, #12]	; (8005050 <HAL_PCDEx_LPM_Callback+0x44>)
 8005044:	6913      	ldr	r3, [r2, #16]
 8005046:	f043 0306 	orr.w	r3, r3, #6
 800504a:	6113      	str	r3, [r2, #16]
 800504c:	bd10      	pop	{r4, pc}
 800504e:	bf00      	nop
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <USBD_static_malloc>:
}
 8005054:	4800      	ldr	r0, [pc, #0]	; (8005058 <USBD_static_malloc+0x4>)
 8005056:	4770      	bx	lr
 8005058:	2000020c 	.word	0x2000020c

0800505c <USBD_static_free>:
{
 800505c:	4770      	bx	lr
	...

08005060 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8005060:	2312      	movs	r3, #18
 8005062:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8005064:	4800      	ldr	r0, [pc, #0]	; (8005068 <USBD_CDC_DeviceDescriptor+0x8>)
 8005066:	4770      	bx	lr
 8005068:	20000150 	.word	0x20000150

0800506c <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800506c:	2304      	movs	r3, #4
 800506e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005070:	4800      	ldr	r0, [pc, #0]	; (8005074 <USBD_CDC_LangIDStrDescriptor+0x8>)
 8005072:	4770      	bx	lr
 8005074:	20000164 	.word	0x20000164

08005078 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005078:	2300      	movs	r3, #0
{
 800507a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800507c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800507e:	b2dc      	uxtb	r4, r3
 8005080:	42a2      	cmp	r2, r4
 8005082:	d800      	bhi.n	8005086 <IntToUnicode+0xe>
  }
}
 8005084:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8005086:	0f04      	lsrs	r4, r0, #28
 8005088:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800508a:	bf94      	ite	ls
 800508c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800508e:	3437      	addhi	r4, #55	; 0x37
 8005090:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005094:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8005098:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800509a:	7065      	strb	r5, [r4, #1]
 800509c:	3301      	adds	r3, #1
 800509e:	e7ee      	b.n	800507e <IntToUnicode+0x6>

080050a0 <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80050a0:	231a      	movs	r3, #26
{
 80050a2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80050a4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <USBD_CDC_SerialStrDescriptor+0x2c>)
 80050a8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80050aa:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80050ac:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80050ae:	18c0      	adds	r0, r0, r3
 80050b0:	d00a      	beq.n	80050c8 <USBD_CDC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <USBD_CDC_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80050b4:	4907      	ldr	r1, [pc, #28]	; (80050d4 <USBD_CDC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80050b6:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80050b8:	2208      	movs	r2, #8
 80050ba:	f7ff ffdd 	bl	8005078 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80050be:	2204      	movs	r2, #4
 80050c0:	4905      	ldr	r1, [pc, #20]	; (80050d8 <USBD_CDC_SerialStrDescriptor+0x38>)
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7ff ffd8 	bl	8005078 <IntToUnicode>
}
 80050c8:	4804      	ldr	r0, [pc, #16]	; (80050dc <USBD_CDC_SerialStrDescriptor+0x3c>)
 80050ca:	bd10      	pop	{r4, pc}
 80050cc:	1fff7590 	.word	0x1fff7590
 80050d0:	1fff7594 	.word	0x1fff7594
 80050d4:	2000016a 	.word	0x2000016a
 80050d8:	2000017a 	.word	0x2000017a
 80050dc:	20000168 	.word	0x20000168

080050e0 <USBD_CDC_ManufacturerStrDescriptor>:
{
 80050e0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80050e2:	4c04      	ldr	r4, [pc, #16]	; (80050f4 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 80050e4:	4804      	ldr	r0, [pc, #16]	; (80050f8 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 80050e6:	460a      	mov	r2, r1
 80050e8:	4621      	mov	r1, r4
 80050ea:	f7ff f9f5 	bl	80044d8 <USBD_GetString>
}
 80050ee:	4620      	mov	r0, r4
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	20001ba8 	.word	0x20001ba8
 80050f8:	08006285 	.word	0x08006285

080050fc <USBD_CDC_ProductStrDescriptor>:
{
 80050fc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80050fe:	4c04      	ldr	r4, [pc, #16]	; (8005110 <USBD_CDC_ProductStrDescriptor+0x14>)
 8005100:	4804      	ldr	r0, [pc, #16]	; (8005114 <USBD_CDC_ProductStrDescriptor+0x18>)
 8005102:	460a      	mov	r2, r1
 8005104:	4621      	mov	r1, r4
 8005106:	f7ff f9e7 	bl	80044d8 <USBD_GetString>
}
 800510a:	4620      	mov	r0, r4
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	20001ba8 	.word	0x20001ba8
 8005114:	08006298 	.word	0x08006298

08005118 <USBD_CDC_ConfigStrDescriptor>:
{
 8005118:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800511a:	4c04      	ldr	r4, [pc, #16]	; (800512c <USBD_CDC_ConfigStrDescriptor+0x14>)
 800511c:	4804      	ldr	r0, [pc, #16]	; (8005130 <USBD_CDC_ConfigStrDescriptor+0x18>)
 800511e:	460a      	mov	r2, r1
 8005120:	4621      	mov	r1, r4
 8005122:	f7ff f9d9 	bl	80044d8 <USBD_GetString>
}
 8005126:	4620      	mov	r0, r4
 8005128:	bd10      	pop	{r4, pc}
 800512a:	bf00      	nop
 800512c:	20001ba8 	.word	0x20001ba8
 8005130:	0800626c 	.word	0x0800626c

08005134 <USBD_CDC_InterfaceStrDescriptor>:
{
 8005134:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005136:	4c04      	ldr	r4, [pc, #16]	; (8005148 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8005138:	4804      	ldr	r0, [pc, #16]	; (800514c <USBD_CDC_InterfaceStrDescriptor+0x18>)
 800513a:	460a      	mov	r2, r1
 800513c:	4621      	mov	r1, r4
 800513e:	f7ff f9cb 	bl	80044d8 <USBD_GetString>
}
 8005142:	4620      	mov	r0, r4
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop
 8005148:	20001ba8 	.word	0x20001ba8
 800514c:	08006277 	.word	0x08006277

08005150 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005150:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005152:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005154:	3304      	adds	r3, #4

08005156 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005156:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005158:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800515a:	d3f9      	bcc.n	8005150 <CopyDataInit>
  bx lr
 800515c:	4770      	bx	lr

0800515e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800515e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005160:	3004      	adds	r0, #4

08005162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005162:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005164:	d3fb      	bcc.n	800515e <FillZerobss>
  bx lr
 8005166:	4770      	bx	lr

08005168 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005168:	480c      	ldr	r0, [pc, #48]	; (800519c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800516a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800516c:	480c      	ldr	r0, [pc, #48]	; (80051a0 <LoopForever+0x8>)
 800516e:	490d      	ldr	r1, [pc, #52]	; (80051a4 <LoopForever+0xc>)
 8005170:	4a0d      	ldr	r2, [pc, #52]	; (80051a8 <LoopForever+0x10>)
 8005172:	2300      	movs	r3, #0
 8005174:	f7ff ffef 	bl	8005156 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005178:	480c      	ldr	r0, [pc, #48]	; (80051ac <LoopForever+0x14>)
 800517a:	490d      	ldr	r1, [pc, #52]	; (80051b0 <LoopForever+0x18>)
 800517c:	2300      	movs	r3, #0
 800517e:	f7ff fff0 	bl	8005162 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005182:	480c      	ldr	r0, [pc, #48]	; (80051b4 <LoopForever+0x1c>)
 8005184:	490c      	ldr	r1, [pc, #48]	; (80051b8 <LoopForever+0x20>)
 8005186:	2300      	movs	r3, #0
 8005188:	f7ff ffeb 	bl	8005162 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800518c:	f7ff fd12 	bl	8004bb4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005190:	f000 f81c 	bl	80051cc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005194:	f7ff fb06 	bl	80047a4 <main>

08005198 <LoopForever>:

LoopForever:
  b LoopForever
 8005198:	e7fe      	b.n	8005198 <LoopForever>
 800519a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800519c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80051a0:	20000004 	.word	0x20000004
 80051a4:	200001e8 	.word	0x200001e8
 80051a8:	08006358 	.word	0x08006358
  INIT_BSS _sbss, _ebss
 80051ac:	200001e8 	.word	0x200001e8
 80051b0:	20001dac 	.word	0x20001dac
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80051b4:	20030000 	.word	0x20030000
 80051b8:	20030000 	.word	0x20030000

080051bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051bc:	e7fe      	b.n	80051bc <ADC1_IRQHandler>
	...

080051c0 <__errno>:
 80051c0:	4b01      	ldr	r3, [pc, #4]	; (80051c8 <__errno+0x8>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000184 	.word	0x20000184

080051cc <__libc_init_array>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4e0d      	ldr	r6, [pc, #52]	; (8005204 <__libc_init_array+0x38>)
 80051d0:	4c0d      	ldr	r4, [pc, #52]	; (8005208 <__libc_init_array+0x3c>)
 80051d2:	1ba4      	subs	r4, r4, r6
 80051d4:	10a4      	asrs	r4, r4, #2
 80051d6:	2500      	movs	r5, #0
 80051d8:	42a5      	cmp	r5, r4
 80051da:	d109      	bne.n	80051f0 <__libc_init_array+0x24>
 80051dc:	4e0b      	ldr	r6, [pc, #44]	; (800520c <__libc_init_array+0x40>)
 80051de:	4c0c      	ldr	r4, [pc, #48]	; (8005210 <__libc_init_array+0x44>)
 80051e0:	f000 ff7c 	bl	80060dc <_init>
 80051e4:	1ba4      	subs	r4, r4, r6
 80051e6:	10a4      	asrs	r4, r4, #2
 80051e8:	2500      	movs	r5, #0
 80051ea:	42a5      	cmp	r5, r4
 80051ec:	d105      	bne.n	80051fa <__libc_init_array+0x2e>
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051f4:	4798      	blx	r3
 80051f6:	3501      	adds	r5, #1
 80051f8:	e7ee      	b.n	80051d8 <__libc_init_array+0xc>
 80051fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051fe:	4798      	blx	r3
 8005200:	3501      	adds	r5, #1
 8005202:	e7f2      	b.n	80051ea <__libc_init_array+0x1e>
 8005204:	08006350 	.word	0x08006350
 8005208:	08006350 	.word	0x08006350
 800520c:	08006350 	.word	0x08006350
 8005210:	08006354 	.word	0x08006354

08005214 <memset>:
 8005214:	4402      	add	r2, r0
 8005216:	4603      	mov	r3, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	f803 1b01 	strb.w	r1, [r3], #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <iprintf>:
 8005224:	b40f      	push	{r0, r1, r2, r3}
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <iprintf+0x2c>)
 8005228:	b513      	push	{r0, r1, r4, lr}
 800522a:	681c      	ldr	r4, [r3, #0]
 800522c:	b124      	cbz	r4, 8005238 <iprintf+0x14>
 800522e:	69a3      	ldr	r3, [r4, #24]
 8005230:	b913      	cbnz	r3, 8005238 <iprintf+0x14>
 8005232:	4620      	mov	r0, r4
 8005234:	f000 fa24 	bl	8005680 <__sinit>
 8005238:	ab05      	add	r3, sp, #20
 800523a:	9a04      	ldr	r2, [sp, #16]
 800523c:	68a1      	ldr	r1, [r4, #8]
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	4620      	mov	r0, r4
 8005242:	f000 fbe1 	bl	8005a08 <_vfiprintf_r>
 8005246:	b002      	add	sp, #8
 8005248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524c:	b004      	add	sp, #16
 800524e:	4770      	bx	lr
 8005250:	20000184 	.word	0x20000184

08005254 <_puts_r>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	460e      	mov	r6, r1
 8005258:	4605      	mov	r5, r0
 800525a:	b118      	cbz	r0, 8005264 <_puts_r+0x10>
 800525c:	6983      	ldr	r3, [r0, #24]
 800525e:	b90b      	cbnz	r3, 8005264 <_puts_r+0x10>
 8005260:	f000 fa0e 	bl	8005680 <__sinit>
 8005264:	69ab      	ldr	r3, [r5, #24]
 8005266:	68ac      	ldr	r4, [r5, #8]
 8005268:	b913      	cbnz	r3, 8005270 <_puts_r+0x1c>
 800526a:	4628      	mov	r0, r5
 800526c:	f000 fa08 	bl	8005680 <__sinit>
 8005270:	4b23      	ldr	r3, [pc, #140]	; (8005300 <_puts_r+0xac>)
 8005272:	429c      	cmp	r4, r3
 8005274:	d117      	bne.n	80052a6 <_puts_r+0x52>
 8005276:	686c      	ldr	r4, [r5, #4]
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	071b      	lsls	r3, r3, #28
 800527c:	d51d      	bpl.n	80052ba <_puts_r+0x66>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	b1db      	cbz	r3, 80052ba <_puts_r+0x66>
 8005282:	3e01      	subs	r6, #1
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800528a:	3b01      	subs	r3, #1
 800528c:	60a3      	str	r3, [r4, #8]
 800528e:	b9e9      	cbnz	r1, 80052cc <_puts_r+0x78>
 8005290:	2b00      	cmp	r3, #0
 8005292:	da2e      	bge.n	80052f2 <_puts_r+0x9e>
 8005294:	4622      	mov	r2, r4
 8005296:	210a      	movs	r1, #10
 8005298:	4628      	mov	r0, r5
 800529a:	f000 f83f 	bl	800531c <__swbuf_r>
 800529e:	3001      	adds	r0, #1
 80052a0:	d011      	beq.n	80052c6 <_puts_r+0x72>
 80052a2:	200a      	movs	r0, #10
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
 80052a6:	4b17      	ldr	r3, [pc, #92]	; (8005304 <_puts_r+0xb0>)
 80052a8:	429c      	cmp	r4, r3
 80052aa:	d101      	bne.n	80052b0 <_puts_r+0x5c>
 80052ac:	68ac      	ldr	r4, [r5, #8]
 80052ae:	e7e3      	b.n	8005278 <_puts_r+0x24>
 80052b0:	4b15      	ldr	r3, [pc, #84]	; (8005308 <_puts_r+0xb4>)
 80052b2:	429c      	cmp	r4, r3
 80052b4:	bf08      	it	eq
 80052b6:	68ec      	ldreq	r4, [r5, #12]
 80052b8:	e7de      	b.n	8005278 <_puts_r+0x24>
 80052ba:	4621      	mov	r1, r4
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 f87f 	bl	80053c0 <__swsetup_r>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d0dd      	beq.n	8005282 <_puts_r+0x2e>
 80052c6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	da04      	bge.n	80052da <_puts_r+0x86>
 80052d0:	69a2      	ldr	r2, [r4, #24]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	db06      	blt.n	80052e4 <_puts_r+0x90>
 80052d6:	290a      	cmp	r1, #10
 80052d8:	d004      	beq.n	80052e4 <_puts_r+0x90>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	6022      	str	r2, [r4, #0]
 80052e0:	7019      	strb	r1, [r3, #0]
 80052e2:	e7cf      	b.n	8005284 <_puts_r+0x30>
 80052e4:	4622      	mov	r2, r4
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f818 	bl	800531c <__swbuf_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d1c9      	bne.n	8005284 <_puts_r+0x30>
 80052f0:	e7e9      	b.n	80052c6 <_puts_r+0x72>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	200a      	movs	r0, #10
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	7018      	strb	r0, [r3, #0]
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
 80052fe:	bf00      	nop
 8005300:	080062d4 	.word	0x080062d4
 8005304:	080062f4 	.word	0x080062f4
 8005308:	080062b4 	.word	0x080062b4

0800530c <puts>:
 800530c:	4b02      	ldr	r3, [pc, #8]	; (8005318 <puts+0xc>)
 800530e:	4601      	mov	r1, r0
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	f7ff bf9f 	b.w	8005254 <_puts_r>
 8005316:	bf00      	nop
 8005318:	20000184 	.word	0x20000184

0800531c <__swbuf_r>:
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	460e      	mov	r6, r1
 8005320:	4614      	mov	r4, r2
 8005322:	4605      	mov	r5, r0
 8005324:	b118      	cbz	r0, 800532e <__swbuf_r+0x12>
 8005326:	6983      	ldr	r3, [r0, #24]
 8005328:	b90b      	cbnz	r3, 800532e <__swbuf_r+0x12>
 800532a:	f000 f9a9 	bl	8005680 <__sinit>
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <__swbuf_r+0x98>)
 8005330:	429c      	cmp	r4, r3
 8005332:	d12a      	bne.n	800538a <__swbuf_r+0x6e>
 8005334:	686c      	ldr	r4, [r5, #4]
 8005336:	69a3      	ldr	r3, [r4, #24]
 8005338:	60a3      	str	r3, [r4, #8]
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	071a      	lsls	r2, r3, #28
 800533e:	d52e      	bpl.n	800539e <__swbuf_r+0x82>
 8005340:	6923      	ldr	r3, [r4, #16]
 8005342:	b363      	cbz	r3, 800539e <__swbuf_r+0x82>
 8005344:	6923      	ldr	r3, [r4, #16]
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	1ac0      	subs	r0, r0, r3
 800534a:	6963      	ldr	r3, [r4, #20]
 800534c:	b2f6      	uxtb	r6, r6
 800534e:	4298      	cmp	r0, r3
 8005350:	4637      	mov	r7, r6
 8005352:	db04      	blt.n	800535e <__swbuf_r+0x42>
 8005354:	4621      	mov	r1, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f928 	bl	80055ac <_fflush_r>
 800535c:	bb28      	cbnz	r0, 80053aa <__swbuf_r+0x8e>
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	3b01      	subs	r3, #1
 8005362:	60a3      	str	r3, [r4, #8]
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	6022      	str	r2, [r4, #0]
 800536a:	701e      	strb	r6, [r3, #0]
 800536c:	6963      	ldr	r3, [r4, #20]
 800536e:	3001      	adds	r0, #1
 8005370:	4298      	cmp	r0, r3
 8005372:	d004      	beq.n	800537e <__swbuf_r+0x62>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	07db      	lsls	r3, r3, #31
 8005378:	d519      	bpl.n	80053ae <__swbuf_r+0x92>
 800537a:	2e0a      	cmp	r6, #10
 800537c:	d117      	bne.n	80053ae <__swbuf_r+0x92>
 800537e:	4621      	mov	r1, r4
 8005380:	4628      	mov	r0, r5
 8005382:	f000 f913 	bl	80055ac <_fflush_r>
 8005386:	b190      	cbz	r0, 80053ae <__swbuf_r+0x92>
 8005388:	e00f      	b.n	80053aa <__swbuf_r+0x8e>
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <__swbuf_r+0x9c>)
 800538c:	429c      	cmp	r4, r3
 800538e:	d101      	bne.n	8005394 <__swbuf_r+0x78>
 8005390:	68ac      	ldr	r4, [r5, #8]
 8005392:	e7d0      	b.n	8005336 <__swbuf_r+0x1a>
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <__swbuf_r+0xa0>)
 8005396:	429c      	cmp	r4, r3
 8005398:	bf08      	it	eq
 800539a:	68ec      	ldreq	r4, [r5, #12]
 800539c:	e7cb      	b.n	8005336 <__swbuf_r+0x1a>
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 f80d 	bl	80053c0 <__swsetup_r>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d0cc      	beq.n	8005344 <__swbuf_r+0x28>
 80053aa:	f04f 37ff 	mov.w	r7, #4294967295
 80053ae:	4638      	mov	r0, r7
 80053b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b2:	bf00      	nop
 80053b4:	080062d4 	.word	0x080062d4
 80053b8:	080062f4 	.word	0x080062f4
 80053bc:	080062b4 	.word	0x080062b4

080053c0 <__swsetup_r>:
 80053c0:	4b32      	ldr	r3, [pc, #200]	; (800548c <__swsetup_r+0xcc>)
 80053c2:	b570      	push	{r4, r5, r6, lr}
 80053c4:	681d      	ldr	r5, [r3, #0]
 80053c6:	4606      	mov	r6, r0
 80053c8:	460c      	mov	r4, r1
 80053ca:	b125      	cbz	r5, 80053d6 <__swsetup_r+0x16>
 80053cc:	69ab      	ldr	r3, [r5, #24]
 80053ce:	b913      	cbnz	r3, 80053d6 <__swsetup_r+0x16>
 80053d0:	4628      	mov	r0, r5
 80053d2:	f000 f955 	bl	8005680 <__sinit>
 80053d6:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <__swsetup_r+0xd0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d10f      	bne.n	80053fc <__swsetup_r+0x3c>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	0715      	lsls	r5, r2, #28
 80053e6:	d42c      	bmi.n	8005442 <__swsetup_r+0x82>
 80053e8:	06d0      	lsls	r0, r2, #27
 80053ea:	d411      	bmi.n	8005410 <__swsetup_r+0x50>
 80053ec:	2209      	movs	r2, #9
 80053ee:	6032      	str	r2, [r6, #0]
 80053f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <__swsetup_r+0xd4>)
 80053fe:	429c      	cmp	r4, r3
 8005400:	d101      	bne.n	8005406 <__swsetup_r+0x46>
 8005402:	68ac      	ldr	r4, [r5, #8]
 8005404:	e7eb      	b.n	80053de <__swsetup_r+0x1e>
 8005406:	4b24      	ldr	r3, [pc, #144]	; (8005498 <__swsetup_r+0xd8>)
 8005408:	429c      	cmp	r4, r3
 800540a:	bf08      	it	eq
 800540c:	68ec      	ldreq	r4, [r5, #12]
 800540e:	e7e6      	b.n	80053de <__swsetup_r+0x1e>
 8005410:	0751      	lsls	r1, r2, #29
 8005412:	d512      	bpl.n	800543a <__swsetup_r+0x7a>
 8005414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005416:	b141      	cbz	r1, 800542a <__swsetup_r+0x6a>
 8005418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800541c:	4299      	cmp	r1, r3
 800541e:	d002      	beq.n	8005426 <__swsetup_r+0x66>
 8005420:	4630      	mov	r0, r6
 8005422:	f000 fa1b 	bl	800585c <_free_r>
 8005426:	2300      	movs	r3, #0
 8005428:	6363      	str	r3, [r4, #52]	; 0x34
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	2300      	movs	r3, #0
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f043 0308 	orr.w	r3, r3, #8
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	b94b      	cbnz	r3, 800545a <__swsetup_r+0x9a>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800544c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005450:	d003      	beq.n	800545a <__swsetup_r+0x9a>
 8005452:	4621      	mov	r1, r4
 8005454:	4630      	mov	r0, r6
 8005456:	f000 f9c1 	bl	80057dc <__smakebuf_r>
 800545a:	89a2      	ldrh	r2, [r4, #12]
 800545c:	f012 0301 	ands.w	r3, r2, #1
 8005460:	d00c      	beq.n	800547c <__swsetup_r+0xbc>
 8005462:	2300      	movs	r3, #0
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	6963      	ldr	r3, [r4, #20]
 8005468:	425b      	negs	r3, r3
 800546a:	61a3      	str	r3, [r4, #24]
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	b953      	cbnz	r3, 8005486 <__swsetup_r+0xc6>
 8005470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005474:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005478:	d1ba      	bne.n	80053f0 <__swsetup_r+0x30>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	0792      	lsls	r2, r2, #30
 800547e:	bf58      	it	pl
 8005480:	6963      	ldrpl	r3, [r4, #20]
 8005482:	60a3      	str	r3, [r4, #8]
 8005484:	e7f2      	b.n	800546c <__swsetup_r+0xac>
 8005486:	2000      	movs	r0, #0
 8005488:	e7f7      	b.n	800547a <__swsetup_r+0xba>
 800548a:	bf00      	nop
 800548c:	20000184 	.word	0x20000184
 8005490:	080062d4 	.word	0x080062d4
 8005494:	080062f4 	.word	0x080062f4
 8005498:	080062b4 	.word	0x080062b4

0800549c <__sflush_r>:
 800549c:	898a      	ldrh	r2, [r1, #12]
 800549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	4605      	mov	r5, r0
 80054a4:	0710      	lsls	r0, r2, #28
 80054a6:	460c      	mov	r4, r1
 80054a8:	d45a      	bmi.n	8005560 <__sflush_r+0xc4>
 80054aa:	684b      	ldr	r3, [r1, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	dc05      	bgt.n	80054bc <__sflush_r+0x20>
 80054b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dc02      	bgt.n	80054bc <__sflush_r+0x20>
 80054b6:	2000      	movs	r0, #0
 80054b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054be:	2e00      	cmp	r6, #0
 80054c0:	d0f9      	beq.n	80054b6 <__sflush_r+0x1a>
 80054c2:	2300      	movs	r3, #0
 80054c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054c8:	682f      	ldr	r7, [r5, #0]
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	d033      	beq.n	8005536 <__sflush_r+0x9a>
 80054ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	075a      	lsls	r2, r3, #29
 80054d4:	d505      	bpl.n	80054e2 <__sflush_r+0x46>
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	1ac0      	subs	r0, r0, r3
 80054da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054dc:	b10b      	cbz	r3, 80054e2 <__sflush_r+0x46>
 80054de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054e0:	1ac0      	subs	r0, r0, r3
 80054e2:	2300      	movs	r3, #0
 80054e4:	4602      	mov	r2, r0
 80054e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054e8:	6a21      	ldr	r1, [r4, #32]
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b0      	blx	r6
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	d106      	bne.n	8005502 <__sflush_r+0x66>
 80054f4:	6829      	ldr	r1, [r5, #0]
 80054f6:	291d      	cmp	r1, #29
 80054f8:	d84b      	bhi.n	8005592 <__sflush_r+0xf6>
 80054fa:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <__sflush_r+0x10c>)
 80054fc:	40ca      	lsrs	r2, r1
 80054fe:	07d6      	lsls	r6, r2, #31
 8005500:	d547      	bpl.n	8005592 <__sflush_r+0xf6>
 8005502:	2200      	movs	r2, #0
 8005504:	6062      	str	r2, [r4, #4]
 8005506:	04d9      	lsls	r1, r3, #19
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	6022      	str	r2, [r4, #0]
 800550c:	d504      	bpl.n	8005518 <__sflush_r+0x7c>
 800550e:	1c42      	adds	r2, r0, #1
 8005510:	d101      	bne.n	8005516 <__sflush_r+0x7a>
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	b903      	cbnz	r3, 8005518 <__sflush_r+0x7c>
 8005516:	6560      	str	r0, [r4, #84]	; 0x54
 8005518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800551a:	602f      	str	r7, [r5, #0]
 800551c:	2900      	cmp	r1, #0
 800551e:	d0ca      	beq.n	80054b6 <__sflush_r+0x1a>
 8005520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005524:	4299      	cmp	r1, r3
 8005526:	d002      	beq.n	800552e <__sflush_r+0x92>
 8005528:	4628      	mov	r0, r5
 800552a:	f000 f997 	bl	800585c <_free_r>
 800552e:	2000      	movs	r0, #0
 8005530:	6360      	str	r0, [r4, #52]	; 0x34
 8005532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005536:	6a21      	ldr	r1, [r4, #32]
 8005538:	2301      	movs	r3, #1
 800553a:	4628      	mov	r0, r5
 800553c:	47b0      	blx	r6
 800553e:	1c41      	adds	r1, r0, #1
 8005540:	d1c6      	bne.n	80054d0 <__sflush_r+0x34>
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0c3      	beq.n	80054d0 <__sflush_r+0x34>
 8005548:	2b1d      	cmp	r3, #29
 800554a:	d001      	beq.n	8005550 <__sflush_r+0xb4>
 800554c:	2b16      	cmp	r3, #22
 800554e:	d101      	bne.n	8005554 <__sflush_r+0xb8>
 8005550:	602f      	str	r7, [r5, #0]
 8005552:	e7b0      	b.n	80054b6 <__sflush_r+0x1a>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005560:	690f      	ldr	r7, [r1, #16]
 8005562:	2f00      	cmp	r7, #0
 8005564:	d0a7      	beq.n	80054b6 <__sflush_r+0x1a>
 8005566:	0793      	lsls	r3, r2, #30
 8005568:	680e      	ldr	r6, [r1, #0]
 800556a:	bf08      	it	eq
 800556c:	694b      	ldreq	r3, [r1, #20]
 800556e:	600f      	str	r7, [r1, #0]
 8005570:	bf18      	it	ne
 8005572:	2300      	movne	r3, #0
 8005574:	eba6 0807 	sub.w	r8, r6, r7
 8005578:	608b      	str	r3, [r1, #8]
 800557a:	f1b8 0f00 	cmp.w	r8, #0
 800557e:	dd9a      	ble.n	80054b6 <__sflush_r+0x1a>
 8005580:	4643      	mov	r3, r8
 8005582:	463a      	mov	r2, r7
 8005584:	6a21      	ldr	r1, [r4, #32]
 8005586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005588:	4628      	mov	r0, r5
 800558a:	47b0      	blx	r6
 800558c:	2800      	cmp	r0, #0
 800558e:	dc07      	bgt.n	80055a0 <__sflush_r+0x104>
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	f04f 30ff 	mov.w	r0, #4294967295
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	4407      	add	r7, r0
 80055a2:	eba8 0800 	sub.w	r8, r8, r0
 80055a6:	e7e8      	b.n	800557a <__sflush_r+0xde>
 80055a8:	20400001 	.word	0x20400001

080055ac <_fflush_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	690b      	ldr	r3, [r1, #16]
 80055b0:	4605      	mov	r5, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	b1db      	cbz	r3, 80055ee <_fflush_r+0x42>
 80055b6:	b118      	cbz	r0, 80055c0 <_fflush_r+0x14>
 80055b8:	6983      	ldr	r3, [r0, #24]
 80055ba:	b90b      	cbnz	r3, 80055c0 <_fflush_r+0x14>
 80055bc:	f000 f860 	bl	8005680 <__sinit>
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <_fflush_r+0x48>)
 80055c2:	429c      	cmp	r4, r3
 80055c4:	d109      	bne.n	80055da <_fflush_r+0x2e>
 80055c6:	686c      	ldr	r4, [r5, #4]
 80055c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055cc:	b17b      	cbz	r3, 80055ee <_fflush_r+0x42>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d6:	f7ff bf61 	b.w	800549c <__sflush_r>
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <_fflush_r+0x4c>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d101      	bne.n	80055e4 <_fflush_r+0x38>
 80055e0:	68ac      	ldr	r4, [r5, #8]
 80055e2:	e7f1      	b.n	80055c8 <_fflush_r+0x1c>
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <_fflush_r+0x50>)
 80055e6:	429c      	cmp	r4, r3
 80055e8:	bf08      	it	eq
 80055ea:	68ec      	ldreq	r4, [r5, #12]
 80055ec:	e7ec      	b.n	80055c8 <_fflush_r+0x1c>
 80055ee:	2000      	movs	r0, #0
 80055f0:	bd38      	pop	{r3, r4, r5, pc}
 80055f2:	bf00      	nop
 80055f4:	080062d4 	.word	0x080062d4
 80055f8:	080062f4 	.word	0x080062f4
 80055fc:	080062b4 	.word	0x080062b4

08005600 <_cleanup_r>:
 8005600:	4901      	ldr	r1, [pc, #4]	; (8005608 <_cleanup_r+0x8>)
 8005602:	f000 b8a9 	b.w	8005758 <_fwalk_reent>
 8005606:	bf00      	nop
 8005608:	080055ad 	.word	0x080055ad

0800560c <std.isra.0>:
 800560c:	2300      	movs	r3, #0
 800560e:	b510      	push	{r4, lr}
 8005610:	4604      	mov	r4, r0
 8005612:	6003      	str	r3, [r0, #0]
 8005614:	6043      	str	r3, [r0, #4]
 8005616:	6083      	str	r3, [r0, #8]
 8005618:	8181      	strh	r1, [r0, #12]
 800561a:	6643      	str	r3, [r0, #100]	; 0x64
 800561c:	81c2      	strh	r2, [r0, #14]
 800561e:	6103      	str	r3, [r0, #16]
 8005620:	6143      	str	r3, [r0, #20]
 8005622:	6183      	str	r3, [r0, #24]
 8005624:	4619      	mov	r1, r3
 8005626:	2208      	movs	r2, #8
 8005628:	305c      	adds	r0, #92	; 0x5c
 800562a:	f7ff fdf3 	bl	8005214 <memset>
 800562e:	4b05      	ldr	r3, [pc, #20]	; (8005644 <std.isra.0+0x38>)
 8005630:	6263      	str	r3, [r4, #36]	; 0x24
 8005632:	4b05      	ldr	r3, [pc, #20]	; (8005648 <std.isra.0+0x3c>)
 8005634:	62a3      	str	r3, [r4, #40]	; 0x28
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <std.isra.0+0x40>)
 8005638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <std.isra.0+0x44>)
 800563c:	6224      	str	r4, [r4, #32]
 800563e:	6323      	str	r3, [r4, #48]	; 0x30
 8005640:	bd10      	pop	{r4, pc}
 8005642:	bf00      	nop
 8005644:	08005f81 	.word	0x08005f81
 8005648:	08005fa3 	.word	0x08005fa3
 800564c:	08005fdb 	.word	0x08005fdb
 8005650:	08005fff 	.word	0x08005fff

08005654 <__sfmoreglue>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	1e4a      	subs	r2, r1, #1
 8005658:	2568      	movs	r5, #104	; 0x68
 800565a:	4355      	muls	r5, r2
 800565c:	460e      	mov	r6, r1
 800565e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005662:	f000 f949 	bl	80058f8 <_malloc_r>
 8005666:	4604      	mov	r4, r0
 8005668:	b140      	cbz	r0, 800567c <__sfmoreglue+0x28>
 800566a:	2100      	movs	r1, #0
 800566c:	e880 0042 	stmia.w	r0, {r1, r6}
 8005670:	300c      	adds	r0, #12
 8005672:	60a0      	str	r0, [r4, #8]
 8005674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005678:	f7ff fdcc 	bl	8005214 <memset>
 800567c:	4620      	mov	r0, r4
 800567e:	bd70      	pop	{r4, r5, r6, pc}

08005680 <__sinit>:
 8005680:	6983      	ldr	r3, [r0, #24]
 8005682:	b510      	push	{r4, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	bb33      	cbnz	r3, 80056d6 <__sinit+0x56>
 8005688:	6483      	str	r3, [r0, #72]	; 0x48
 800568a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800568c:	6503      	str	r3, [r0, #80]	; 0x50
 800568e:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <__sinit+0x58>)
 8005690:	4a12      	ldr	r2, [pc, #72]	; (80056dc <__sinit+0x5c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6282      	str	r2, [r0, #40]	; 0x28
 8005696:	4298      	cmp	r0, r3
 8005698:	bf04      	itt	eq
 800569a:	2301      	moveq	r3, #1
 800569c:	6183      	streq	r3, [r0, #24]
 800569e:	f000 f81f 	bl	80056e0 <__sfp>
 80056a2:	6060      	str	r0, [r4, #4]
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 f81b 	bl	80056e0 <__sfp>
 80056aa:	60a0      	str	r0, [r4, #8]
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 f817 	bl	80056e0 <__sfp>
 80056b2:	2200      	movs	r2, #0
 80056b4:	60e0      	str	r0, [r4, #12]
 80056b6:	2104      	movs	r1, #4
 80056b8:	6860      	ldr	r0, [r4, #4]
 80056ba:	f7ff ffa7 	bl	800560c <std.isra.0>
 80056be:	2201      	movs	r2, #1
 80056c0:	2109      	movs	r1, #9
 80056c2:	68a0      	ldr	r0, [r4, #8]
 80056c4:	f7ff ffa2 	bl	800560c <std.isra.0>
 80056c8:	2202      	movs	r2, #2
 80056ca:	2112      	movs	r1, #18
 80056cc:	68e0      	ldr	r0, [r4, #12]
 80056ce:	f7ff ff9d 	bl	800560c <std.isra.0>
 80056d2:	2301      	movs	r3, #1
 80056d4:	61a3      	str	r3, [r4, #24]
 80056d6:	bd10      	pop	{r4, pc}
 80056d8:	080062b0 	.word	0x080062b0
 80056dc:	08005601 	.word	0x08005601

080056e0 <__sfp>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <__sfp+0x74>)
 80056e4:	681e      	ldr	r6, [r3, #0]
 80056e6:	69b3      	ldr	r3, [r6, #24]
 80056e8:	4607      	mov	r7, r0
 80056ea:	b913      	cbnz	r3, 80056f2 <__sfp+0x12>
 80056ec:	4630      	mov	r0, r6
 80056ee:	f7ff ffc7 	bl	8005680 <__sinit>
 80056f2:	3648      	adds	r6, #72	; 0x48
 80056f4:	68b4      	ldr	r4, [r6, #8]
 80056f6:	6873      	ldr	r3, [r6, #4]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	d503      	bpl.n	8005704 <__sfp+0x24>
 80056fc:	6833      	ldr	r3, [r6, #0]
 80056fe:	b133      	cbz	r3, 800570e <__sfp+0x2e>
 8005700:	6836      	ldr	r6, [r6, #0]
 8005702:	e7f7      	b.n	80056f4 <__sfp+0x14>
 8005704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005708:	b16d      	cbz	r5, 8005726 <__sfp+0x46>
 800570a:	3468      	adds	r4, #104	; 0x68
 800570c:	e7f4      	b.n	80056f8 <__sfp+0x18>
 800570e:	2104      	movs	r1, #4
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff ff9f 	bl	8005654 <__sfmoreglue>
 8005716:	6030      	str	r0, [r6, #0]
 8005718:	2800      	cmp	r0, #0
 800571a:	d1f1      	bne.n	8005700 <__sfp+0x20>
 800571c:	230c      	movs	r3, #12
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	4604      	mov	r4, r0
 8005722:	4620      	mov	r0, r4
 8005724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800572a:	81e3      	strh	r3, [r4, #14]
 800572c:	2301      	movs	r3, #1
 800572e:	81a3      	strh	r3, [r4, #12]
 8005730:	6665      	str	r5, [r4, #100]	; 0x64
 8005732:	6025      	str	r5, [r4, #0]
 8005734:	60a5      	str	r5, [r4, #8]
 8005736:	6065      	str	r5, [r4, #4]
 8005738:	6125      	str	r5, [r4, #16]
 800573a:	6165      	str	r5, [r4, #20]
 800573c:	61a5      	str	r5, [r4, #24]
 800573e:	2208      	movs	r2, #8
 8005740:	4629      	mov	r1, r5
 8005742:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005746:	f7ff fd65 	bl	8005214 <memset>
 800574a:	6365      	str	r5, [r4, #52]	; 0x34
 800574c:	63a5      	str	r5, [r4, #56]	; 0x38
 800574e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005750:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005752:	e7e6      	b.n	8005722 <__sfp+0x42>
 8005754:	080062b0 	.word	0x080062b0

08005758 <_fwalk_reent>:
 8005758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800575c:	4680      	mov	r8, r0
 800575e:	4689      	mov	r9, r1
 8005760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005764:	2600      	movs	r6, #0
 8005766:	b914      	cbnz	r4, 800576e <_fwalk_reent+0x16>
 8005768:	4630      	mov	r0, r6
 800576a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576e:	68a5      	ldr	r5, [r4, #8]
 8005770:	6867      	ldr	r7, [r4, #4]
 8005772:	3f01      	subs	r7, #1
 8005774:	d501      	bpl.n	800577a <_fwalk_reent+0x22>
 8005776:	6824      	ldr	r4, [r4, #0]
 8005778:	e7f5      	b.n	8005766 <_fwalk_reent+0xe>
 800577a:	89ab      	ldrh	r3, [r5, #12]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d907      	bls.n	8005790 <_fwalk_reent+0x38>
 8005780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005784:	3301      	adds	r3, #1
 8005786:	d003      	beq.n	8005790 <_fwalk_reent+0x38>
 8005788:	4629      	mov	r1, r5
 800578a:	4640      	mov	r0, r8
 800578c:	47c8      	blx	r9
 800578e:	4306      	orrs	r6, r0
 8005790:	3568      	adds	r5, #104	; 0x68
 8005792:	e7ee      	b.n	8005772 <_fwalk_reent+0x1a>

08005794 <__swhatbuf_r>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	460e      	mov	r6, r1
 8005798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579c:	2900      	cmp	r1, #0
 800579e:	b090      	sub	sp, #64	; 0x40
 80057a0:	4614      	mov	r4, r2
 80057a2:	461d      	mov	r5, r3
 80057a4:	da07      	bge.n	80057b6 <__swhatbuf_r+0x22>
 80057a6:	2300      	movs	r3, #0
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	89b3      	ldrh	r3, [r6, #12]
 80057ac:	061a      	lsls	r2, r3, #24
 80057ae:	d410      	bmi.n	80057d2 <__swhatbuf_r+0x3e>
 80057b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b4:	e00e      	b.n	80057d4 <__swhatbuf_r+0x40>
 80057b6:	aa01      	add	r2, sp, #4
 80057b8:	f000 fc48 	bl	800604c <_fstat_r>
 80057bc:	2800      	cmp	r0, #0
 80057be:	dbf2      	blt.n	80057a6 <__swhatbuf_r+0x12>
 80057c0:	9a02      	ldr	r2, [sp, #8]
 80057c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057ca:	425a      	negs	r2, r3
 80057cc:	415a      	adcs	r2, r3
 80057ce:	602a      	str	r2, [r5, #0]
 80057d0:	e7ee      	b.n	80057b0 <__swhatbuf_r+0x1c>
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	2000      	movs	r0, #0
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	b010      	add	sp, #64	; 0x40
 80057da:	bd70      	pop	{r4, r5, r6, pc}

080057dc <__smakebuf_r>:
 80057dc:	898b      	ldrh	r3, [r1, #12]
 80057de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057e0:	079d      	lsls	r5, r3, #30
 80057e2:	4606      	mov	r6, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	d507      	bpl.n	80057f8 <__smakebuf_r+0x1c>
 80057e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	6123      	str	r3, [r4, #16]
 80057f0:	2301      	movs	r3, #1
 80057f2:	6163      	str	r3, [r4, #20]
 80057f4:	b002      	add	sp, #8
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	ab01      	add	r3, sp, #4
 80057fa:	466a      	mov	r2, sp
 80057fc:	f7ff ffca 	bl	8005794 <__swhatbuf_r>
 8005800:	9900      	ldr	r1, [sp, #0]
 8005802:	4605      	mov	r5, r0
 8005804:	4630      	mov	r0, r6
 8005806:	f000 f877 	bl	80058f8 <_malloc_r>
 800580a:	b948      	cbnz	r0, 8005820 <__smakebuf_r+0x44>
 800580c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005810:	059a      	lsls	r2, r3, #22
 8005812:	d4ef      	bmi.n	80057f4 <__smakebuf_r+0x18>
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	f043 0302 	orr.w	r3, r3, #2
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	e7e3      	b.n	80057e8 <__smakebuf_r+0xc>
 8005820:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <__smakebuf_r+0x7c>)
 8005822:	62b3      	str	r3, [r6, #40]	; 0x28
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	6020      	str	r0, [r4, #0]
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	81a3      	strh	r3, [r4, #12]
 800582e:	9b00      	ldr	r3, [sp, #0]
 8005830:	6163      	str	r3, [r4, #20]
 8005832:	9b01      	ldr	r3, [sp, #4]
 8005834:	6120      	str	r0, [r4, #16]
 8005836:	b15b      	cbz	r3, 8005850 <__smakebuf_r+0x74>
 8005838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800583c:	4630      	mov	r0, r6
 800583e:	f000 fc17 	bl	8006070 <_isatty_r>
 8005842:	b128      	cbz	r0, 8005850 <__smakebuf_r+0x74>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	f043 0301 	orr.w	r3, r3, #1
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	431d      	orrs	r5, r3
 8005854:	81a5      	strh	r5, [r4, #12]
 8005856:	e7cd      	b.n	80057f4 <__smakebuf_r+0x18>
 8005858:	08005601 	.word	0x08005601

0800585c <_free_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4605      	mov	r5, r0
 8005860:	2900      	cmp	r1, #0
 8005862:	d045      	beq.n	80058f0 <_free_r+0x94>
 8005864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005868:	1f0c      	subs	r4, r1, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	bfb8      	it	lt
 800586e:	18e4      	addlt	r4, r4, r3
 8005870:	f000 fc20 	bl	80060b4 <__malloc_lock>
 8005874:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <_free_r+0x98>)
 8005876:	6813      	ldr	r3, [r2, #0]
 8005878:	4610      	mov	r0, r2
 800587a:	b933      	cbnz	r3, 800588a <_free_r+0x2e>
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	6014      	str	r4, [r2, #0]
 8005880:	4628      	mov	r0, r5
 8005882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005886:	f000 bc16 	b.w	80060b6 <__malloc_unlock>
 800588a:	42a3      	cmp	r3, r4
 800588c:	d90c      	bls.n	80058a8 <_free_r+0x4c>
 800588e:	6821      	ldr	r1, [r4, #0]
 8005890:	1862      	adds	r2, r4, r1
 8005892:	4293      	cmp	r3, r2
 8005894:	bf04      	itt	eq
 8005896:	681a      	ldreq	r2, [r3, #0]
 8005898:	685b      	ldreq	r3, [r3, #4]
 800589a:	6063      	str	r3, [r4, #4]
 800589c:	bf04      	itt	eq
 800589e:	1852      	addeq	r2, r2, r1
 80058a0:	6022      	streq	r2, [r4, #0]
 80058a2:	6004      	str	r4, [r0, #0]
 80058a4:	e7ec      	b.n	8005880 <_free_r+0x24>
 80058a6:	4613      	mov	r3, r2
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	b10a      	cbz	r2, 80058b0 <_free_r+0x54>
 80058ac:	42a2      	cmp	r2, r4
 80058ae:	d9fa      	bls.n	80058a6 <_free_r+0x4a>
 80058b0:	6819      	ldr	r1, [r3, #0]
 80058b2:	1858      	adds	r0, r3, r1
 80058b4:	42a0      	cmp	r0, r4
 80058b6:	d10b      	bne.n	80058d0 <_free_r+0x74>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	4401      	add	r1, r0
 80058bc:	1858      	adds	r0, r3, r1
 80058be:	4282      	cmp	r2, r0
 80058c0:	6019      	str	r1, [r3, #0]
 80058c2:	d1dd      	bne.n	8005880 <_free_r+0x24>
 80058c4:	6810      	ldr	r0, [r2, #0]
 80058c6:	6852      	ldr	r2, [r2, #4]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	4401      	add	r1, r0
 80058cc:	6019      	str	r1, [r3, #0]
 80058ce:	e7d7      	b.n	8005880 <_free_r+0x24>
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x7c>
 80058d2:	230c      	movs	r3, #12
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	e7d3      	b.n	8005880 <_free_r+0x24>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	1821      	adds	r1, r4, r0
 80058dc:	428a      	cmp	r2, r1
 80058de:	bf04      	itt	eq
 80058e0:	6811      	ldreq	r1, [r2, #0]
 80058e2:	6852      	ldreq	r2, [r2, #4]
 80058e4:	6062      	str	r2, [r4, #4]
 80058e6:	bf04      	itt	eq
 80058e8:	1809      	addeq	r1, r1, r0
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	605c      	str	r4, [r3, #4]
 80058ee:	e7c7      	b.n	8005880 <_free_r+0x24>
 80058f0:	bd38      	pop	{r3, r4, r5, pc}
 80058f2:	bf00      	nop
 80058f4:	2000042c 	.word	0x2000042c

080058f8 <_malloc_r>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	1ccd      	adds	r5, r1, #3
 80058fc:	f025 0503 	bic.w	r5, r5, #3
 8005900:	3508      	adds	r5, #8
 8005902:	2d0c      	cmp	r5, #12
 8005904:	bf38      	it	cc
 8005906:	250c      	movcc	r5, #12
 8005908:	2d00      	cmp	r5, #0
 800590a:	4606      	mov	r6, r0
 800590c:	db01      	blt.n	8005912 <_malloc_r+0x1a>
 800590e:	42a9      	cmp	r1, r5
 8005910:	d903      	bls.n	800591a <_malloc_r+0x22>
 8005912:	230c      	movs	r3, #12
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	2000      	movs	r0, #0
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	f000 fbcb 	bl	80060b4 <__malloc_lock>
 800591e:	4a23      	ldr	r2, [pc, #140]	; (80059ac <_malloc_r+0xb4>)
 8005920:	6814      	ldr	r4, [r2, #0]
 8005922:	4621      	mov	r1, r4
 8005924:	b991      	cbnz	r1, 800594c <_malloc_r+0x54>
 8005926:	4c22      	ldr	r4, [pc, #136]	; (80059b0 <_malloc_r+0xb8>)
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	b91b      	cbnz	r3, 8005934 <_malloc_r+0x3c>
 800592c:	4630      	mov	r0, r6
 800592e:	f000 fb17 	bl	8005f60 <_sbrk_r>
 8005932:	6020      	str	r0, [r4, #0]
 8005934:	4629      	mov	r1, r5
 8005936:	4630      	mov	r0, r6
 8005938:	f000 fb12 	bl	8005f60 <_sbrk_r>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d126      	bne.n	800598e <_malloc_r+0x96>
 8005940:	230c      	movs	r3, #12
 8005942:	6033      	str	r3, [r6, #0]
 8005944:	4630      	mov	r0, r6
 8005946:	f000 fbb6 	bl	80060b6 <__malloc_unlock>
 800594a:	e7e4      	b.n	8005916 <_malloc_r+0x1e>
 800594c:	680b      	ldr	r3, [r1, #0]
 800594e:	1b5b      	subs	r3, r3, r5
 8005950:	d41a      	bmi.n	8005988 <_malloc_r+0x90>
 8005952:	2b0b      	cmp	r3, #11
 8005954:	d90f      	bls.n	8005976 <_malloc_r+0x7e>
 8005956:	600b      	str	r3, [r1, #0]
 8005958:	50cd      	str	r5, [r1, r3]
 800595a:	18cc      	adds	r4, r1, r3
 800595c:	4630      	mov	r0, r6
 800595e:	f000 fbaa 	bl	80060b6 <__malloc_unlock>
 8005962:	f104 000b 	add.w	r0, r4, #11
 8005966:	1d23      	adds	r3, r4, #4
 8005968:	f020 0007 	bic.w	r0, r0, #7
 800596c:	1ac3      	subs	r3, r0, r3
 800596e:	d01b      	beq.n	80059a8 <_malloc_r+0xb0>
 8005970:	425a      	negs	r2, r3
 8005972:	50e2      	str	r2, [r4, r3]
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	428c      	cmp	r4, r1
 8005978:	bf0d      	iteet	eq
 800597a:	6863      	ldreq	r3, [r4, #4]
 800597c:	684b      	ldrne	r3, [r1, #4]
 800597e:	6063      	strne	r3, [r4, #4]
 8005980:	6013      	streq	r3, [r2, #0]
 8005982:	bf18      	it	ne
 8005984:	460c      	movne	r4, r1
 8005986:	e7e9      	b.n	800595c <_malloc_r+0x64>
 8005988:	460c      	mov	r4, r1
 800598a:	6849      	ldr	r1, [r1, #4]
 800598c:	e7ca      	b.n	8005924 <_malloc_r+0x2c>
 800598e:	1cc4      	adds	r4, r0, #3
 8005990:	f024 0403 	bic.w	r4, r4, #3
 8005994:	42a0      	cmp	r0, r4
 8005996:	d005      	beq.n	80059a4 <_malloc_r+0xac>
 8005998:	1a21      	subs	r1, r4, r0
 800599a:	4630      	mov	r0, r6
 800599c:	f000 fae0 	bl	8005f60 <_sbrk_r>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d0cd      	beq.n	8005940 <_malloc_r+0x48>
 80059a4:	6025      	str	r5, [r4, #0]
 80059a6:	e7d9      	b.n	800595c <_malloc_r+0x64>
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	bf00      	nop
 80059ac:	2000042c 	.word	0x2000042c
 80059b0:	20000430 	.word	0x20000430

080059b4 <__sfputc_r>:
 80059b4:	6893      	ldr	r3, [r2, #8]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	b410      	push	{r4}
 80059bc:	6093      	str	r3, [r2, #8]
 80059be:	da09      	bge.n	80059d4 <__sfputc_r+0x20>
 80059c0:	6994      	ldr	r4, [r2, #24]
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	db02      	blt.n	80059cc <__sfputc_r+0x18>
 80059c6:	b2cb      	uxtb	r3, r1
 80059c8:	2b0a      	cmp	r3, #10
 80059ca:	d103      	bne.n	80059d4 <__sfputc_r+0x20>
 80059cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d0:	f7ff bca4 	b.w	800531c <__swbuf_r>
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	1c58      	adds	r0, r3, #1
 80059d8:	6010      	str	r0, [r2, #0]
 80059da:	7019      	strb	r1, [r3, #0]
 80059dc:	b2c8      	uxtb	r0, r1
 80059de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <__sfputs_r>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	4606      	mov	r6, r0
 80059e8:	460f      	mov	r7, r1
 80059ea:	4614      	mov	r4, r2
 80059ec:	18d5      	adds	r5, r2, r3
 80059ee:	42ac      	cmp	r4, r5
 80059f0:	d101      	bne.n	80059f6 <__sfputs_r+0x12>
 80059f2:	2000      	movs	r0, #0
 80059f4:	e007      	b.n	8005a06 <__sfputs_r+0x22>
 80059f6:	463a      	mov	r2, r7
 80059f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7ff ffd9 	bl	80059b4 <__sfputc_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	d1f3      	bne.n	80059ee <__sfputs_r+0xa>
 8005a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a08 <_vfiprintf_r>:
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	b09d      	sub	sp, #116	; 0x74
 8005a0e:	460c      	mov	r4, r1
 8005a10:	4617      	mov	r7, r2
 8005a12:	9303      	str	r3, [sp, #12]
 8005a14:	4606      	mov	r6, r0
 8005a16:	b118      	cbz	r0, 8005a20 <_vfiprintf_r+0x18>
 8005a18:	6983      	ldr	r3, [r0, #24]
 8005a1a:	b90b      	cbnz	r3, 8005a20 <_vfiprintf_r+0x18>
 8005a1c:	f7ff fe30 	bl	8005680 <__sinit>
 8005a20:	4b7c      	ldr	r3, [pc, #496]	; (8005c14 <_vfiprintf_r+0x20c>)
 8005a22:	429c      	cmp	r4, r3
 8005a24:	d157      	bne.n	8005ad6 <_vfiprintf_r+0xce>
 8005a26:	6874      	ldr	r4, [r6, #4]
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	0718      	lsls	r0, r3, #28
 8005a2c:	d55d      	bpl.n	8005aea <_vfiprintf_r+0xe2>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05a      	beq.n	8005aea <_vfiprintf_r+0xe2>
 8005a34:	2300      	movs	r3, #0
 8005a36:	9309      	str	r3, [sp, #36]	; 0x24
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a3e:	2330      	movs	r3, #48	; 0x30
 8005a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a44:	f04f 0b01 	mov.w	fp, #1
 8005a48:	46b8      	mov	r8, r7
 8005a4a:	4645      	mov	r5, r8
 8005a4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d155      	bne.n	8005b00 <_vfiprintf_r+0xf8>
 8005a54:	ebb8 0a07 	subs.w	sl, r8, r7
 8005a58:	d00b      	beq.n	8005a72 <_vfiprintf_r+0x6a>
 8005a5a:	4653      	mov	r3, sl
 8005a5c:	463a      	mov	r2, r7
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff ffbf 	bl	80059e4 <__sfputs_r>
 8005a66:	3001      	adds	r0, #1
 8005a68:	f000 80c4 	beq.w	8005bf4 <_vfiprintf_r+0x1ec>
 8005a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6e:	4453      	add	r3, sl
 8005a70:	9309      	str	r3, [sp, #36]	; 0x24
 8005a72:	f898 3000 	ldrb.w	r3, [r8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80bc 	beq.w	8005bf4 <_vfiprintf_r+0x1ec>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	9307      	str	r3, [sp, #28]
 8005a86:	9205      	str	r2, [sp, #20]
 8005a88:	9306      	str	r3, [sp, #24]
 8005a8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a90:	2205      	movs	r2, #5
 8005a92:	7829      	ldrb	r1, [r5, #0]
 8005a94:	4860      	ldr	r0, [pc, #384]	; (8005c18 <_vfiprintf_r+0x210>)
 8005a96:	f7fa fb73 	bl	8000180 <memchr>
 8005a9a:	f105 0801 	add.w	r8, r5, #1
 8005a9e:	9b04      	ldr	r3, [sp, #16]
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d131      	bne.n	8005b08 <_vfiprintf_r+0x100>
 8005aa4:	06d9      	lsls	r1, r3, #27
 8005aa6:	bf44      	itt	mi
 8005aa8:	2220      	movmi	r2, #32
 8005aaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005aae:	071a      	lsls	r2, r3, #28
 8005ab0:	bf44      	itt	mi
 8005ab2:	222b      	movmi	r2, #43	; 0x2b
 8005ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ab8:	782a      	ldrb	r2, [r5, #0]
 8005aba:	2a2a      	cmp	r2, #42	; 0x2a
 8005abc:	d02c      	beq.n	8005b18 <_vfiprintf_r+0x110>
 8005abe:	9a07      	ldr	r2, [sp, #28]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	200a      	movs	r0, #10
 8005ac4:	46a8      	mov	r8, r5
 8005ac6:	3501      	adds	r5, #1
 8005ac8:	f898 3000 	ldrb.w	r3, [r8]
 8005acc:	3b30      	subs	r3, #48	; 0x30
 8005ace:	2b09      	cmp	r3, #9
 8005ad0:	d96d      	bls.n	8005bae <_vfiprintf_r+0x1a6>
 8005ad2:	b371      	cbz	r1, 8005b32 <_vfiprintf_r+0x12a>
 8005ad4:	e026      	b.n	8005b24 <_vfiprintf_r+0x11c>
 8005ad6:	4b51      	ldr	r3, [pc, #324]	; (8005c1c <_vfiprintf_r+0x214>)
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d101      	bne.n	8005ae0 <_vfiprintf_r+0xd8>
 8005adc:	68b4      	ldr	r4, [r6, #8]
 8005ade:	e7a3      	b.n	8005a28 <_vfiprintf_r+0x20>
 8005ae0:	4b4f      	ldr	r3, [pc, #316]	; (8005c20 <_vfiprintf_r+0x218>)
 8005ae2:	429c      	cmp	r4, r3
 8005ae4:	bf08      	it	eq
 8005ae6:	68f4      	ldreq	r4, [r6, #12]
 8005ae8:	e79e      	b.n	8005a28 <_vfiprintf_r+0x20>
 8005aea:	4621      	mov	r1, r4
 8005aec:	4630      	mov	r0, r6
 8005aee:	f7ff fc67 	bl	80053c0 <__swsetup_r>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d09e      	beq.n	8005a34 <_vfiprintf_r+0x2c>
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	b01d      	add	sp, #116	; 0x74
 8005afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b00:	2b25      	cmp	r3, #37	; 0x25
 8005b02:	d0a7      	beq.n	8005a54 <_vfiprintf_r+0x4c>
 8005b04:	46a8      	mov	r8, r5
 8005b06:	e7a0      	b.n	8005a4a <_vfiprintf_r+0x42>
 8005b08:	4a43      	ldr	r2, [pc, #268]	; (8005c18 <_vfiprintf_r+0x210>)
 8005b0a:	1a80      	subs	r0, r0, r2
 8005b0c:	fa0b f000 	lsl.w	r0, fp, r0
 8005b10:	4318      	orrs	r0, r3
 8005b12:	9004      	str	r0, [sp, #16]
 8005b14:	4645      	mov	r5, r8
 8005b16:	e7bb      	b.n	8005a90 <_vfiprintf_r+0x88>
 8005b18:	9a03      	ldr	r2, [sp, #12]
 8005b1a:	1d11      	adds	r1, r2, #4
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	9103      	str	r1, [sp, #12]
 8005b20:	2a00      	cmp	r2, #0
 8005b22:	db01      	blt.n	8005b28 <_vfiprintf_r+0x120>
 8005b24:	9207      	str	r2, [sp, #28]
 8005b26:	e004      	b.n	8005b32 <_vfiprintf_r+0x12a>
 8005b28:	4252      	negs	r2, r2
 8005b2a:	f043 0302 	orr.w	r3, r3, #2
 8005b2e:	9207      	str	r2, [sp, #28]
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	f898 3000 	ldrb.w	r3, [r8]
 8005b36:	2b2e      	cmp	r3, #46	; 0x2e
 8005b38:	d110      	bne.n	8005b5c <_vfiprintf_r+0x154>
 8005b3a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b40:	f108 0101 	add.w	r1, r8, #1
 8005b44:	d137      	bne.n	8005bb6 <_vfiprintf_r+0x1ae>
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	9203      	str	r2, [sp, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bfb8      	it	lt
 8005b52:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b56:	f108 0802 	add.w	r8, r8, #2
 8005b5a:	9305      	str	r3, [sp, #20]
 8005b5c:	4d31      	ldr	r5, [pc, #196]	; (8005c24 <_vfiprintf_r+0x21c>)
 8005b5e:	f898 1000 	ldrb.w	r1, [r8]
 8005b62:	2203      	movs	r2, #3
 8005b64:	4628      	mov	r0, r5
 8005b66:	f7fa fb0b 	bl	8000180 <memchr>
 8005b6a:	b140      	cbz	r0, 8005b7e <_vfiprintf_r+0x176>
 8005b6c:	2340      	movs	r3, #64	; 0x40
 8005b6e:	1b40      	subs	r0, r0, r5
 8005b70:	fa03 f000 	lsl.w	r0, r3, r0
 8005b74:	9b04      	ldr	r3, [sp, #16]
 8005b76:	4303      	orrs	r3, r0
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	f898 1000 	ldrb.w	r1, [r8]
 8005b82:	4829      	ldr	r0, [pc, #164]	; (8005c28 <_vfiprintf_r+0x220>)
 8005b84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b88:	2206      	movs	r2, #6
 8005b8a:	f108 0701 	add.w	r7, r8, #1
 8005b8e:	f7fa faf7 	bl	8000180 <memchr>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d034      	beq.n	8005c00 <_vfiprintf_r+0x1f8>
 8005b96:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <_vfiprintf_r+0x224>)
 8005b98:	bb03      	cbnz	r3, 8005bdc <_vfiprintf_r+0x1d4>
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	3307      	adds	r3, #7
 8005b9e:	f023 0307 	bic.w	r3, r3, #7
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	9303      	str	r3, [sp, #12]
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	444b      	add	r3, r9
 8005baa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bac:	e74c      	b.n	8005a48 <_vfiprintf_r+0x40>
 8005bae:	fb00 3202 	mla	r2, r0, r2, r3
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	e786      	b.n	8005ac4 <_vfiprintf_r+0xbc>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	250a      	movs	r5, #10
 8005bbe:	4688      	mov	r8, r1
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	f898 2000 	ldrb.w	r2, [r8]
 8005bc6:	3a30      	subs	r2, #48	; 0x30
 8005bc8:	2a09      	cmp	r2, #9
 8005bca:	d903      	bls.n	8005bd4 <_vfiprintf_r+0x1cc>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0c5      	beq.n	8005b5c <_vfiprintf_r+0x154>
 8005bd0:	9005      	str	r0, [sp, #20]
 8005bd2:	e7c3      	b.n	8005b5c <_vfiprintf_r+0x154>
 8005bd4:	fb05 2000 	mla	r0, r5, r0, r2
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e7f0      	b.n	8005bbe <_vfiprintf_r+0x1b6>
 8005bdc:	ab03      	add	r3, sp, #12
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	4622      	mov	r2, r4
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <_vfiprintf_r+0x228>)
 8005be4:	a904      	add	r1, sp, #16
 8005be6:	4630      	mov	r0, r6
 8005be8:	f3af 8000 	nop.w
 8005bec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005bf0:	4681      	mov	r9, r0
 8005bf2:	d1d8      	bne.n	8005ba6 <_vfiprintf_r+0x19e>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	065b      	lsls	r3, r3, #25
 8005bf8:	f53f af7d 	bmi.w	8005af6 <_vfiprintf_r+0xee>
 8005bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bfe:	e77c      	b.n	8005afa <_vfiprintf_r+0xf2>
 8005c00:	ab03      	add	r3, sp, #12
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	4622      	mov	r2, r4
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <_vfiprintf_r+0x228>)
 8005c08:	a904      	add	r1, sp, #16
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f000 f888 	bl	8005d20 <_printf_i>
 8005c10:	e7ec      	b.n	8005bec <_vfiprintf_r+0x1e4>
 8005c12:	bf00      	nop
 8005c14:	080062d4 	.word	0x080062d4
 8005c18:	08006314 	.word	0x08006314
 8005c1c:	080062f4 	.word	0x080062f4
 8005c20:	080062b4 	.word	0x080062b4
 8005c24:	0800631a 	.word	0x0800631a
 8005c28:	0800631e 	.word	0x0800631e
 8005c2c:	00000000 	.word	0x00000000
 8005c30:	080059e5 	.word	0x080059e5

08005c34 <_printf_common>:
 8005c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c38:	4691      	mov	r9, r2
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	688a      	ldr	r2, [r1, #8]
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	bfb8      	it	lt
 8005c48:	4613      	movlt	r3, r2
 8005c4a:	f8c9 3000 	str.w	r3, [r9]
 8005c4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c52:	4606      	mov	r6, r0
 8005c54:	460c      	mov	r4, r1
 8005c56:	b112      	cbz	r2, 8005c5e <_printf_common+0x2a>
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f8c9 3000 	str.w	r3, [r9]
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	0699      	lsls	r1, r3, #26
 8005c62:	bf42      	ittt	mi
 8005c64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c68:	3302      	addmi	r3, #2
 8005c6a:	f8c9 3000 	strmi.w	r3, [r9]
 8005c6e:	6825      	ldr	r5, [r4, #0]
 8005c70:	f015 0506 	ands.w	r5, r5, #6
 8005c74:	d107      	bne.n	8005c86 <_printf_common+0x52>
 8005c76:	f104 0a19 	add.w	sl, r4, #25
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	429d      	cmp	r5, r3
 8005c84:	db29      	blt.n	8005cda <_printf_common+0xa6>
 8005c86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	3300      	adds	r3, #0
 8005c8e:	bf18      	it	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	0692      	lsls	r2, r2, #26
 8005c94:	d42e      	bmi.n	8005cf4 <_printf_common+0xc0>
 8005c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	47c0      	blx	r8
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d021      	beq.n	8005ce8 <_printf_common+0xb4>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	68e5      	ldr	r5, [r4, #12]
 8005ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8005cac:	f003 0306 	and.w	r3, r3, #6
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	bf08      	it	eq
 8005cb4:	1aad      	subeq	r5, r5, r2
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	6922      	ldr	r2, [r4, #16]
 8005cba:	bf0c      	ite	eq
 8005cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc0:	2500      	movne	r5, #0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	bfc4      	itt	gt
 8005cc6:	1a9b      	subgt	r3, r3, r2
 8005cc8:	18ed      	addgt	r5, r5, r3
 8005cca:	f04f 0900 	mov.w	r9, #0
 8005cce:	341a      	adds	r4, #26
 8005cd0:	454d      	cmp	r5, r9
 8005cd2:	d11b      	bne.n	8005d0c <_printf_common+0xd8>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4652      	mov	r2, sl
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	47c0      	blx	r8
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d103      	bne.n	8005cf0 <_printf_common+0xbc>
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	e7c2      	b.n	8005c7a <_printf_common+0x46>
 8005cf4:	18e1      	adds	r1, r4, r3
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	2030      	movs	r0, #48	; 0x30
 8005cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cfe:	4422      	add	r2, r4
 8005d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d08:	3302      	adds	r3, #2
 8005d0a:	e7c4      	b.n	8005c96 <_printf_common+0x62>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4622      	mov	r2, r4
 8005d10:	4639      	mov	r1, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	47c0      	blx	r8
 8005d16:	3001      	adds	r0, #1
 8005d18:	d0e6      	beq.n	8005ce8 <_printf_common+0xb4>
 8005d1a:	f109 0901 	add.w	r9, r9, #1
 8005d1e:	e7d7      	b.n	8005cd0 <_printf_common+0x9c>

08005d20 <_printf_i>:
 8005d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d24:	4617      	mov	r7, r2
 8005d26:	7e0a      	ldrb	r2, [r1, #24]
 8005d28:	b085      	sub	sp, #20
 8005d2a:	2a6e      	cmp	r2, #110	; 0x6e
 8005d2c:	4698      	mov	r8, r3
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460c      	mov	r4, r1
 8005d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d34:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005d38:	f000 80bc 	beq.w	8005eb4 <_printf_i+0x194>
 8005d3c:	d81a      	bhi.n	8005d74 <_printf_i+0x54>
 8005d3e:	2a63      	cmp	r2, #99	; 0x63
 8005d40:	d02e      	beq.n	8005da0 <_printf_i+0x80>
 8005d42:	d80a      	bhi.n	8005d5a <_printf_i+0x3a>
 8005d44:	2a00      	cmp	r2, #0
 8005d46:	f000 80c8 	beq.w	8005eda <_printf_i+0x1ba>
 8005d4a:	2a58      	cmp	r2, #88	; 0x58
 8005d4c:	f000 808a 	beq.w	8005e64 <_printf_i+0x144>
 8005d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d54:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005d58:	e02a      	b.n	8005db0 <_printf_i+0x90>
 8005d5a:	2a64      	cmp	r2, #100	; 0x64
 8005d5c:	d001      	beq.n	8005d62 <_printf_i+0x42>
 8005d5e:	2a69      	cmp	r2, #105	; 0x69
 8005d60:	d1f6      	bne.n	8005d50 <_printf_i+0x30>
 8005d62:	6821      	ldr	r1, [r4, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005d6a:	d023      	beq.n	8005db4 <_printf_i+0x94>
 8005d6c:	1d11      	adds	r1, r2, #4
 8005d6e:	6019      	str	r1, [r3, #0]
 8005d70:	6813      	ldr	r3, [r2, #0]
 8005d72:	e027      	b.n	8005dc4 <_printf_i+0xa4>
 8005d74:	2a73      	cmp	r2, #115	; 0x73
 8005d76:	f000 80b4 	beq.w	8005ee2 <_printf_i+0x1c2>
 8005d7a:	d808      	bhi.n	8005d8e <_printf_i+0x6e>
 8005d7c:	2a6f      	cmp	r2, #111	; 0x6f
 8005d7e:	d02a      	beq.n	8005dd6 <_printf_i+0xb6>
 8005d80:	2a70      	cmp	r2, #112	; 0x70
 8005d82:	d1e5      	bne.n	8005d50 <_printf_i+0x30>
 8005d84:	680a      	ldr	r2, [r1, #0]
 8005d86:	f042 0220 	orr.w	r2, r2, #32
 8005d8a:	600a      	str	r2, [r1, #0]
 8005d8c:	e003      	b.n	8005d96 <_printf_i+0x76>
 8005d8e:	2a75      	cmp	r2, #117	; 0x75
 8005d90:	d021      	beq.n	8005dd6 <_printf_i+0xb6>
 8005d92:	2a78      	cmp	r2, #120	; 0x78
 8005d94:	d1dc      	bne.n	8005d50 <_printf_i+0x30>
 8005d96:	2278      	movs	r2, #120	; 0x78
 8005d98:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005d9c:	496e      	ldr	r1, [pc, #440]	; (8005f58 <_printf_i+0x238>)
 8005d9e:	e064      	b.n	8005e6a <_printf_i+0x14a>
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005da6:	1d11      	adds	r1, r2, #4
 8005da8:	6019      	str	r1, [r3, #0]
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0a3      	b.n	8005efc <_printf_i+0x1dc>
 8005db4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005db8:	f102 0104 	add.w	r1, r2, #4
 8005dbc:	6019      	str	r1, [r3, #0]
 8005dbe:	d0d7      	beq.n	8005d70 <_printf_i+0x50>
 8005dc0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da03      	bge.n	8005dd0 <_printf_i+0xb0>
 8005dc8:	222d      	movs	r2, #45	; 0x2d
 8005dca:	425b      	negs	r3, r3
 8005dcc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005dd0:	4962      	ldr	r1, [pc, #392]	; (8005f5c <_printf_i+0x23c>)
 8005dd2:	220a      	movs	r2, #10
 8005dd4:	e017      	b.n	8005e06 <_printf_i+0xe6>
 8005dd6:	6820      	ldr	r0, [r4, #0]
 8005dd8:	6819      	ldr	r1, [r3, #0]
 8005dda:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005dde:	d003      	beq.n	8005de8 <_printf_i+0xc8>
 8005de0:	1d08      	adds	r0, r1, #4
 8005de2:	6018      	str	r0, [r3, #0]
 8005de4:	680b      	ldr	r3, [r1, #0]
 8005de6:	e006      	b.n	8005df6 <_printf_i+0xd6>
 8005de8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dec:	f101 0004 	add.w	r0, r1, #4
 8005df0:	6018      	str	r0, [r3, #0]
 8005df2:	d0f7      	beq.n	8005de4 <_printf_i+0xc4>
 8005df4:	880b      	ldrh	r3, [r1, #0]
 8005df6:	4959      	ldr	r1, [pc, #356]	; (8005f5c <_printf_i+0x23c>)
 8005df8:	2a6f      	cmp	r2, #111	; 0x6f
 8005dfa:	bf14      	ite	ne
 8005dfc:	220a      	movne	r2, #10
 8005dfe:	2208      	moveq	r2, #8
 8005e00:	2000      	movs	r0, #0
 8005e02:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005e06:	6865      	ldr	r5, [r4, #4]
 8005e08:	60a5      	str	r5, [r4, #8]
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	f2c0 809c 	blt.w	8005f48 <_printf_i+0x228>
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	f020 0004 	bic.w	r0, r0, #4
 8005e16:	6020      	str	r0, [r4, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d13f      	bne.n	8005e9c <_printf_i+0x17c>
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	f040 8095 	bne.w	8005f4c <_printf_i+0x22c>
 8005e22:	4675      	mov	r5, lr
 8005e24:	2a08      	cmp	r2, #8
 8005e26:	d10b      	bne.n	8005e40 <_printf_i+0x120>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	07da      	lsls	r2, r3, #31
 8005e2c:	d508      	bpl.n	8005e40 <_printf_i+0x120>
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	6862      	ldr	r2, [r4, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	bfde      	ittt	le
 8005e36:	2330      	movle	r3, #48	; 0x30
 8005e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e40:	ebae 0305 	sub.w	r3, lr, r5
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	f8cd 8000 	str.w	r8, [sp]
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	aa03      	add	r2, sp, #12
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4630      	mov	r0, r6
 8005e52:	f7ff feef 	bl	8005c34 <_printf_common>
 8005e56:	3001      	adds	r0, #1
 8005e58:	d155      	bne.n	8005f06 <_printf_i+0x1e6>
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	b005      	add	sp, #20
 8005e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e64:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005e68:	493c      	ldr	r1, [pc, #240]	; (8005f5c <_printf_i+0x23c>)
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e72:	f100 0504 	add.w	r5, r0, #4
 8005e76:	601d      	str	r5, [r3, #0]
 8005e78:	d001      	beq.n	8005e7e <_printf_i+0x15e>
 8005e7a:	6803      	ldr	r3, [r0, #0]
 8005e7c:	e002      	b.n	8005e84 <_printf_i+0x164>
 8005e7e:	0655      	lsls	r5, r2, #25
 8005e80:	d5fb      	bpl.n	8005e7a <_printf_i+0x15a>
 8005e82:	8803      	ldrh	r3, [r0, #0]
 8005e84:	07d0      	lsls	r0, r2, #31
 8005e86:	bf44      	itt	mi
 8005e88:	f042 0220 	orrmi.w	r2, r2, #32
 8005e8c:	6022      	strmi	r2, [r4, #0]
 8005e8e:	b91b      	cbnz	r3, 8005e98 <_printf_i+0x178>
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	f022 0220 	bic.w	r2, r2, #32
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	e7b1      	b.n	8005e00 <_printf_i+0xe0>
 8005e9c:	4675      	mov	r5, lr
 8005e9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ea2:	fb02 3310 	mls	r3, r2, r0, r3
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005eac:	4603      	mov	r3, r0
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d1f5      	bne.n	8005e9e <_printf_i+0x17e>
 8005eb2:	e7b7      	b.n	8005e24 <_printf_i+0x104>
 8005eb4:	6808      	ldr	r0, [r1, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	6949      	ldr	r1, [r1, #20]
 8005eba:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005ebe:	d004      	beq.n	8005eca <_printf_i+0x1aa>
 8005ec0:	1d10      	adds	r0, r2, #4
 8005ec2:	6018      	str	r0, [r3, #0]
 8005ec4:	6813      	ldr	r3, [r2, #0]
 8005ec6:	6019      	str	r1, [r3, #0]
 8005ec8:	e007      	b.n	8005eda <_printf_i+0x1ba>
 8005eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ece:	f102 0004 	add.w	r0, r2, #4
 8005ed2:	6018      	str	r0, [r3, #0]
 8005ed4:	6813      	ldr	r3, [r2, #0]
 8005ed6:	d0f6      	beq.n	8005ec6 <_printf_i+0x1a6>
 8005ed8:	8019      	strh	r1, [r3, #0]
 8005eda:	2300      	movs	r3, #0
 8005edc:	6123      	str	r3, [r4, #16]
 8005ede:	4675      	mov	r5, lr
 8005ee0:	e7b1      	b.n	8005e46 <_printf_i+0x126>
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	1d11      	adds	r1, r2, #4
 8005ee6:	6019      	str	r1, [r3, #0]
 8005ee8:	6815      	ldr	r5, [r2, #0]
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	2100      	movs	r1, #0
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7fa f946 	bl	8000180 <memchr>
 8005ef4:	b108      	cbz	r0, 8005efa <_printf_i+0x1da>
 8005ef6:	1b40      	subs	r0, r0, r5
 8005ef8:	6060      	str	r0, [r4, #4]
 8005efa:	6863      	ldr	r3, [r4, #4]
 8005efc:	6123      	str	r3, [r4, #16]
 8005efe:	2300      	movs	r3, #0
 8005f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f04:	e79f      	b.n	8005e46 <_printf_i+0x126>
 8005f06:	6923      	ldr	r3, [r4, #16]
 8005f08:	462a      	mov	r2, r5
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	47c0      	blx	r8
 8005f10:	3001      	adds	r0, #1
 8005f12:	d0a2      	beq.n	8005e5a <_printf_i+0x13a>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	079b      	lsls	r3, r3, #30
 8005f18:	d507      	bpl.n	8005f2a <_printf_i+0x20a>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	f104 0919 	add.w	r9, r4, #25
 8005f20:	68e3      	ldr	r3, [r4, #12]
 8005f22:	9a03      	ldr	r2, [sp, #12]
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	429d      	cmp	r5, r3
 8005f28:	db05      	blt.n	8005f36 <_printf_i+0x216>
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	4298      	cmp	r0, r3
 8005f30:	bfb8      	it	lt
 8005f32:	4618      	movlt	r0, r3
 8005f34:	e793      	b.n	8005e5e <_printf_i+0x13e>
 8005f36:	2301      	movs	r3, #1
 8005f38:	464a      	mov	r2, r9
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	47c0      	blx	r8
 8005f40:	3001      	adds	r0, #1
 8005f42:	d08a      	beq.n	8005e5a <_printf_i+0x13a>
 8005f44:	3501      	adds	r5, #1
 8005f46:	e7eb      	b.n	8005f20 <_printf_i+0x200>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1a7      	bne.n	8005e9c <_printf_i+0x17c>
 8005f4c:	780b      	ldrb	r3, [r1, #0]
 8005f4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f56:	e765      	b.n	8005e24 <_printf_i+0x104>
 8005f58:	08006336 	.word	0x08006336
 8005f5c:	08006325 	.word	0x08006325

08005f60 <_sbrk_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4c06      	ldr	r4, [pc, #24]	; (8005f7c <_sbrk_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4605      	mov	r5, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	f7fe fdfc 	bl	8004b68 <_sbrk>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_sbrk_r+0x1a>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_sbrk_r+0x1a>
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20001da8 	.word	0x20001da8

08005f80 <__sread>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	460c      	mov	r4, r1
 8005f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f88:	f000 f896 	bl	80060b8 <_read_r>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	bfab      	itete	ge
 8005f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f92:	89a3      	ldrhlt	r3, [r4, #12]
 8005f94:	181b      	addge	r3, r3, r0
 8005f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f9a:	bfac      	ite	ge
 8005f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f9e:	81a3      	strhlt	r3, [r4, #12]
 8005fa0:	bd10      	pop	{r4, pc}

08005fa2 <__swrite>:
 8005fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	898b      	ldrh	r3, [r1, #12]
 8005faa:	05db      	lsls	r3, r3, #23
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	d505      	bpl.n	8005fc0 <__swrite+0x1e>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbc:	f000 f868 	bl	8006090 <_lseek_r>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	463b      	mov	r3, r7
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd6:	f000 b817 	b.w	8006008 <_write_r>

08005fda <__sseek>:
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	460c      	mov	r4, r1
 8005fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe2:	f000 f855 	bl	8006090 <_lseek_r>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	bf15      	itete	ne
 8005fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ff6:	81a3      	strheq	r3, [r4, #12]
 8005ff8:	bf18      	it	ne
 8005ffa:	81a3      	strhne	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__sclose>:
 8005ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006002:	f000 b813 	b.w	800602c <_close_r>
	...

08006008 <_write_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4c07      	ldr	r4, [pc, #28]	; (8006028 <_write_r+0x20>)
 800600c:	4605      	mov	r5, r0
 800600e:	4608      	mov	r0, r1
 8006010:	4611      	mov	r1, r2
 8006012:	2200      	movs	r2, #0
 8006014:	6022      	str	r2, [r4, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	f7fe fb42 	bl	80046a0 <_write>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_write_r+0x1e>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	b103      	cbz	r3, 8006026 <_write_r+0x1e>
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	20001da8 	.word	0x20001da8

0800602c <_close_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4c06      	ldr	r4, [pc, #24]	; (8006048 <_close_r+0x1c>)
 8006030:	2300      	movs	r3, #0
 8006032:	4605      	mov	r5, r0
 8006034:	4608      	mov	r0, r1
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	f7fe fdb0 	bl	8004b9c <_close>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_close_r+0x1a>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	b103      	cbz	r3, 8006046 <_close_r+0x1a>
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20001da8 	.word	0x20001da8

0800604c <_fstat_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4c07      	ldr	r4, [pc, #28]	; (800606c <_fstat_r+0x20>)
 8006050:	2300      	movs	r3, #0
 8006052:	4605      	mov	r5, r0
 8006054:	4608      	mov	r0, r1
 8006056:	4611      	mov	r1, r2
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	f7fe fda2 	bl	8004ba2 <_fstat>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	d102      	bne.n	8006068 <_fstat_r+0x1c>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	b103      	cbz	r3, 8006068 <_fstat_r+0x1c>
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	bf00      	nop
 800606c:	20001da8 	.word	0x20001da8

08006070 <_isatty_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4c06      	ldr	r4, [pc, #24]	; (800608c <_isatty_r+0x1c>)
 8006074:	2300      	movs	r3, #0
 8006076:	4605      	mov	r5, r0
 8006078:	4608      	mov	r0, r1
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	f7fe fd96 	bl	8004bac <_isatty>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_isatty_r+0x1a>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	b103      	cbz	r3, 800608a <_isatty_r+0x1a>
 8006088:	602b      	str	r3, [r5, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20001da8 	.word	0x20001da8

08006090 <_lseek_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4c07      	ldr	r4, [pc, #28]	; (80060b0 <_lseek_r+0x20>)
 8006094:	4605      	mov	r5, r0
 8006096:	4608      	mov	r0, r1
 8006098:	4611      	mov	r1, r2
 800609a:	2200      	movs	r2, #0
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7fe fd86 	bl	8004bb0 <_lseek>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_lseek_r+0x1e>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_lseek_r+0x1e>
 80060ac:	602b      	str	r3, [r5, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20001da8 	.word	0x20001da8

080060b4 <__malloc_lock>:
 80060b4:	4770      	bx	lr

080060b6 <__malloc_unlock>:
 80060b6:	4770      	bx	lr

080060b8 <_read_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4c07      	ldr	r4, [pc, #28]	; (80060d8 <_read_r+0x20>)
 80060bc:	4605      	mov	r5, r0
 80060be:	4608      	mov	r0, r1
 80060c0:	4611      	mov	r1, r2
 80060c2:	2200      	movs	r2, #0
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f7fe fd40 	bl	8004b4c <_read>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_read_r+0x1e>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_read_r+0x1e>
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20001da8 	.word	0x20001da8

080060dc <_init>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr

080060e8 <_fini>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

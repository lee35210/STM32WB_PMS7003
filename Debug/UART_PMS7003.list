
UART_PMS7003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000004  08006e48  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001cd0  200001e8  0800702c  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00001500  20001eb8  0800702c  00021eb8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c46b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000560d  00000000  00000000  0004c683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011e82  00000000  00000000  00051c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017a0  00000000  00000000  00063b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002308  00000000  00000000  000652b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d3df  00000000  00000000  000675c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009210  00000000  00000000  0007499f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007dbaf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000049c0  00000000  00000000  0007dc2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	08006bb4 	.word	0x08006bb4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	08006bb4 	.word	0x08006bb4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000532:	4c10      	ldr	r4, [pc, #64]	; (8000574 <HAL_InitTick+0x44>)
 8000534:	7823      	ldrb	r3, [r4, #0]
{
 8000536:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000538:	b90b      	cbnz	r3, 800053e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800053a:	2001      	movs	r0, #1
 800053c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800053e:	f001 ff69 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8000542:	7822      	ldrb	r2, [r4, #0]
 8000544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000548:	fbb3 f3f2 	udiv	r3, r3, r2
 800054c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000550:	f000 f8aa 	bl	80006a8 <HAL_SYSTICK_Config>
 8000554:	4604      	mov	r4, r0
 8000556:	2800      	cmp	r0, #0
 8000558:	d1ef      	bne.n	800053a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	2d0f      	cmp	r5, #15
 800055c:	d8ed      	bhi.n	800053a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055e:	4602      	mov	r2, r0
 8000560:	4629      	mov	r1, r5
 8000562:	f04f 30ff 	mov.w	r0, #4294967295
 8000566:	f000 f85d 	bl	8000624 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_InitTick+0x48>)
 800056c:	4620      	mov	r0, r4
 800056e:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000570:	bd38      	pop	{r3, r4, r5, pc}
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	20000008 	.word	0x20000008

0800057c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <HAL_Init+0x28>)
 800057e:	6813      	ldr	r3, [r2, #0]
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000584:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	f000 f839 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffce 	bl	8000530 <HAL_InitTick>
 8000594:	4604      	mov	r4, r0
 8000596:	b918      	cbnz	r0, 80005a0 <HAL_Init+0x24>
    HAL_MspInit();
 8000598:	f004 fedd 	bl	8005356 <HAL_MspInit>
}
 800059c:	4620      	mov	r0, r4
 800059e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005a0:	2401      	movs	r4, #1
 80005a2:	e7fb      	b.n	800059c <HAL_Init+0x20>
 80005a4:	58004000 	.word	0x58004000

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000434 	.word	0x20000434
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000434 	.word	0x20000434

080005cc <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <HAL_GetTickPrio+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000008 	.word	0x20000008

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80005d8:	b538      	push	{r3, r4, r5, lr}
 80005da:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff fff0 	bl	80005c0 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80005e0:	1c63      	adds	r3, r4, #1
    {
      wait += (uint32_t)(uwTickFreq);
 80005e2:	bf1c      	itt	ne
 80005e4:	4b05      	ldrne	r3, [pc, #20]	; (80005fc <HAL_Delay+0x24>)
 80005e6:	781b      	ldrbne	r3, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 80005e8:	4605      	mov	r5, r0
      wait += (uint32_t)(uwTickFreq);
 80005ea:	bf18      	it	ne
 80005ec:	18e4      	addne	r4, r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80005ee:	f7ff ffe7 	bl	80005c0 <HAL_GetTick>
 80005f2:	1b40      	subs	r0, r0, r5
 80005f4:	4284      	cmp	r4, r0
 80005f6:	d8fa      	bhi.n	80005ee <HAL_Delay+0x16>
    {
    }
  }
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000602:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000604:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	0200      	lsls	r0, r0, #8
 8000612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000616:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800061a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800061c:	60d3      	str	r3, [r2, #12]
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	68dc      	ldr	r4, [r3, #12]
 800062a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000634:	2b04      	cmp	r3, #4
 8000636:	bf28      	it	cs
 8000638:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f04f 0501 	mov.w	r5, #1
 8000640:	fa05 f303 	lsl.w	r3, r5, r3
 8000644:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000648:	bf8c      	ite	hi
 800064a:	3c03      	subhi	r4, #3
 800064c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064e:	4019      	ands	r1, r3
 8000650:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000652:	fa05 f404 	lsl.w	r4, r5, r4
 8000656:	3c01      	subs	r4, #1
 8000658:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800065a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	ea42 0201 	orr.w	r2, r2, r1
 8000660:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	bfad      	iteet	ge
 8000666:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	f000 000f 	andlt.w	r0, r0, #15
 800066e:	4b06      	ldrlt	r3, [pc, #24]	; (8000688 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	bfb5      	itete	lt
 8000676:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	e000ed14 	.word	0xe000ed14

0800068c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800068c:	2800      	cmp	r0, #0
 800068e:	db08      	blt.n	80006a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000690:	0942      	lsrs	r2, r0, #5
 8000692:	2301      	movs	r3, #1
 8000694:	f000 001f 	and.w	r0, r0, #31
 8000698:	fa03 f000 	lsl.w	r0, r3, r0
 800069c:	4b01      	ldr	r3, [pc, #4]	; (80006a4 <HAL_NVIC_EnableIRQ+0x18>)
 800069e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	3801      	subs	r0, #1
 80006aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ae:	d20a      	bcs.n	80006c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	21f0      	movs	r1, #240	; 0xf0
 80006b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80006d4:	6803      	ldr	r3, [r0, #0]
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006dc:	bf88      	it	hi
 80006de:	490f      	ldrhi	r1, [pc, #60]	; (800071c <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006e0:	f022 0203 	bic.w	r2, r2, #3
 80006e4:	bf9b      	ittet	ls
 80006e6:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 80006ea:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006ee:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006f0:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006f2:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80006f6:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006f8:	f1a3 0308 	sub.w	r3, r3, #8
 80006fc:	f04f 0214 	mov.w	r2, #20
 8000700:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000704:	f04f 0201 	mov.w	r2, #1
 8000708:	f003 031c 	and.w	r3, r3, #28
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000710:	bf88      	it	hi
 8000712:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000714:	6503      	str	r3, [r0, #80]	; 0x50
 8000716:	4770      	bx	lr
 8000718:	40020407 	.word	0x40020407
 800071c:	4002081c 	.word	0x4002081c
 8000720:	40020880 	.word	0x40020880

08000724 <HAL_DMA_Init>:
{
 8000724:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8000726:	4604      	mov	r4, r0
 8000728:	2800      	cmp	r0, #0
 800072a:	d05d      	beq.n	80007e8 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800072c:	6801      	ldr	r1, [r0, #0]
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <HAL_DMA_Init+0xc8>)
 8000730:	4299      	cmp	r1, r3
 8000732:	f04f 0014 	mov.w	r0, #20
 8000736:	d84a      	bhi.n	80007ce <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000738:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <HAL_DMA_Init+0xcc>)
 800073a:	440a      	add	r2, r1
 800073c:	fbb2 f2f0 	udiv	r2, r2, r0
 8000740:	0092      	lsls	r2, r2, #2
 8000742:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000744:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8000748:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800074a:	2302      	movs	r3, #2
 800074c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8000750:	68e0      	ldr	r0, [r4, #12]
 8000752:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8000754:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000756:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000758:	6920      	ldr	r0, [r4, #16]
 800075a:	4303      	orrs	r3, r0
 800075c:	6960      	ldr	r0, [r4, #20]
 800075e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000760:	69a0      	ldr	r0, [r4, #24]
 8000762:	4303      	orrs	r3, r0
 8000764:	69e0      	ldr	r0, [r4, #28]
 8000766:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000768:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800076a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800076e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000772:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000774:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8000776:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000778:	4620      	mov	r0, r4
 800077a:	f7ff ffab 	bl	80006d4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800077e:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000782:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000788:	bf04      	itt	eq
 800078a:	2300      	moveq	r3, #0
 800078c:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800078e:	6862      	ldr	r2, [r4, #4]
 8000790:	b2d3      	uxtb	r3, r2
 8000792:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000794:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000796:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000798:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800079a:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800079c:	d81f      	bhi.n	80007de <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80007a0:	4815      	ldr	r0, [pc, #84]	; (80007f8 <HAL_DMA_Init+0xd4>)
 80007a2:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007a4:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007a6:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007a8:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007aa:	2101      	movs	r1, #1
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007b4:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007b6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007ba:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007bc:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007be:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80007c0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80007c4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80007c8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 80007cc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_DMA_Init+0xd8>)
 80007d0:	440b      	add	r3, r1
 80007d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_DMA_Init+0xdc>)
 80007dc:	e7b4      	b.n	8000748 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80007de:	2300      	movs	r3, #0
 80007e0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80007e2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80007e4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80007e6:	e7ea      	b.n	80007be <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80007e8:	2001      	movs	r0, #1
}
 80007ea:	bd10      	pop	{r4, pc}
 80007ec:	40020407 	.word	0x40020407
 80007f0:	bffdfff8 	.word	0xbffdfff8
 80007f4:	1000823f 	.word	0x1000823f
 80007f8:	40020940 	.word	0x40020940
 80007fc:	bffdfbf8 	.word	0xbffdfbf8
 8000800:	40020400 	.word	0x40020400

08000804 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8000804:	b140      	cbz	r0, 8000818 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000806:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800080a:	2b02      	cmp	r3, #2
 800080c:	d006      	beq.n	800081c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800080e:	2304      	movs	r3, #4
 8000810:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8000812:	2300      	movs	r3, #0
 8000814:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000818:	2001      	movs	r0, #1
}
 800081a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800081c:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800081e:	6c81      	ldr	r1, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	f022 020e 	bic.w	r2, r2, #14
 8000826:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000828:	680a      	ldr	r2, [r1, #0]
 800082a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800082e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8000830:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000832:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000834:	f022 0201 	bic.w	r2, r2, #1
 8000838:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800083a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800083c:	f003 021c 	and.w	r2, r3, #28
 8000840:	2301      	movs	r3, #1
 8000842:	4093      	lsls	r3, r2
 8000844:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000846:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000848:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800084a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800084c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800084e:	b133      	cbz	r3, 800085e <HAL_DMA_Abort+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000856:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000858:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800085a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800085c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800085e:	2301      	movs	r3, #1
 8000860:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000864:	2300      	movs	r3, #0
 8000866:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return HAL_OK;
 800086a:	4618      	mov	r0, r3
 800086c:	4770      	bx	lr

0800086e <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800086e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000872:	2b02      	cmp	r3, #2
{
 8000874:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000876:	d003      	beq.n	8000880 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000878:	2304      	movs	r3, #4
 800087a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800087c:	2001      	movs	r0, #1
 800087e:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000880:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000882:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	f022 020e 	bic.w	r2, r2, #14
 800088a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	f022 0201 	bic.w	r2, r2, #1
 8000892:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000894:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000896:	6813      	ldr	r3, [r2, #0]
 8000898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800089c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800089e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008a0:	f003 021c 	and.w	r2, r3, #28
 80008a4:	2301      	movs	r3, #1
 80008a6:	4093      	lsls	r3, r2
 80008a8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80008ac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80008ae:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80008b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80008b2:	b133      	cbz	r3, 80008c2 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008bc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80008be:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008c0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 80008c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80008ca:	2400      	movs	r4, #0
 80008cc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80008d0:	b113      	cbz	r3, 80008d8 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80008d2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008d4:	4620      	mov	r0, r4
 80008d6:	bd10      	pop	{r4, pc}
 80008d8:	4618      	mov	r0, r3
}
 80008da:	bd10      	pop	{r4, pc}

080008dc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80008de:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80008e0:	6803      	ldr	r3, [r0, #0]
{
 80008e2:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80008e4:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008e8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80008ea:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80008ec:	2404      	movs	r4, #4
 80008ee:	4094      	lsls	r4, r2
 80008f0:	4226      	tst	r6, r4
 80008f2:	d00e      	beq.n	8000912 <HAL_DMA_IRQHandler+0x36>
 80008f4:	f015 0f04 	tst.w	r5, #4
 80008f8:	d00b      	beq.n	8000912 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008fe:	bf5e      	ittt	pl
 8000900:	681a      	ldrpl	r2, [r3, #0]
 8000902:	f022 0204 	bicpl.w	r2, r2, #4
 8000906:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8000908:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800090a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800090c:	b373      	cbz	r3, 800096c <HAL_DMA_IRQHandler+0x90>
}
 800090e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000910:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000912:	2402      	movs	r4, #2
 8000914:	4094      	lsls	r4, r2
 8000916:	4226      	tst	r6, r4
 8000918:	d012      	beq.n	8000940 <HAL_DMA_IRQHandler+0x64>
 800091a:	f015 0f02 	tst.w	r5, #2
 800091e:	d00f      	beq.n	8000940 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	0695      	lsls	r5, r2, #26
 8000924:	d406      	bmi.n	8000934 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	f022 020a 	bic.w	r2, r2, #10
 800092c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800092e:	2301      	movs	r3, #1
 8000930:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000934:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000936:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000938:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800093c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800093e:	e7e5      	b.n	800090c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000940:	2408      	movs	r4, #8
 8000942:	4094      	lsls	r4, r2
 8000944:	4234      	tst	r4, r6
 8000946:	d011      	beq.n	800096c <HAL_DMA_IRQHandler+0x90>
 8000948:	072c      	lsls	r4, r5, #28
 800094a:	d50f      	bpl.n	800096c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800094c:	681c      	ldr	r4, [r3, #0]
 800094e:	f024 040e 	bic.w	r4, r4, #14
 8000952:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000954:	2301      	movs	r3, #1
 8000956:	fa03 f202 	lsl.w	r2, r3, r2
 800095a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800095c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800095e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000962:	2300      	movs	r3, #0
 8000964:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000968:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800096a:	e7cf      	b.n	800090c <HAL_DMA_IRQHandler+0x30>
}
 800096c:	bc70      	pop	{r4, r5, r6}
 800096e:	4770      	bx	lr

08000970 <HAL_DMA_GetState>:
  return hdma->State;
 8000970:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8000974:	4770      	bx	lr

08000976 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8000976:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8000978:	4770      	bx	lr
	...

0800097c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000980:	680b      	ldr	r3, [r1, #0]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000982:	4a59      	ldr	r2, [pc, #356]	; (8000ae8 <HAL_GPIO_Init+0x16c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000984:	9301      	str	r3, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000986:	f04f 0803 	mov.w	r8, #3
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800098c:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000990:	9c01      	ldr	r4, [sp, #4]
 8000992:	40dc      	lsrs	r4, r3
 8000994:	d102      	bne.n	800099c <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  }
}
 8000996:	b003      	add	sp, #12
 8000998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800099c:	2401      	movs	r4, #1
 800099e:	fa04 fe03 	lsl.w	lr, r4, r3
    if (iocurrent != 0x00u)
 80009a2:	9c01      	ldr	r4, [sp, #4]
 80009a4:	ea14 050e 	ands.w	r5, r4, lr
 80009a8:	f000 8094 	beq.w	8000ad4 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ac:	684c      	ldr	r4, [r1, #4]
 80009ae:	f024 0c10 	bic.w	ip, r4, #16
 80009b2:	f10c 36ff 	add.w	r6, ip, #4294967295
 80009b6:	2e01      	cmp	r6, #1
 80009b8:	ea4f 0643 	mov.w	r6, r3, lsl #1
 80009bc:	d812      	bhi.n	80009e4 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 80009be:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009c0:	fa08 fa06 	lsl.w	sl, r8, r6
 80009c4:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	68cf      	ldr	r7, [r1, #12]
 80009ca:	40b7      	lsls	r7, r6
 80009cc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80009d0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009d2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009d4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009d8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009dc:	409f      	lsls	r7, r3
 80009de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80009e2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80009e4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009e6:	fa08 fe06 	lsl.w	lr, r8, r6
 80009ea:	ea6f 0e0e 	mvn.w	lr, lr
 80009ee:	ea07 0a0e 	and.w	sl, r7, lr
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009f2:	688f      	ldr	r7, [r1, #8]
 80009f4:	40b7      	lsls	r7, r6
 80009f6:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fa:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80009fe:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a00:	d114      	bne.n	8000a2c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8000a02:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a06:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a0a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000a0e:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a12:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000a16:	fa09 fb0a 	lsl.w	fp, r9, sl
 8000a1a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1e:	690f      	ldr	r7, [r1, #16]
 8000a20:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a24:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8000a28:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8000a2c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a2e:	ea0e 0e07 	and.w	lr, lr, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a32:	f004 0703 	and.w	r7, r4, #3
 8000a36:	fa07 f606 	lsl.w	r6, r7, r6
 8000a3a:	ea46 060e 	orr.w	r6, r6, lr
      GPIOx->MODER = temp;
 8000a3e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a40:	00e6      	lsls	r6, r4, #3
 8000a42:	d547      	bpl.n	8000ad4 <HAL_GPIO_Init+0x158>
 8000a44:	f023 0703 	bic.w	r7, r3, #3
 8000a48:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a4c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a50:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a54:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a5a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a5e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a62:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a66:	d037      	beq.n	8000ad8 <HAL_GPIO_Init+0x15c>
 8000a68:	4e20      	ldr	r6, [pc, #128]	; (8000aec <HAL_GPIO_Init+0x170>)
 8000a6a:	42b0      	cmp	r0, r6
 8000a6c:	d036      	beq.n	8000adc <HAL_GPIO_Init+0x160>
 8000a6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a72:	42b0      	cmp	r0, r6
 8000a74:	d034      	beq.n	8000ae0 <HAL_GPIO_Init+0x164>
 8000a76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a7a:	42b0      	cmp	r0, r6
 8000a7c:	d032      	beq.n	8000ae4 <HAL_GPIO_Init+0x168>
 8000a7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a82:	42b0      	cmp	r0, r6
 8000a84:	bf14      	ite	ne
 8000a86:	2607      	movne	r6, #7
 8000a88:	2604      	moveq	r6, #4
 8000a8a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a8e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a92:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000a94:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8000a98:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000a9e:	bf0c      	ite	eq
 8000aa0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000aa2:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000aa4:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8000aa8:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000ab0:	bf0c      	ite	eq
 8000ab2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ab4:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000ab6:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000aba:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000ac0:	bf0c      	ite	eq
 8000ac2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ac4:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000ac6:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8000ac8:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aca:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000acc:	bf54      	ite	pl
 8000ace:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000ad0:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000ad2:	6056      	str	r6, [r2, #4]
    position++;
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	e75b      	b.n	8000990 <HAL_GPIO_Init+0x14>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad8:	2600      	movs	r6, #0
 8000ada:	e7d6      	b.n	8000a8a <HAL_GPIO_Init+0x10e>
 8000adc:	2601      	movs	r6, #1
 8000ade:	e7d4      	b.n	8000a8a <HAL_GPIO_Init+0x10e>
 8000ae0:	2602      	movs	r6, #2
 8000ae2:	e7d2      	b.n	8000a8a <HAL_GPIO_Init+0x10e>
 8000ae4:	2603      	movs	r6, #3
 8000ae6:	e7d0      	b.n	8000a8a <HAL_GPIO_Init+0x10e>
 8000ae8:	58000800 	.word	0x58000800
 8000aec:	48000400 	.word	0x48000400

08000af0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000af0:	b10a      	cbz	r2, 8000af6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000af2:	6181      	str	r1, [r0, #24]
 8000af4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000af6:	6281      	str	r1, [r0, #40]	; 0x28
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000afa:	6943      	ldr	r3, [r0, #20]
 8000afc:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000afe:	bf14      	ite	ne
 8000b00:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b02:	6181      	streq	r1, [r0, #24]
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b08:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000b0c:	68d9      	ldr	r1, [r3, #12]
 8000b0e:	4201      	tst	r1, r0
 8000b10:	d002      	beq.n	8000b18 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b12:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b14:	f004 fbf4 	bl	8005300 <HAL_GPIO_EXTI_Callback>
 8000b18:	bd08      	pop	{r3, pc}
 8000b1a:	bf00      	nop
 8000b1c:	58000800 	.word	0x58000800

08000b20 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000b20:	6803      	ldr	r3, [r0, #0]
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000b26:	bf44      	itt	mi
 8000b28:	2200      	movmi	r2, #0
 8000b2a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b2c:	699a      	ldr	r2, [r3, #24]
 8000b2e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b30:	bf5e      	ittt	pl
 8000b32:	699a      	ldrpl	r2, [r3, #24]
 8000b34:	f042 0201 	orrpl.w	r2, r2, #1
 8000b38:	619a      	strpl	r2, [r3, #24]
 8000b3a:	4770      	bx	lr

08000b3c <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000b3c:	f011 0301 	ands.w	r3, r1, #1
 8000b40:	d007      	beq.n	8000b52 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000b42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000b46:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b4a:	2b28      	cmp	r3, #40	; 0x28
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2342      	moveq	r3, #66	; 0x42
 8000b50:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000b52:	078a      	lsls	r2, r1, #30
 8000b54:	d509      	bpl.n	8000b6a <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000b56:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000b5a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000b5e:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000b60:	bf0c      	ite	eq
 8000b62:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b66:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000b6a:	040a      	lsls	r2, r1, #16
 8000b6c:	d506      	bpl.n	8000b7c <I2C_Disable_IRQ+0x40>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b6e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8000b72:	2940      	cmp	r1, #64	; 0x40
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8000b74:	bf08      	it	eq
 8000b76:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8000b7a:	e003      	b.n	8000b84 <I2C_Disable_IRQ+0x48>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8000b7c:	2910      	cmp	r1, #16
 8000b7e:	d107      	bne.n	8000b90 <I2C_Disable_IRQ+0x54>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000b80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000b84:	6801      	ldr	r1, [r0, #0]
 8000b86:	680a      	ldr	r2, [r1, #0]
 8000b88:	ea22 0303 	bic.w	r3, r2, r3
 8000b8c:	600b      	str	r3, [r1, #0]
 8000b8e:	4770      	bx	lr
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8000b90:	2920      	cmp	r1, #32
 8000b92:	d1ee      	bne.n	8000b72 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_STOPI;
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	e7f4      	b.n	8000b84 <I2C_Disable_IRQ+0x48>

08000b9a <HAL_I2C_Init>:
{
 8000b9a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d04a      	beq.n	8000c38 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ba2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ba6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000baa:	b91b      	cbnz	r3, 8000bb4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000bac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000bb0:	f004 fbd2 	bl	8005358 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bb4:	2324      	movs	r3, #36	; 0x24
 8000bb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000bba:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bbc:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	f022 0201 	bic.w	r2, r2, #1
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bc6:	6862      	ldr	r2, [r4, #4]
 8000bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bce:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bd0:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bda:	d124      	bne.n	8000c26 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000be2:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000be4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000be6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bf6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bf8:	6922      	ldr	r2, [r4, #16]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	69a1      	ldr	r1, [r4, #24]
 8000bfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c04:	6a21      	ldr	r1, [r4, #32]
 8000c06:	69e2      	ldr	r2, [r4, #28]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c14:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c16:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c18:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c1e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c20:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000c24:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c2a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c2c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c2e:	bf04      	itt	eq
 8000c30:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000c34:	605a      	streq	r2, [r3, #4]
 8000c36:	e7d4      	b.n	8000be2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000c38:	2001      	movs	r0, #1
}
 8000c3a:	bd10      	pop	{r4, pc}

08000c3c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000c3c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8000c3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000c40:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000c42:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000c44:	b103      	cbz	r3, 8000c48 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000c46:	4718      	bx	r3
 8000c48:	4770      	bx	lr

08000c4a <HAL_I2C_SlaveTxCpltCallback>:
 8000c4a:	4770      	bx	lr

08000c4c <HAL_I2C_SlaveRxCpltCallback>:
 8000c4c:	4770      	bx	lr

08000c4e <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000c4e:	6803      	ldr	r3, [r0, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c52:	2100      	movs	r1, #0
{
 8000c54:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c56:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8000c5a:	0451      	lsls	r1, r2, #17
{
 8000c5c:	4604      	mov	r4, r0
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8000c5e:	d517      	bpl.n	8000c90 <I2C_ITSlaveSeqCplt+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000c66:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000c68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000c6c:	2b29      	cmp	r3, #41	; 0x29
 8000c6e:	d115      	bne.n	8000c9c <I2C_ITSlaveSeqCplt+0x4e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000c70:	2328      	movs	r3, #40	; 0x28
 8000c72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000c76:	2321      	movs	r3, #33	; 0x21
 8000c78:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	f7ff ff5d 	bl	8000b3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000c82:	2300      	movs	r3, #0
 8000c84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f7ff ffde 	bl	8000c4a <HAL_I2C_SlaveTxCpltCallback>
 8000c8e:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8000c90:	0412      	lsls	r2, r2, #16
 8000c92:	d5e9      	bpl.n	8000c68 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c9a:	e7e4      	b.n	8000c66 <I2C_ITSlaveSeqCplt+0x18>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000c9c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8000ca2:	d10e      	bne.n	8000cc2 <I2C_ITSlaveSeqCplt+0x74>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000ca4:	2328      	movs	r3, #40	; 0x28
 8000ca6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000caa:	2322      	movs	r3, #34	; 0x22
 8000cac:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000cae:	4620      	mov	r0, r4
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	f7ff ff43 	bl	8000b3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f7ff ffc5 	bl	8000c4c <HAL_I2C_SlaveRxCpltCallback>
 8000cc2:	bd10      	pop	{r4, pc}

08000cc4 <HAL_I2C_AddrCallback>:
{
 8000cc4:	4770      	bx	lr

08000cc6 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000cc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ccc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000cd0:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000cd6:	d136      	bne.n	8000d46 <I2C_ITAddrCplt.isra.8+0x80>
    transferdirection = I2C_GET_DIR(hi2c);
 8000cd8:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cda:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000cdc:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000cde:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000ce0:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000ce2:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ce4:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8000ce6:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000cea:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cee:	d121      	bne.n	8000d34 <I2C_ITAddrCplt.isra.8+0x6e>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000cf0:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000cf4:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8000cf8:	f015 0506 	ands.w	r5, r5, #6
 8000cfc:	d10e      	bne.n	8000d1c <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8000cfe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000d00:	3101      	adds	r1, #1
 8000d02:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000d04:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000d06:	2902      	cmp	r1, #2
 8000d08:	d122      	bne.n	8000d50 <I2C_ITAddrCplt.isra.8+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d0a:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8000d0c:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d0e:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000d10:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d14:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d16:	f7ff ffd5 	bl	8000cc4 <HAL_I2C_AddrCallback>
 8000d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	f7ff ff0c 	bl	8000b3c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8000d24:	2300      	movs	r3, #0
 8000d26:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d2a:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d2e:	4631      	mov	r1, r6
 8000d30:	4620      	mov	r0, r4
 8000d32:	e7f0      	b.n	8000d16 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d38:	f7ff ff00 	bl	8000b3c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000d42:	462a      	mov	r2, r5
 8000d44:	e7f3      	b.n	8000d2e <I2C_ITAddrCplt.isra.8+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d46:	2208      	movs	r2, #8
 8000d48:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d52 <HAL_I2C_ListenCpltCallback>:
 8000d52:	4770      	bx	lr

08000d54 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <I2C_ITListenCplt+0x60>)
{
 8000d56:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8000d58:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8000d60:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8000d62:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d66:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000d6a:	074b      	lsls	r3, r1, #29
{
 8000d6c:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000d6e:	d512      	bpl.n	8000d96 <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d70:	6802      	ldr	r2, [r0, #0]
 8000d72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8000d78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000d7e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000d80:	b14b      	cbz	r3, 8000d96 <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8000d82:	3b01      	subs	r3, #1
 8000d84:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8000d86:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000d8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000d96:	4620      	mov	r0, r4
 8000d98:	f248 0103 	movw	r1, #32771	; 0x8003
 8000d9c:	f7ff fece 	bl	8000b3c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	2210      	movs	r2, #16
 8000da4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000da6:	2300      	movs	r3, #0
 8000da8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8000dac:	4620      	mov	r0, r4
 8000dae:	f7ff ffd0 	bl	8000d52 <HAL_I2C_ListenCpltCallback>
 8000db2:	bd10      	pop	{r4, pc}
 8000db4:	ffff0000 	.word	0xffff0000

08000db8 <HAL_I2C_ErrorCallback>:
 8000db8:	4770      	bx	lr

08000dba <HAL_I2C_AbortCpltCallback>:
{
 8000dba:	4770      	bx	lr

08000dbc <I2C_TreatErrorCallback>:
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000dbc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000dc0:	2a60      	cmp	r2, #96	; 0x60
{
 8000dc2:	b508      	push	{r3, lr}
 8000dc4:	f04f 0200 	mov.w	r2, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000dc8:	d108      	bne.n	8000ddc <I2C_TreatErrorCallback+0x20>
    hi2c->State = HAL_I2C_STATE_READY;
 8000dca:	2120      	movs	r1, #32
 8000dcc:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000dd0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000dd4:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8000dd6:	f7ff fff0 	bl	8000dba <HAL_I2C_AbortCpltCallback>
 8000dda:	bd08      	pop	{r3, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 8000ddc:	6302      	str	r2, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8000dde:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8000de2:	f7ff ffe9 	bl	8000db8 <HAL_I2C_ErrorCallback>
 8000de6:	bd08      	pop	{r3, pc}

08000de8 <I2C_ITError>:
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000dea:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000dec:	4d34      	ldr	r5, [pc, #208]	; (8000ec0 <I2C_ITError+0xd8>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8000dee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000df2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000df6:	62c5      	str	r5, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000df8:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000dfa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000dfc:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8000dfe:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000e00:	2b02      	cmp	r3, #2
{
 8000e02:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8000e04:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000e06:	d82a      	bhi.n	8000e5e <I2C_ITError+0x76>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000e08:	2103      	movs	r1, #3
 8000e0a:	f7ff fe97 	bl	8000b3c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000e0e:	2328      	movs	r3, #40	; 0x28
 8000e10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <I2C_ITError+0xdc>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8000e16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->XferISR       = NULL;
 8000e18:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8000e1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d030      	beq.n	8000e82 <I2C_ITError+0x9a>
 8000e20:	2b11      	cmp	r3, #17
 8000e22:	d001      	beq.n	8000e28 <I2C_ITError+0x40>
 8000e24:	2b21      	cmp	r3, #33	; 0x21
 8000e26:	d12c      	bne.n	8000e82 <I2C_ITError+0x9a>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	0451      	lsls	r1, r2, #17
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000e2e:	bf42      	ittt	mi
 8000e30:	681a      	ldrmi	r2, [r3, #0]
 8000e32:	f422 4280 	bicmi.w	r2, r2, #16384	; 0x4000
 8000e36:	601a      	strmi	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8000e38:	f7ff fd9a 	bl	8000970 <HAL_DMA_GetState>
 8000e3c:	2801      	cmp	r0, #1
 8000e3e:	d01b      	beq.n	8000e78 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000e40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <I2C_ITError+0xe0>)
 8000e44:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8000e46:	2300      	movs	r3, #0
 8000e48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000e4c:	f7ff fd0f 	bl	800086e <HAL_DMA_Abort_IT>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d034      	beq.n	8000ebe <I2C_ITError+0xd6>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000e54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e56:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8000e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e5c:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000e5e:	f248 0103 	movw	r1, #32771	; 0x8003
 8000e62:	f7ff fe6b 	bl	8000b3c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000e66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e6a:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8000e6c:	bf1c      	itt	ne
 8000e6e:	2320      	movne	r3, #32
 8000e70:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e7ce      	b.n	8000e16 <I2C_ITError+0x2e>
      I2C_TreatErrorCallback(hi2c);
 8000e78:	4620      	mov	r0, r4
}
 8000e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_TreatErrorCallback(hi2c);
 8000e7e:	f7ff bf9d 	b.w	8000dbc <I2C_TreatErrorCallback>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8000e82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d0f7      	beq.n	8000e78 <I2C_ITError+0x90>
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d001      	beq.n	8000e90 <I2C_ITError+0xa8>
 8000e8c:	2b22      	cmp	r3, #34	; 0x22
 8000e8e:	d1f3      	bne.n	8000e78 <I2C_ITError+0x90>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	0412      	lsls	r2, r2, #16
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000e96:	bf42      	ittt	mi
 8000e98:	681a      	ldrmi	r2, [r3, #0]
 8000e9a:	f422 4200 	bicmi.w	r2, r2, #32768	; 0x8000
 8000e9e:	601a      	strmi	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8000ea0:	f7ff fd66 	bl	8000970 <HAL_DMA_GetState>
 8000ea4:	2801      	cmp	r0, #1
 8000ea6:	d0e7      	beq.n	8000e78 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000ea8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <I2C_ITError+0xe0>)
 8000eac:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000eb4:	f7ff fcdb 	bl	800086e <HAL_DMA_Abort_IT>
 8000eb8:	b108      	cbz	r0, 8000ebe <I2C_ITError+0xd6>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000eba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000ebc:	e7cb      	b.n	8000e56 <I2C_ITError+0x6e>
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	ffff0000 	.word	0xffff0000
 8000ec4:	08000ff5 	.word	0x08000ff5
 8000ec8:	08001167 	.word	0x08001167

08000ecc <I2C_ITSlaveCplt>:
{
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000ece:	6803      	ldr	r3, [r0, #0]
 8000ed0:	681f      	ldr	r7, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8000ed2:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000ed6:	f005 05f7 	and.w	r5, r5, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eda:	2220      	movs	r2, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000edc:	2d21      	cmp	r5, #33	; 0x21
{
 8000ede:	4604      	mov	r4, r0
 8000ee0:	460e      	mov	r6, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ee2:	61da      	str	r2, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000ee4:	d151      	bne.n	8000f8a <I2C_ITSlaveCplt+0xbe>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8000ee6:	f248 0101 	movw	r1, #32769	; 0x8001
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8000eea:	f7ff fe27 	bl	8000b3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000eee:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef8:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f00:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f04:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff fe06 	bl	8000b20 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8000f14:	0479      	lsls	r1, r7, #17
 8000f16:	d53d      	bpl.n	8000f94 <I2C_ITSlaveCplt+0xc8>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000f18:	6822      	ldr	r2, [r4, #0]
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f20:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8000f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8000f24:	b11b      	cbz	r3, 8000f2e <I2C_ITSlaveCplt+0x62>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8000f2e:	0773      	lsls	r3, r6, #29
 8000f30:	d510      	bpl.n	8000f54 <I2C_ITSlaveCplt+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f32:	6822      	ldr	r2, [r4, #0]
 8000f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8000f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000f40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8000f42:	f026 0604 	bic.w	r6, r6, #4
    if ((hi2c->XferSize > 0U))
 8000f46:	b12b      	cbz	r3, 8000f54 <I2C_ITSlaveCplt+0x88>
      hi2c->XferSize--;
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000f4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000f54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b11b      	cbz	r3, 8000f62 <I2C_ITSlaveCplt+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000f5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000f68:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8000f6a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000f6c:	b1dd      	cbz	r5, 8000fa6 <I2C_ITSlaveCplt+0xda>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000f6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff ff39 	bl	8000de8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000f76:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000f7a:	2b28      	cmp	r3, #40	; 0x28
 8000f7c:	d137      	bne.n	8000fee <I2C_ITSlaveCplt+0x122>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4620      	mov	r0, r4
}
 8000f82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8000f86:	f7ff bee5 	b.w	8000d54 <I2C_ITListenCplt>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000f8a:	2d22      	cmp	r5, #34	; 0x22
 8000f8c:	d1b0      	bne.n	8000ef0 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8000f8e:	f248 0102 	movw	r1, #32770	; 0x8002
 8000f92:	e7aa      	b.n	8000eea <I2C_ITSlaveCplt+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8000f94:	043a      	lsls	r2, r7, #16
 8000f96:	d5ca      	bpl.n	8000f2e <I2C_ITSlaveCplt+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000f98:	6822      	ldr	r2, [r4, #0]
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fa0:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8000fa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000fa4:	e7be      	b.n	8000f24 <I2C_ITSlaveCplt+0x58>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8000fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000fac:	d00e      	beq.n	8000fcc <I2C_ITSlaveCplt+0x100>
    I2C_ITSlaveSeqCplt(hi2c);
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff fe4d 	bl	8000c4e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <I2C_ITSlaveCplt+0x124>)
 8000fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8000fb8:	2320      	movs	r3, #32
 8000fba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000fbe:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000fc2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fec4 	bl	8000d52 <HAL_I2C_ListenCpltCallback>
 8000fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000fcc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000fd0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000fd4:	2b22      	cmp	r3, #34	; 0x22
 8000fd6:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8000fda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000fde:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8000fe0:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000fe2:	d102      	bne.n	8000fea <I2C_ITSlaveCplt+0x11e>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000fe4:	f7ff fe32 	bl	8000c4c <HAL_I2C_SlaveRxCpltCallback>
 8000fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000fea:	f7ff fe2e 	bl	8000c4a <HAL_I2C_SlaveTxCpltCallback>
 8000fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ff0:	ffff0000 	.word	0xffff0000

08000ff4 <I2C_Slave_ISR_IT>:
{
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8000ff6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8000ffa:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8000ffc:	2b01      	cmp	r3, #1
{
 8000ffe:	4604      	mov	r4, r0
 8001000:	460d      	mov	r5, r1
 8001002:	4617      	mov	r7, r2
  __HAL_LOCK(hi2c);
 8001004:	d07d      	beq.n	8001102 <I2C_Slave_ISR_IT+0x10e>
 8001006:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001008:	068a      	lsls	r2, r1, #26
  __HAL_LOCK(hi2c);
 800100a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800100e:	d503      	bpl.n	8001018 <I2C_Slave_ISR_IT+0x24>
 8001010:	06bb      	lsls	r3, r7, #26
 8001012:	d501      	bpl.n	8001018 <I2C_Slave_ISR_IT+0x24>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001014:	f7ff ff5a 	bl	8000ecc <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001018:	06e8      	lsls	r0, r5, #27
 800101a:	d534      	bpl.n	8001086 <I2C_Slave_ISR_IT+0x92>
 800101c:	06f9      	lsls	r1, r7, #27
 800101e:	d532      	bpl.n	8001086 <I2C_Slave_ISR_IT+0x92>
    if (hi2c->XferCount == 0U)
 8001020:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001022:	b29b      	uxth	r3, r3
 8001024:	bb03      	cbnz	r3, 8001068 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001026:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800102a:	2b28      	cmp	r3, #40	; 0x28
 800102c:	d10a      	bne.n	8001044 <I2C_Slave_ISR_IT+0x50>
 800102e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8001032:	d107      	bne.n	8001044 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001034:	4629      	mov	r1, r5
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fe8c 	bl	8000d54 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800103c:	2000      	movs	r0, #0
 800103e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001044:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001048:	2b29      	cmp	r3, #41	; 0x29
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	f04f 0210 	mov.w	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001050:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001052:	d1f3      	bne.n	800103c <I2C_Slave_ISR_IT+0x48>
 8001054:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001058:	d0f0      	beq.n	800103c <I2C_Slave_ISR_IT+0x48>
        I2C_Flush_TXDR(hi2c);
 800105a:	4620      	mov	r0, r4
 800105c:	f7ff fd60 	bl	8000b20 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 8001060:	4620      	mov	r0, r4
 8001062:	f7ff fdf4 	bl	8000c4e <I2C_ITSlaveSeqCplt>
 8001066:	e7e9      	b.n	800103c <I2C_Slave_ISR_IT+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	2210      	movs	r2, #16
 800106c:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800106e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001076:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800107a:	d1df      	bne.n	800103c <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800107c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800107e:	4620      	mov	r0, r4
 8001080:	f7ff feb2 	bl	8000de8 <I2C_ITError>
 8001084:	e7da      	b.n	800103c <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001086:	076a      	lsls	r2, r5, #29
 8001088:	d51a      	bpl.n	80010c0 <I2C_Slave_ISR_IT+0xcc>
 800108a:	077b      	lsls	r3, r7, #29
 800108c:	d518      	bpl.n	80010c0 <I2C_Slave_ISR_IT+0xcc>
    if (hi2c->XferCount > 0U)
 800108e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001090:	b29b      	uxth	r3, r3
 8001092:	b16b      	cbz	r3, 80010b0 <I2C_Slave_ISR_IT+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001094:	6822      	ldr	r2, [r4, #0]
 8001096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800109a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800109c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800109e:	3301      	adds	r3, #1
 80010a0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80010a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010a4:	3b01      	subs	r3, #1
 80010a6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80010a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80010b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1c1      	bne.n	800103c <I2C_Slave_ISR_IT+0x48>
 80010b8:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80010bc:	d1d0      	bne.n	8001060 <I2C_Slave_ISR_IT+0x6c>
 80010be:	e7bd      	b.n	800103c <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80010c0:	0728      	lsls	r0, r5, #28
 80010c2:	d505      	bpl.n	80010d0 <I2C_Slave_ISR_IT+0xdc>
 80010c4:	0739      	lsls	r1, r7, #28
 80010c6:	d503      	bpl.n	80010d0 <I2C_Slave_ISR_IT+0xdc>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff fdfc 	bl	8000cc6 <I2C_ITAddrCplt.isra.8>
 80010ce:	e7b5      	b.n	800103c <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80010d0:	07aa      	lsls	r2, r5, #30
 80010d2:	d5b3      	bpl.n	800103c <I2C_Slave_ISR_IT+0x48>
 80010d4:	07bb      	lsls	r3, r7, #30
 80010d6:	d5b1      	bpl.n	800103c <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 80010d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b16b      	cbz	r3, 80010fa <I2C_Slave_ISR_IT+0x106>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010e0:	6822      	ldr	r2, [r4, #0]
 80010e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80010e6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80010e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80010ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80010f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010f4:	3b01      	subs	r3, #1
 80010f6:	8523      	strh	r3, [r4, #40]	; 0x28
 80010f8:	e7a0      	b.n	800103c <I2C_Slave_ISR_IT+0x48>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80010fa:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 80010fe:	d0af      	beq.n	8001060 <I2C_Slave_ISR_IT+0x6c>
 8001100:	e79c      	b.n	800103c <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8001102:	2002      	movs	r0, #2
}
 8001104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001106 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001106:	6803      	ldr	r3, [r0, #0]
 8001108:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800110a:	681a      	ldr	r2, [r3, #0]
{
 800110c:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800110e:	05cc      	lsls	r4, r1, #23
 8001110:	d508      	bpl.n	8001124 <HAL_I2C_ER_IRQHandler+0x1e>
 8001112:	0614      	lsls	r4, r2, #24
 8001114:	d506      	bpl.n	8001124 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001116:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001118:	f044 0401 	orr.w	r4, r4, #1
 800111c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800111e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001122:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001124:	054c      	lsls	r4, r1, #21
 8001126:	d508      	bpl.n	800113a <HAL_I2C_ER_IRQHandler+0x34>
 8001128:	0614      	lsls	r4, r2, #24
 800112a:	d506      	bpl.n	800113a <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800112c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800112e:	f044 0408 	orr.w	r4, r4, #8
 8001132:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001134:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001138:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800113a:	0589      	lsls	r1, r1, #22
 800113c:	d508      	bpl.n	8001150 <HAL_I2C_ER_IRQHandler+0x4a>
 800113e:	0612      	lsls	r2, r2, #24
 8001140:	d506      	bpl.n	8001150 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001142:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001144:	f042 0202 	orr.w	r2, r2, #2
 8001148:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800114a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114e:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001150:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001152:	f011 0f0b 	tst.w	r1, #11
 8001156:	d003      	beq.n	8001160 <HAL_I2C_ER_IRQHandler+0x5a>
}
 8001158:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800115c:	f7ff be44 	b.w	8000de8 <I2C_ITError>
}
 8001160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001164:	4770      	bx	lr

08001166 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001166:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8001168:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800116a:	b10b      	cbz	r3, 8001170 <I2C_DMAAbort+0xa>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800116c:	2200      	movs	r2, #0
 800116e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8001170:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001172:	b10b      	cbz	r3, 8001178 <I2C_DMAAbort+0x12>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8001178:	f7ff be20 	b.w	8000dbc <I2C_TreatErrorCallback>

0800117c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800117c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	2a20      	cmp	r2, #32
{
 8001184:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001186:	d11d      	bne.n	80011c4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001188:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800118c:	2b01      	cmp	r3, #1
 800118e:	d019      	beq.n	80011c4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001190:	2324      	movs	r3, #36	; 0x24
 8001192:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001196:	6803      	ldr	r3, [r0, #0]
 8001198:	681c      	ldr	r4, [r3, #0]
 800119a:	f024 0401 	bic.w	r4, r4, #1
 800119e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011a0:	681c      	ldr	r4, [r3, #0]
 80011a2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80011a6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011a8:	681c      	ldr	r4, [r3, #0]
 80011aa:	4321      	orrs	r1, r4
 80011ac:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	f041 0101 	orr.w	r1, r1, #1
 80011b4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011b6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80011b8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80011c0:	4618      	mov	r0, r3
 80011c2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80011c4:	2002      	movs	r0, #2
  }
}
 80011c6:	bd10      	pop	{r4, pc}

080011c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011c8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ca:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80011ce:	b2e4      	uxtb	r4, r4
 80011d0:	2c20      	cmp	r4, #32
 80011d2:	d11c      	bne.n	800120e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d018      	beq.n	800120e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011dc:	2324      	movs	r3, #36	; 0x24
 80011de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011e2:	6803      	ldr	r3, [r0, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011ec:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011f2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011f6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001200:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001202:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001206:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800120a:	4618      	mov	r0, r3
 800120c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800120e:	2002      	movs	r0, #2
  }
}
 8001210:	bd10      	pop	{r4, pc}
	...

08001214 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001214:	4a02      	ldr	r2, [pc, #8]	; (8001220 <HAL_I2CEx_EnableFastModePlus+0xc>)
 8001216:	6853      	ldr	r3, [r2, #4]
 8001218:	4318      	orrs	r0, r3
 800121a:	6050      	str	r0, [r2, #4]
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40010000 	.word	0x40010000

08001224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001224:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001226:	4604      	mov	r4, r0
{
 8001228:	b086      	sub	sp, #24
  if (hpcd == NULL)
 800122a:	2800      	cmp	r0, #0
 800122c:	d057      	beq.n	80012de <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800122e:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001236:	b91b      	cbnz	r3, 8001240 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001238:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800123c:	f004 fafe 	bl	800583c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001240:	2303      	movs	r3, #3
 8001242:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001246:	6820      	ldr	r0, [r4, #0]
 8001248:	f002 fd39 	bl	8003cbe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124c:	2200      	movs	r2, #0
 800124e:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001250:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001252:	4615      	mov	r5, r2
 8001254:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001256:	4298      	cmp	r0, r3
 8001258:	f102 0201 	add.w	r2, r2, #1
 800125c:	d820      	bhi.n	80012a0 <HAL_PCD_Init+0x7c>
 800125e:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001260:	4611      	mov	r1, r2
 8001262:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	4298      	cmp	r0, r3
 8001266:	f102 0201 	add.w	r2, r2, #1
 800126a:	d828      	bhi.n	80012be <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800126c:	f104 0610 	add.w	r6, r4, #16
 8001270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001272:	466d      	mov	r5, sp
 8001274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001276:	6833      	ldr	r3, [r6, #0]
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	1d23      	adds	r3, r4, #4
 800127c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800127e:	6820      	ldr	r0, [r4, #0]
 8001280:	f002 fd27 	bl	8003cd2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001284:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8001286:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001288:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800128c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001290:	69e3      	ldr	r3, [r4, #28]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d102      	bne.n	800129c <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001296:	4620      	mov	r0, r4
 8001298:	f000 fbbb 	bl	8001a12 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800129c:	4628      	mov	r0, r5
 800129e:	e01f      	b.n	80012e0 <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 80012a0:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 80012a4:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012a8:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 80012aa:	3302      	adds	r3, #2
 80012ac:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 80012ae:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012b2:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b6:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012b8:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ba:	50e5      	str	r5, [r4, r3]
 80012bc:	e7ca      	b.n	8001254 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 80012be:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 80012c2:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012c6:	330a      	adds	r3, #10
 80012c8:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 80012ca:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ce:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d2:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012d6:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012da:	50e1      	str	r1, [r4, r3]
 80012dc:	e7c1      	b.n	8001262 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 80012de:	2001      	movs	r0, #1
}
 80012e0:	b006      	add	sp, #24
 80012e2:	bd70      	pop	{r4, r5, r6, pc}

080012e4 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80012e4:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80012e8:	2b01      	cmp	r3, #1
{
 80012ea:	b510      	push	{r4, lr}
 80012ec:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012ee:	d00c      	beq.n	800130a <HAL_PCD_Start+0x26>
 80012f0:	2301      	movs	r3, #1
 80012f2:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 80012f6:	6800      	ldr	r0, [r0, #0]
 80012f8:	f002 ffcd 	bl	8004296 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80012fc:	6820      	ldr	r0, [r4, #0]
 80012fe:	f002 fcd3 	bl	8003ca8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001302:	2000      	movs	r0, #0
 8001304:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001308:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800130a:	2002      	movs	r0, #2
}
 800130c:	bd10      	pop	{r4, pc}

0800130e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800130e:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8001312:	2a01      	cmp	r2, #1
{
 8001314:	b510      	push	{r4, lr}
 8001316:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001318:	d00b      	beq.n	8001332 <HAL_PCD_SetAddress+0x24>
 800131a:	2201      	movs	r2, #1
 800131c:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001320:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001324:	6800      	ldr	r0, [r0, #0]
 8001326:	f002 ffb0 	bl	800428a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800132a:	2000      	movs	r0, #0
 800132c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8001330:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001332:	2002      	movs	r0, #2
  return HAL_OK;
}
 8001334:	bd10      	pop	{r4, pc}

08001336 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001336:	b570      	push	{r4, r5, r6, lr}
 8001338:	4604      	mov	r4, r0
 800133a:	f001 0007 	and.w	r0, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800133e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001342:	b2c5      	uxtb	r5, r0
 8001344:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001348:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 800134c:	bf15      	itete	ne
 800134e:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8001352:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001356:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001358:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 1U;
 800135c:	bf15      	itete	ne
 800135e:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8001360:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8001362:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8001366:	f885 6129 	strbeq.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 800136a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800136c:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 800136e:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001370:	b2c0      	uxtb	r0, r0
 8001372:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8001374:	b102      	cbz	r2, 8001378 <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001376:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001378:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 800137a:	bf04      	itt	eq
 800137c:	2300      	moveq	r3, #0
 800137e:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001380:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001384:	2b01      	cmp	r3, #1
 8001386:	d009      	beq.n	800139c <HAL_PCD_EP_Open+0x66>
 8001388:	2301      	movs	r3, #1
 800138a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800138e:	6820      	ldr	r0, [r4, #0]
 8001390:	f002 fcbc 	bl	8003d0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001394:	2000      	movs	r0, #0
 8001396:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 800139a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800139c:	2002      	movs	r0, #2
}
 800139e:	bd70      	pop	{r4, r5, r6, pc}

080013a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013a0:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013a4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ae:	fb01 0102 	mla	r1, r1, r2, r0
{
 80013b2:	b510      	push	{r4, lr}
 80013b4:	4604      	mov	r4, r0
    ep->is_in = 1U;
 80013b6:	bf19      	ittee	ne
 80013b8:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013bc:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013be:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 80013c2:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 80013c6:	bf15      	itete	ne
 80013c8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80013ca:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 80013cc:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 80013d0:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013d4:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 80013d6:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d009      	beq.n	80013f2 <HAL_PCD_EP_Close+0x52>
 80013de:	2301      	movs	r3, #1
 80013e0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	f002 fe03 	bl	8003ff0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80013f0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80013f2:	2002      	movs	r0, #2
}
 80013f4:	bd10      	pop	{r4, pc}

080013f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013f6:	b570      	push	{r4, r5, r6, lr}
 80013f8:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013fc:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8001400:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001402:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001404:	f886 1128 	strb.w	r1, [r6, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001408:	f504 7194 	add.w	r1, r4, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800140c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800140e:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
  ep->xfer_len = len;
 8001412:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
  ep->xfer_count = 0U;
 8001416:	f8c6 5144 	str.w	r5, [r6, #324]	; 0x144
  ep->is_in = 0U;
 800141a:	f886 5129 	strb.w	r5, [r6, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800141e:	6800      	ldr	r0, [r0, #0]
 8001420:	f002 ff5a 	bl	80042d8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001424:	4628      	mov	r0, r5
 8001426:	bd70      	pop	{r4, r5, r6, pc}

08001428 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001428:	f001 0107 	and.w	r1, r1, #7
 800142c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001430:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8001434:	4770      	bx	lr

08001436 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001436:	b570      	push	{r4, r5, r6, lr}
 8001438:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800143c:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8001440:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8001442:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8001444:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8001446:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001448:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800144c:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001450:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001452:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001454:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8001456:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800145a:	6800      	ldr	r0, [r0, #0]
 800145c:	f002 ff3c 	bl	80042d8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001460:	4630      	mov	r0, r6
 8001462:	bd70      	pop	{r4, r5, r6, pc}

08001464 <HAL_PCD_IRQHandler>:
{
 8001464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001468:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800146a:	6800      	ldr	r0, [r0, #0]
 800146c:	f002 ff1e 	bl	80042ac <USB_ReadInterrupts>
 8001470:	0402      	lsls	r2, r0, #16
 8001472:	f100 823a 	bmi.w	80018ea <HAL_PCD_IRQHandler+0x486>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	f002 ff18 	bl	80042ac <USB_ReadInterrupts>
 800147c:	0543      	lsls	r3, r0, #21
 800147e:	d50f      	bpl.n	80014a0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800148a:	041b      	lsls	r3, r3, #16
 800148c:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 800148e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001490:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001494:	f004 fa23 	bl	80058de <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001498:	2100      	movs	r1, #0
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff ff37 	bl	800130e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	f002 ff03 	bl	80042ac <USB_ReadInterrupts>
 80014a6:	0443      	lsls	r3, r0, #17
 80014a8:	d508      	bpl.n	80014bc <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014aa:	6822      	ldr	r2, [r4, #0]
 80014ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b4:	041b      	lsls	r3, r3, #16
 80014b6:	0c1b      	lsrs	r3, r3, #16
 80014b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014bc:	6820      	ldr	r0, [r4, #0]
 80014be:	f002 fef5 	bl	80042ac <USB_ReadInterrupts>
 80014c2:	0487      	lsls	r7, r0, #18
 80014c4:	d508      	bpl.n	80014d8 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80014cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014d0:	041b      	lsls	r3, r3, #16
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014d8:	6820      	ldr	r0, [r4, #0]
 80014da:	f002 fee7 	bl	80042ac <USB_ReadInterrupts>
 80014de:	04c6      	lsls	r6, r0, #19
 80014e0:	d526      	bpl.n	8001530 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80014e2:	6822      	ldr	r2, [r4, #0]
 80014e4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014f4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80014f8:	f023 0308 	bic.w	r3, r3, #8
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8001504:	f894 3260 	ldrb.w	r3, [r4, #608]	; 0x260
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 800150c:	2100      	movs	r1, #0
 800150e:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001512:	4620      	mov	r0, r4
 8001514:	f004 fae6 	bl	8005ae4 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8001518:	4620      	mov	r0, r4
 800151a:	f004 fa03 	bl	8005924 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800151e:	6822      	ldr	r2, [r4, #0]
 8001520:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001530:	6820      	ldr	r0, [r4, #0]
 8001532:	f002 febb 	bl	80042ac <USB_ReadInterrupts>
 8001536:	0505      	lsls	r5, r0, #20
 8001538:	d51d      	bpl.n	8001576 <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800153a:	6820      	ldr	r0, [r4, #0]
 800153c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001540:	b29b      	uxth	r3, r3
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800154a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800154e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001552:	041b      	lsls	r3, r3, #16
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800155a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800155e:	b29b      	uxth	r3, r3
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001568:	f002 fea0 	bl	80042ac <USB_ReadInterrupts>
 800156c:	04c0      	lsls	r0, r0, #19
 800156e:	d402      	bmi.n	8001576 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8001570:	4620      	mov	r0, r4
 8001572:	f004 f9c7 	bl	8005904 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001576:	6820      	ldr	r0, [r4, #0]
 8001578:	f002 fe98 	bl	80042ac <USB_ReadInterrupts>
 800157c:	0601      	lsls	r1, r0, #24
 800157e:	d529      	bpl.n	80015d4 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800158a:	0412      	lsls	r2, r2, #16
 800158c:	0c12      	lsrs	r2, r2, #16
 800158e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001592:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
 8001596:	2a00      	cmp	r2, #0
 8001598:	f040 81ac 	bne.w	80018f4 <HAL_PCD_IRQHandler+0x490>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800159c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80015a0:	b292      	uxth	r2, r2
 80015a2:	f042 0204 	orr.w	r2, r2, #4
 80015a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80015aa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f042 0208 	orr.w	r2, r2, #8
 80015b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80015b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80015bc:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 80015c0:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80015c2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 80015c6:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80015ca:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015ce:	4620      	mov	r0, r4
 80015d0:	f004 fa88 	bl	8005ae4 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	f002 fe69 	bl	80042ac <USB_ReadInterrupts>
 80015da:	0582      	lsls	r2, r0, #22
 80015dc:	d50b      	bpl.n	80015f6 <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80015e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	0c1b      	lsrs	r3, r3, #16
 80015ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80015f0:	4620      	mov	r0, r4
 80015f2:	f004 f970 	bl	80058d6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	f002 fe58 	bl	80042ac <USB_ReadInterrupts>
 80015fc:	05c3      	lsls	r3, r0, #23
 80015fe:	d508      	bpl.n	8001612 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8001616:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800161a:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 800161c:	f011 070f 	ands.w	r7, r1, #15
 8001620:	f040 80ab 	bne.w	800177a <HAL_PCD_IRQHandler+0x316>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001624:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001626:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800162a:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800162c:	d12b      	bne.n	8001686 <HAL_PCD_IRQHandler+0x222>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800162e:	ea03 030a 	and.w	r3, r3, sl
 8001632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001636:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001638:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800163c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001640:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8001644:	fa10 f083 	uxtah	r0, r0, r3
 8001648:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 800164c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800164e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001652:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001654:	4413      	add	r3, r2
 8001656:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001658:	4620      	mov	r0, r4
 800165a:	f004 f935 	bl	80058c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800165e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001662:	b153      	cbz	r3, 800167a <HAL_PCD_IRQHandler+0x216>
 8001664:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001666:	b942      	cbnz	r2, 800167a <HAL_PCD_IRQHandler+0x216>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001668:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800166c:	6821      	ldr	r1, [r4, #0]
 800166e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001672:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001676:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800167a:	6820      	ldr	r0, [r4, #0]
 800167c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	d4c8      	bmi.n	8001616 <HAL_PCD_IRQHandler+0x1b2>
 8001684:	e6f7      	b.n	8001476 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001686:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800168a:	d020      	beq.n	80016ce <HAL_PCD_IRQHandler+0x26a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800168c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001690:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001694:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8001698:	fa11 f383 	uxtah	r3, r1, r3

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800169c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80016a0:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80016a4:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80016a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016b0:	f002 fef4 	bl	800449c <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	8813      	ldrh	r3, [r2, #0]
 80016b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016bc:	051b      	lsls	r3, r3, #20
 80016be:	0d1b      	lsrs	r3, r3, #20
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016c6:	4620      	mov	r0, r4
 80016c8:	f004 f8f0 	bl	80058ac <HAL_PCD_SetupStageCallback>
 80016cc:	e7d5      	b.n	800167a <HAL_PCD_IRQHandler+0x216>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016ce:	041f      	lsls	r7, r3, #16
 80016d0:	d5d3      	bpl.n	800167a <HAL_PCD_IRQHandler+0x216>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d2:	8803      	ldrh	r3, [r0, #0]
 80016d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d8:	051b      	lsls	r3, r3, #20
 80016da:	0d1b      	lsrs	r3, r3, #20
 80016dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e0:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80016e6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80016ea:	f200 4106 	addw	r1, r0, #1030	; 0x406
 80016ee:	fa11 f383 	uxtah	r3, r1, r3
 80016f2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 80016f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016fa:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016fe:	b18b      	cbz	r3, 8001724 <HAL_PCD_IRQHandler+0x2c0>
 8001700:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001704:	b171      	cbz	r1, 8001724 <HAL_PCD_IRQHandler+0x2c0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001706:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800170a:	f002 fec7 	bl	800449c <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800170e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001712:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8001716:	4413      	add	r3, r2
 8001718:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800171c:	4629      	mov	r1, r5
 800171e:	4620      	mov	r0, r4
 8001720:	f004 f8ca 	bl	80058b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800172a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800172e:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001732:	b292      	uxth	r2, r2
 8001734:	b933      	cbnz	r3, 8001744 <HAL_PCD_IRQHandler+0x2e0>
 8001736:	5aab      	ldrh	r3, [r5, r2]
 8001738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800173c:	ea43 030b 	orr.w	r3, r3, fp
 8001740:	52ab      	strh	r3, [r5, r2]
 8001742:	e007      	b.n	8001754 <HAL_PCD_IRQHandler+0x2f0>
 8001744:	2b3d      	cmp	r3, #61	; 0x3d
 8001746:	d814      	bhi.n	8001772 <HAL_PCD_IRQHandler+0x30e>
 8001748:	0859      	lsrs	r1, r3, #1
 800174a:	07de      	lsls	r6, r3, #31
 800174c:	bf48      	it	mi
 800174e:	3101      	addmi	r1, #1
 8001750:	0289      	lsls	r1, r1, #10
 8001752:	52a9      	strh	r1, [r5, r2]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001754:	8803      	ldrh	r3, [r0, #0]
 8001756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	0c1b      	lsrs	r3, r3, #16
 8001762:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176e:	8003      	strh	r3, [r0, #0]
 8001770:	e783      	b.n	800167a <HAL_PCD_IRQHandler+0x216>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	ea4b 2383 	orr.w	r3, fp, r3, lsl #10
 8001778:	e7e2      	b.n	8001740 <HAL_PCD_IRQHandler+0x2dc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800177a:	b23e      	sxth	r6, r7
 800177c:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 8001780:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001784:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8001788:	d040      	beq.n	800180c <HAL_PCD_IRQHandler+0x3a8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800178a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800178e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001792:	051b      	lsls	r3, r3, #20
 8001794:	0d1b      	lsrs	r3, r3, #20
 8001796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800179a:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800179e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80017a2:	eb04 0108 	add.w	r1, r4, r8
 80017a6:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d159      	bne.n	8001862 <HAL_PCD_IRQHandler+0x3fe>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80017b2:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 80017b6:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80017ba:	fa15 f383 	uxtah	r3, r5, r3
 80017be:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80017c2:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80017c6:	b135      	cbz	r5, 80017d6 <HAL_PCD_IRQHandler+0x372>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017c8:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 80017cc:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80017d0:	462b      	mov	r3, r5
 80017d2:	f002 fe63 	bl	800449c <USB_ReadPMA>
 80017d6:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 80017da:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 80017de:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80017e2:	442a      	add	r2, r5
 80017e4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        ep->xfer_buff += count;
 80017e8:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 80017ec:	442a      	add	r2, r5
 80017ee:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80017f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017f6:	b11b      	cbz	r3, 8001800 <HAL_PCD_IRQHandler+0x39c>
 80017f8:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 80017fc:	4285      	cmp	r5, r0
 80017fe:	d26b      	bcs.n	80018d8 <HAL_PCD_IRQHandler+0x474>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001800:	44a0      	add	r8, r4
 8001802:	4620      	mov	r0, r4
 8001804:	f898 1128 	ldrb.w	r1, [r8, #296]	; 0x128
 8001808:	f004 f856 	bl	80058b8 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800180c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001810:	f43f af33 	beq.w	800167a <HAL_PCD_IRQHandler+0x216>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001814:	6822      	ldr	r2, [r4, #0]
 8001816:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 800181a:	b29b      	uxth	r3, r3
 800181c:	ea03 030a 	and.w	r3, r3, sl
 8001820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001824:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001828:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 800182c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001830:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001834:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8001838:	fa12 f283 	uxtah	r2, r2, r3
 800183c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001840:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
 8001844:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001848:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800184a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800184c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001850:	441a      	add	r2, r3
 8001852:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001854:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001856:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001858:	2b00      	cmp	r3, #0
 800185a:	d143      	bne.n	80018e4 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800185c:	f004 f834 	bl	80058c8 <HAL_PCD_DataInStageCallback>
 8001860:	e70b      	b.n	800167a <HAL_PCD_IRQHandler+0x216>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001862:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8001866:	b213      	sxth	r3, r2
 8001868:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800186c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001870:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001874:	d022      	beq.n	80018bc <HAL_PCD_IRQHandler+0x458>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001876:	f200 4502 	addw	r5, r0, #1026	; 0x402
 800187a:	fa15 f383 	uxtah	r3, r5, r3
 800187e:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001882:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001886:	b135      	cbz	r5, 8001896 <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001888:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 800188c:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800188e:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001892:	f002 fe03 	bl	800449c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001896:	eb04 0308 	add.w	r3, r4, r8
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80018a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018b6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80018ba:	e78c      	b.n	80017d6 <HAL_PCD_IRQHandler+0x372>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018bc:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80018c0:	fa15 f383 	uxtah	r3, r5, r3
 80018c4:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80018c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80018cc:	2d00      	cmp	r5, #0
 80018ce:	d0e2      	beq.n	8001896 <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018d0:	462b      	mov	r3, r5
 80018d2:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 80018d6:	e7da      	b.n	800188e <HAL_PCD_IRQHandler+0x42a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80018d8:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 80018dc:	4620      	mov	r0, r4
 80018de:	f7ff fd8a 	bl	80013f6 <HAL_PCD_EP_Receive>
 80018e2:	e793      	b.n	800180c <HAL_PCD_IRQHandler+0x3a8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80018e4:	f7ff fda7 	bl	8001436 <HAL_PCD_EP_Transmit>
 80018e8:	e6c7      	b.n	800167a <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018ea:	f8df a010 	ldr.w	sl, [pc, #16]	; 80018fc <HAL_PCD_IRQHandler+0x498>
 80018ee:	f8df b010 	ldr.w	fp, [pc, #16]	; 8001900 <HAL_PCD_IRQHandler+0x49c>
 80018f2:	e6c2      	b.n	800167a <HAL_PCD_IRQHandler+0x216>
      HAL_PCD_SuspendCallback(hpcd);
 80018f4:	4620      	mov	r0, r4
 80018f6:	f004 f805 	bl	8005904 <HAL_PCD_SuspendCallback>
 80018fa:	e66b      	b.n	80015d4 <HAL_PCD_IRQHandler+0x170>
 80018fc:	ffff8f0f 	.word	0xffff8f0f
 8001900:	ffff8000 	.word	0xffff8000

08001904 <HAL_PCD_EP_SetStall>:
{
 8001904:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001906:	6843      	ldr	r3, [r0, #4]
 8001908:	f001 0507 	and.w	r5, r1, #7
 800190c:	429d      	cmp	r5, r3
{
 800190e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001910:	d82d      	bhi.n	800196e <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001912:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001916:	f04f 0320 	mov.w	r3, #32
 800191a:	d01e      	beq.n	800195a <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 800191c:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001920:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001924:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001926:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8001928:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 800192c:	2201      	movs	r2, #1
 800192e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001930:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001932:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
 8001936:	4291      	cmp	r1, r2
 8001938:	d01b      	beq.n	8001972 <HAL_PCD_EP_SetStall+0x6e>
 800193a:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800193e:	4619      	mov	r1, r3
 8001940:	6820      	ldr	r0, [r4, #0]
 8001942:	f002 fc35 	bl	80041b0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001946:	b925      	cbnz	r5, 8001952 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001948:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	f002 fcb1 	bl	80042b4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001952:	2000      	movs	r0, #0
 8001954:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001958:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800195a:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 800195e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001962:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001964:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 8001968:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
 800196c:	e7de      	b.n	800192c <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800196e:	2001      	movs	r0, #1
 8001970:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001972:	2002      	movs	r0, #2
}
 8001974:	bd38      	pop	{r3, r4, r5, pc}

08001976 <HAL_PCD_EP_ClrStall>:
{
 8001976:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001978:	6843      	ldr	r3, [r0, #4]
 800197a:	f001 020f 	and.w	r2, r1, #15
 800197e:	429a      	cmp	r2, r3
{
 8001980:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001982:	d82a      	bhi.n	80019da <HAL_PCD_EP_ClrStall+0x64>
 8001984:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8001988:	f011 0f80 	tst.w	r1, #128	; 0x80
 800198c:	b2da      	uxtb	r2, r3
 800198e:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001992:	fb01 0102 	mla	r1, r1, r2, r0
 8001996:	bf19      	ittee	ne
 8001998:	3128      	addne	r1, #40	; 0x28
    ep->is_in = 1U;
 800199a:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800199e:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 80019a2:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 80019a6:	bf14      	ite	ne
 80019a8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80019aa:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80019ac:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80019b0:	bf14      	ite	ne
 80019b2:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 80019b6:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 80019ba:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019bc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80019be:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d00b      	beq.n	80019de <HAL_PCD_EP_ClrStall+0x68>
 80019c6:	2301      	movs	r3, #1
 80019c8:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019cc:	6820      	ldr	r0, [r4, #0]
 80019ce:	f002 fc10 	bl	80041f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019d2:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 80019d6:	4628      	mov	r0, r5
 80019d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
 80019dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80019de:	2002      	movs	r0, #2
}
 80019e0:	bd38      	pop	{r3, r4, r5, pc}

080019e2 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80019e2:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e6:	bf1b      	ittet	ne
 80019e8:	f001 0107 	andne.w	r1, r1, #7
 80019ec:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019f0:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f4:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80019f6:	bf08      	it	eq
 80019f8:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80019fc:	b91a      	cbnz	r2, 8001a06 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80019fe:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001a00:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001a02:	2000      	movs	r0, #0
 8001a04:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001a06:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001a08:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a0a:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001a0c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001a0e:	8143      	strh	r3, [r0, #10]
 8001a10:	e7f7      	b.n	8001a02 <HAL_PCDEx_PMAConfig+0x20>

08001a12 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001a12:	6802      	ldr	r2, [r0, #0]
{
 8001a14:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001a16:	2101      	movs	r1, #1
 8001a18:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a22:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a2e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a40:	4a02      	ldr	r2, [pc, #8]	; (8001a4c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4770      	bx	lr
 8001a4c:	58000400 	.word	0x58000400

08001a50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_PWREx_GetVoltageRange+0xc>)
 8001a52:	6818      	ldr	r0, [r3, #0]
}
 8001a54:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	58000400 	.word	0x58000400

08001a60 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001a60:	4a02      	ldr	r2, [pc, #8]	; (8001a6c <HAL_PWREx_EnableVddUSB+0xc>)
 8001a62:	6853      	ldr	r3, [r2, #4]
 8001a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a68:	6053      	str	r3, [r2, #4]
 8001a6a:	4770      	bx	lr
 8001a6c:	58000400 	.word	0x58000400

08001a70 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	6818      	ldr	r0, [r3, #0]
}
 8001a76:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	6818      	ldr	r0, [r3, #0]
}
 8001a82:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8001a90:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	6818      	ldr	r0, [r3, #0]
}
 8001a9c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001aa0:	4770      	bx	lr

08001aa2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aac:	4318      	orrs	r0, r3
 8001aae:	6010      	str	r0, [r2, #0]
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 8001abc:	28b0      	cmp	r0, #176	; 0xb0
 8001abe:	bf28      	it	cs
 8001ac0:	20b0      	movcs	r0, #176	; 0xb0
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac8:	6853      	ldr	r3, [r2, #4]
 8001aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ace:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001ad2:	6050      	str	r0, [r2, #4]
 8001ad4:	4770      	bx	lr
	...

08001ad8 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001ad8:	28b0      	cmp	r0, #176	; 0xb0
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001adc:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001ade:	bf98      	it	ls
 8001ae0:	0900      	lsrls	r0, r0, #4
{
 8001ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001ae4:	bf8c      	ite	hi
 8001ae6:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001ae8:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001aec:	4c2f      	ldr	r4, [pc, #188]	; (8001bac <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001af2:	b08d      	sub	sp, #52	; 0x34
 8001af4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001af8:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001afc:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8001b08:	fbb5 f5f3 	udiv	r5, r5, r3
 8001b0c:	f7ff ffa0 	bl	8001a50 <HAL_PWREx_GetVoltageRange>
 8001b10:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b16:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001b1a:	f104 0210 	add.w	r2, r4, #16
 8001b1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b20:	ab01      	add	r3, sp, #4
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001b22:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001b28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001b30:	ac0c      	add	r4, sp, #48	; 0x30
 8001b32:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b36:	d11f      	bne.n	8001b78 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8001b38:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001b3a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8001b3e:	4295      	cmp	r5, r2
 8001b40:	d815      	bhi.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001b42:	aa0c      	add	r2, sp, #48	; 0x30
 8001b44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001b48:	f853 4c10 	ldr.w	r4, [r3, #-16]
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001b4c:	4d19      	ldr	r5, [pc, #100]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	f023 0307 	bic.w	r3, r3, #7
 8001b54:	4323      	orrs	r3, r4
 8001b56:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b58:	f7fe fd32 	bl	80005c0 <HAL_GetTick>
 8001b5c:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	429c      	cmp	r4, r3
 8001b66:	d116      	bne.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001b68:	2000      	movs	r0, #0
}
 8001b6a:	b00d      	add	sp, #52	; 0x34
 8001b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001b6e:	3301      	adds	r3, #1
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d1e2      	bne.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001b74:	2400      	movs	r4, #0
 8001b76:	e7e9      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	429d      	cmp	r5, r3
 8001b7c:	d907      	bls.n	8001b8e <RCC_SetFlashLatencyFromMSIRange+0xb6>
 8001b7e:	9b02      	ldr	r3, [sp, #8]
 8001b80:	429d      	cmp	r5, r3
 8001b82:	d906      	bls.n	8001b92 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8001b84:	9b03      	ldr	r3, [sp, #12]
 8001b86:	429d      	cmp	r5, r3
 8001b88:	d8f4      	bhi.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e7d9      	b.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e7d7      	b.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001b92:	2301      	movs	r3, #1
 8001b94:	e7d5      	b.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b96:	f7fe fd13 	bl	80005c0 <HAL_GetTick>
 8001b9a:	1b80      	subs	r0, r0, r6
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d9de      	bls.n	8001b5e <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	e7e2      	b.n	8001b6a <RCC_SetFlashLatencyFromMSIRange+0x92>
 8001ba4:	08006d18 	.word	0x08006d18
 8001ba8:	08006cb8 	.word	0x08006cb8
 8001bac:	08006bcc 	.word	0x08006bcc
 8001bb0:	000f4240 	.word	0x000f4240
 8001bb4:	58004000 	.word	0x58004000

08001bb8 <HAL_RCC_OscConfig>:
{
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 8001bba:	4604      	mov	r4, r0
 8001bbc:	b908      	cbnz	r0, 8001bc2 <HAL_RCC_OscConfig+0xa>
    return HAL_ERROR;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	069f      	lsls	r7, r3, #26
 8001bc6:	d52a      	bpl.n	8001c1e <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bcc:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001bce:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bd0:	f013 030c 	ands.w	r3, r3, #12
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2a>
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d146      	bne.n	8001c68 <HAL_RCC_OscConfig+0xb0>
 8001bda:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d142      	bne.n	8001c68 <HAL_RCC_OscConfig+0xb0>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001be2:	f7ff ff58 	bl	8001a96 <LL_RCC_MSI_IsReady>
 8001be6:	b110      	cbz	r0, 8001bee <HAL_RCC_OscConfig+0x36>
 8001be8:	69e3      	ldr	r3, [r4, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0e7      	beq.n	8001bbe <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bf0:	f7ff ff5f 	bl	8001ab2 <LL_RCC_MSI_GetRange>
 8001bf4:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bf8:	d92b      	bls.n	8001c52 <HAL_RCC_OscConfig+0x9a>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfa:	f7ff ff6d 	bl	8001ad8 <RCC_SetFlashLatencyFromMSIRange>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d1dd      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c04:	f7ff ff4d 	bl	8001aa2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c08:	6a20      	ldr	r0, [r4, #32]
 8001c0a:	f7ff ff5b 	bl	8001ac4 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 8001c0e:	f003 fd71 	bl	80056f4 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c12:	4bb8      	ldr	r3, [pc, #736]	; (8001ef4 <HAL_RCC_OscConfig+0x33c>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	f7fe fc8b 	bl	8000530 <HAL_InitTick>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d1cf      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	07de      	lsls	r6, r3, #31
 8001c22:	d44e      	bmi.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	079d      	lsls	r5, r3, #30
 8001c28:	f100 8098 	bmi.w	8001d5c <HAL_RCC_OscConfig+0x1a4>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f013 0f18 	tst.w	r3, #24
 8001c32:	f040 80d9 	bne.w	8001de8 <HAL_RCC_OscConfig+0x230>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	0758      	lsls	r0, r3, #29
 8001c3a:	f100 8168 	bmi.w	8001f0e <HAL_RCC_OscConfig+0x356>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	0658      	lsls	r0, r3, #25
 8001c42:	f100 81ba 	bmi.w	8001fba <HAL_RCC_OscConfig+0x402>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c48:	2900      	cmp	r1, #0
 8001c4a:	f040 81e2 	bne.w	8002012 <HAL_RCC_OscConfig+0x45a>
  return HAL_OK;
 8001c4e:	2000      	movs	r0, #0
 8001c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c52:	f7ff ff26 	bl	8001aa2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	6a20      	ldr	r0, [r4, #32]
 8001c58:	f7ff ff34 	bl	8001ac4 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c5e:	f7ff ff3b 	bl	8001ad8 <RCC_SetFlashLatencyFromMSIRange>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0d3      	beq.n	8001c0e <HAL_RCC_OscConfig+0x56>
 8001c66:	e7aa      	b.n	8001bbe <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c68:	69e2      	ldr	r2, [r4, #28]
 8001c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6e:	b1ba      	cbz	r2, 8001ca0 <HAL_RCC_OscConfig+0xe8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c78:	f7fe fca2 	bl	80005c0 <HAL_GetTick>
 8001c7c:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c7e:	f7ff ff0a 	bl	8001a96 <LL_RCC_MSI_IsReady>
 8001c82:	b130      	cbz	r0, 8001c92 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c86:	f7ff ff0c 	bl	8001aa2 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8a:	6a20      	ldr	r0, [r4, #32]
 8001c8c:	f7ff ff1a 	bl	8001ac4 <LL_RCC_MSI_SetCalibTrimming>
 8001c90:	e7c5      	b.n	8001c1e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c92:	f7fe fc95 	bl	80005c0 <HAL_GetTick>
 8001c96:	1b40      	subs	r0, r0, r5
 8001c98:	2802      	cmp	r0, #2
 8001c9a:	d9f0      	bls.n	8001c7e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fc8a 	bl	80005c0 <HAL_GetTick>
 8001cac:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cae:	f7ff fef2 	bl	8001a96 <LL_RCC_MSI_IsReady>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d0b3      	beq.n	8001c1e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb6:	f7fe fc83 	bl	80005c0 <HAL_GetTick>
 8001cba:	1b40      	subs	r0, r0, r5
 8001cbc:	2802      	cmp	r0, #2
 8001cbe:	d9f6      	bls.n	8001cae <HAL_RCC_OscConfig+0xf6>
 8001cc0:	e7ec      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc6:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cc8:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x126>
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d10b      	bne.n	8001cee <HAL_RCC_OscConfig+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cd6:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_OscConfig+0x136>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	f7ff fec7 	bl	8001a70 <LL_RCC_HSE_IsReady>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d09e      	beq.n	8001c24 <HAL_RCC_OscConfig+0x6c>
 8001ce6:	6863      	ldr	r3, [r4, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d19b      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6c>
 8001cec:	e767      	b.n	8001bbe <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cee:	6862      	ldr	r2, [r4, #4]
 8001cf0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	d110      	bne.n	8001d1c <HAL_RCC_OscConfig+0x164>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d02:	f7fe fc5d 	bl	80005c0 <HAL_GetTick>
 8001d06:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d08:	f7ff feb2 	bl	8001a70 <LL_RCC_HSE_IsReady>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d189      	bne.n	8001c24 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe fc56 	bl	80005c0 <HAL_GetTick>
 8001d14:	1b40      	subs	r0, r0, r5
 8001d16:	2864      	cmp	r0, #100	; 0x64
 8001d18:	d9f6      	bls.n	8001d08 <HAL_RCC_OscConfig+0x150>
 8001d1a:	e7bf      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001d20:	d104      	bne.n	8001d2c <HAL_RCC_OscConfig+0x174>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e7e6      	b.n	8001cfa <HAL_RCC_OscConfig+0x142>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001d32:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001d3a:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d1e0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 8001d40:	f7fe fc3e 	bl	80005c0 <HAL_GetTick>
 8001d44:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d46:	f7ff fe93 	bl	8001a70 <LL_RCC_HSE_IsReady>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	f43f af6a 	beq.w	8001c24 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7fe fc36 	bl	80005c0 <HAL_GetTick>
 8001d54:	1b40      	subs	r0, r0, r5
 8001d56:	2864      	cmp	r0, #100	; 0x64
 8001d58:	d9f5      	bls.n	8001d46 <HAL_RCC_OscConfig+0x18e>
 8001d5a:	e79f      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d60:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d62:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d64:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x1c0>
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d114      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1e2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d70:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d110      	bne.n	8001d9a <HAL_RCC_OscConfig+0x1e2>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d78:	f7ff fe80 	bl	8001a7c <LL_RCC_HSI_IsReady>
 8001d7c:	b118      	cbz	r0, 8001d86 <HAL_RCC_OscConfig+0x1ce>
 8001d7e:	68e3      	ldr	r3, [r4, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f43f af1c 	beq.w	8001bbe <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8a:	6921      	ldr	r1, [r4, #16]
 8001d8c:	6853      	ldr	r3, [r2, #4]
 8001d8e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001d92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001d96:	6053      	str	r3, [r2, #4]
 8001d98:	e748      	b.n	8001c2c <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9a:	68e2      	ldr	r2, [r4, #12]
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	b182      	cbz	r2, 8001dc4 <HAL_RCC_OscConfig+0x20c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001daa:	f7fe fc09 	bl	80005c0 <HAL_GetTick>
 8001dae:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 8001db0:	f7ff fe64 	bl	8001a7c <LL_RCC_HSI_IsReady>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d1e6      	bne.n	8001d86 <HAL_RCC_OscConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7fe fc02 	bl	80005c0 <HAL_GetTick>
 8001dbc:	1b40      	subs	r0, r0, r5
 8001dbe:	2802      	cmp	r0, #2
 8001dc0:	d9f6      	bls.n	8001db0 <HAL_RCC_OscConfig+0x1f8>
 8001dc2:	e76b      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fbf8 	bl	80005c0 <HAL_GetTick>
 8001dd0:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 8001dd2:	f7ff fe53 	bl	8001a7c <LL_RCC_HSI_IsReady>
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	f43f af28 	beq.w	8001c2c <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7fe fbf0 	bl	80005c0 <HAL_GetTick>
 8001de0:	1b40      	subs	r0, r0, r5
 8001de2:	2802      	cmp	r0, #2
 8001de4:	d9f5      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x21a>
 8001de6:	e759      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de8:	6962      	ldr	r2, [r4, #20]
 8001dea:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d06b      	beq.n	8001eca <HAL_RCC_OscConfig+0x312>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001df2:	06d9      	lsls	r1, r3, #27
 8001df4:	d543      	bpl.n	8001e7e <HAL_RCC_OscConfig+0x2c6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001df6:	f7ff fe47 	bl	8001a88 <LL_RCC_LSI1_IsReady>
 8001dfa:	b310      	cbz	r0, 8001e42 <HAL_RCC_OscConfig+0x28a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001dfc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001e00:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001e0c:	f7fe fbd8 	bl	80005c0 <HAL_GetTick>
 8001e10:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e12:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e16:	071a      	lsls	r2, r3, #28
 8001e18:	f140 8199 	bpl.w	800214e <HAL_RCC_OscConfig+0x596>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e1c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e20:	69a2      	ldr	r2, [r4, #24]
 8001e22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e2a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e2e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fbc1 	bl	80005c0 <HAL_GetTick>
 8001e3e:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x2bc>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e42:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 8001e4e:	f7fe fbb7 	bl	80005c0 <HAL_GetTick>
 8001e52:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e54:	f7ff fe18 	bl	8001a88 <LL_RCC_LSI1_IsReady>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d1cf      	bne.n	8001dfc <HAL_RCC_OscConfig+0x244>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e5c:	f7fe fbb0 	bl	80005c0 <HAL_GetTick>
 8001e60:	1b40      	subs	r0, r0, r5
 8001e62:	2802      	cmp	r0, #2
 8001e64:	d9f6      	bls.n	8001e54 <HAL_RCC_OscConfig+0x29c>
 8001e66:	e719      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e68:	f7fe fbaa 	bl	80005c0 <HAL_GetTick>
 8001e6c:	1b40      	subs	r0, r0, r5
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	f63f af14 	bhi.w	8001c9c <HAL_RCC_OscConfig+0xe4>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e74:	f7ff fe08 	bl	8001a88 <LL_RCC_LSI1_IsReady>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d1f5      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2b0>
 8001e7c:	e6db      	b.n	8001c36 <HAL_RCC_OscConfig+0x7e>
 8001e7e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fb99 	bl	80005c0 <HAL_GetTick>
 8001e8e:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001e90:	f7ff fdfa 	bl	8001a88 <LL_RCC_LSI1_IsReady>
 8001e94:	b198      	cbz	r0, 8001ebe <HAL_RCC_OscConfig+0x306>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e9a:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e9c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001ea0:	f022 0204 	bic.w	r2, r2, #4
 8001ea4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ea8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001eac:	071b      	lsls	r3, r3, #28
 8001eae:	f57f aec2 	bpl.w	8001c36 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001eb2:	f7fe fb85 	bl	80005c0 <HAL_GetTick>
 8001eb6:	1b80      	subs	r0, r0, r6
 8001eb8:	2803      	cmp	r0, #3
 8001eba:	d9f5      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2f0>
 8001ebc:	e6ee      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ebe:	f7fe fb7f 	bl	80005c0 <HAL_GetTick>
 8001ec2:	1b80      	subs	r0, r0, r6
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	d9e3      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2d8>
 8001ec8:	e6e8      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001eca:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fb73 	bl	80005c0 <HAL_GetTick>
 8001eda:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001edc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001ee0:	071f      	lsls	r7, r3, #28
 8001ee2:	f140 813b 	bpl.w	800215c <HAL_RCC_OscConfig+0x5a4>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ee6:	f7fe fb6b 	bl	80005c0 <HAL_GetTick>
 8001eea:	1b80      	subs	r0, r0, r6
 8001eec:	2803      	cmp	r0, #3
 8001eee:	d9f5      	bls.n	8001edc <HAL_RCC_OscConfig+0x324>
 8001ef0:	e6d4      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ef8:	f7fe fb62 	bl	80005c0 <HAL_GetTick>
 8001efc:	1b40      	subs	r0, r0, r5
 8001efe:	2802      	cmp	r0, #2
 8001f00:	f63f aecc 	bhi.w	8001c9c <HAL_RCC_OscConfig+0xe4>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f04:	f7ff fdc0 	bl	8001a88 <LL_RCC_LSI1_IsReady>
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d1f5      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x340>
 8001f0c:	e693      	b.n	8001c36 <HAL_RCC_OscConfig+0x7e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0e:	4d98      	ldr	r5, [pc, #608]	; (8002170 <HAL_RCC_OscConfig+0x5b8>)
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	05d9      	lsls	r1, r3, #23
 8001f14:	d51c      	bpl.n	8001f50 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f16:	68a3      	ldr	r3, [r4, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001f1e:	d125      	bne.n	8001f6c <HAL_RCC_OscConfig+0x3b4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f20:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001f2c:	f7fe fb48 	bl	80005c0 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f30:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001f34:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f241 3588 	movw	r5, #5000	; 0x1388
 8001f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f3e:	079b      	lsls	r3, r3, #30
 8001f40:	f53f ae7d 	bmi.w	8001c3e <HAL_RCC_OscConfig+0x86>
 8001f44:	f7fe fb3c 	bl	80005c0 <HAL_GetTick>
 8001f48:	1b80      	subs	r0, r0, r6
 8001f4a:	42a8      	cmp	r0, r5
 8001f4c:	d9f5      	bls.n	8001f3a <HAL_RCC_OscConfig+0x382>
 8001f4e:	e6a5      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
      HAL_PWR_EnableBkUpAccess();
 8001f50:	f7ff fd76 	bl	8001a40 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001f54:	f7fe fb34 	bl	80005c0 <HAL_GetTick>
 8001f58:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	05da      	lsls	r2, r3, #23
 8001f5e:	d4da      	bmi.n	8001f16 <HAL_RCC_OscConfig+0x35e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f60:	f7fe fb2e 	bl	80005c0 <HAL_GetTick>
 8001f64:	1b80      	subs	r0, r0, r6
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d9f7      	bls.n	8001f5a <HAL_RCC_OscConfig+0x3a2>
 8001f6a:	e697      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3c6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f70:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001f7c:	e7d0      	b.n	8001f20 <HAL_RCC_OscConfig+0x368>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f7e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f8a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1c8      	bne.n	8001f2c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fb11 	bl	80005c0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fa2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001fa4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001fa8:	0798      	lsls	r0, r3, #30
 8001faa:	f57f ae48 	bpl.w	8001c3e <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fb07 	bl	80005c0 <HAL_GetTick>
 8001fb2:	1bc0      	subs	r0, r0, r7
 8001fb4:	42b0      	cmp	r0, r6
 8001fb6:	d9f5      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3ec>
 8001fb8:	e670      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fbc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001fc0:	b19b      	cbz	r3, 8001fea <HAL_RCC_OscConfig+0x432>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001fce:	f7fe faf7 	bl	80005c0 <HAL_GetTick>
 8001fd2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fd4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001fd8:	0799      	lsls	r1, r3, #30
 8001fda:	f53f ae34 	bmi.w	8001c46 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fde:	f7fe faef 	bl	80005c0 <HAL_GetTick>
 8001fe2:	1b80      	subs	r0, r0, r6
 8001fe4:	2802      	cmp	r0, #2
 8001fe6:	d9f5      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
 8001fe8:	e658      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fae3 	bl	80005c0 <HAL_GetTick>
 8001ffa:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001ffc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002000:	079a      	lsls	r2, r3, #30
 8002002:	f57f ae20 	bpl.w	8001c46 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002006:	f7fe fadb 	bl	80005c0 <HAL_GetTick>
 800200a:	1b80      	subs	r0, r0, r6
 800200c:	2802      	cmp	r0, #2
 800200e:	d9f5      	bls.n	8001ffc <HAL_RCC_OscConfig+0x444>
 8002010:	e644      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002012:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002016:	2902      	cmp	r1, #2
 8002018:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800201a:	68eb      	ldr	r3, [r5, #12]
 800201c:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002020:	d177      	bne.n	8002112 <HAL_RCC_OscConfig+0x55a>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002024:	f003 0103 	and.w	r1, r3, #3
 8002028:	4281      	cmp	r1, r0
 800202a:	d118      	bne.n	800205e <HAL_RCC_OscConfig+0x4a6>
 800202c:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800202e:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	4281      	cmp	r1, r0
 8002034:	d113      	bne.n	800205e <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002036:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002038:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800203c:	4281      	cmp	r1, r0
 800203e:	d10e      	bne.n	800205e <HAL_RCC_OscConfig+0x4a6>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002040:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002042:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002046:	4281      	cmp	r1, r0
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800204a:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800204c:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002050:	4281      	cmp	r1, r0
 8002052:	d104      	bne.n	800205e <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002054:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002056:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800205a:	428b      	cmp	r3, r1
 800205c:	d040      	beq.n	80020e0 <HAL_RCC_OscConfig+0x528>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205e:	2a0c      	cmp	r2, #12
 8002060:	f43f adad 	beq.w	8001bbe <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002064:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	015b      	lsls	r3, r3, #5
 800206c:	f53f ada7 	bmi.w	8001bbe <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002076:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002078:	f7fe faa2 	bl	80005c0 <HAL_GetTick>
 800207c:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207e:	682b      	ldr	r3, [r5, #0]
 8002080:	019f      	lsls	r7, r3, #6
 8002082:	d427      	bmi.n	80020d4 <HAL_RCC_OscConfig+0x51c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002084:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002086:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002088:	68e9      	ldr	r1, [r5, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	4a39      	ldr	r2, [pc, #228]	; (8002174 <HAL_RCC_OscConfig+0x5bc>)
 800208e:	400a      	ands	r2, r1
 8002090:	4313      	orrs	r3, r2
 8002092:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002094:	4313      	orrs	r3, r2
 8002096:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002098:	4313      	orrs	r3, r2
 800209a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800209c:	4313      	orrs	r3, r2
 800209e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020a4:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ac:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ae:	68eb      	ldr	r3, [r5, #12]
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80020b6:	f7fe fa83 	bl	80005c0 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 80020be:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	0198      	lsls	r0, r3, #6
 80020c4:	f53f adc3 	bmi.w	8001c4e <HAL_RCC_OscConfig+0x96>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe fa7a 	bl	80005c0 <HAL_GetTick>
 80020cc:	1b40      	subs	r0, r0, r5
 80020ce:	2802      	cmp	r0, #2
 80020d0:	d9f6      	bls.n	80020c0 <HAL_RCC_OscConfig+0x508>
 80020d2:	e5e3      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe fa74 	bl	80005c0 <HAL_GetTick>
 80020d8:	1b80      	subs	r0, r0, r6
 80020da:	2802      	cmp	r0, #2
 80020dc:	d9cf      	bls.n	800207e <HAL_RCC_OscConfig+0x4c6>
 80020de:	e5dd      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e0:	682b      	ldr	r3, [r5, #0]
 80020e2:	0199      	lsls	r1, r3, #6
 80020e4:	f53f adb3 	bmi.w	8001c4e <HAL_RCC_OscConfig+0x96>
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ee:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f0:	68eb      	ldr	r3, [r5, #12]
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 80020f8:	f7fe fa62 	bl	80005c0 <HAL_GetTick>
 80020fc:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	019a      	lsls	r2, r3, #6
 8002102:	f53f ada4 	bmi.w	8001c4e <HAL_RCC_OscConfig+0x96>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fa5b 	bl	80005c0 <HAL_GetTick>
 800210a:	1b00      	subs	r0, r0, r4
 800210c:	2802      	cmp	r0, #2
 800210e:	d9f6      	bls.n	80020fe <HAL_RCC_OscConfig+0x546>
 8002110:	e5c4      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002112:	2a0c      	cmp	r2, #12
 8002114:	f43f ad53 	beq.w	8001bbe <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211e:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002120:	68eb      	ldr	r3, [r5, #12]
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002128:	68eb      	ldr	r3, [r5, #12]
 800212a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002134:	f7fe fa44 	bl	80005c0 <HAL_GetTick>
 8002138:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	f57f ad86 	bpl.w	8001c4e <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fa3d 	bl	80005c0 <HAL_GetTick>
 8002146:	1b00      	subs	r0, r0, r4
 8002148:	2802      	cmp	r0, #2
 800214a:	d9f6      	bls.n	800213a <HAL_RCC_OscConfig+0x582>
 800214c:	e5a6      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800214e:	f7fe fa37 	bl	80005c0 <HAL_GetTick>
 8002152:	1b80      	subs	r0, r0, r6
 8002154:	2803      	cmp	r0, #3
 8002156:	f67f ae5c 	bls.w	8001e12 <HAL_RCC_OscConfig+0x25a>
 800215a:	e59f      	b.n	8001c9c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800215c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002168:	f7fe fa2a 	bl	80005c0 <HAL_GetTick>
 800216c:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 800216e:	e6c9      	b.n	8001f04 <HAL_RCC_OscConfig+0x34c>
 8002170:	58000400 	.word	0x58000400
 8002174:	11c1808c 	.word	0x11c1808c

08002178 <HAL_RCC_ClockConfig>:
{
 8002178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800217e:	4604      	mov	r4, r0
 8002180:	b910      	cbnz	r0, 8002188 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
 8002184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4e7a      	ldr	r6, [pc, #488]	; (8002374 <HAL_RCC_ClockConfig+0x1fc>)
 800218a:	6833      	ldr	r3, [r6, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	428b      	cmp	r3, r1
 8002192:	d372      	bcc.n	800227a <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	0799      	lsls	r1, r3, #30
 8002198:	d50e      	bpl.n	80021b8 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800219a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800219e:	68a2      	ldr	r2, [r4, #8]
 80021a0:	68b3      	ldr	r3, [r6, #8]
 80021a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80021aa:	f7fe fa09 	bl	80005c0 <HAL_GetTick>
 80021ae:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021b0:	68b3      	ldr	r3, [r6, #8]
 80021b2:	03db      	lsls	r3, r3, #15
 80021b4:	f140 80ba 	bpl.w	800232c <HAL_RCC_ClockConfig+0x1b4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	069a      	lsls	r2, r3, #26
 80021bc:	d511      	bpl.n	80021e2 <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80021be:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80021c2:	6962      	ldr	r2, [r4, #20]
 80021c4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80021c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80021d2:	f7fe f9f5 	bl	80005c0 <HAL_GetTick>
 80021d6:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021d8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80021dc:	0399      	lsls	r1, r3, #14
 80021de:	f140 80ac 	bpl.w	800233a <HAL_RCC_ClockConfig+0x1c2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	0658      	lsls	r0, r3, #25
 80021e6:	d512      	bpl.n	800220e <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021e8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80021ec:	69a2      	ldr	r2, [r4, #24]
 80021ee:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80021f2:	f023 030f 	bic.w	r3, r3, #15
 80021f6:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 80021fa:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 80021fe:	f7fe f9df 	bl	80005c0 <HAL_GetTick>
 8002202:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002204:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8002208:	03db      	lsls	r3, r3, #15
 800220a:	f140 809d 	bpl.w	8002348 <HAL_RCC_ClockConfig+0x1d0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	075a      	lsls	r2, r3, #29
 8002212:	d50e      	bpl.n	8002232 <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002214:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8002218:	68e2      	ldr	r2, [r4, #12]
 800221a:	68b3      	ldr	r3, [r6, #8]
 800221c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002220:	4313      	orrs	r3, r2
 8002222:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002224:	f7fe f9cc 	bl	80005c0 <HAL_GetTick>
 8002228:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800222a:	68b3      	ldr	r3, [r6, #8]
 800222c:	0398      	lsls	r0, r3, #14
 800222e:	f140 8092 	bpl.w	8002356 <HAL_RCC_ClockConfig+0x1de>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	071e      	lsls	r6, r3, #28
 8002236:	d50f      	bpl.n	8002258 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002238:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800223c:	6922      	ldr	r2, [r4, #16]
 800223e:	68b3      	ldr	r3, [r6, #8]
 8002240:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002244:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002248:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800224a:	f7fe f9b9 	bl	80005c0 <HAL_GetTick>
 800224e:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002250:	68b3      	ldr	r3, [r6, #8]
 8002252:	035a      	lsls	r2, r3, #13
 8002254:	f140 8086 	bpl.w	8002364 <HAL_RCC_ClockConfig+0x1ec>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	07d9      	lsls	r1, r3, #31
 800225c:	d423      	bmi.n	80022a6 <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225e:	4c45      	ldr	r4, [pc, #276]	; (8002374 <HAL_RCC_ClockConfig+0x1fc>)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	429d      	cmp	r5, r3
 8002268:	d34d      	bcc.n	8002306 <HAL_RCC_ClockConfig+0x18e>
  SystemCoreClockUpdate();
 800226a:	f003 fa43 	bl	80056f4 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 800226e:	f7fe f9ad 	bl	80005cc <HAL_GetTickPrio>
}
 8002272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8002276:	f7fe b95b 	b.w	8000530 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	6833      	ldr	r3, [r6, #0]
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	430b      	orrs	r3, r1
 8002282:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002284:	f7fe f99c 	bl	80005c0 <HAL_GetTick>
 8002288:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	6833      	ldr	r3, [r6, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	429d      	cmp	r5, r3
 8002292:	f43f af7f 	beq.w	8002194 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002296:	f7fe f993 	bl	80005c0 <HAL_GetTick>
 800229a:	1bc0      	subs	r0, r0, r7
 800229c:	2802      	cmp	r0, #2
 800229e:	d9f4      	bls.n	800228a <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 80022a0:	2003      	movs	r0, #3
 80022a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	6863      	ldr	r3, [r4, #4]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d103      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x13c>
      if (LL_RCC_HSE_IsReady() == 0U)
 80022ac:	f7ff fbe0 	bl	8001a70 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 80022b0:	b940      	cbnz	r0, 80022c4 <HAL_RCC_ClockConfig+0x14c>
 80022b2:	e766      	b.n	8002182 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d11f      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	019b      	lsls	r3, r3, #6
 80022c0:	f57f af5f 	bpl.w	8002182 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80022c4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80022c8:	6862      	ldr	r2, [r4, #4]
 80022ca:	68b3      	ldr	r3, [r6, #8]
 80022cc:	f023 0303 	bic.w	r3, r3, #3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80022d4:	f7fe f974 	bl	80005c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80022dc:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022de:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	6862      	ldr	r2, [r4, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022ea:	d0b8      	beq.n	800225e <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7fe f968 	bl	80005c0 <HAL_GetTick>
 80022f0:	1bc0      	subs	r0, r0, r7
 80022f2:	4540      	cmp	r0, r8
 80022f4:	d9f3      	bls.n	80022de <HAL_RCC_ClockConfig+0x166>
 80022f6:	e7d3      	b.n	80022a0 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f8:	b913      	cbnz	r3, 8002300 <HAL_RCC_ClockConfig+0x188>
      if (LL_RCC_MSI_IsReady() == 0U)
 80022fa:	f7ff fbcc 	bl	8001a96 <LL_RCC_MSI_IsReady>
 80022fe:	e7d7      	b.n	80022b0 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8002300:	f7ff fbbc 	bl	8001a7c <LL_RCC_HSI_IsReady>
 8002304:	e7d4      	b.n	80022b0 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	f023 0307 	bic.w	r3, r3, #7
 800230c:	432b      	orrs	r3, r5
 800230e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002310:	f7fe f956 	bl	80005c0 <HAL_GetTick>
 8002314:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	429d      	cmp	r5, r3
 800231e:	d0a4      	beq.n	800226a <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002320:	f7fe f94e 	bl	80005c0 <HAL_GetTick>
 8002324:	1b80      	subs	r0, r0, r6
 8002326:	2802      	cmp	r0, #2
 8002328:	d9f5      	bls.n	8002316 <HAL_RCC_ClockConfig+0x19e>
 800232a:	e7b9      	b.n	80022a0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800232c:	f7fe f948 	bl	80005c0 <HAL_GetTick>
 8002330:	1bc0      	subs	r0, r0, r7
 8002332:	2802      	cmp	r0, #2
 8002334:	f67f af3c 	bls.w	80021b0 <HAL_RCC_ClockConfig+0x38>
 8002338:	e7b2      	b.n	80022a0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800233a:	f7fe f941 	bl	80005c0 <HAL_GetTick>
 800233e:	1bc0      	subs	r0, r0, r7
 8002340:	2802      	cmp	r0, #2
 8002342:	f67f af49 	bls.w	80021d8 <HAL_RCC_ClockConfig+0x60>
 8002346:	e7ab      	b.n	80022a0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002348:	f7fe f93a 	bl	80005c0 <HAL_GetTick>
 800234c:	1bc0      	subs	r0, r0, r7
 800234e:	2802      	cmp	r0, #2
 8002350:	f67f af58 	bls.w	8002204 <HAL_RCC_ClockConfig+0x8c>
 8002354:	e7a4      	b.n	80022a0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002356:	f7fe f933 	bl	80005c0 <HAL_GetTick>
 800235a:	1bc0      	subs	r0, r0, r7
 800235c:	2802      	cmp	r0, #2
 800235e:	f67f af64 	bls.w	800222a <HAL_RCC_ClockConfig+0xb2>
 8002362:	e79d      	b.n	80022a0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002364:	f7fe f92c 	bl	80005c0 <HAL_GetTick>
 8002368:	1bc0      	subs	r0, r0, r7
 800236a:	2802      	cmp	r0, #2
 800236c:	f67f af70 	bls.w	8002250 <HAL_RCC_ClockConfig+0xd8>
 8002370:	e796      	b.n	80022a0 <HAL_RCC_ClockConfig+0x128>
 8002372:	bf00      	nop
 8002374:	58004000 	.word	0x58004000

08002378 <HAL_RCC_GetSysClockFreq>:
 8002378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 800237c:	b508      	push	{r3, lr}
 800237e:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002380:	f013 030c 	ands.w	r3, r3, #12
 8002384:	d107      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002386:	f7ff fb94 	bl	8001ab2 <LL_RCC_MSI_GetRange>
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <HAL_RCC_GetSysClockFreq+0x90>)
 800238c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002390:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002394:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002396:	2b04      	cmp	r3, #4
 8002398:	d033      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800239a:	2b08      	cmp	r3, #8
 800239c:	d107      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800239e:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 80023a0:	481a      	ldr	r0, [pc, #104]	; (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 80023a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a8:	bf08      	it	eq
 80023aa:	4618      	moveq	r0, r3
 80023ac:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80023ae:	68d3      	ldr	r3, [r2, #12]
 80023b0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d022      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x86>
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d118      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80023bc:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE;
 80023be:	4814      	ldr	r0, [pc, #80]	; (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 80023c6:	bf08      	it	eq
 80023c8:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80023d0:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80023d2:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80023d4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80023d8:	4358      	muls	r0, r3
 80023da:	f3c1 1302 	ubfx	r3, r1, #4, #3
 80023de:	3301      	adds	r3, #1
 80023e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80023e4:	0f53      	lsrs	r3, r2, #29
 80023e6:	3301      	adds	r3, #1
 80023e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80023ec:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80023ee:	f7ff fb60 	bl	8001ab2 <LL_RCC_MSI_GetRange>
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetSysClockFreq+0x90>)
 80023f4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80023f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80023fc:	e7e5      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 80023fe:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 8002400:	e7e3      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8002402:	4802      	ldr	r0, [pc, #8]	; (800240c <HAL_RCC_GetSysClockFreq+0x94>)
}
 8002404:	bd08      	pop	{r3, pc}
 8002406:	bf00      	nop
 8002408:	08006d18 	.word	0x08006d18
 800240c:	00f42400 	.word	0x00f42400
 8002410:	01e84800 	.word	0x01e84800

08002414 <HAL_RCC_GetHCLKFreq>:
{
 8002414:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002416:	f7ff ffaf 	bl	8002378 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800242a:	fbb0 f0f3 	udiv	r0, r0, r3
 800242e:	bd08      	pop	{r3, pc}
 8002430:	08006cb8 	.word	0x08006cb8

08002434 <HAL_RCC_GetPCLK1Freq>:
{
 8002434:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002436:	f7ff ffed 	bl	8002414 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	f003 031f 	and.w	r3, r3, #31
}
 800244e:	40d8      	lsrs	r0, r3
 8002450:	bd08      	pop	{r3, pc}
 8002452:	bf00      	nop
 8002454:	08006cf8 	.word	0x08006cf8

08002458 <HAL_RCC_GetPCLK2Freq>:
{
 8002458:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800245a:	f7ff ffdb 	bl	8002414 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	f003 031f 	and.w	r3, r3, #31
}
 8002472:	40d8      	lsrs	r0, r3
 8002474:	bd08      	pop	{r3, pc}
 8002476:	bf00      	nop
 8002478:	08006cf8 	.word	0x08006cf8

0800247c <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002484:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002488:	4770      	bx	lr

0800248a <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800248a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248e:	0902      	lsrs	r2, r0, #4
 8002490:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002494:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8002498:	0100      	lsls	r0, r0, #4
 800249a:	ea23 0302 	bic.w	r3, r3, r2
 800249e:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 80024a2:	4318      	orrs	r0, r3
 80024a4:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80024aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80024b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4770      	bx	lr

080024c6 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	6818      	ldr	r0, [r3, #0]
}
 80024cc:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80024d0:	4770      	bx	lr

080024d2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d4:	6805      	ldr	r5, [r0, #0]
 80024d6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 80024da:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024dc:	d043      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80024de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d015      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024e6:	d802      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80024e8:	b1d3      	cbz	r3, 8002520 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80024ea:	2501      	movs	r5, #1
 80024ec:	e03b      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 80024ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f2:	d002      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x28>
 80024f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024f8:	d1f7      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002500:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002504:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002508:	430b      	orrs	r3, r1
 800250a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800250e:	2500      	movs	r5, #0
 8002510:	e029      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002516:	68d3      	ldr	r3, [r2, #12]
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	60d3      	str	r3, [r2, #12]
        break;
 800251e:	e7ec      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002520:	f7ff ffca 	bl	80024b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002524:	f7fe f84c 	bl	80005c0 <HAL_GetTick>
 8002528:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800252a:	f7ff ffcc 	bl	80024c6 <LL_RCC_PLLSAI1_IsReady>
 800252e:	b9a0      	cbnz	r0, 800255a <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002534:	6861      	ldr	r1, [r4, #4]
 8002536:	6913      	ldr	r3, [r2, #16]
 8002538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800253c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002540:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002542:	6913      	ldr	r3, [r2, #16]
 8002544:	68a1      	ldr	r1, [r4, #8]
 8002546:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 800254a:	430b      	orrs	r3, r1
 800254c:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800254e:	f7ff ffac 	bl	80024aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002552:	f7fe f835 	bl	80005c0 <HAL_GetTick>
 8002556:	4605      	mov	r5, r0
 8002558:	e0cd      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800255a:	f7fe f831 	bl	80005c0 <HAL_GetTick>
 800255e:	1b40      	subs	r0, r0, r5
 8002560:	2802      	cmp	r0, #2
 8002562:	d9e2      	bls.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8002564:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	051a      	lsls	r2, r3, #20
 800256a:	d515      	bpl.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800256c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002572:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8002576:	f407 7740 	and.w	r7, r7, #768	; 0x300
 800257a:	42bb      	cmp	r3, r7
 800257c:	d00c      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 800257e:	f7ff fa5f 	bl	8001a40 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002582:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002586:	2f00      	cmp	r7, #0
 8002588:	f040 80c0 	bne.w	800270c <HAL_RCCEx_PeriphCLKConfig+0x23a>
 800258c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	07df      	lsls	r7, r3, #31
 800259c:	d509      	bpl.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800259e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a2:	69a0      	ldr	r0, [r4, #24]
 80025a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025a8:	f022 0203 	bic.w	r2, r2, #3
 80025ac:	4302      	orrs	r2, r0
 80025ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b2:	079e      	lsls	r6, r3, #30
 80025b4:	d509      	bpl.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80025b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ba:	69e0      	ldr	r0, [r4, #28]
 80025bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025c4:	4302      	orrs	r2, r0
 80025c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ca:	06d8      	lsls	r0, r3, #27
 80025cc:	d50c      	bpl.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80025d0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80025d4:	0c31      	lsrs	r1, r6, #16
 80025d6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80025da:	0409      	lsls	r1, r1, #16
 80025dc:	ea22 0201 	bic.w	r2, r2, r1
 80025e0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80025e4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025e8:	0699      	lsls	r1, r3, #26
 80025ea:	d50c      	bpl.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025ee:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80025f2:	0c31      	lsrs	r1, r6, #16
 80025f4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80025f8:	0409      	lsls	r1, r1, #16
 80025fa:	ea22 0201 	bic.w	r2, r2, r1
 80025fe:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002602:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002606:	075a      	lsls	r2, r3, #29
 8002608:	d502      	bpl.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260a:	6a20      	ldr	r0, [r4, #32]
 800260c:	f7ff ff3d 	bl	800248a <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	071b      	lsls	r3, r3, #28
 8002614:	d502      	bpl.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002616:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002618:	f7ff ff37 	bl	800248a <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	05df      	lsls	r7, r3, #23
 8002620:	d511      	bpl.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002628:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800262c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002630:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002632:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002636:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800263a:	f040 8090 	bne.w	800275e <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800263e:	68d3      	ldr	r3, [r2, #12]
 8002640:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002644:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	059e      	lsls	r6, r3, #22
 800264a:	d51a      	bpl.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800264e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	d003      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002658:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 800265c:	f040 80b7 	bne.w	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002660:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002664:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002668:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800266a:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800266e:	bf08      	it	eq
 8002670:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002674:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8002678:	bf02      	ittt	eq
 800267a:	68d3      	ldreq	r3, [r2, #12]
 800267c:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8002680:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	0558      	lsls	r0, r3, #21
 8002686:	d511      	bpl.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800268c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800268e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002692:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002696:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002698:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80026a0:	f040 80a3 	bne.w	80027ea <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026a4:	68d3      	ldr	r3, [r2, #12]
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80026ac:	6822      	ldr	r2, [r4, #0]
 80026ae:	04d1      	lsls	r1, r2, #19
 80026b0:	d509      	bpl.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80026b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80026b8:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 80026bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026c0:	4303      	orrs	r3, r0
 80026c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80026c6:	0493      	lsls	r3, r2, #18
 80026c8:	d50d      	bpl.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80026ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80026d0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80026d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80026da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80026dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	430b      	orrs	r3, r1
 80026e4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80026e6:	4628      	mov	r0, r5
 80026e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ea:	f7fd ff69 	bl	80005c0 <HAL_GetTick>
 80026ee:	1b40      	subs	r0, r0, r5
 80026f0:	2802      	cmp	r0, #2
 80026f2:	f63f af37 	bhi.w	8002564 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026f6:	f7ff fee6 	bl	80024c6 <LL_RCC_PLLSAI1_IsReady>
 80026fa:	2801      	cmp	r0, #1
 80026fc:	d1f5      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80026fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002702:	6961      	ldr	r1, [r4, #20]
 8002704:	6913      	ldr	r3, [r2, #16]
 8002706:	430b      	orrs	r3, r1
 8002708:	6113      	str	r3, [r2, #16]
 800270a:	e6f6      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800270c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002710:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002714:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002718:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800271c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002720:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002724:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272a:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800272c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002730:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002734:	07db      	lsls	r3, r3, #31
 8002736:	f57f af2f 	bpl.w	8002598 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 800273a:	f7fd ff41 	bl	80005c0 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8002742:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8002744:	e004      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x27e>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fd ff3b 	bl	80005c0 <HAL_GetTick>
 800274a:	1bc0      	subs	r0, r0, r7
 800274c:	42b0      	cmp	r0, r6
 800274e:	d804      	bhi.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x288>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002750:	f7ff fe94 	bl	800247c <LL_RCC_LSE_IsReady>
 8002754:	2801      	cmp	r0, #1
 8002756:	d1f6      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002758:	e71e      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 800275a:	2503      	movs	r5, #3
 800275c:	e71c      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800275e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002762:	f47f af70 	bne.w	8002646 <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002766:	f7ff fea7 	bl	80024b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800276a:	f7fd ff29 	bl	80005c0 <HAL_GetTick>
 800276e:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002770:	f7ff fea9 	bl	80024c6 <LL_RCC_PLLSAI1_IsReady>
 8002774:	b9a0      	cbnz	r0, 80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277a:	6861      	ldr	r1, [r4, #4]
 800277c:	6913      	ldr	r3, [r2, #16]
 800277e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002782:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002786:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002788:	6913      	ldr	r3, [r2, #16]
 800278a:	68e1      	ldr	r1, [r4, #12]
 800278c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8002790:	430b      	orrs	r3, r1
 8002792:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002794:	f7ff fe89 	bl	80024aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fd ff12 	bl	80005c0 <HAL_GetTick>
 800279c:	4606      	mov	r6, r0
 800279e:	e00b      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fd ff0e 	bl	80005c0 <HAL_GetTick>
 80027a4:	1b80      	subs	r0, r0, r6
 80027a6:	2802      	cmp	r0, #2
 80027a8:	d9e2      	bls.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x29e>
              ret = HAL_TIMEOUT;
 80027aa:	2503      	movs	r5, #3
 80027ac:	e74b      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ae:	f7fd ff07 	bl	80005c0 <HAL_GetTick>
 80027b2:	1b80      	subs	r0, r0, r6
 80027b4:	2802      	cmp	r0, #2
 80027b6:	d8f8      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027b8:	f7ff fe85 	bl	80024c6 <LL_RCC_PLLSAI1_IsReady>
 80027bc:	2801      	cmp	r0, #1
 80027be:	d1f6      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	6961      	ldr	r1, [r4, #20]
 80027c6:	6913      	ldr	r3, [r2, #16]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6113      	str	r3, [r2, #16]
 80027cc:	e73b      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80027ce:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80027d2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80027d6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80027da:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027de:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80027e2:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 80027e6:	4301      	orrs	r1, r0
 80027e8:	e73f      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x198>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80027ee:	f47f af5d 	bne.w	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80027f2:	f7ff fe61 	bl	80024b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027f6:	f7fd fee3 	bl	80005c0 <HAL_GetTick>
 80027fa:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80027fc:	f7ff fe63 	bl	80024c6 <LL_RCC_PLLSAI1_IsReady>
 8002800:	b9a0      	cbnz	r0, 800282c <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002806:	6861      	ldr	r1, [r4, #4]
 8002808:	6913      	ldr	r3, [r2, #16]
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002812:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002814:	6913      	ldr	r3, [r2, #16]
 8002816:	6921      	ldr	r1, [r4, #16]
 8002818:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800281c:	430b      	orrs	r3, r1
 800281e:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002820:	f7ff fe43 	bl	80024aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fd fecc 	bl	80005c0 <HAL_GetTick>
 8002828:	4606      	mov	r6, r0
 800282a:	e00b      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800282c:	f7fd fec8 	bl	80005c0 <HAL_GetTick>
 8002830:	1b80      	subs	r0, r0, r6
 8002832:	2802      	cmp	r0, #2
 8002834:	d9e2      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x32a>
              ret = HAL_TIMEOUT;
 8002836:	2503      	movs	r5, #3
 8002838:	e738      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800283a:	f7fd fec1 	bl	80005c0 <HAL_GetTick>
 800283e:	1b80      	subs	r0, r0, r6
 8002840:	2802      	cmp	r0, #2
 8002842:	d8f8      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002844:	f7ff fe3f 	bl	80024c6 <LL_RCC_PLLSAI1_IsReady>
 8002848:	2801      	cmp	r0, #1
 800284a:	d1f6      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x368>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800284c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002850:	6961      	ldr	r1, [r4, #20]
 8002852:	6913      	ldr	r3, [r2, #16]
 8002854:	430b      	orrs	r3, r1
 8002856:	6113      	str	r3, [r2, #16]
 8002858:	e728      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1da>

0800285a <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285e:	6813      	ldr	r3, [r2, #0]
 8002860:	f043 0304 	orr.w	r3, r3, #4
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	6803      	ldr	r3, [r0, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_TIM_Base_Start_IT+0x28>)
 8002876:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002878:	2a06      	cmp	r2, #6
 800287a:	d006      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x22>
 800287c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002880:	bf1e      	ittt	ne
 8002882:	681a      	ldrne	r2, [r3, #0]
 8002884:	f042 0201 	orrne.w	r2, r2, #1
 8002888:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800288a:	2000      	movs	r0, #0
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	00010007 	.word	0x00010007

08002894 <HAL_TIM_OC_DelayElapsedCallback>:
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_IC_CaptureCallback>:
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002898:	4770      	bx	lr

0800289a <HAL_TIM_TriggerCallback>:
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800289c:	6803      	ldr	r3, [r0, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	0791      	lsls	r1, r2, #30
{
 80028a2:	b510      	push	{r4, lr}
 80028a4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028a6:	d50f      	bpl.n	80028c8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	0792      	lsls	r2, r2, #30
 80028ac:	d50c      	bpl.n	80028c8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028ae:	f06f 0202 	mvn.w	r2, #2
 80028b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028b6:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028bc:	f000 8085 	beq.w	80029ca <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028c0:	f7ff ffe9 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c4:	2300      	movs	r3, #0
 80028c6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	0752      	lsls	r2, r2, #29
 80028ce:	d510      	bpl.n	80028f2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	0750      	lsls	r0, r2, #29
 80028d4:	d50d      	bpl.n	80028f2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d6:	f06f 0204 	mvn.w	r2, #4
 80028da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028dc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028de:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e8:	d075      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	f7ff ffd4 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	2300      	movs	r3, #0
 80028f0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	0711      	lsls	r1, r2, #28
 80028f8:	d50f      	bpl.n	800291a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	0712      	lsls	r2, r2, #28
 80028fe:	d50c      	bpl.n	800291a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002900:	f06f 0208 	mvn.w	r2, #8
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002906:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002908:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800290a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800290c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800290e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002910:	d067      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	f7ff ffc0 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	2300      	movs	r3, #0
 8002918:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	06d0      	lsls	r0, r2, #27
 8002920:	d510      	bpl.n	8002944 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	06d1      	lsls	r1, r2, #27
 8002926:	d50d      	bpl.n	8002944 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002928:	f06f 0210 	mvn.w	r2, #16
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002930:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002932:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002936:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002938:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800293a:	d058      	beq.n	80029ee <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800293c:	f7ff ffab 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002940:	2300      	movs	r3, #0
 8002942:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	07d2      	lsls	r2, r2, #31
 800294a:	d508      	bpl.n	800295e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	07d0      	lsls	r0, r2, #31
 8002950:	d505      	bpl.n	800295e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002952:	f06f 0201 	mvn.w	r2, #1
 8002956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002958:	4620      	mov	r0, r4
 800295a:	f002 fcd3 	bl	8005304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	0611      	lsls	r1, r2, #24
 8002964:	d508      	bpl.n	8002978 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	0612      	lsls	r2, r2, #24
 800296a:	d505      	bpl.n	8002978 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800296c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002972:	4620      	mov	r0, r4
 8002974:	f000 f897 	bl	8002aa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	05d0      	lsls	r0, r2, #23
 800297e:	d508      	bpl.n	8002992 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	0611      	lsls	r1, r2, #24
 8002984:	d505      	bpl.n	8002992 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002986:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800298a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800298c:	4620      	mov	r0, r4
 800298e:	f000 f88b 	bl	8002aa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	0652      	lsls	r2, r2, #25
 8002998:	d508      	bpl.n	80029ac <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	0650      	lsls	r0, r2, #25
 800299e:	d505      	bpl.n	80029ac <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7ff ff77 	bl	800289a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	0691      	lsls	r1, r2, #26
 80029b2:	d522      	bpl.n	80029fa <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	0692      	lsls	r2, r2, #26
 80029b8:	d51f      	bpl.n	80029fa <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ba:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029c0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80029c6:	f000 b86d 	b.w	8002aa4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	f7ff ff63 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7ff ff62 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029d4:	e776      	b.n	80028c4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	f7ff ff5d 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff ff5c 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029e0:	e785      	b.n	80028ee <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	f7ff ff57 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff ff56 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029ec:	e793      	b.n	8002916 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	f7ff ff51 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7ff ff50 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
 80029f8:	e7a2      	b.n	8002940 <HAL_TIM_IRQHandler+0xa4>
 80029fa:	bd10      	pop	{r4, pc}

080029fc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80029fe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a00:	4290      	cmp	r0, r2
{
 8002a02:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a04:	d002      	beq.n	8002a0c <TIM_Base_SetConfig+0x10>
 8002a06:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a0a:	d109      	bne.n	8002a20 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002a0c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a12:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002a14:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a18:	d009      	beq.n	8002a2e <TIM_Base_SetConfig+0x32>
 8002a1a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a1e:	d006      	beq.n	8002a2e <TIM_Base_SetConfig+0x32>
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <TIM_Base_SetConfig+0x70>)
 8002a22:	4290      	cmp	r0, r2
 8002a24:	d003      	beq.n	8002a2e <TIM_Base_SetConfig+0x32>
 8002a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a2a:	4290      	cmp	r0, r2
 8002a2c:	d103      	bne.n	8002a36 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a34:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a36:	694a      	ldr	r2, [r1, #20]
 8002a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002a3e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a40:	688b      	ldr	r3, [r1, #8]
 8002a42:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a44:	680b      	ldr	r3, [r1, #0]
 8002a46:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <TIM_Base_SetConfig+0x6c>)
 8002a4a:	4298      	cmp	r0, r3
 8002a4c:	d007      	beq.n	8002a5e <TIM_Base_SetConfig+0x62>
 8002a4e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8002a52:	4298      	cmp	r0, r3
 8002a54:	d003      	beq.n	8002a5e <TIM_Base_SetConfig+0x62>
 8002a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a5a:	4298      	cmp	r0, r3
 8002a5c:	d101      	bne.n	8002a62 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a5e:	690b      	ldr	r3, [r1, #16]
 8002a60:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a62:	2301      	movs	r3, #1
 8002a64:	6143      	str	r3, [r0, #20]
 8002a66:	bd10      	pop	{r4, pc}
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40014400 	.word	0x40014400

08002a70 <HAL_TIM_Base_Init>:
{
 8002a70:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002a72:	4604      	mov	r4, r0
 8002a74:	b1a0      	cbz	r0, 8002aa0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a7e:	b91b      	cbnz	r3, 8002a88 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002a80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a84:	f002 fd6c 	bl	8005560 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8e:	6820      	ldr	r0, [r4, #0]
 8002a90:	1d21      	adds	r1, r4, #4
 8002a92:	f7ff ffb3 	bl	80029fc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002aa0:	2001      	movs	r0, #1
}
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <HAL_TIMEx_CommutCallback>:
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIMEx_BreakCallback>:
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002aa8:	4770      	bx	lr

08002aaa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002aaa:	6802      	ldr	r2, [r0, #0]
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ab2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ab4:	6893      	ldr	r3, [r2, #8]
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002aca:	4770      	bx	lr

08002acc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002acc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002ad0:	2b20      	cmp	r3, #32
{
 8002ad2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ad4:	d168      	bne.n	8002ba8 <HAL_UART_Receive_IT+0xdc>
    if ((pData == NULL) || (Size == 0U))
 8002ad6:	2900      	cmp	r1, #0
 8002ad8:	d064      	beq.n	8002ba4 <HAL_UART_Receive_IT+0xd8>
 8002ada:	2a00      	cmp	r2, #0
 8002adc:	d062      	beq.n	8002ba4 <HAL_UART_Receive_IT+0xd8>
    __HAL_LOCK(huart);
 8002ade:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d060      	beq.n	8002ba8 <HAL_UART_Receive_IT+0xdc>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 8002aec:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8002aee:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 8002af4:	f04f 0100 	mov.w	r1, #0
    huart->RxXferSize  = Size;
 8002af8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002afc:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8002b00:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 8002b02:	d12e      	bne.n	8002b62 <HAL_UART_Receive_IT+0x96>
 8002b04:	6901      	ldr	r1, [r0, #16]
 8002b06:	bb51      	cbnz	r1, 8002b5e <HAL_UART_Receive_IT+0x92>
 8002b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b0c:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b10:	2100      	movs	r1, #0
 8002b12:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b16:	2122      	movs	r1, #34	; 0x22
 8002b18:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1c:	6801      	ldr	r1, [r0, #0]
 8002b1e:	688c      	ldr	r4, [r1, #8]
 8002b20:	f044 0401 	orr.w	r4, r4, #1
 8002b24:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002b26:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8002b28:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8002b2c:	d129      	bne.n	8002b82 <HAL_UART_Receive_IT+0xb6>
 8002b2e:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 8002b32:	4294      	cmp	r4, r2
 8002b34:	d825      	bhi.n	8002b82 <HAL_UART_Receive_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	d120      	bne.n	8002b7e <HAL_UART_Receive_IT+0xb2>
 8002b3c:	6903      	ldr	r3, [r0, #16]
 8002b3e:	b9f3      	cbnz	r3, 8002b7e <HAL_UART_Receive_IT+0xb2>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b42:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002b44:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b50:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002b52:	688a      	ldr	r2, [r1, #8]
 8002b54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b58:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8002b5e:	21ff      	movs	r1, #255	; 0xff
 8002b60:	e7d4      	b.n	8002b0c <HAL_UART_Receive_IT+0x40>
 8002b62:	b923      	cbnz	r3, 8002b6e <HAL_UART_Receive_IT+0xa2>
 8002b64:	6901      	ldr	r1, [r0, #16]
 8002b66:	2900      	cmp	r1, #0
 8002b68:	d0f9      	beq.n	8002b5e <HAL_UART_Receive_IT+0x92>
 8002b6a:	217f      	movs	r1, #127	; 0x7f
 8002b6c:	e7ce      	b.n	8002b0c <HAL_UART_Receive_IT+0x40>
 8002b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b72:	d1cb      	bne.n	8002b0c <HAL_UART_Receive_IT+0x40>
 8002b74:	6901      	ldr	r1, [r0, #16]
 8002b76:	2900      	cmp	r1, #0
 8002b78:	d0f7      	beq.n	8002b6a <HAL_UART_Receive_IT+0x9e>
 8002b7a:	213f      	movs	r1, #63	; 0x3f
 8002b7c:	e7c6      	b.n	8002b0c <HAL_UART_Receive_IT+0x40>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_UART_Receive_IT+0xe4>)
 8002b80:	e7df      	b.n	8002b42 <HAL_UART_Receive_IT+0x76>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b86:	d10b      	bne.n	8002ba0 <HAL_UART_Receive_IT+0xd4>
 8002b88:	6903      	ldr	r3, [r0, #16]
 8002b8a:	b94b      	cbnz	r3, 8002ba0 <HAL_UART_Receive_IT+0xd4>
        huart->RxISR = UART_RxISR_16BIT;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002b8e:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 8002b90:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002b92:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 8002b96:	2300      	movs	r3, #0
 8002b98:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002b9c:	600a      	str	r2, [r1, #0]
 8002b9e:	e7dc      	b.n	8002b5a <HAL_UART_Receive_IT+0x8e>
        huart->RxISR = UART_RxISR_8BIT;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_UART_Receive_IT+0xec>)
 8002ba2:	e7f4      	b.n	8002b8e <HAL_UART_Receive_IT+0xc2>
      return HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002ba8:	2002      	movs	r0, #2
}
 8002baa:	bd10      	pop	{r4, pc}
 8002bac:	08002da5 	.word	0x08002da5
 8002bb0:	08002cfd 	.word	0x08002cfd
 8002bb4:	08002ca3 	.word	0x08002ca3
 8002bb8:	08002c47 	.word	0x08002c47

08002bbc <HAL_UART_DMAStop>:
{
 8002bbc:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002bbe:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002bc0:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002bc4:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	0609      	lsls	r1, r1, #24
{
 8002bcc:	4604      	mov	r4, r0
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002bce:	d520      	bpl.n	8002c12 <HAL_UART_DMAStop+0x56>
 8002bd0:	2a21      	cmp	r2, #33	; 0x21
 8002bd2:	d11e      	bne.n	8002c12 <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bd4:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8002bd6:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bdc:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8002bde:	b160      	cbz	r0, 8002bfa <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002be0:	f7fd fe10 	bl	8000804 <HAL_DMA_Abort>
 8002be4:	b148      	cbz	r0, 8002bfa <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002be6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002be8:	f7fd fec5 	bl	8000976 <HAL_DMA_GetError>
 8002bec:	2820      	cmp	r0, #32
 8002bee:	d104      	bne.n	8002bfa <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002c0a:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	6898      	ldr	r0, [r3, #8]
 8002c16:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002c1a:	d013      	beq.n	8002c44 <HAL_UART_DMAStop+0x88>
 8002c1c:	2d22      	cmp	r5, #34	; 0x22
 8002c1e:	d110      	bne.n	8002c42 <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c20:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8002c22:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c28:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8002c2a:	b138      	cbz	r0, 8002c3c <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002c2c:	f7fd fdea 	bl	8000804 <HAL_DMA_Abort>
 8002c30:	b120      	cbz	r0, 8002c3c <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002c32:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002c34:	f7fd fe9f 	bl	8000976 <HAL_DMA_GetError>
 8002c38:	2820      	cmp	r0, #32
 8002c3a:	d0d9      	beq.n	8002bf0 <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff ff34 	bl	8002aaa <UART_EndRxTransfer>
  return HAL_OK;
 8002c42:	2000      	movs	r0, #0
}
 8002c44:	bd38      	pop	{r3, r4, r5, pc}

08002c46 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c46:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002c4a:	2a22      	cmp	r2, #34	; 0x22
{
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c50:	d122      	bne.n	8002c98 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c54:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8002c58:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8002c5a:	4022      	ands	r2, r4
 8002c5c:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 8002c5e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002c60:	3201      	adds	r2, #1
 8002c62:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002c64:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8002c70:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8002c74:	b292      	uxth	r2, r2
 8002c76:	b99a      	cbnz	r2, 8002ca0 <UART_RxISR_8BIT+0x5a>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c78:	6801      	ldr	r1, [r0, #0]
 8002c7a:	680c      	ldr	r4, [r1, #0]
 8002c7c:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002c80:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	688c      	ldr	r4, [r1, #8]
 8002c84:	f024 0401 	bic.w	r4, r4, #1
 8002c88:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c90:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c92:	f002 fb33 	bl	80052fc <HAL_UART_RxCpltCallback>
 8002c96:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c98:	6993      	ldr	r3, [r2, #24]
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	6193      	str	r3, [r2, #24]
 8002ca0:	bd10      	pop	{r4, pc}

08002ca2 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ca2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002ca6:	2a22      	cmp	r2, #34	; 0x22
{
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cac:	d120      	bne.n	8002cf0 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cae:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002cb0:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 8002cb4:	400c      	ands	r4, r1
 8002cb6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8002cb8:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 8002cbc:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002cbe:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8002cc2:	3901      	subs	r1, #1
 8002cc4:	b289      	uxth	r1, r1
 8002cc6:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8002cca:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8002cce:	b289      	uxth	r1, r1
 8002cd0:	b991      	cbnz	r1, 8002cf8 <UART_RxISR_16BIT+0x56>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cd2:	6814      	ldr	r4, [r2, #0]
 8002cd4:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8002cd8:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cda:	6894      	ldr	r4, [r2, #8]
 8002cdc:	f024 0401 	bic.w	r4, r4, #1
 8002ce0:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002ce8:	66c1      	str	r1, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002cea:	f002 fb07 	bl	80052fc <HAL_UART_RxCpltCallback>
 8002cee:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002cf0:	6993      	ldr	r3, [r2, #24]
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	bd10      	pop	{r4, pc}
	...

08002cfc <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cfc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002d00:	2b22      	cmp	r3, #34	; 0x22
{
 8002d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d06:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d08:	d140      	bne.n	8002d8c <UART_RxISR_8BIT_FIFOEN+0x90>
  uint16_t  uhMask = huart->Mask;
 8002d0a:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002d0e:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d12:	4f22      	ldr	r7, [pc, #136]	; (8002d9c <UART_RxISR_8BIT_FIFOEN+0xa0>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d14:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002d18:	b9ad      	cbnz	r5, 8002d46 <UART_RxISR_8BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002d1a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002d1e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d038      	beq.n	8002d96 <UART_RxISR_8BIT_FIFOEN+0x9a>
 8002d24:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d934      	bls.n	8002d96 <UART_RxISR_8BIT_FIFOEN+0x9a>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002d36:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 8002d38:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d46:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d48:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d4c:	4033      	ands	r3, r6
 8002d4e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8002d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d52:	3301      	adds	r3, #1
 8002d54:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002d56:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8002d62:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	b96b      	cbnz	r3, 8002d86 <UART_RxISR_8BIT_FIFOEN+0x8a>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d6a:	6822      	ldr	r2, [r4, #0]
 8002d6c:	6811      	ldr	r1, [r2, #0]
 8002d6e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002d72:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d74:	6891      	ldr	r1, [r2, #8]
 8002d76:	4039      	ands	r1, r7
 8002d78:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 8002d7a:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8002d80:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8002d82:	f002 fabb 	bl	80052fc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002d86:	3d01      	subs	r5, #1
 8002d88:	b2ad      	uxth	r5, r5
 8002d8a:	e7c5      	b.n	8002d18 <UART_RxISR_8BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d8c:	6802      	ldr	r2, [r0, #0]
 8002d8e:	6993      	ldr	r3, [r2, #24]
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	6193      	str	r3, [r2, #24]
 8002d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9a:	bf00      	nop
 8002d9c:	effffffe 	.word	0xeffffffe
 8002da0:	08002c47 	.word	0x08002c47

08002da4 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002da4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002da8:	2b22      	cmp	r3, #34	; 0x22
{
 8002daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dae:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002db0:	d13e      	bne.n	8002e30 <UART_RxISR_16BIT_FIFOEN+0x8c>
  uint16_t  uhMask = huart->Mask;
 8002db2:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002db6:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dba:	4f21      	ldr	r7, [pc, #132]	; (8002e40 <UART_RxISR_16BIT_FIFOEN+0x9c>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002dc0:	b9ad      	cbnz	r5, 8002dee <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002dc2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8002dc6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d036      	beq.n	8002e3a <UART_RxISR_16BIT_FIFOEN+0x96>
 8002dcc:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d932      	bls.n	8002e3a <UART_RxISR_16BIT_FIFOEN+0x96>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002ddc:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002dde:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <UART_RxISR_16BIT_FIFOEN+0xa0>)
 8002de0:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f042 0220 	orr.w	r2, r2, #32
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002dee:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002df0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002df2:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8002df4:	4031      	ands	r1, r6
 8002df6:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8002dfa:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002dfc:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8002e00:	3a01      	subs	r2, #1
 8002e02:	b292      	uxth	r2, r2
 8002e04:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8002e08:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	b962      	cbnz	r2, 8002e2a <UART_RxISR_16BIT_FIFOEN+0x86>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002e16:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e18:	6899      	ldr	r1, [r3, #8]
 8002e1a:	4039      	ands	r1, r7
 8002e1c:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 8002e1e:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8002e20:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8002e24:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8002e26:	f002 fa69 	bl	80052fc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8002e2a:	3d01      	subs	r5, #1
 8002e2c:	b2ad      	uxth	r5, r5
 8002e2e:	e7c7      	b.n	8002dc0 <UART_RxISR_16BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e30:	6802      	ldr	r2, [r0, #0]
 8002e32:	6993      	ldr	r3, [r2, #24]
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	6193      	str	r3, [r2, #24]
 8002e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e3e:	bf00      	nop
 8002e40:	effffffe 	.word	0xeffffffe
 8002e44:	08002ca3 	.word	0x08002ca3

08002e48 <HAL_UART_ErrorCallback>:
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e4c:	6802      	ldr	r2, [r0, #0]
 8002e4e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e50:	6811      	ldr	r1, [r2, #0]
{
 8002e52:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8002e54:	f640 050f 	movw	r5, #2063	; 0x80f
 8002e58:	422b      	tst	r3, r5
{
 8002e5a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e5c:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8002e5e:	d10d      	bne.n	8002e7c <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e60:	069e      	lsls	r6, r3, #26
 8002e62:	f140 8087 	bpl.w	8002f74 <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e66:	068d      	lsls	r5, r1, #26
 8002e68:	d402      	bmi.n	8002e70 <HAL_UART_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e6a:	00c6      	lsls	r6, r0, #3
 8002e6c:	f140 8082 	bpl.w	8002f74 <HAL_UART_IRQHandler+0x128>
      if (huart->RxISR != NULL)
 8002e70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80b5 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x196>
      huart->TxISR(huart);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	e06f      	b.n	8002f5c <HAL_UART_IRQHandler+0x110>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e7c:	4e59      	ldr	r6, [pc, #356]	; (8002fe4 <HAL_UART_IRQHandler+0x198>)
 8002e7e:	4006      	ands	r6, r0
 8002e80:	d102      	bne.n	8002e88 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e82:	4d59      	ldr	r5, [pc, #356]	; (8002fe8 <HAL_UART_IRQHandler+0x19c>)
 8002e84:	4229      	tst	r1, r5
 8002e86:	d075      	beq.n	8002f74 <HAL_UART_IRQHandler+0x128>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e88:	07dd      	lsls	r5, r3, #31
 8002e8a:	d509      	bpl.n	8002ea0 <HAL_UART_IRQHandler+0x54>
 8002e8c:	05cd      	lsls	r5, r1, #23
 8002e8e:	d507      	bpl.n	8002ea0 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e90:	2501      	movs	r5, #1
 8002e92:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e94:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002e98:	f045 0501 	orr.w	r5, r5, #1
 8002e9c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea0:	079d      	lsls	r5, r3, #30
 8002ea2:	d509      	bpl.n	8002eb8 <HAL_UART_IRQHandler+0x6c>
 8002ea4:	07c5      	lsls	r5, r0, #31
 8002ea6:	d507      	bpl.n	8002eb8 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ea8:	2502      	movs	r5, #2
 8002eaa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eac:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002eb0:	f045 0504 	orr.w	r5, r5, #4
 8002eb4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eb8:	075d      	lsls	r5, r3, #29
 8002eba:	d509      	bpl.n	8002ed0 <HAL_UART_IRQHandler+0x84>
 8002ebc:	07c5      	lsls	r5, r0, #31
 8002ebe:	d507      	bpl.n	8002ed0 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ec0:	2504      	movs	r5, #4
 8002ec2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002ec8:	f045 0502 	orr.w	r5, r5, #2
 8002ecc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ed0:	071d      	lsls	r5, r3, #28
 8002ed2:	d50a      	bpl.n	8002eea <HAL_UART_IRQHandler+0x9e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ed4:	068d      	lsls	r5, r1, #26
 8002ed6:	d400      	bmi.n	8002eda <HAL_UART_IRQHandler+0x8e>
 8002ed8:	b13e      	cbz	r6, 8002eea <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eda:	2508      	movs	r5, #8
 8002edc:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ede:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002ee2:	f045 0508 	orr.w	r5, r5, #8
 8002ee6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002eea:	051e      	lsls	r6, r3, #20
 8002eec:	d50a      	bpl.n	8002f04 <HAL_UART_IRQHandler+0xb8>
 8002eee:	014d      	lsls	r5, r1, #5
 8002ef0:	d508      	bpl.n	8002f04 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002ef6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002efc:	f042 0220 	orr.w	r2, r2, #32
 8002f00:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f04:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d06a      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x196>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f0c:	069e      	lsls	r6, r3, #26
 8002f0e:	d507      	bpl.n	8002f20 <HAL_UART_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f10:	068d      	lsls	r5, r1, #26
 8002f12:	d401      	bmi.n	8002f18 <HAL_UART_IRQHandler+0xcc>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f14:	00c0      	lsls	r0, r0, #3
 8002f16:	d503      	bpl.n	8002f20 <HAL_UART_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 8002f18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002f1a:	b10b      	cbz	r3, 8002f20 <HAL_UART_IRQHandler+0xd4>
          huart->RxISR(huart);
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f20:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002f22:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f26:	6892      	ldr	r2, [r2, #8]
 8002f28:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8002f2a:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f2c:	d402      	bmi.n	8002f34 <HAL_UART_IRQHandler+0xe8>
 8002f2e:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8002f32:	d01a      	beq.n	8002f6a <HAL_UART_IRQHandler+0x11e>
        UART_EndRxTransfer(huart);
 8002f34:	f7ff fdb9 	bl	8002aaa <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	0652      	lsls	r2, r2, #25
 8002f3e:	d510      	bpl.n	8002f62 <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f40:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002f42:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f48:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002f4a:	b150      	cbz	r0, 8002f62 <HAL_UART_IRQHandler+0x116>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_UART_IRQHandler+0x1a0>)
 8002f4e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f50:	f7fd fc8d 	bl	800086e <HAL_DMA_Abort_IT>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d044      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x196>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f58:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002f5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f60:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff ff70 	bl	8002e48 <HAL_UART_ErrorCallback>
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002f6a:	f7ff ff6d 	bl	8002e48 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f74:	02de      	lsls	r6, r3, #11
 8002f76:	d509      	bpl.n	8002f8c <HAL_UART_IRQHandler+0x140>
 8002f78:	0245      	lsls	r5, r0, #9
 8002f7a:	d507      	bpl.n	8002f8c <HAL_UART_IRQHandler+0x140>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002f80:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f82:	6213      	str	r3, [r2, #32]
}
 8002f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002f88:	f000 be28 	b.w	8003bdc <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f8c:	061e      	lsls	r6, r3, #24
 8002f8e:	d505      	bpl.n	8002f9c <HAL_UART_IRQHandler+0x150>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f90:	060d      	lsls	r5, r1, #24
 8002f92:	d401      	bmi.n	8002f98 <HAL_UART_IRQHandler+0x14c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f94:	0200      	lsls	r0, r0, #8
 8002f96:	d501      	bpl.n	8002f9c <HAL_UART_IRQHandler+0x150>
    if (huart->TxISR != NULL)
 8002f98:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002f9a:	e76a      	b.n	8002e72 <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f9c:	065e      	lsls	r6, r3, #25
 8002f9e:	d50e      	bpl.n	8002fbe <HAL_UART_IRQHandler+0x172>
 8002fa0:	064d      	lsls	r5, r1, #25
 8002fa2:	d50c      	bpl.n	8002fbe <HAL_UART_IRQHandler+0x172>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fa4:	6813      	ldr	r3, [r2, #0]
 8002fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002faa:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	2320      	movs	r3, #32
 8002fae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f002 f99a 	bl	80052f0 <HAL_UART_TxCpltCallback>
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002fbe:	0218      	lsls	r0, r3, #8
 8002fc0:	d506      	bpl.n	8002fd0 <HAL_UART_IRQHandler+0x184>
 8002fc2:	004a      	lsls	r2, r1, #1
 8002fc4:	d504      	bpl.n	8002fd0 <HAL_UART_IRQHandler+0x184>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002fc6:	4620      	mov	r0, r4
}
 8002fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002fcc:	f000 be08 	b.w	8003be0 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002fd0:	01db      	lsls	r3, r3, #7
 8002fd2:	d506      	bpl.n	8002fe2 <HAL_UART_IRQHandler+0x196>
 8002fd4:	2900      	cmp	r1, #0
 8002fd6:	da04      	bge.n	8002fe2 <HAL_UART_IRQHandler+0x196>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002fd8:	4620      	mov	r0, r4
}
 8002fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002fde:	f000 bdfe 	b.w	8003bde <HAL_UARTEx_RxFifoFullCallback>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	10000001 	.word	0x10000001
 8002fe8:	04000120 	.word	0x04000120
 8002fec:	08002ff1 	.word	0x08002ff1

08002ff0 <UART_DMAAbortOnError>:
{
 8002ff0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ff2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8002ffa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8002ffe:	f7ff ff23 	bl	8002e48 <HAL_UART_ErrorCallback>
 8003002:	bd08      	pop	{r3, pc}

08003004 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8003004:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8003008:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 800300c:	4310      	orrs	r0, r2
 800300e:	4770      	bx	lr

08003010 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003010:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003012:	69c1      	ldr	r1, [r0, #28]
 8003014:	6883      	ldr	r3, [r0, #8]
{
 8003016:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800301a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800301c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800301e:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003020:	4303      	orrs	r3, r0
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8003026:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003028:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800302a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800302c:	48ac      	ldr	r0, [pc, #688]	; (80032e0 <UART_SetConfig+0x2d0>)
 800302e:	4028      	ands	r0, r5
 8003030:	4303      	orrs	r3, r0
 8003032:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	6853      	ldr	r3, [r2, #4]
 8003036:	68e0      	ldr	r0, [r4, #12]
 8003038:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800303c:	4303      	orrs	r3, r0
 800303e:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003040:	4ba8      	ldr	r3, [pc, #672]	; (80032e4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003042:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003044:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8003046:	bf1c      	itt	ne
 8003048:	6a23      	ldrne	r3, [r4, #32]
 800304a:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800304c:	6893      	ldr	r3, [r2, #8]
 800304e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003052:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003056:	4303      	orrs	r3, r0
 8003058:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800305a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800305c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800305e:	f020 000f 	bic.w	r0, r0, #15
 8003062:	4318      	orrs	r0, r3
 8003064:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003066:	48a0      	ldr	r0, [pc, #640]	; (80032e8 <UART_SetConfig+0x2d8>)
 8003068:	4282      	cmp	r2, r0
 800306a:	d11a      	bne.n	80030a2 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800306c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003070:	489e      	ldr	r0, [pc, #632]	; (80032ec <UART_SetConfig+0x2dc>)
 8003072:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003076:	f002 0203 	and.w	r2, r2, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800307e:	5c82      	ldrb	r2, [r0, r2]
 8003080:	f102 32ff 	add.w	r2, r2, #4294967295
 8003084:	f000 8220 	beq.w	80034c8 <UART_SetConfig+0x4b8>
    switch (clocksource)
 8003088:	2a07      	cmp	r2, #7
 800308a:	f200 83e7 	bhi.w	800385c <UART_SetConfig+0x84c>
 800308e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003092:	0327      	.short	0x0327
 8003094:	03e50349 	.word	0x03e50349
 8003098:	03e5038c 	.word	0x03e5038c
 800309c:	03e503e5 	.word	0x03e503e5
 80030a0:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a2:	4890      	ldr	r0, [pc, #576]	; (80032e4 <UART_SetConfig+0x2d4>)
 80030a4:	4282      	cmp	r2, r0
 80030a6:	f040 83d5 	bne.w	8003854 <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80030aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ae:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80030b2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80030b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80030ba:	f000 8094 	beq.w	80031e6 <UART_SetConfig+0x1d6>
 80030be:	d80c      	bhi.n	80030da <UART_SetConfig+0xca>
 80030c0:	b3ca      	cbz	r2, 8003136 <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 80030c2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80030ca:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80030d2:	6723      	str	r3, [r4, #112]	; 0x70
}
 80030d4:	4610      	mov	r0, r2
 80030d6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030da:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80030de:	d064      	beq.n	80031aa <UART_SetConfig+0x19a>
 80030e0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80030e4:	d1ed      	bne.n	80030c2 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80e1 	beq.w	80032ae <UART_SetConfig+0x29e>
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f000 80e1 	beq.w	80032b4 <UART_SetConfig+0x2a4>
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	f000 80e1 	beq.w	80032ba <UART_SetConfig+0x2aa>
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	f000 80e1 	beq.w	80032c0 <UART_SetConfig+0x2b0>
 80030fe:	2b04      	cmp	r3, #4
 8003100:	f000 80e1 	beq.w	80032c6 <UART_SetConfig+0x2b6>
 8003104:	2b05      	cmp	r3, #5
 8003106:	f000 80e1 	beq.w	80032cc <UART_SetConfig+0x2bc>
 800310a:	2b06      	cmp	r3, #6
 800310c:	f000 80e1 	beq.w	80032d2 <UART_SetConfig+0x2c2>
 8003110:	2b07      	cmp	r3, #7
 8003112:	f000 80e1 	beq.w	80032d8 <UART_SetConfig+0x2c8>
 8003116:	2b08      	cmp	r3, #8
 8003118:	f000 8100 	beq.w	800331c <UART_SetConfig+0x30c>
 800311c:	2b09      	cmp	r3, #9
 800311e:	f000 8100 	beq.w	8003322 <UART_SetConfig+0x312>
 8003122:	2b0a      	cmp	r3, #10
 8003124:	f000 8100 	beq.w	8003328 <UART_SetConfig+0x318>
 8003128:	2b0b      	cmp	r3, #11
 800312a:	bf14      	ite	ne
 800312c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8003130:	2080      	moveq	r0, #128	; 0x80
 8003132:	2308      	movs	r3, #8
 8003134:	e093      	b.n	800325e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003136:	f7ff f97d 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 800313a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800313c:	b1fb      	cbz	r3, 800317e <UART_SetConfig+0x16e>
 800313e:	2b01      	cmp	r3, #1
 8003140:	d01f      	beq.n	8003182 <UART_SetConfig+0x172>
 8003142:	2b02      	cmp	r3, #2
 8003144:	d01f      	beq.n	8003186 <UART_SetConfig+0x176>
 8003146:	2b03      	cmp	r3, #3
 8003148:	d01f      	beq.n	800318a <UART_SetConfig+0x17a>
 800314a:	2b04      	cmp	r3, #4
 800314c:	d01f      	beq.n	800318e <UART_SetConfig+0x17e>
 800314e:	2b05      	cmp	r3, #5
 8003150:	d01f      	beq.n	8003192 <UART_SetConfig+0x182>
 8003152:	2b06      	cmp	r3, #6
 8003154:	d01f      	beq.n	8003196 <UART_SetConfig+0x186>
 8003156:	2b07      	cmp	r3, #7
 8003158:	d01f      	beq.n	800319a <UART_SetConfig+0x18a>
 800315a:	2b08      	cmp	r3, #8
 800315c:	d01f      	beq.n	800319e <UART_SetConfig+0x18e>
 800315e:	2b09      	cmp	r3, #9
 8003160:	d01f      	beq.n	80031a2 <UART_SetConfig+0x192>
 8003162:	2b0a      	cmp	r3, #10
 8003164:	d01f      	beq.n	80031a6 <UART_SetConfig+0x196>
 8003166:	2b0b      	cmp	r3, #11
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003170:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003174:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003176:	2800      	cmp	r0, #0
 8003178:	d171      	bne.n	800325e <UART_SetConfig+0x24e>
 800317a:	4602      	mov	r2, r0
 800317c:	e7a2      	b.n	80030c4 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800317e:	2301      	movs	r3, #1
 8003180:	e7f6      	b.n	8003170 <UART_SetConfig+0x160>
 8003182:	2302      	movs	r3, #2
 8003184:	e7f4      	b.n	8003170 <UART_SetConfig+0x160>
 8003186:	2304      	movs	r3, #4
 8003188:	e7f2      	b.n	8003170 <UART_SetConfig+0x160>
 800318a:	2306      	movs	r3, #6
 800318c:	e7f0      	b.n	8003170 <UART_SetConfig+0x160>
 800318e:	2308      	movs	r3, #8
 8003190:	e7ee      	b.n	8003170 <UART_SetConfig+0x160>
 8003192:	230a      	movs	r3, #10
 8003194:	e7ec      	b.n	8003170 <UART_SetConfig+0x160>
 8003196:	230c      	movs	r3, #12
 8003198:	e7ea      	b.n	8003170 <UART_SetConfig+0x160>
 800319a:	2310      	movs	r3, #16
 800319c:	e7e8      	b.n	8003170 <UART_SetConfig+0x160>
 800319e:	2320      	movs	r3, #32
 80031a0:	e7e6      	b.n	8003170 <UART_SetConfig+0x160>
 80031a2:	2340      	movs	r3, #64	; 0x40
 80031a4:	e7e4      	b.n	8003170 <UART_SetConfig+0x160>
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	e7e2      	b.n	8003170 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d052      	beq.n	8003254 <UART_SetConfig+0x244>
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d052      	beq.n	8003258 <UART_SetConfig+0x248>
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d052      	beq.n	800325c <UART_SetConfig+0x24c>
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d069      	beq.n	800328e <UART_SetConfig+0x27e>
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d069      	beq.n	8003292 <UART_SetConfig+0x282>
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d069      	beq.n	8003296 <UART_SetConfig+0x286>
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d069      	beq.n	800329a <UART_SetConfig+0x28a>
 80031c6:	2b07      	cmp	r3, #7
 80031c8:	d069      	beq.n	800329e <UART_SetConfig+0x28e>
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d069      	beq.n	80032a2 <UART_SetConfig+0x292>
 80031ce:	2b09      	cmp	r3, #9
 80031d0:	d069      	beq.n	80032a6 <UART_SetConfig+0x296>
 80031d2:	2b0a      	cmp	r3, #10
 80031d4:	d069      	beq.n	80032aa <UART_SetConfig+0x29a>
 80031d6:	4846      	ldr	r0, [pc, #280]	; (80032f0 <UART_SetConfig+0x2e0>)
 80031d8:	f24f 4224 	movw	r2, #62500	; 0xf424
 80031dc:	2b0b      	cmp	r3, #11
 80031de:	bf08      	it	eq
 80031e0:	4610      	moveq	r0, r2
 80031e2:	2302      	movs	r3, #2
 80031e4:	e03b      	b.n	800325e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80031e6:	f7ff f8c7 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 80031ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031ec:	b1e3      	cbz	r3, 8003228 <UART_SetConfig+0x218>
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d01c      	beq.n	800322c <UART_SetConfig+0x21c>
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d01c      	beq.n	8003230 <UART_SetConfig+0x220>
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d01c      	beq.n	8003234 <UART_SetConfig+0x224>
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d01c      	beq.n	8003238 <UART_SetConfig+0x228>
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d01c      	beq.n	800323c <UART_SetConfig+0x22c>
 8003202:	2b06      	cmp	r3, #6
 8003204:	d01c      	beq.n	8003240 <UART_SetConfig+0x230>
 8003206:	2b07      	cmp	r3, #7
 8003208:	d01c      	beq.n	8003244 <UART_SetConfig+0x234>
 800320a:	2b08      	cmp	r3, #8
 800320c:	d01c      	beq.n	8003248 <UART_SetConfig+0x238>
 800320e:	2b09      	cmp	r3, #9
 8003210:	d01c      	beq.n	800324c <UART_SetConfig+0x23c>
 8003212:	2b0a      	cmp	r3, #10
 8003214:	d01c      	beq.n	8003250 <UART_SetConfig+0x240>
 8003216:	2b0b      	cmp	r3, #11
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003220:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003224:	2304      	movs	r3, #4
 8003226:	e7a6      	b.n	8003176 <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003228:	2301      	movs	r3, #1
 800322a:	e7f9      	b.n	8003220 <UART_SetConfig+0x210>
 800322c:	2302      	movs	r3, #2
 800322e:	e7f7      	b.n	8003220 <UART_SetConfig+0x210>
 8003230:	2304      	movs	r3, #4
 8003232:	e7f5      	b.n	8003220 <UART_SetConfig+0x210>
 8003234:	2306      	movs	r3, #6
 8003236:	e7f3      	b.n	8003220 <UART_SetConfig+0x210>
 8003238:	2308      	movs	r3, #8
 800323a:	e7f1      	b.n	8003220 <UART_SetConfig+0x210>
 800323c:	230a      	movs	r3, #10
 800323e:	e7ef      	b.n	8003220 <UART_SetConfig+0x210>
 8003240:	230c      	movs	r3, #12
 8003242:	e7ed      	b.n	8003220 <UART_SetConfig+0x210>
 8003244:	2310      	movs	r3, #16
 8003246:	e7eb      	b.n	8003220 <UART_SetConfig+0x210>
 8003248:	2320      	movs	r3, #32
 800324a:	e7e9      	b.n	8003220 <UART_SetConfig+0x210>
 800324c:	2340      	movs	r3, #64	; 0x40
 800324e:	e7e7      	b.n	8003220 <UART_SetConfig+0x210>
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	e7e5      	b.n	8003220 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003254:	4826      	ldr	r0, [pc, #152]	; (80032f0 <UART_SetConfig+0x2e0>)
 8003256:	e7c4      	b.n	80031e2 <UART_SetConfig+0x1d2>
 8003258:	4826      	ldr	r0, [pc, #152]	; (80032f4 <UART_SetConfig+0x2e4>)
 800325a:	e7c2      	b.n	80031e2 <UART_SetConfig+0x1d2>
 800325c:	4826      	ldr	r0, [pc, #152]	; (80032f8 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800325e:	6862      	ldr	r2, [r4, #4]
 8003260:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003264:	4281      	cmp	r1, r0
 8003266:	f63f af2c 	bhi.w	80030c2 <UART_SetConfig+0xb2>
 800326a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800326e:	f63f af28 	bhi.w	80030c2 <UART_SetConfig+0xb2>
        switch (clocksource)
 8003272:	2b08      	cmp	r3, #8
 8003274:	f200 8125 	bhi.w	80034c2 <UART_SetConfig+0x4b2>
 8003278:	e8df f013 	tbh	[pc, r3, lsl #1]
 800327c:	01230059 	.word	0x01230059
 8003280:	01230095 	.word	0x01230095
 8003284:	012300d1 	.word	0x012300d1
 8003288:	01230123 	.word	0x01230123
 800328c:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800328e:	481b      	ldr	r0, [pc, #108]	; (80032fc <UART_SetConfig+0x2ec>)
 8003290:	e7a7      	b.n	80031e2 <UART_SetConfig+0x1d2>
 8003292:	481b      	ldr	r0, [pc, #108]	; (8003300 <UART_SetConfig+0x2f0>)
 8003294:	e7a5      	b.n	80031e2 <UART_SetConfig+0x1d2>
 8003296:	481b      	ldr	r0, [pc, #108]	; (8003304 <UART_SetConfig+0x2f4>)
 8003298:	e7a3      	b.n	80031e2 <UART_SetConfig+0x1d2>
 800329a:	481b      	ldr	r0, [pc, #108]	; (8003308 <UART_SetConfig+0x2f8>)
 800329c:	e7a1      	b.n	80031e2 <UART_SetConfig+0x1d2>
 800329e:	481b      	ldr	r0, [pc, #108]	; (800330c <UART_SetConfig+0x2fc>)
 80032a0:	e79f      	b.n	80031e2 <UART_SetConfig+0x1d2>
 80032a2:	481b      	ldr	r0, [pc, #108]	; (8003310 <UART_SetConfig+0x300>)
 80032a4:	e79d      	b.n	80031e2 <UART_SetConfig+0x1d2>
 80032a6:	481b      	ldr	r0, [pc, #108]	; (8003314 <UART_SetConfig+0x304>)
 80032a8:	e79b      	b.n	80031e2 <UART_SetConfig+0x1d2>
 80032aa:	481b      	ldr	r0, [pc, #108]	; (8003318 <UART_SetConfig+0x308>)
 80032ac:	e799      	b.n	80031e2 <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80032ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80032b2:	e73e      	b.n	8003132 <UART_SetConfig+0x122>
 80032b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032b8:	e73b      	b.n	8003132 <UART_SetConfig+0x122>
 80032ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032be:	e738      	b.n	8003132 <UART_SetConfig+0x122>
 80032c0:	f241 5055 	movw	r0, #5461	; 0x1555
 80032c4:	e735      	b.n	8003132 <UART_SetConfig+0x122>
 80032c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032ca:	e732      	b.n	8003132 <UART_SetConfig+0x122>
 80032cc:	f640 40cc 	movw	r0, #3276	; 0xccc
 80032d0:	e72f      	b.n	8003132 <UART_SetConfig+0x122>
 80032d2:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80032d6:	e72c      	b.n	8003132 <UART_SetConfig+0x122>
 80032d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032dc:	e729      	b.n	8003132 <UART_SetConfig+0x122>
 80032de:	bf00      	nop
 80032e0:	cfff69f3 	.word	0xcfff69f3
 80032e4:	40008000 	.word	0x40008000
 80032e8:	40013800 	.word	0x40013800
 80032ec:	08006bf8 	.word	0x08006bf8
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	007a1200 	.word	0x007a1200
 80032f8:	003d0900 	.word	0x003d0900
 80032fc:	0028b0aa 	.word	0x0028b0aa
 8003300:	001e8480 	.word	0x001e8480
 8003304:	00186a00 	.word	0x00186a00
 8003308:	00145855 	.word	0x00145855
 800330c:	000f4240 	.word	0x000f4240
 8003310:	0007a120 	.word	0x0007a120
 8003314:	0003d090 	.word	0x0003d090
 8003318:	0001e848 	.word	0x0001e848
 800331c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003320:	e79d      	b.n	800325e <UART_SetConfig+0x24e>
 8003322:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003326:	e704      	b.n	8003132 <UART_SetConfig+0x122>
 8003328:	f44f 7080 	mov.w	r0, #256	; 0x100
 800332c:	e701      	b.n	8003132 <UART_SetConfig+0x122>
            pclk = HAL_RCC_GetPCLK1Freq();
 800332e:	f7ff f881 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8089 	beq.w	800344c <UART_SetConfig+0x43c>
 800333a:	2b01      	cmp	r3, #1
 800333c:	d072      	beq.n	8003424 <UART_SetConfig+0x414>
 800333e:	2b02      	cmp	r3, #2
 8003340:	d072      	beq.n	8003428 <UART_SetConfig+0x418>
 8003342:	2b03      	cmp	r3, #3
 8003344:	d072      	beq.n	800342c <UART_SetConfig+0x41c>
 8003346:	2b04      	cmp	r3, #4
 8003348:	d072      	beq.n	8003430 <UART_SetConfig+0x420>
 800334a:	2b05      	cmp	r3, #5
 800334c:	d072      	beq.n	8003434 <UART_SetConfig+0x424>
 800334e:	2b06      	cmp	r3, #6
 8003350:	d072      	beq.n	8003438 <UART_SetConfig+0x428>
 8003352:	2b07      	cmp	r3, #7
 8003354:	d072      	beq.n	800343c <UART_SetConfig+0x42c>
 8003356:	2b08      	cmp	r3, #8
 8003358:	d072      	beq.n	8003440 <UART_SetConfig+0x430>
 800335a:	2b09      	cmp	r3, #9
 800335c:	d072      	beq.n	8003444 <UART_SetConfig+0x434>
 800335e:	2b0a      	cmp	r3, #10
 8003360:	d072      	beq.n	8003448 <UART_SetConfig+0x438>
 8003362:	2b0b      	cmp	r3, #11
 8003364:	d172      	bne.n	800344c <UART_SetConfig+0x43c>
 8003366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336a:	2300      	movs	r3, #0
 800336c:	2100      	movs	r1, #0
 800336e:	f7fc ff57 	bl	8000220 <__aeabi_uldivmod>
 8003372:	6865      	ldr	r5, [r4, #4]
 8003374:	020f      	lsls	r7, r1, #8
 8003376:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800337a:	0206      	lsls	r6, r0, #8
 800337c:	0868      	lsrs	r0, r5, #1
 800337e:	eb16 0b00 	adds.w	fp, r6, r0
 8003382:	f147 0c00 	adc.w	ip, r7, #0
 8003386:	462a      	mov	r2, r5
 8003388:	2300      	movs	r3, #0
 800338a:	4658      	mov	r0, fp
 800338c:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800338e:	f7fc ff47 	bl	8000220 <__aeabi_uldivmod>
            break;
 8003392:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003394:	4b9a      	ldr	r3, [pc, #616]	; (8003600 <UART_SetConfig+0x5f0>)
 8003396:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800339a:	4299      	cmp	r1, r3
 800339c:	f63f ae91 	bhi.w	80030c2 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	60d8      	str	r0, [r3, #12]
 80033a4:	e68e      	b.n	80030c4 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d036      	beq.n	800341a <UART_SetConfig+0x40a>
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d016      	beq.n	80033de <UART_SetConfig+0x3ce>
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d016      	beq.n	80033e2 <UART_SetConfig+0x3d2>
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d016      	beq.n	80033e6 <UART_SetConfig+0x3d6>
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d01e      	beq.n	80033fa <UART_SetConfig+0x3ea>
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d01e      	beq.n	80033fe <UART_SetConfig+0x3ee>
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d01e      	beq.n	8003402 <UART_SetConfig+0x3f2>
 80033c4:	2b07      	cmp	r3, #7
 80033c6:	d020      	beq.n	800340a <UART_SetConfig+0x3fa>
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d020      	beq.n	800340e <UART_SetConfig+0x3fe>
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d020      	beq.n	8003412 <UART_SetConfig+0x402>
 80033d0:	2b0a      	cmp	r3, #10
 80033d2:	d020      	beq.n	8003416 <UART_SetConfig+0x406>
 80033d4:	2b0b      	cmp	r3, #11
 80033d6:	d120      	bne.n	800341a <UART_SetConfig+0x40a>
 80033d8:	488a      	ldr	r0, [pc, #552]	; (8003604 <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033da:	2100      	movs	r1, #0
 80033dc:	e006      	b.n	80033ec <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033de:	488a      	ldr	r0, [pc, #552]	; (8003608 <UART_SetConfig+0x5f8>)
 80033e0:	e7fb      	b.n	80033da <UART_SetConfig+0x3ca>
 80033e2:	488a      	ldr	r0, [pc, #552]	; (800360c <UART_SetConfig+0x5fc>)
 80033e4:	e7f9      	b.n	80033da <UART_SetConfig+0x3ca>
 80033e6:	a182      	add	r1, pc, #520	; (adr r1, 80035f0 <UART_SetConfig+0x5e0>)
 80033e8:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ec:	0855      	lsrs	r5, r2, #1
 80033ee:	1940      	adds	r0, r0, r5
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	f141 0100 	adc.w	r1, r1, #0
 80033f8:	e7c9      	b.n	800338e <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033fa:	4885      	ldr	r0, [pc, #532]	; (8003610 <UART_SetConfig+0x600>)
 80033fc:	e7ed      	b.n	80033da <UART_SetConfig+0x3ca>
 80033fe:	4885      	ldr	r0, [pc, #532]	; (8003614 <UART_SetConfig+0x604>)
 8003400:	e7eb      	b.n	80033da <UART_SetConfig+0x3ca>
 8003402:	a17d      	add	r1, pc, #500	; (adr r1, 80035f8 <UART_SetConfig+0x5e8>)
 8003404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003408:	e7f0      	b.n	80033ec <UART_SetConfig+0x3dc>
 800340a:	4883      	ldr	r0, [pc, #524]	; (8003618 <UART_SetConfig+0x608>)
 800340c:	e7e5      	b.n	80033da <UART_SetConfig+0x3ca>
 800340e:	4883      	ldr	r0, [pc, #524]	; (800361c <UART_SetConfig+0x60c>)
 8003410:	e7e3      	b.n	80033da <UART_SetConfig+0x3ca>
 8003412:	4883      	ldr	r0, [pc, #524]	; (8003620 <UART_SetConfig+0x610>)
 8003414:	e7e1      	b.n	80033da <UART_SetConfig+0x3ca>
 8003416:	4883      	ldr	r0, [pc, #524]	; (8003624 <UART_SetConfig+0x614>)
 8003418:	e7df      	b.n	80033da <UART_SetConfig+0x3ca>
 800341a:	4883      	ldr	r0, [pc, #524]	; (8003628 <UART_SetConfig+0x618>)
 800341c:	e7dd      	b.n	80033da <UART_SetConfig+0x3ca>
            pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe ffab 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8003422:	e786      	b.n	8003332 <UART_SetConfig+0x322>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003424:	2202      	movs	r2, #2
 8003426:	e7a0      	b.n	800336a <UART_SetConfig+0x35a>
 8003428:	2204      	movs	r2, #4
 800342a:	e79e      	b.n	800336a <UART_SetConfig+0x35a>
 800342c:	2206      	movs	r2, #6
 800342e:	e79c      	b.n	800336a <UART_SetConfig+0x35a>
 8003430:	2208      	movs	r2, #8
 8003432:	e79a      	b.n	800336a <UART_SetConfig+0x35a>
 8003434:	220a      	movs	r2, #10
 8003436:	e798      	b.n	800336a <UART_SetConfig+0x35a>
 8003438:	220c      	movs	r2, #12
 800343a:	e796      	b.n	800336a <UART_SetConfig+0x35a>
 800343c:	2210      	movs	r2, #16
 800343e:	e794      	b.n	800336a <UART_SetConfig+0x35a>
 8003440:	2220      	movs	r2, #32
 8003442:	e792      	b.n	800336a <UART_SetConfig+0x35a>
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	e790      	b.n	800336a <UART_SetConfig+0x35a>
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	e78e      	b.n	800336a <UART_SetConfig+0x35a>
 800344c:	2201      	movs	r2, #1
 800344e:	e78c      	b.n	800336a <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003452:	b39b      	cbz	r3, 80034bc <UART_SetConfig+0x4ac>
 8003454:	2b01      	cmp	r3, #1
 8003456:	d016      	beq.n	8003486 <UART_SetConfig+0x476>
 8003458:	2b02      	cmp	r3, #2
 800345a:	d017      	beq.n	800348c <UART_SetConfig+0x47c>
 800345c:	2b03      	cmp	r3, #3
 800345e:	d018      	beq.n	8003492 <UART_SetConfig+0x482>
 8003460:	2b04      	cmp	r3, #4
 8003462:	d018      	beq.n	8003496 <UART_SetConfig+0x486>
 8003464:	2b05      	cmp	r3, #5
 8003466:	d019      	beq.n	800349c <UART_SetConfig+0x48c>
 8003468:	2b06      	cmp	r3, #6
 800346a:	d019      	beq.n	80034a0 <UART_SetConfig+0x490>
 800346c:	2b07      	cmp	r3, #7
 800346e:	d019      	beq.n	80034a4 <UART_SetConfig+0x494>
 8003470:	2b08      	cmp	r3, #8
 8003472:	d01a      	beq.n	80034aa <UART_SetConfig+0x49a>
 8003474:	2b09      	cmp	r3, #9
 8003476:	d01b      	beq.n	80034b0 <UART_SetConfig+0x4a0>
 8003478:	2b0a      	cmp	r3, #10
 800347a:	d01c      	beq.n	80034b6 <UART_SetConfig+0x4a6>
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d11d      	bne.n	80034bc <UART_SetConfig+0x4ac>
 8003480:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003484:	e7a9      	b.n	80033da <UART_SetConfig+0x3ca>
 8003486:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800348a:	e7a6      	b.n	80033da <UART_SetConfig+0x3ca>
 800348c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003490:	e7a3      	b.n	80033da <UART_SetConfig+0x3ca>
 8003492:	4866      	ldr	r0, [pc, #408]	; (800362c <UART_SetConfig+0x61c>)
 8003494:	e7a1      	b.n	80033da <UART_SetConfig+0x3ca>
 8003496:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800349a:	e79e      	b.n	80033da <UART_SetConfig+0x3ca>
 800349c:	4864      	ldr	r0, [pc, #400]	; (8003630 <UART_SetConfig+0x620>)
 800349e:	e79c      	b.n	80033da <UART_SetConfig+0x3ca>
 80034a0:	4864      	ldr	r0, [pc, #400]	; (8003634 <UART_SetConfig+0x624>)
 80034a2:	e79a      	b.n	80033da <UART_SetConfig+0x3ca>
 80034a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80034a8:	e797      	b.n	80033da <UART_SetConfig+0x3ca>
 80034aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80034ae:	e794      	b.n	80033da <UART_SetConfig+0x3ca>
 80034b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80034b4:	e791      	b.n	80033da <UART_SetConfig+0x3ca>
 80034b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80034ba:	e78e      	b.n	80033da <UART_SetConfig+0x3ca>
 80034bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80034c0:	e78b      	b.n	80033da <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 80034c2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80034c4:	2000      	movs	r0, #0
 80034c6:	e765      	b.n	8003394 <UART_SetConfig+0x384>
    switch (clocksource)
 80034c8:	2a07      	cmp	r2, #7
 80034ca:	f200 8106 	bhi.w	80036da <UART_SetConfig+0x6ca>
 80034ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 80034d2:	0008      	.short	0x0008
 80034d4:	0104003f 	.word	0x0104003f
 80034d8:	01040076 	.word	0x01040076
 80034dc:	01040104 	.word	0x01040104
 80034e0:	00c7      	.short	0x00c7
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e2:	f7fe ffb9 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034e8:	2900      	cmp	r1, #0
 80034ea:	d06b      	beq.n	80035c4 <UART_SetConfig+0x5b4>
 80034ec:	2901      	cmp	r1, #1
 80034ee:	d06b      	beq.n	80035c8 <UART_SetConfig+0x5b8>
 80034f0:	2902      	cmp	r1, #2
 80034f2:	d06b      	beq.n	80035cc <UART_SetConfig+0x5bc>
 80034f4:	2903      	cmp	r1, #3
 80034f6:	d06b      	beq.n	80035d0 <UART_SetConfig+0x5c0>
 80034f8:	2904      	cmp	r1, #4
 80034fa:	d06b      	beq.n	80035d4 <UART_SetConfig+0x5c4>
 80034fc:	2905      	cmp	r1, #5
 80034fe:	d06b      	beq.n	80035d8 <UART_SetConfig+0x5c8>
 8003500:	2906      	cmp	r1, #6
 8003502:	d06b      	beq.n	80035dc <UART_SetConfig+0x5cc>
 8003504:	2907      	cmp	r1, #7
 8003506:	d06b      	beq.n	80035e0 <UART_SetConfig+0x5d0>
 8003508:	2908      	cmp	r1, #8
 800350a:	d06b      	beq.n	80035e4 <UART_SetConfig+0x5d4>
 800350c:	2909      	cmp	r1, #9
 800350e:	d06b      	beq.n	80035e8 <UART_SetConfig+0x5d8>
 8003510:	290a      	cmp	r1, #10
 8003512:	d06b      	beq.n	80035ec <UART_SetConfig+0x5dc>
 8003514:	290b      	cmp	r1, #11
 8003516:	bf14      	ite	ne
 8003518:	2201      	movne	r2, #1
 800351a:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800351e:	6861      	ldr	r1, [r4, #4]
 8003520:	fbb0 f2f2 	udiv	r2, r0, r2
 8003524:	084b      	lsrs	r3, r1, #1
 8003526:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800352a:	fbb3 f3f1 	udiv	r3, r3, r1
 800352e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003530:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003532:	f1a3 0010 	sub.w	r0, r3, #16
 8003536:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800353a:	4288      	cmp	r0, r1
 800353c:	f63f adc1 	bhi.w	80030c2 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003540:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003544:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003546:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800354a:	430b      	orrs	r3, r1
 800354c:	60c3      	str	r3, [r0, #12]
 800354e:	e5b9      	b.n	80030c4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003550:	b1fb      	cbz	r3, 8003592 <UART_SetConfig+0x582>
 8003552:	2b01      	cmp	r3, #1
 8003554:	d01f      	beq.n	8003596 <UART_SetConfig+0x586>
 8003556:	2b02      	cmp	r3, #2
 8003558:	d01f      	beq.n	800359a <UART_SetConfig+0x58a>
 800355a:	2b03      	cmp	r3, #3
 800355c:	d01f      	beq.n	800359e <UART_SetConfig+0x58e>
 800355e:	2b04      	cmp	r3, #4
 8003560:	d01f      	beq.n	80035a2 <UART_SetConfig+0x592>
 8003562:	2b05      	cmp	r3, #5
 8003564:	d01f      	beq.n	80035a6 <UART_SetConfig+0x596>
 8003566:	2b06      	cmp	r3, #6
 8003568:	d01f      	beq.n	80035aa <UART_SetConfig+0x59a>
 800356a:	2b07      	cmp	r3, #7
 800356c:	d01f      	beq.n	80035ae <UART_SetConfig+0x59e>
 800356e:	2b08      	cmp	r3, #8
 8003570:	d01f      	beq.n	80035b2 <UART_SetConfig+0x5a2>
 8003572:	2b09      	cmp	r3, #9
 8003574:	d01f      	beq.n	80035b6 <UART_SetConfig+0x5a6>
 8003576:	2b0a      	cmp	r3, #10
 8003578:	d01f      	beq.n	80035ba <UART_SetConfig+0x5aa>
 800357a:	492f      	ldr	r1, [pc, #188]	; (8003638 <UART_SetConfig+0x628>)
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <UART_SetConfig+0x614>)
 800357e:	2b0b      	cmp	r3, #11
 8003580:	bf14      	ite	ne
 8003582:	4613      	movne	r3, r2
 8003584:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003586:	6862      	ldr	r2, [r4, #4]
 8003588:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800358c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003590:	e7cd      	b.n	800352e <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003592:	4b24      	ldr	r3, [pc, #144]	; (8003624 <UART_SetConfig+0x614>)
 8003594:	e7f7      	b.n	8003586 <UART_SetConfig+0x576>
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <UART_SetConfig+0x5f4>)
 8003598:	e7f5      	b.n	8003586 <UART_SetConfig+0x576>
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <UART_SetConfig+0x62c>)
 800359c:	e7f3      	b.n	8003586 <UART_SetConfig+0x576>
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <UART_SetConfig+0x630>)
 80035a0:	e7f1      	b.n	8003586 <UART_SetConfig+0x576>
 80035a2:	4b28      	ldr	r3, [pc, #160]	; (8003644 <UART_SetConfig+0x634>)
 80035a4:	e7ef      	b.n	8003586 <UART_SetConfig+0x576>
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <UART_SetConfig+0x638>)
 80035a8:	e7ed      	b.n	8003586 <UART_SetConfig+0x576>
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <UART_SetConfig+0x63c>)
 80035ac:	e7eb      	b.n	8003586 <UART_SetConfig+0x576>
 80035ae:	4b28      	ldr	r3, [pc, #160]	; (8003650 <UART_SetConfig+0x640>)
 80035b0:	e7e9      	b.n	8003586 <UART_SetConfig+0x576>
 80035b2:	4b28      	ldr	r3, [pc, #160]	; (8003654 <UART_SetConfig+0x644>)
 80035b4:	e7e7      	b.n	8003586 <UART_SetConfig+0x576>
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <UART_SetConfig+0x648>)
 80035b8:	e7e5      	b.n	8003586 <UART_SetConfig+0x576>
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <UART_SetConfig+0x64c>)
 80035bc:	e7e3      	b.n	8003586 <UART_SetConfig+0x576>
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fedb 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 80035c2:	e790      	b.n	80034e6 <UART_SetConfig+0x4d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c4:	2201      	movs	r2, #1
 80035c6:	e7aa      	b.n	800351e <UART_SetConfig+0x50e>
 80035c8:	2202      	movs	r2, #2
 80035ca:	e7a8      	b.n	800351e <UART_SetConfig+0x50e>
 80035cc:	2204      	movs	r2, #4
 80035ce:	e7a6      	b.n	800351e <UART_SetConfig+0x50e>
 80035d0:	2206      	movs	r2, #6
 80035d2:	e7a4      	b.n	800351e <UART_SetConfig+0x50e>
 80035d4:	2208      	movs	r2, #8
 80035d6:	e7a2      	b.n	800351e <UART_SetConfig+0x50e>
 80035d8:	220a      	movs	r2, #10
 80035da:	e7a0      	b.n	800351e <UART_SetConfig+0x50e>
 80035dc:	220c      	movs	r2, #12
 80035de:	e79e      	b.n	800351e <UART_SetConfig+0x50e>
 80035e0:	2210      	movs	r2, #16
 80035e2:	e79c      	b.n	800351e <UART_SetConfig+0x50e>
 80035e4:	2220      	movs	r2, #32
 80035e6:	e79a      	b.n	800351e <UART_SetConfig+0x50e>
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	e798      	b.n	800351e <UART_SetConfig+0x50e>
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	e796      	b.n	800351e <UART_SetConfig+0x50e>
 80035f0:	28b0aa00 	.word	0x28b0aa00
 80035f4:	00000000 	.word	0x00000000
 80035f8:	14585500 	.word	0x14585500
 80035fc:	00000000 	.word	0x00000000
 8003600:	000ffcff 	.word	0x000ffcff
 8003604:	00f42400 	.word	0x00f42400
 8003608:	7a120000 	.word	0x7a120000
 800360c:	3d090000 	.word	0x3d090000
 8003610:	1e848000 	.word	0x1e848000
 8003614:	186a0000 	.word	0x186a0000
 8003618:	0f424000 	.word	0x0f424000
 800361c:	07a12000 	.word	0x07a12000
 8003620:	03d09000 	.word	0x03d09000
 8003624:	01e84800 	.word	0x01e84800
 8003628:	f4240000 	.word	0xf4240000
 800362c:	00155500 	.word	0x00155500
 8003630:	000ccc00 	.word	0x000ccc00
 8003634:	000aaa00 	.word	0x000aaa00
 8003638:	0001e848 	.word	0x0001e848
 800363c:	007a1200 	.word	0x007a1200
 8003640:	00516154 	.word	0x00516154
 8003644:	003d0900 	.word	0x003d0900
 8003648:	0030d400 	.word	0x0030d400
 800364c:	0028b0aa 	.word	0x0028b0aa
 8003650:	001e8480 	.word	0x001e8480
 8003654:	000f4240 	.word	0x000f4240
 8003658:	0007a120 	.word	0x0007a120
 800365c:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003660:	b1d3      	cbz	r3, 8003698 <UART_SetConfig+0x688>
 8003662:	2b01      	cmp	r3, #1
 8003664:	d01b      	beq.n	800369e <UART_SetConfig+0x68e>
 8003666:	2b02      	cmp	r3, #2
 8003668:	d01c      	beq.n	80036a4 <UART_SetConfig+0x694>
 800366a:	2b03      	cmp	r3, #3
 800366c:	d01d      	beq.n	80036aa <UART_SetConfig+0x69a>
 800366e:	2b04      	cmp	r3, #4
 8003670:	d01e      	beq.n	80036b0 <UART_SetConfig+0x6a0>
 8003672:	2b05      	cmp	r3, #5
 8003674:	d01f      	beq.n	80036b6 <UART_SetConfig+0x6a6>
 8003676:	2b06      	cmp	r3, #6
 8003678:	d020      	beq.n	80036bc <UART_SetConfig+0x6ac>
 800367a:	2b07      	cmp	r3, #7
 800367c:	d021      	beq.n	80036c2 <UART_SetConfig+0x6b2>
 800367e:	2b08      	cmp	r3, #8
 8003680:	d022      	beq.n	80036c8 <UART_SetConfig+0x6b8>
 8003682:	2b09      	cmp	r3, #9
 8003684:	d023      	beq.n	80036ce <UART_SetConfig+0x6be>
 8003686:	2b0a      	cmp	r3, #10
 8003688:	d024      	beq.n	80036d4 <UART_SetConfig+0x6c4>
 800368a:	2b0b      	cmp	r3, #11
 800368c:	bf14      	ite	ne
 800368e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8003692:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003696:	e776      	b.n	8003586 <UART_SetConfig+0x576>
 8003698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800369c:	e773      	b.n	8003586 <UART_SetConfig+0x576>
 800369e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a2:	e770      	b.n	8003586 <UART_SetConfig+0x576>
 80036a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036a8:	e76d      	b.n	8003586 <UART_SetConfig+0x576>
 80036aa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80036ae:	e76a      	b.n	8003586 <UART_SetConfig+0x576>
 80036b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036b4:	e767      	b.n	8003586 <UART_SetConfig+0x576>
 80036b6:	f641 1398 	movw	r3, #6552	; 0x1998
 80036ba:	e764      	b.n	8003586 <UART_SetConfig+0x576>
 80036bc:	f241 5354 	movw	r3, #5460	; 0x1554
 80036c0:	e761      	b.n	8003586 <UART_SetConfig+0x576>
 80036c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c6:	e75e      	b.n	8003586 <UART_SetConfig+0x576>
 80036c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036cc:	e75b      	b.n	8003586 <UART_SetConfig+0x576>
 80036ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d2:	e758      	b.n	8003586 <UART_SetConfig+0x576>
 80036d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d8:	e755      	b.n	8003586 <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 80036da:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80036dc:	2300      	movs	r3, #0
 80036de:	e728      	b.n	8003532 <UART_SetConfig+0x522>
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7fe feba 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d062      	beq.n	80037b0 <UART_SetConfig+0x7a0>
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d062      	beq.n	80037b4 <UART_SetConfig+0x7a4>
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d062      	beq.n	80037b8 <UART_SetConfig+0x7a8>
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d062      	beq.n	80037bc <UART_SetConfig+0x7ac>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d062      	beq.n	80037c0 <UART_SetConfig+0x7b0>
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d062      	beq.n	80037c4 <UART_SetConfig+0x7b4>
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d062      	beq.n	80037c8 <UART_SetConfig+0x7b8>
 8003702:	2b07      	cmp	r3, #7
 8003704:	d062      	beq.n	80037cc <UART_SetConfig+0x7bc>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d062      	beq.n	80037d0 <UART_SetConfig+0x7c0>
 800370a:	2b09      	cmp	r3, #9
 800370c:	d062      	beq.n	80037d4 <UART_SetConfig+0x7c4>
 800370e:	2b0a      	cmp	r3, #10
 8003710:	d062      	beq.n	80037d8 <UART_SetConfig+0x7c8>
 8003712:	2b0b      	cmp	r3, #11
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800371c:	6862      	ldr	r2, [r4, #4]
 800371e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003722:	e01c      	b.n	800375e <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003724:	b35b      	cbz	r3, 800377e <UART_SetConfig+0x76e>
 8003726:	2b01      	cmp	r3, #1
 8003728:	d02b      	beq.n	8003782 <UART_SetConfig+0x772>
 800372a:	2b02      	cmp	r3, #2
 800372c:	d02b      	beq.n	8003786 <UART_SetConfig+0x776>
 800372e:	2b03      	cmp	r3, #3
 8003730:	d02b      	beq.n	800378a <UART_SetConfig+0x77a>
 8003732:	2b04      	cmp	r3, #4
 8003734:	d02b      	beq.n	800378e <UART_SetConfig+0x77e>
 8003736:	2b05      	cmp	r3, #5
 8003738:	d02b      	beq.n	8003792 <UART_SetConfig+0x782>
 800373a:	2b06      	cmp	r3, #6
 800373c:	d02b      	beq.n	8003796 <UART_SetConfig+0x786>
 800373e:	2b07      	cmp	r3, #7
 8003740:	d02b      	beq.n	800379a <UART_SetConfig+0x78a>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d02b      	beq.n	800379e <UART_SetConfig+0x78e>
 8003746:	2b09      	cmp	r3, #9
 8003748:	d02b      	beq.n	80037a2 <UART_SetConfig+0x792>
 800374a:	2b0a      	cmp	r3, #10
 800374c:	d02b      	beq.n	80037a6 <UART_SetConfig+0x796>
 800374e:	4a45      	ldr	r2, [pc, #276]	; (8003864 <UART_SetConfig+0x854>)
 8003750:	f24f 4124 	movw	r1, #62500	; 0xf424
 8003754:	2b0b      	cmp	r3, #11
 8003756:	bf14      	ite	ne
 8003758:	4613      	movne	r3, r2
 800375a:	460b      	moveq	r3, r1
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003762:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003766:	2200      	movs	r2, #0
 8003768:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376a:	f1a3 0010 	sub.w	r0, r3, #16
 800376e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003772:	4288      	cmp	r0, r1
 8003774:	f63f aca5 	bhi.w	80030c2 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8003778:	6821      	ldr	r1, [r4, #0]
 800377a:	60cb      	str	r3, [r1, #12]
 800377c:	e4a2      	b.n	80030c4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800377e:	4b39      	ldr	r3, [pc, #228]	; (8003864 <UART_SetConfig+0x854>)
 8003780:	e7ec      	b.n	800375c <UART_SetConfig+0x74c>
 8003782:	4b39      	ldr	r3, [pc, #228]	; (8003868 <UART_SetConfig+0x858>)
 8003784:	e7ea      	b.n	800375c <UART_SetConfig+0x74c>
 8003786:	4b39      	ldr	r3, [pc, #228]	; (800386c <UART_SetConfig+0x85c>)
 8003788:	e7e8      	b.n	800375c <UART_SetConfig+0x74c>
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <UART_SetConfig+0x860>)
 800378c:	e7e6      	b.n	800375c <UART_SetConfig+0x74c>
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <UART_SetConfig+0x864>)
 8003790:	e7e4      	b.n	800375c <UART_SetConfig+0x74c>
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <UART_SetConfig+0x868>)
 8003794:	e7e2      	b.n	800375c <UART_SetConfig+0x74c>
 8003796:	4b39      	ldr	r3, [pc, #228]	; (800387c <UART_SetConfig+0x86c>)
 8003798:	e7e0      	b.n	800375c <UART_SetConfig+0x74c>
 800379a:	4b39      	ldr	r3, [pc, #228]	; (8003880 <UART_SetConfig+0x870>)
 800379c:	e7de      	b.n	800375c <UART_SetConfig+0x74c>
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <UART_SetConfig+0x874>)
 80037a0:	e7dc      	b.n	800375c <UART_SetConfig+0x74c>
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <UART_SetConfig+0x878>)
 80037a4:	e7da      	b.n	800375c <UART_SetConfig+0x74c>
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <UART_SetConfig+0x87c>)
 80037a8:	e7d8      	b.n	800375c <UART_SetConfig+0x74c>
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe fde5 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 80037ae:	e799      	b.n	80036e4 <UART_SetConfig+0x6d4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037b0:	2301      	movs	r3, #1
 80037b2:	e7b3      	b.n	800371c <UART_SetConfig+0x70c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e7b1      	b.n	800371c <UART_SetConfig+0x70c>
 80037b8:	2304      	movs	r3, #4
 80037ba:	e7af      	b.n	800371c <UART_SetConfig+0x70c>
 80037bc:	2306      	movs	r3, #6
 80037be:	e7ad      	b.n	800371c <UART_SetConfig+0x70c>
 80037c0:	2308      	movs	r3, #8
 80037c2:	e7ab      	b.n	800371c <UART_SetConfig+0x70c>
 80037c4:	230a      	movs	r3, #10
 80037c6:	e7a9      	b.n	800371c <UART_SetConfig+0x70c>
 80037c8:	230c      	movs	r3, #12
 80037ca:	e7a7      	b.n	800371c <UART_SetConfig+0x70c>
 80037cc:	2310      	movs	r3, #16
 80037ce:	e7a5      	b.n	800371c <UART_SetConfig+0x70c>
 80037d0:	2320      	movs	r3, #32
 80037d2:	e7a3      	b.n	800371c <UART_SetConfig+0x70c>
 80037d4:	2340      	movs	r3, #64	; 0x40
 80037d6:	e7a1      	b.n	800371c <UART_SetConfig+0x70c>
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	e79f      	b.n	800371c <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037dc:	b1cb      	cbz	r3, 8003812 <UART_SetConfig+0x802>
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d01a      	beq.n	8003818 <UART_SetConfig+0x808>
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d01b      	beq.n	800381e <UART_SetConfig+0x80e>
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d01c      	beq.n	8003824 <UART_SetConfig+0x814>
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d01d      	beq.n	800382a <UART_SetConfig+0x81a>
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d01e      	beq.n	8003830 <UART_SetConfig+0x820>
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d01f      	beq.n	8003836 <UART_SetConfig+0x826>
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	d020      	beq.n	800383c <UART_SetConfig+0x82c>
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d021      	beq.n	8003842 <UART_SetConfig+0x832>
 80037fe:	2b09      	cmp	r3, #9
 8003800:	d022      	beq.n	8003848 <UART_SetConfig+0x838>
 8003802:	2b0a      	cmp	r3, #10
 8003804:	d023      	beq.n	800384e <UART_SetConfig+0x83e>
 8003806:	2b0b      	cmp	r3, #11
 8003808:	bf14      	ite	ne
 800380a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800380e:	2380      	moveq	r3, #128	; 0x80
 8003810:	e7a4      	b.n	800375c <UART_SetConfig+0x74c>
 8003812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003816:	e7a1      	b.n	800375c <UART_SetConfig+0x74c>
 8003818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800381c:	e79e      	b.n	800375c <UART_SetConfig+0x74c>
 800381e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003822:	e79b      	b.n	800375c <UART_SetConfig+0x74c>
 8003824:	f241 5355 	movw	r3, #5461	; 0x1555
 8003828:	e798      	b.n	800375c <UART_SetConfig+0x74c>
 800382a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800382e:	e795      	b.n	800375c <UART_SetConfig+0x74c>
 8003830:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003834:	e792      	b.n	800375c <UART_SetConfig+0x74c>
 8003836:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800383a:	e78f      	b.n	800375c <UART_SetConfig+0x74c>
 800383c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003840:	e78c      	b.n	800375c <UART_SetConfig+0x74c>
 8003842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003846:	e789      	b.n	800375c <UART_SetConfig+0x74c>
 8003848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800384c:	e786      	b.n	800375c <UART_SetConfig+0x74c>
 800384e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003852:	e783      	b.n	800375c <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003854:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003858:	f43f af3f 	beq.w	80036da <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 800385c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800385e:	2300      	movs	r3, #0
 8003860:	e783      	b.n	800376a <UART_SetConfig+0x75a>
 8003862:	bf00      	nop
 8003864:	00f42400 	.word	0x00f42400
 8003868:	007a1200 	.word	0x007a1200
 800386c:	003d0900 	.word	0x003d0900
 8003870:	0028b0aa 	.word	0x0028b0aa
 8003874:	001e8480 	.word	0x001e8480
 8003878:	00186a00 	.word	0x00186a00
 800387c:	00145855 	.word	0x00145855
 8003880:	000f4240 	.word	0x000f4240
 8003884:	0007a120 	.word	0x0007a120
 8003888:	0003d090 	.word	0x0003d090
 800388c:	0001e848 	.word	0x0001e848

08003890 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003890:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003892:	07da      	lsls	r2, r3, #31
{
 8003894:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003896:	d506      	bpl.n	80038a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003898:	6801      	ldr	r1, [r0, #0]
 800389a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800389c:	684a      	ldr	r2, [r1, #4]
 800389e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038a2:	4322      	orrs	r2, r4
 80038a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a6:	079c      	lsls	r4, r3, #30
 80038a8:	d506      	bpl.n	80038b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038aa:	6801      	ldr	r1, [r0, #0]
 80038ac:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80038ae:	684a      	ldr	r2, [r1, #4]
 80038b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038b4:	4322      	orrs	r2, r4
 80038b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038b8:	0759      	lsls	r1, r3, #29
 80038ba:	d506      	bpl.n	80038ca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038bc:	6801      	ldr	r1, [r0, #0]
 80038be:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038c0:	684a      	ldr	r2, [r1, #4]
 80038c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c6:	4322      	orrs	r2, r4
 80038c8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ca:	071a      	lsls	r2, r3, #28
 80038cc:	d506      	bpl.n	80038dc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ce:	6801      	ldr	r1, [r0, #0]
 80038d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80038d2:	684a      	ldr	r2, [r1, #4]
 80038d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d8:	4322      	orrs	r2, r4
 80038da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038dc:	06dc      	lsls	r4, r3, #27
 80038de:	d506      	bpl.n	80038ee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e0:	6801      	ldr	r1, [r0, #0]
 80038e2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80038e4:	688a      	ldr	r2, [r1, #8]
 80038e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ea:	4322      	orrs	r2, r4
 80038ec:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ee:	0699      	lsls	r1, r3, #26
 80038f0:	d506      	bpl.n	8003900 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f2:	6801      	ldr	r1, [r0, #0]
 80038f4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80038f6:	688a      	ldr	r2, [r1, #8]
 80038f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fc:	4322      	orrs	r2, r4
 80038fe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003900:	065a      	lsls	r2, r3, #25
 8003902:	d50f      	bpl.n	8003924 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003904:	6801      	ldr	r1, [r0, #0]
 8003906:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003908:	684a      	ldr	r2, [r1, #4]
 800390a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800390e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003910:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003914:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003916:	d105      	bne.n	8003924 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003918:	684a      	ldr	r2, [r1, #4]
 800391a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800391c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003920:	4322      	orrs	r2, r4
 8003922:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	d506      	bpl.n	8003936 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003928:	6802      	ldr	r2, [r0, #0]
 800392a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800392c:	6853      	ldr	r3, [r2, #4]
 800392e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003932:	430b      	orrs	r3, r1
 8003934:	6053      	str	r3, [r2, #4]
 8003936:	bd10      	pop	{r4, pc}

08003938 <UART_WaitOnFlagUntilTimeout>:
{
 8003938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800393c:	9d06      	ldr	r5, [sp, #24]
 800393e:	4604      	mov	r4, r0
 8003940:	460f      	mov	r7, r1
 8003942:	4616      	mov	r6, r2
 8003944:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	6821      	ldr	r1, [r4, #0]
 8003948:	69ca      	ldr	r2, [r1, #28]
 800394a:	ea37 0302 	bics.w	r3, r7, r2
 800394e:	bf0c      	ite	eq
 8003950:	2201      	moveq	r2, #1
 8003952:	2200      	movne	r2, #0
 8003954:	42b2      	cmp	r2, r6
 8003956:	d002      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003958:	2000      	movs	r0, #0
}
 800395a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800395e:	1c68      	adds	r0, r5, #1
 8003960:	d0f2      	beq.n	8003948 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003962:	f7fc fe2d 	bl	80005c0 <HAL_GetTick>
 8003966:	eba0 0008 	sub.w	r0, r0, r8
 800396a:	4285      	cmp	r5, r0
 800396c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800396e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003970:	d300      	bcc.n	8003974 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003972:	b98d      	cbnz	r5, 8003998 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003974:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003978:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	6883      	ldr	r3, [r0, #8]
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003982:	2320      	movs	r3, #32
 8003984:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003988:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800398c:	2300      	movs	r3, #0
 800398e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8003992:	2003      	movs	r0, #3
 8003994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003998:	075a      	lsls	r2, r3, #29
 800399a:	d5d4      	bpl.n	8003946 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800399c:	69c3      	ldr	r3, [r0, #28]
 800399e:	051b      	lsls	r3, r3, #20
 80039a0:	d5d1      	bpl.n	8003946 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039a6:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80039a8:	6803      	ldr	r3, [r0, #0]
 80039aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039ae:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b0:	6883      	ldr	r3, [r0, #8]
 80039b2:	f023 0301 	bic.w	r3, r3, #1
 80039b6:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80039b8:	2320      	movs	r3, #32
 80039ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80039be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80039c6:	e7e1      	b.n	800398c <UART_WaitOnFlagUntilTimeout+0x54>

080039c8 <HAL_UART_Transmit>:
{
 80039c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80039cc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80039ce:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80039d2:	2b20      	cmp	r3, #32
{
 80039d4:	4604      	mov	r4, r0
 80039d6:	460e      	mov	r6, r1
 80039d8:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80039da:	d14f      	bne.n	8003a7c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80039dc:	2900      	cmp	r1, #0
 80039de:	d04b      	beq.n	8003a78 <HAL_UART_Transmit+0xb0>
 80039e0:	2a00      	cmp	r2, #0
 80039e2:	d049      	beq.n	8003a78 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 80039e4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d047      	beq.n	8003a7c <HAL_UART_Transmit+0xb4>
 80039ec:	2301      	movs	r3, #1
 80039ee:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f6:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 80039fe:	f7fc fddf 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a02:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003a04:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003a0c:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003a0e:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a12:	d103      	bne.n	8003a1c <HAL_UART_Transmit+0x54>
 8003a14:	6923      	ldr	r3, [r4, #16]
 8003a16:	b90b      	cbnz	r3, 8003a1c <HAL_UART_Transmit+0x54>
 8003a18:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003a1a:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 8003a22:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a26:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003a2a:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2c:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8003a2e:	b942      	cbnz	r2, 8003a42 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a30:	2140      	movs	r1, #64	; 0x40
 8003a32:	4620      	mov	r0, r4
 8003a34:	f7ff ff80 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003a38:	b948      	cbnz	r0, 8003a4e <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8003a40:	e006      	b.n	8003a50 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff ff76 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003a4c:	b118      	cbz	r0, 8003a56 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 8003a4e:	2003      	movs	r0, #3
}
 8003a50:	b003      	add	sp, #12
 8003a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a56:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003a58:	b95e      	cbnz	r6, 8003a72 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a62:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003a64:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8003a70:	e7d7      	b.n	8003a22 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a72:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003a76:	e7f4      	b.n	8003a62 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8003a78:	2001      	movs	r0, #1
 8003a7a:	e7e9      	b.n	8003a50 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 8003a7c:	2002      	movs	r0, #2
 8003a7e:	e7e7      	b.n	8003a50 <HAL_UART_Transmit+0x88>

08003a80 <UART_CheckIdleState>:
{
 8003a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a82:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	2600      	movs	r6, #0
 8003a86:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8003a8a:	f7fc fd99 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003a94:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a96:	d417      	bmi.n	8003ac8 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	075b      	lsls	r3, r3, #29
 8003a9e:	d50a      	bpl.n	8003ab6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7ff ff42 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003ab4:	b9a0      	cbnz	r0, 8003ae0 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003ab6:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003ab8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003aba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003abe:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8003ac6:	e00c      	b.n	8003ae2 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	4632      	mov	r2, r6
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7ff ff2e 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d0db      	beq.n	8003a98 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003ae0:	2003      	movs	r0, #3
}
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}

08003ae6 <HAL_UART_Init>:
{
 8003ae6:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003ae8:	4604      	mov	r4, r0
 8003aea:	b350      	cbz	r0, 8003b42 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003aec:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003af0:	b91b      	cbnz	r3, 8003afa <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003af2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8003af6:	f001 fca5 	bl	8005444 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003afa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	2324      	movs	r3, #36	; 0x24
 8003afe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f7ff fa80 	bl	8003010 <UART_SetConfig>
 8003b10:	2801      	cmp	r0, #1
 8003b12:	d016      	beq.n	8003b42 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b16:	b113      	cbz	r3, 8003b1e <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7ff feb9 	bl	8003890 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003b36:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003b3e:	f7ff bf9f 	b.w	8003a80 <UART_CheckIdleState>
}
 8003b42:	2001      	movs	r0, #1
 8003b44:	bd10      	pop	{r4, pc}

08003b46 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f88d 2003 	strb.w	r2, [sp, #3]
 8003b4e:	2207      	movs	r2, #7
 8003b50:	f88d 2004 	strb.w	r2, [sp, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f88d 2006 	strb.w	r2, [sp, #6]
 8003b5a:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003b5e:	2208      	movs	r2, #8
 8003b60:	f88d 2008 	strb.w	r2, [sp, #8]
 8003b64:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b68:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003b6a:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003b70:	f88d 3000 	strb.w	r3, [sp]
 8003b74:	f88d 3001 	strb.w	r3, [sp, #1]
 8003b78:	f88d 3002 	strb.w	r3, [sp, #2]
 8003b7c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003b80:	f88d 1009 	strb.w	r1, [sp, #9]
 8003b84:	f88d 400a 	strb.w	r4, [sp, #10]
 8003b88:	f88d 100b 	strb.w	r1, [sp, #11]
 8003b8c:	f88d 300d 	strb.w	r3, [sp, #13]
 8003b90:	f88d 300e 	strb.w	r3, [sp, #14]
 8003b94:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b98:	b92a      	cbnz	r2, 8003ba6 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 8003b9a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003b9e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8003ba2:	b004      	add	sp, #16
 8003ba4:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ba6:	6802      	ldr	r2, [r0, #0]
 8003ba8:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003baa:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003bac:	aa04      	add	r2, sp, #16
 8003bae:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003bb2:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003bb6:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 8003bba:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8003bbe:	00d2      	lsls	r2, r2, #3
 8003bc0:	fb92 f2f1 	sdiv	r2, r2, r1
 8003bc4:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003bc8:	aa04      	add	r2, sp, #16
 8003bca:	4413      	add	r3, r2
 8003bcc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003bd0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003bd4:	00d2      	lsls	r2, r2, #3
 8003bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bda:	e7e0      	b.n	8003b9e <UARTEx_SetNbDataToProcess+0x58>

08003bdc <HAL_UARTEx_WakeupCallback>:
 8003bdc:	4770      	bx	lr

08003bde <HAL_UARTEx_RxFifoFullCallback>:
 8003bde:	4770      	bx	lr

08003be0 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8003be0:	4770      	bx	lr

08003be2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003be2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d014      	beq.n	8003c14 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bea:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003bec:	2324      	movs	r3, #36	; 0x24
 8003bee:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bf2:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bfc:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c04:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c06:	2220      	movs	r2, #32
 8003c08:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003c0c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 8003c10:	4618      	mov	r0, r3
 8003c12:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003c14:	2002      	movs	r0, #2
}
 8003c16:	4770      	bx	lr

08003c18 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003c18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003c1a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003c1e:	2b01      	cmp	r3, #1
{
 8003c20:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003c22:	d01b      	beq.n	8003c5c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8003c24:	2301      	movs	r3, #1
 8003c26:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003c2a:	2324      	movs	r3, #36	; 0x24
 8003c2c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c30:	6803      	ldr	r3, [r0, #0]
 8003c32:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003c42:	4311      	orrs	r1, r2
 8003c44:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003c46:	f7ff ff7e 	bl	8003b46 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c4a:	6803      	ldr	r3, [r0, #0]
 8003c4c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	2320      	movs	r3, #32
 8003c50:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003c54:	2000      	movs	r0, #0
 8003c56:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003c5c:	2002      	movs	r0, #2
}
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}

08003c60 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003c60:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003c62:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003c66:	2b01      	cmp	r3, #1
{
 8003c68:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003c6a:	d01b      	beq.n	8003ca4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003c72:	2324      	movs	r3, #36	; 0x24
 8003c74:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c78:	6803      	ldr	r3, [r0, #0]
 8003c7a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003c8e:	f7ff ff5a 	bl	8003b46 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c92:	6803      	ldr	r3, [r0, #0]
 8003c94:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c96:	2320      	movs	r3, #32
 8003c98:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003ca4:	2002      	movs	r0, #2
}
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}

08003ca8 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003ca8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003cba:	2000      	movs	r0, #0
 8003cbc:	4770      	bx	lr

08003cbe <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003cbe:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003cc2:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003cc6:	045b      	lsls	r3, r3, #17
 8003cc8:	0c5b      	lsrs	r3, r3, #17
 8003cca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003cce:	2000      	movs	r0, #0
 8003cd0:	4770      	bx	lr

08003cd2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	ac03      	add	r4, sp, #12
 8003cd8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003cdc:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8003ce4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003ce8:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cec:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8003cf0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d02:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8003d06:	b004      	add	sp, #16
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4770      	bx	lr

08003d0c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d0e:	780d      	ldrb	r5, [r1, #0]
 8003d10:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8003d14:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 8003d18:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8003d1e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d20:	0412      	lsls	r2, r2, #16
 8003d22:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8003d24:	2803      	cmp	r0, #3
 8003d26:	d84f      	bhi.n	8003dc8 <USB_ActivateEndpoint+0xbc>
 8003d28:	e8df f000 	tbb	[pc, r0]
 8003d2c:	48044b02 	.word	0x48044b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003d34:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003d36:	f248 0480 	movw	r4, #32896	; 0x8080
 8003d3a:	4322      	orrs	r2, r4
 8003d3c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d40:	780f      	ldrb	r7, [r1, #0]
 8003d42:	4da8      	ldr	r5, [pc, #672]	; (8003fe4 <USB_ActivateEndpoint+0x2d8>)
 8003d44:	b23e      	sxth	r6, r7
 8003d46:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	402a      	ands	r2, r5
 8003d4e:	433a      	orrs	r2, r7
 8003d50:	4322      	orrs	r2, r4
 8003d52:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8003d56:	7b0c      	ldrb	r4, [r1, #12]
 8003d58:	780a      	ldrb	r2, [r1, #0]
 8003d5a:	2c00      	cmp	r4, #0
 8003d5c:	d17f      	bne.n	8003e5e <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
 8003d5e:	784f      	ldrb	r7, [r1, #1]
 8003d60:	88ce      	ldrh	r6, [r1, #6]
 8003d62:	2408      	movs	r4, #8
 8003d64:	b397      	cbz	r7, 8003dcc <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d66:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8003d6a:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003d6e:	fa12 f287 	uxtah	r2, r2, r7
 8003d72:	f026 0601 	bic.w	r6, r6, #1
 8003d76:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d7a:	780a      	ldrb	r2, [r1, #0]
 8003d7c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003d80:	0666      	lsls	r6, r4, #25
 8003d82:	d509      	bpl.n	8003d98 <USB_ActivateEndpoint+0x8c>
 8003d84:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003d88:	b2a4      	uxth	r4, r4
 8003d8a:	402c      	ands	r4, r5
 8003d8c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003d90:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003d94:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003d98:	78ca      	ldrb	r2, [r1, #3]
 8003d9a:	7809      	ldrb	r1, [r1, #0]
 8003d9c:	4c92      	ldr	r4, [pc, #584]	; (8003fe8 <USB_ActivateEndpoint+0x2dc>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d9e:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003da0:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003da2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003da6:	b292      	uxth	r2, r2
 8003da8:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8003dac:	d001      	beq.n	8003db2 <USB_ActivateEndpoint+0xa6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003dae:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dba:	e0c3      	b.n	8003f44 <USB_ActivateEndpoint+0x238>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dbc:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003dc0:	e7b8      	b.n	8003d34 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc6:	e7b5      	b.n	8003d34 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003dc8:	2001      	movs	r0, #1
 8003dca:	e7b4      	b.n	8003d36 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003dcc:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003dd0:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003dd4:	fa12 f285 	uxtah	r2, r2, r5
 8003dd8:	f026 0601 	bic.w	r6, r6, #1
 8003ddc:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003de0:	780a      	ldrb	r2, [r1, #0]
 8003de2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003de6:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003dea:	690c      	ldr	r4, [r1, #16]
 8003dec:	b2ad      	uxth	r5, r5
 8003dee:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8003df2:	b944      	cbnz	r4, 8003e06 <USB_ActivateEndpoint+0xfa>
 8003df4:	5b54      	ldrh	r4, [r2, r5]
 8003df6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8003dfa:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003dfe:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003e02:	5354      	strh	r4, [r2, r5]
 8003e04:	e007      	b.n	8003e16 <USB_ActivateEndpoint+0x10a>
 8003e06:	2c3d      	cmp	r4, #61	; 0x3d
 8003e08:	d824      	bhi.n	8003e54 <USB_ActivateEndpoint+0x148>
 8003e0a:	0866      	lsrs	r6, r4, #1
 8003e0c:	07e4      	lsls	r4, r4, #31
 8003e0e:	bf48      	it	mi
 8003e10:	3601      	addmi	r6, #1
 8003e12:	02b6      	lsls	r6, r6, #10
 8003e14:	5356      	strh	r6, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e16:	780c      	ldrb	r4, [r1, #0]
 8003e18:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003e1c:	0457      	lsls	r7, r2, #17
 8003e1e:	d50d      	bpl.n	8003e3c <USB_ActivateEndpoint+0x130>
 8003e20:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003e24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003e28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e2c:	0412      	lsls	r2, r2, #16
 8003e2e:	0c12      	lsrs	r2, r2, #16
 8003e30:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003e34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e38:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e3c:	7809      	ldrb	r1, [r1, #0]
 8003e3e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003e42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e4a:	0412      	lsls	r2, r2, #16
 8003e4c:	0c12      	lsrs	r2, r2, #16
 8003e4e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003e52:	e7ae      	b.n	8003db2 <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e54:	4e65      	ldr	r6, [pc, #404]	; (8003fec <USB_ActivateEndpoint+0x2e0>)
 8003e56:	0964      	lsrs	r4, r4, #5
 8003e58:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 8003e5c:	e7d1      	b.n	8003e02 <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003e5e:	b212      	sxth	r2, r2
 8003e60:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003e64:	b2a4      	uxth	r4, r4
 8003e66:	402c      	ands	r4, r5
 8003e68:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8003e6c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003e70:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e74:	780e      	ldrb	r6, [r1, #0]
 8003e76:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	fb12 3606 	smlabb	r6, r2, r6, r3
 8003e80:	fa16 f484 	uxtah	r4, r6, r4
 8003e84:	890e      	ldrh	r6, [r1, #8]
 8003e86:	f026 0601 	bic.w	r6, r6, #1
 8003e8a:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8003e8e:	780e      	ldrb	r6, [r1, #0]
 8003e90:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003e94:	fb12 3206 	smlabb	r2, r2, r6, r3
 8003e98:	fa12 f284 	uxtah	r2, r2, r4
 8003e9c:	894c      	ldrh	r4, [r1, #10]
 8003e9e:	f024 0401 	bic.w	r4, r4, #1
 8003ea2:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003ea6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8003ea8:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eaa:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	d14c      	bne.n	8003f4a <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eb0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003eb4:	0466      	lsls	r6, r4, #17
 8003eb6:	d509      	bpl.n	8003ecc <USB_ActivateEndpoint+0x1c0>
 8003eb8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003ebc:	b2a4      	uxth	r4, r4
 8003ebe:	402c      	ands	r4, r5
 8003ec0:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003ec4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003ec8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ecc:	780c      	ldrb	r4, [r1, #0]
 8003ece:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ed2:	0655      	lsls	r5, r2, #25
 8003ed4:	d50d      	bpl.n	8003ef2 <USB_ActivateEndpoint+0x1e6>
 8003ed6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003eda:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ede:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ee2:	0412      	lsls	r2, r2, #16
 8003ee4:	0c12      	lsrs	r2, r2, #16
 8003ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003eee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003ef2:	780c      	ldrb	r4, [r1, #0]
 8003ef4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ef8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003efc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f00:	0412      	lsls	r2, r2, #16
 8003f02:	0c12      	lsrs	r2, r2, #16
 8003f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f08:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003f0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f10:	780d      	ldrb	r5, [r1, #0]
 8003f12:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f1e:	0412      	lsls	r2, r2, #16
 8003f20:	0c12      	lsrs	r2, r2, #16
 8003f22:	f248 0480 	movw	r4, #32896	; 0x8080
 8003f26:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003f2a:	4322      	orrs	r2, r4
 8003f2c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f30:	7809      	ldrb	r1, [r1, #0]
 8003f32:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003f36:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3e:	0412      	lsls	r2, r2, #16
 8003f40:	0c12      	lsrs	r2, r2, #16
 8003f42:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f44:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 8003f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f4a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003f4e:	0464      	lsls	r4, r4, #17
 8003f50:	d509      	bpl.n	8003f66 <USB_ActivateEndpoint+0x25a>
 8003f52:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003f56:	b2a4      	uxth	r4, r4
 8003f58:	402c      	ands	r4, r5
 8003f5a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003f5e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003f62:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f66:	780c      	ldrb	r4, [r1, #0]
 8003f68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f6c:	0652      	lsls	r2, r2, #25
 8003f6e:	d50d      	bpl.n	8003f8c <USB_ActivateEndpoint+0x280>
 8003f70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f7c:	0412      	lsls	r2, r2, #16
 8003f7e:	0c12      	lsrs	r2, r2, #16
 8003f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f84:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003f88:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003f8c:	780c      	ldrb	r4, [r1, #0]
 8003f8e:	4d16      	ldr	r5, [pc, #88]	; (8003fe8 <USB_ActivateEndpoint+0x2dc>)
 8003f90:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003f98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f9c:	0412      	lsls	r2, r2, #16
 8003f9e:	0c12      	lsrs	r2, r2, #16
 8003fa0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003fac:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8003fae:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fb0:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8003fb2:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fb4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003fb8:	b292      	uxth	r2, r2
 8003fba:	ea02 0205 	and.w	r2, r2, r5
 8003fbe:	bf18      	it	ne
 8003fc0:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fcc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fd0:	7809      	ldrb	r1, [r1, #0]
 8003fd2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003fd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fde:	0412      	lsls	r2, r2, #16
 8003fe0:	0c12      	lsrs	r2, r2, #16
 8003fe2:	e6e6      	b.n	8003db2 <USB_ActivateEndpoint+0xa6>
 8003fe4:	ffff8f8f 	.word	0xffff8f8f
 8003fe8:	ffff8fbf 	.word	0xffff8fbf
 8003fec:	ffff8000 	.word	0xffff8000

08003ff0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003ff4:	7b0c      	ldrb	r4, [r1, #12]
 8003ff6:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ff8:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	d13d      	bne.n	800407a <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 8003ffe:	b312      	cbz	r2, 8004046 <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004000:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004004:	0652      	lsls	r2, r2, #25
 8004006:	d50d      	bpl.n	8004024 <USB_DeactivateEndpoint+0x34>
 8004008:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800400c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004010:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004014:	0412      	lsls	r2, r2, #16
 8004016:	0c12      	lsrs	r2, r2, #16
 8004018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800401c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004020:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004024:	780a      	ldrb	r2, [r1, #0]
 8004026:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004042:	2000      	movs	r0, #0
 8004044:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004046:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800404a:	0454      	lsls	r4, r2, #17
 800404c:	d50d      	bpl.n	800406a <USB_DeactivateEndpoint+0x7a>
 800404e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004052:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004056:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800405a:	0412      	lsls	r2, r2, #16
 800405c:	0c12      	lsrs	r2, r2, #16
 800405e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004066:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800406a:	780a      	ldrb	r2, [r1, #0]
 800406c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	e7db      	b.n	8004032 <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 800407a:	2a00      	cmp	r2, #0
 800407c:	d14e      	bne.n	800411c <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800407e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004082:	0452      	lsls	r2, r2, #17
 8004084:	d50d      	bpl.n	80040a2 <USB_DeactivateEndpoint+0xb2>
 8004086:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800408a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800408e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004092:	0412      	lsls	r2, r2, #16
 8004094:	0c12      	lsrs	r2, r2, #16
 8004096:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800409a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800409e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040a2:	780a      	ldrb	r2, [r1, #0]
 80040a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040a8:	065c      	lsls	r4, r3, #25
 80040aa:	d50d      	bpl.n	80040c8 <USB_DeactivateEndpoint+0xd8>
 80040ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80040c8:	780a      	ldrb	r2, [r1, #0]
 80040ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040e6:	780c      	ldrb	r4, [r1, #0]
 80040e8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80040ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	0c1b      	lsrs	r3, r3, #16
 80040f8:	f248 0280 	movw	r2, #32896	; 0x8080
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004102:	7809      	ldrb	r1, [r1, #0]
 8004104:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	4313      	orrs	r3, r2
 8004116:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800411a:	e792      	b.n	8004042 <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800411c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004120:	0452      	lsls	r2, r2, #17
 8004122:	d50d      	bpl.n	8004140 <USB_DeactivateEndpoint+0x150>
 8004124:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004128:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800412c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004130:	0412      	lsls	r2, r2, #16
 8004132:	0c12      	lsrs	r2, r2, #16
 8004134:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800413c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004140:	780a      	ldrb	r2, [r1, #0]
 8004142:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004146:	065b      	lsls	r3, r3, #25
 8004148:	d50d      	bpl.n	8004166 <USB_DeactivateEndpoint+0x176>
 800414a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800415e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004162:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004166:	780a      	ldrb	r2, [r1, #0]
 8004168:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800417c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004180:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004184:	780c      	ldrb	r4, [r1, #0]
 8004186:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f248 0280 	movw	r2, #32896	; 0x8080
 800419a:	4313      	orrs	r3, r2
 800419c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041a0:	7809      	ldrb	r1, [r1, #0]
 80041a2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80041a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	e7af      	b.n	8004110 <USB_DeactivateEndpoint+0x120>

080041b0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041b0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80041b2:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80041b4:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 80041b6:	b18b      	cbz	r3, 80041dc <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80041b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80041bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80041cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80041d8:	2000      	movs	r0, #0
 80041da:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80041dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80041e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041f0:	e7ec      	b.n	80041cc <USB_EPSetStall+0x1c>

080041f2 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80041f2:	7b0b      	ldrb	r3, [r1, #12]
 80041f4:	bb4b      	cbnz	r3, 800424a <USB_EPClearStall+0x58>
 80041f6:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 80041f8:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041fa:	b212      	sxth	r2, r2
    if (ep->is_in != 0U)
 80041fc:	b33b      	cbz	r3, 800424e <USB_EPClearStall+0x5c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004202:	065b      	lsls	r3, r3, #25
 8004204:	d50d      	bpl.n	8004222 <USB_EPClearStall+0x30>
 8004206:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800421e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004222:	78cb      	ldrb	r3, [r1, #3]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d010      	beq.n	800424a <USB_EPClearStall+0x58>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004228:	780a      	ldrb	r2, [r1, #0]
 800422a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004246:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800424a:	2000      	movs	r0, #0
 800424c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800424e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004252:	045b      	lsls	r3, r3, #17
 8004254:	d50d      	bpl.n	8004272 <USB_EPClearStall+0x80>
 8004256:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004272:	780a      	ldrb	r2, [r1, #0]
 8004274:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004288:	e7d9      	b.n	800423e <USB_EPClearStall+0x4c>

0800428a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800428a:	b911      	cbnz	r1, 8004292 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004292:	2000      	movs	r0, #0
 8004294:	4770      	bx	lr

08004296 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004296:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800429a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 80042a8:	2000      	movs	r0, #0
 80042aa:	4770      	bx	lr

080042ac <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80042ac:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80042b0:	b280      	uxth	r0, r0
 80042b2:	4770      	bx	lr

080042b4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80042b4:	2000      	movs	r0, #0
 80042b6:	4770      	bx	lr

080042b8 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80042bc:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042be:	4402      	add	r2, r0
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	440b      	add	r3, r1
 80042c6:	1a52      	subs	r2, r2, r1

  for (i = n; i != 0U; i--)
 80042c8:	4299      	cmp	r1, r3
 80042ca:	d100      	bne.n	80042ce <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80042cc:	4770      	bx	lr
 80042ce:	8808      	ldrh	r0, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 80042d0:	5288      	strh	r0, [r1, r2]
 80042d2:	3102      	adds	r1, #2
 80042d4:	e7f8      	b.n	80042c8 <USB_WritePMA+0x10>
	...

080042d8 <USB_EPStartXfer>:
{
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80042dc:	7848      	ldrb	r0, [r1, #1]
 80042de:	698a      	ldr	r2, [r1, #24]
 80042e0:	690b      	ldr	r3, [r1, #16]
 80042e2:	7b0f      	ldrb	r7, [r1, #12]
 80042e4:	2801      	cmp	r0, #1
{
 80042e6:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 80042e8:	d16b      	bne.n	80043c2 <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 80042ea:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80042ec:	bf97      	itett	ls
 80042ee:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80042f0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80042f2:	618b      	strls	r3, [r1, #24]
 80042f4:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80042f6:	bf88      	it	hi
 80042f8:	618a      	strhi	r2, [r1, #24]
 80042fa:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80042fc:	bb0f      	cbnz	r7, 8004342 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80042fe:	88ca      	ldrh	r2, [r1, #6]
 8004300:	6949      	ldr	r1, [r1, #20]
 8004302:	4633      	mov	r3, r6
 8004304:	4620      	mov	r0, r4
 8004306:	f7ff ffd7 	bl	80042b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800430a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800430e:	782a      	ldrb	r2, [r5, #0]
 8004310:	f204 4102 	addw	r1, r4, #1026	; 0x402
 8004314:	fa11 f383 	uxtah	r3, r1, r3
 8004318:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800431c:	782a      	ldrb	r2, [r5, #0]
 800431e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800433e:	2000      	movs	r0, #0
 8004340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004342:	7809      	ldrb	r1, [r1, #0]
 8004344:	b20a      	sxth	r2, r1
 8004346:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 800434a:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800434e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8004352:	bf15      	itete	ne
 8004354:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004358:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800435c:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004360:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004364:	bf15      	itete	ne
 8004366:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800436a:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 800436e:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8004370:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004372:	6969      	ldr	r1, [r5, #20]
 8004374:	4633      	mov	r3, r6
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff ff9e 	bl	80042b8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800437c:	786b      	ldrb	r3, [r5, #1]
 800437e:	782a      	ldrb	r2, [r5, #0]
 8004380:	b97b      	cbnz	r3, 80043a2 <USB_EPStartXfer+0xca>
 8004382:	b212      	sxth	r2, r2
 8004384:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800439c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80043a0:	e7bc      	b.n	800431c <USB_EPStartXfer+0x44>
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d1ba      	bne.n	800431c <USB_EPStartXfer+0x44>
 80043a6:	b212      	sxth	r2, r2
 80043a8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80043ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c0:	e7ec      	b.n	800439c <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 80043c2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80043c4:	bf95      	itete	ls
 80043c6:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80043c8:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80043ca:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 80043cc:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 80043ce:	bf98      	it	ls
 80043d0:	4613      	movls	r3, r2
 80043d2:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 80043d4:	b98f      	cbnz	r7, 80043fa <USB_EPStartXfer+0x122>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80043d6:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80043da:	f204 4006 	addw	r0, r4, #1030	; 0x406
 80043de:	fa10 f282 	uxtah	r2, r0, r2
 80043e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80043e6:	bb9b      	cbnz	r3, 8004450 <USB_EPStartXfer+0x178>
 80043e8:	8813      	ldrh	r3, [r2, #0]
 80043ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f6:	8013      	strh	r3, [r2, #0]
 80043f8:	e032      	b.n	8004460 <USB_EPStartXfer+0x188>
 80043fa:	b980      	cbnz	r0, 800441e <USB_EPStartXfer+0x146>
 80043fc:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8004400:	f204 4002 	addw	r0, r4, #1026	; 0x402
 8004404:	fa10 f282 	uxtah	r2, r0, r2
 8004408:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800440c:	b99b      	cbnz	r3, 8004436 <USB_EPStartXfer+0x15e>
 800440e:	8811      	ldrh	r1, [r2, #0]
 8004410:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004414:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004418:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800441c:	8011      	strh	r1, [r2, #0]
 800441e:	786a      	ldrb	r2, [r5, #1]
 8004420:	7828      	ldrb	r0, [r5, #0]
 8004422:	bb72      	cbnz	r2, 8004482 <USB_EPStartXfer+0x1aa>
 8004424:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8004428:	f204 4106 	addw	r1, r4, #1030	; 0x406
 800442c:	fa11 f282 	uxtah	r2, r1, r2
 8004430:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004434:	e7d7      	b.n	80043e6 <USB_EPStartXfer+0x10e>
 8004436:	2b3d      	cmp	r3, #61	; 0x3d
 8004438:	d805      	bhi.n	8004446 <USB_EPStartXfer+0x16e>
 800443a:	0859      	lsrs	r1, r3, #1
 800443c:	07d8      	lsls	r0, r3, #31
 800443e:	bf48      	it	mi
 8004440:	3101      	addmi	r1, #1
 8004442:	0289      	lsls	r1, r1, #10
 8004444:	e7ea      	b.n	800441c <USB_EPStartXfer+0x144>
 8004446:	4814      	ldr	r0, [pc, #80]	; (8004498 <USB_EPStartXfer+0x1c0>)
 8004448:	0959      	lsrs	r1, r3, #5
 800444a:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 800444e:	e7e5      	b.n	800441c <USB_EPStartXfer+0x144>
 8004450:	2b3d      	cmp	r3, #61	; 0x3d
 8004452:	d811      	bhi.n	8004478 <USB_EPStartXfer+0x1a0>
 8004454:	0859      	lsrs	r1, r3, #1
 8004456:	07db      	lsls	r3, r3, #31
 8004458:	bf48      	it	mi
 800445a:	3101      	addmi	r1, #1
 800445c:	0289      	lsls	r1, r1, #10
 800445e:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004460:	782a      	ldrb	r2, [r5, #0]
 8004462:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004476:	e75c      	b.n	8004332 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004478:	0959      	lsrs	r1, r3, #5
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <USB_EPStartXfer+0x1c0>)
 800447c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004480:	e7b9      	b.n	80043f6 <USB_EPStartXfer+0x11e>
 8004482:	2a01      	cmp	r2, #1
 8004484:	bf01      	itttt	eq
 8004486:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 800448a:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 800448e:	fa12 f181 	uxtaheq	r1, r2, r1
 8004492:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8004496:	e7e3      	b.n	8004460 <USB_EPStartXfer+0x188>
 8004498:	ffff8000 	.word	0xffff8000

0800449c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800449c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 80044a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80044a2:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 80044a4:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 80044a6:	460d      	mov	r5, r1
 80044a8:	4632      	mov	r2, r6
 80044aa:	1a47      	subs	r7, r0, r1
 80044ac:	197c      	adds	r4, r7, r5
 80044ae:	3502      	adds	r5, #2
 80044b0:	b932      	cbnz	r2, 80044c0 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80044b2:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80044b4:	bf44      	itt	mi
 80044b6:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044ba:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
 80044be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80044c0:	8824      	ldrh	r4, [r4, #0]
 80044c2:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044c4:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80044c8:	0a24      	lsrs	r4, r4, #8
 80044ca:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 80044ce:	3a01      	subs	r2, #1
 80044d0:	e7ec      	b.n	80044ac <USB_ReadPMA+0x10>

080044d2 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044d2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80044d6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80044d8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044dc:	b15b      	cbz	r3, 80044f6 <USBD_CDC_EP0_RxReady+0x24>
 80044de:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80044e2:	28ff      	cmp	r0, #255	; 0xff
 80044e4:	d007      	beq.n	80044f6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80044ec:	4621      	mov	r1, r4
 80044ee:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80044f0:	23ff      	movs	r3, #255	; 0xff
 80044f2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80044f6:	2000      	movs	r0, #0
 80044f8:	bd10      	pop	{r4, pc}
	...

080044fc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80044fc:	2343      	movs	r3, #67	; 0x43
 80044fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004500:	4800      	ldr	r0, [pc, #0]	; (8004504 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004502:	4770      	bx	lr
 8004504:	20000044 	.word	0x20000044

08004508 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004508:	2343      	movs	r3, #67	; 0x43
 800450a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800450c:	4800      	ldr	r0, [pc, #0]	; (8004510 <USBD_CDC_GetHSCfgDesc+0x8>)
 800450e:	4770      	bx	lr
 8004510:	20000088 	.word	0x20000088

08004514 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004514:	2343      	movs	r3, #67	; 0x43
 8004516:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004518:	4800      	ldr	r0, [pc, #0]	; (800451c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800451a:	4770      	bx	lr
 800451c:	200000d8 	.word	0x200000d8

08004520 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004520:	230a      	movs	r3, #10
 8004522:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004524:	4800      	ldr	r0, [pc, #0]	; (8004528 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004526:	4770      	bx	lr
 8004528:	200000cc 	.word	0x200000cc

0800452c <USBD_CDC_DataOut>:
{
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004530:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004534:	f001 fad2 	bl	8005adc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8004538:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800453c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8004540:	b14b      	cbz	r3, 8004556 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004542:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8004546:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004550:	4798      	blx	r3
    return USBD_OK;
 8004552:	2000      	movs	r0, #0
 8004554:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004556:	2002      	movs	r0, #2
}
 8004558:	bd38      	pop	{r3, r4, r5, pc}

0800455a <USBD_CDC_DataIn>:
{
 800455a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800455c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8004560:	b1ce      	cbz	r6, 8004596 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004562:	2314      	movs	r3, #20
 8004564:	fb03 0301 	mla	r3, r3, r1, r0
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	b182      	cbz	r2, 800458e <USBD_CDC_DataIn+0x34>
 800456c:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8004570:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8004574:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004576:	fbb2 f4f5 	udiv	r4, r2, r5
 800457a:	fb05 2414 	mls	r4, r5, r4, r2
 800457e:	b934      	cbnz	r4, 800458e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8004580:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004582:	4622      	mov	r2, r4
 8004584:	4623      	mov	r3, r4
 8004586:	f001 fa8d 	bl	8005aa4 <USBD_LL_Transmit>
    return USBD_OK;
 800458a:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800458e:	2000      	movs	r0, #0
 8004590:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8004594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8004596:	2002      	movs	r0, #2
}
 8004598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800459a <USBD_CDC_Setup>:
{
 800459a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800459e:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80045a0:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80045a4:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045a8:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80045ac:	4605      	mov	r5, r0
 80045ae:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 80045b0:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80045b4:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045b8:	d028      	beq.n	800460c <USBD_CDC_Setup+0x72>
 80045ba:	2c20      	cmp	r4, #32
 80045bc:	d147      	bne.n	800464e <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 80045be:	88cc      	ldrh	r4, [r1, #6]
 80045c0:	784b      	ldrb	r3, [r1, #1]
 80045c2:	b1e4      	cbz	r4, 80045fe <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 80045c4:	0612      	lsls	r2, r2, #24
 80045c6:	d511      	bpl.n	80045ec <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045c8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80045cc:	4639      	mov	r1, r7
 80045ce:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	4622      	mov	r2, r4
 80045d6:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80045d8:	88f2      	ldrh	r2, [r6, #6]
 80045da:	4639      	mov	r1, r7
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 fc37 	bl	8004e50 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80045e2:	4644      	mov	r4, r8
}
 80045e4:	4620      	mov	r0, r4
 80045e6:	b003      	add	sp, #12
 80045e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 80045ec:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80045f0:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80045f4:	4622      	mov	r2, r4
 80045f6:	4639      	mov	r1, r7
 80045f8:	f000 fc3f 	bl	8004e7a <USBD_CtlPrepareRx>
 80045fc:	e7f1      	b.n	80045e2 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045fe:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004602:	4618      	mov	r0, r3
 8004604:	6895      	ldr	r5, [r2, #8]
 8004606:	4622      	mov	r2, r4
 8004608:	47a8      	blx	r5
 800460a:	e7eb      	b.n	80045e4 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800460c:	784f      	ldrb	r7, [r1, #1]
 800460e:	2f0a      	cmp	r7, #10
 8004610:	d00d      	beq.n	800462e <USBD_CDC_Setup+0x94>
 8004612:	2f0b      	cmp	r7, #11
 8004614:	d015      	beq.n	8004642 <USBD_CDC_Setup+0xa8>
 8004616:	b9d7      	cbnz	r7, 800464e <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004618:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800461c:	2b03      	cmp	r3, #3
 800461e:	d114      	bne.n	800464a <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004620:	2202      	movs	r2, #2
 8004622:	f10d 0106 	add.w	r1, sp, #6
 8004626:	f000 fc13 	bl	8004e50 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800462a:	463c      	mov	r4, r7
 800462c:	e7da      	b.n	80045e4 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800462e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004632:	2b03      	cmp	r3, #3
 8004634:	d109      	bne.n	800464a <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004636:	2201      	movs	r2, #1
 8004638:	f10d 0105 	add.w	r1, sp, #5
 800463c:	f000 fc08 	bl	8004e50 <USBD_CtlSendData>
 8004640:	e7d0      	b.n	80045e4 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004642:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004646:	2b03      	cmp	r3, #3
 8004648:	d0cc      	beq.n	80045e4 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 800464a:	4631      	mov	r1, r6
 800464c:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 800464e:	f000 fbd8 	bl	8004e02 <USBD_CtlError>
      ret = USBD_FAIL;
 8004652:	2402      	movs	r4, #2
      break;
 8004654:	e7c6      	b.n	80045e4 <USBD_CDC_Setup+0x4a>

08004656 <USBD_CDC_DeInit>:
{
 8004656:	b538      	push	{r3, r4, r5, lr}
 8004658:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800465a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800465c:	2181      	movs	r1, #129	; 0x81
 800465e:	f001 f9d9 	bl	8005a14 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004662:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004664:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004666:	4620      	mov	r0, r4
 8004668:	f001 f9d4 	bl	8005a14 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800466c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004670:	2182      	movs	r1, #130	; 0x82
 8004672:	4620      	mov	r0, r4
 8004674:	f001 f9ce 	bl	8005a14 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004678:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800467c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800467e:	b14b      	cbz	r3, 8004694 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004680:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004688:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800468c:	f001 fa52 	bl	8005b34 <USBD_static_free>
    pdev->pClassData = NULL;
 8004690:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004694:	2000      	movs	r0, #0
 8004696:	bd38      	pop	{r3, r4, r5, pc}

08004698 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004698:	7c03      	ldrb	r3, [r0, #16]
{
 800469a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046a0:	bbcb      	cbnz	r3, 8004716 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80046a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a6:	2202      	movs	r2, #2
 80046a8:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80046aa:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80046ac:	f001 f9a2 	bl	80059f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80046b0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80046b2:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80046b6:	4629      	mov	r1, r5
 80046b8:	2202      	movs	r2, #2
 80046ba:	4620      	mov	r0, r4
 80046bc:	f001 f99a 	bl	80059f4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80046c0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80046c4:	2308      	movs	r3, #8
 80046c6:	2203      	movs	r2, #3
 80046c8:	2182      	movs	r1, #130	; 0x82
 80046ca:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80046cc:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80046ce:	f001 f991 	bl	80059f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80046d2:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80046d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80046d8:	f001 fa28 	bl	8005b2c <USBD_static_malloc>
 80046dc:	4606      	mov	r6, r0
 80046de:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80046e2:	b358      	cbz	r0, 800473c <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80046e4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046ec:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 80046f0:	2700      	movs	r7, #0
 80046f2:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80046f6:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046fa:	f1b8 0f00 	cmp.w	r8, #0
 80046fe:	d113      	bne.n	8004728 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004704:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004708:	4629      	mov	r1, r5
 800470a:	4620      	mov	r0, r4
 800470c:	f001 f9d8 	bl	8005ac0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004710:	4640      	mov	r0, r8
 8004712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004716:	2340      	movs	r3, #64	; 0x40
 8004718:	2202      	movs	r2, #2
 800471a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800471c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800471e:	f001 f969 	bl	80059f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004722:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	e7c6      	b.n	80046b6 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800472e:	4629      	mov	r1, r5
 8004730:	4620      	mov	r0, r4
 8004732:	f001 f9c5 	bl	8005ac0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004736:	4638      	mov	r0, r7
 8004738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800473c:	4628      	mov	r0, r5
}
 800473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004742 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004742:	b119      	cbz	r1, 800474c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004744:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004748:	2000      	movs	r0, #0
 800474a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800474c:	2002      	movs	r0, #2
  }

  return ret;
}
 800474e:	4770      	bx	lr

08004750 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004750:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004754:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004756:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800475a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800475e:	4770      	bx	lr

08004760 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004760:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004764:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004766:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800476a:	4770      	bx	lr

0800476c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800476c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004770:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004772:	b162      	cbz	r2, 800478e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004774:	7c04      	ldrb	r4, [r0, #16]
 8004776:	b944      	cbnz	r4, 800478a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004778:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800477c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004780:	2101      	movs	r1, #1
 8004782:	f001 f99d 	bl	8005ac0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004786:	2000      	movs	r0, #0
 8004788:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800478a:	2340      	movs	r3, #64	; 0x40
 800478c:	e7f6      	b.n	800477c <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800478e:	2002      	movs	r0, #2
  }
}
 8004790:	bd10      	pop	{r4, pc}

08004792 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004792:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004794:	b180      	cbz	r0, 80047b8 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004796:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800479a:	b113      	cbz	r3, 80047a2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80047a2:	b109      	cbz	r1, 80047a8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80047a4:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 80047ae:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80047b0:	f001 f8cc 	bl	800594c <USBD_LL_Init>

  return USBD_OK;
 80047b4:	2000      	movs	r0, #0
 80047b6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80047b8:	2002      	movs	r0, #2
}
 80047ba:	bd08      	pop	{r3, pc}

080047bc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80047bc:	b119      	cbz	r1, 80047c6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80047be:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80047c2:	2000      	movs	r0, #0
 80047c4:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80047c6:	2002      	movs	r0, #2
  }

  return status;
}
 80047c8:	4770      	bx	lr

080047ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047ca:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80047cc:	f001 f904 	bl	80059d8 <USBD_LL_Start>

  return USBD_OK;
}
 80047d0:	2000      	movs	r0, #0
 80047d2:	bd08      	pop	{r3, pc}

080047d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80047d4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80047d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047da:	b90b      	cbnz	r3, 80047e0 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80047dc:	2002      	movs	r0, #2
 80047de:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4798      	blx	r3
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d1f9      	bne.n	80047dc <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80047e8:	bd08      	pop	{r3, pc}

080047ea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80047ea:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80047ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4798      	blx	r3

  return USBD_OK;
}
 80047f4:	2000      	movs	r0, #0
 80047f6:	bd08      	pop	{r3, pc}

080047f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80047fc:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8004800:	4628      	mov	r0, r5
 8004802:	f000 faea 	bl	8004dda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004806:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004808:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800480c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004810:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004814:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004818:	f001 031f 	and.w	r3, r1, #31
 800481c:	2b01      	cmp	r3, #1
 800481e:	d00e      	beq.n	800483e <USBD_LL_SetupStage+0x46>
 8004820:	d307      	bcc.n	8004832 <USBD_LL_SetupStage+0x3a>
 8004822:	2b02      	cmp	r3, #2
 8004824:	d010      	beq.n	8004848 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004826:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800482a:	4620      	mov	r0, r4
 800482c:	f001 f900 	bl	8005a30 <USBD_LL_StallEP>
      break;
 8004830:	e003      	b.n	800483a <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004832:	4629      	mov	r1, r5
 8004834:	4620      	mov	r0, r4
 8004836:	f000 f8f7 	bl	8004a28 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800483a:	2000      	movs	r0, #0
 800483c:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800483e:	4629      	mov	r1, r5
 8004840:	4620      	mov	r0, r4
 8004842:	f000 fa1d 	bl	8004c80 <USBD_StdItfReq>
      break;
 8004846:	e7f8      	b.n	800483a <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004848:	4629      	mov	r1, r5
 800484a:	4620      	mov	r0, r4
 800484c:	f000 fa3d 	bl	8004cca <USBD_StdEPReq>
      break;
 8004850:	e7f3      	b.n	800483a <USBD_LL_SetupStage+0x42>

08004852 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004852:	b570      	push	{r4, r5, r6, lr}
 8004854:	4605      	mov	r5, r0
 8004856:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004858:	bb49      	cbnz	r1, 80048ae <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800485a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800485e:	2b03      	cmp	r3, #3
 8004860:	d11e      	bne.n	80048a0 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004862:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8004866:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800486a:	4293      	cmp	r3, r2
 800486c:	d90b      	bls.n	8004886 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 800486e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004870:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004872:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004876:	bf8c      	ite	hi
 8004878:	b29a      	uxthhi	r2, r3
 800487a:	b292      	uxthls	r2, r2
 800487c:	4631      	mov	r1, r6
 800487e:	f000 fb0b 	bl	8004e98 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004882:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8004884:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004886:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	b123      	cbz	r3, 8004898 <USBD_LL_DataOutStage+0x46>
 800488e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004892:	2a03      	cmp	r2, #3
 8004894:	d100      	bne.n	8004898 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8004896:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004898:	4628      	mov	r0, r5
 800489a:	f000 fb05 	bl	8004ea8 <USBD_CtlSendStatus>
 800489e:	e7f0      	b.n	8004882 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d1ee      	bne.n	8004882 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80048a4:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80048a8:	f001 f8c2 	bl	8005a30 <USBD_LL_StallEP>
 80048ac:	e7e9      	b.n	8004882 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 80048ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	b12b      	cbz	r3, 80048c2 <USBD_LL_DataOutStage+0x70>
 80048b6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80048ba:	2a03      	cmp	r2, #3
 80048bc:	d101      	bne.n	80048c2 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 80048be:	4798      	blx	r3
 80048c0:	e7df      	b.n	8004882 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80048c2:	2002      	movs	r0, #2
}
 80048c4:	bd70      	pop	{r4, r5, r6, pc}

080048c6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80048c6:	b570      	push	{r4, r5, r6, lr}
 80048c8:	4613      	mov	r3, r2
 80048ca:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80048cc:	460e      	mov	r6, r1
 80048ce:	2900      	cmp	r1, #0
 80048d0:	d148      	bne.n	8004964 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80048d2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80048d6:	2a02      	cmp	r2, #2
 80048d8:	d13d      	bne.n	8004956 <USBD_LL_DataInStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80048da:	6a05      	ldr	r5, [r0, #32]
 80048dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80048de:	4295      	cmp	r5, r2
 80048e0:	d914      	bls.n	800490c <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80048e2:	1aaa      	subs	r2, r5, r2
 80048e4:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80048e6:	4619      	mov	r1, r3
 80048e8:	b292      	uxth	r2, r2
 80048ea:	f000 fabe 	bl	8004e6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048ee:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048f0:	461a      	mov	r2, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	4620      	mov	r0, r4
 80048f6:	f001 f8e3 	bl	8005ac0 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80048fa:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80048fe:	2b01      	cmp	r3, #1
 8004900:	f04f 0000 	mov.w	r0, #0
 8004904:	d13a      	bne.n	800497c <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004906:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 800490a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800490c:	69c3      	ldr	r3, [r0, #28]
 800490e:	fbb3 f5f2 	udiv	r5, r3, r2
 8004912:	fb02 3515 	mls	r5, r2, r5, r3
 8004916:	b965      	cbnz	r5, 8004932 <USBD_LL_DataInStage+0x6c>
 8004918:	429a      	cmp	r2, r3
 800491a:	d80a      	bhi.n	8004932 <USBD_LL_DataInStage+0x6c>
            (pep->total_length >= pep->maxpacket) &&
 800491c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004920:	4293      	cmp	r3, r2
 8004922:	d206      	bcs.n	8004932 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004924:	462a      	mov	r2, r5
 8004926:	f000 faa0 	bl	8004e6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800492a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800492e:	462b      	mov	r3, r5
 8004930:	e7de      	b.n	80048f0 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004932:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	b12b      	cbz	r3, 8004946 <USBD_LL_DataInStage+0x80>
 800493a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800493e:	2a03      	cmp	r2, #3
 8004940:	d101      	bne.n	8004946 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8004942:	4620      	mov	r0, r4
 8004944:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	4620      	mov	r0, r4
 800494a:	f001 f871 	bl	8005a30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800494e:	4620      	mov	r0, r4
 8004950:	f000 fab5 	bl	8004ebe <USBD_CtlReceiveStatus>
 8004954:	e7d1      	b.n	80048fa <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004956:	f032 0304 	bics.w	r3, r2, #4
 800495a:	d1ce      	bne.n	80048fa <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	f001 f867 	bl	8005a30 <USBD_LL_StallEP>
 8004962:	e7ca      	b.n	80048fa <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004964:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	b133      	cbz	r3, 800497a <USBD_LL_DataInStage+0xb4>
 800496c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004970:	2a03      	cmp	r2, #3
 8004972:	d102      	bne.n	800497a <USBD_LL_DataInStage+0xb4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004974:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004976:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004978:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800497a:	2002      	movs	r0, #2
}
 800497c:	bd70      	pop	{r4, r5, r6, pc}

0800497e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800497e:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004980:	2200      	movs	r2, #0
{
 8004982:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004984:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004986:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004988:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	f001 f832 	bl	80059f4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004990:	4633      	mov	r3, r6
 8004992:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004994:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004998:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800499c:	2200      	movs	r2, #0
 800499e:	4620      	mov	r0, r4
 80049a0:	f001 f828 	bl	80059f4 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80049a4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80049a8:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80049aa:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80049ac:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049ae:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80049b2:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80049b6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80049b8:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80049bc:	b123      	cbz	r3, 80049c8 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80049be:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80049c2:	4620      	mov	r0, r4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80049c8:	2000      	movs	r0, #0
 80049ca:	bd70      	pop	{r4, r5, r6, pc}

080049cc <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80049cc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80049ce:	2000      	movs	r0, #0
 80049d0:	4770      	bx	lr

080049d2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80049d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049d6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80049da:	2304      	movs	r3, #4
 80049dc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80049e0:	2000      	movs	r0, #0
 80049e2:	4770      	bx	lr

080049e4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80049e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049e8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80049ea:	bf04      	itt	eq
 80049ec:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80049f0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80049f4:	2000      	movs	r0, #0
 80049f6:	4770      	bx	lr

080049f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80049f8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049fa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80049fe:	2a03      	cmp	r2, #3
 8004a00:	d104      	bne.n	8004a0c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8004a02:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	b103      	cbz	r3, 8004a0c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	bd08      	pop	{r3, pc}

08004a10 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004a10:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8004a12:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004a14:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004a16:	f001 f80b 	bl	8005a30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	2100      	movs	r1, #0
}
 8004a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004a22:	f001 b805 	b.w	8005a30 <USBD_LL_StallEP>
	...

08004a28 <USBD_StdDevReq>:
{
 8004a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a2a:	780b      	ldrb	r3, [r1, #0]
 8004a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a30:	2b20      	cmp	r3, #32
{
 8004a32:	4604      	mov	r4, r0
 8004a34:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a36:	d011      	beq.n	8004a5c <USBD_StdDevReq+0x34>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d00f      	beq.n	8004a5c <USBD_StdDevReq+0x34>
 8004a3c:	bb73      	cbnz	r3, 8004a9c <USBD_StdDevReq+0x74>
      switch (req->bRequest)
 8004a3e:	784b      	ldrb	r3, [r1, #1]
 8004a40:	2b09      	cmp	r3, #9
 8004a42:	d82a      	bhi.n	8004a9a <USBD_StdDevReq+0x72>
 8004a44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004a48:	010e00f2 	.word	0x010e00f2
 8004a4c:	01070029 	.word	0x01070029
 8004a50:	008b0029 	.word	0x008b0029
 8004a54:	00290013 	.word	0x00290013
 8004a58:	00a700da 	.word	0x00a700da
      pdev->pClass->Setup(pdev, req);
 8004a5c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004a60:	4629      	mov	r1, r5
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4620      	mov	r0, r4
 8004a66:	4798      	blx	r3
}
 8004a68:	2000      	movs	r0, #0
 8004a6a:	b003      	add	sp, #12
 8004a6c:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004a74:	884b      	ldrh	r3, [r1, #2]
 8004a76:	0a1a      	lsrs	r2, r3, #8
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	2a0e      	cmp	r2, #14
 8004a7c:	d80d      	bhi.n	8004a9a <USBD_StdDevReq+0x72>
 8004a7e:	e8df f002 	tbb	[pc, r2]
 8004a82:	2c10      	.short	0x2c10
 8004a84:	590c0c39 	.word	0x590c0c39
 8004a88:	0c0c0c63 	.word	0x0c0c0c63
 8004a8c:	0c0c0c0c 	.word	0x0c0c0c0c
 8004a90:	08          	.byte	0x08
 8004a91:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004a92:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004a96:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004a98:	b933      	cbnz	r3, 8004aa8 <USBD_StdDevReq+0x80>
          USBD_CtlError(pdev, req);
 8004a9a:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8004a9c:	f7ff ffb8 	bl	8004a10 <USBD_CtlError.constprop.1>
  return ret;
 8004aa0:	e7e2      	b.n	8004a68 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004aa2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004aa6:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004aa8:	7c20      	ldrb	r0, [r4, #16]
 8004aaa:	f10d 0106 	add.w	r1, sp, #6
 8004aae:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004ab0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004ab4:	b152      	cbz	r2, 8004acc <USBD_StdDevReq+0xa4>
 8004ab6:	88eb      	ldrh	r3, [r5, #6]
 8004ab8:	b143      	cbz	r3, 8004acc <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf28      	it	cs
 8004abe:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ac0:	4601      	mov	r1, r0
 8004ac2:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8004ac4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ac8:	f000 f9c2 	bl	8004e50 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004acc:	88eb      	ldrh	r3, [r5, #6]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1ca      	bne.n	8004a68 <USBD_StdDevReq+0x40>
        USBD_CtlSendStatus(pdev);
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 f9e8 	bl	8004ea8 <USBD_CtlSendStatus>
 8004ad8:	e7c6      	b.n	8004a68 <USBD_StdDevReq+0x40>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ada:	7c02      	ldrb	r2, [r0, #16]
 8004adc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ae0:	b932      	cbnz	r2, 8004af0 <USBD_StdDevReq+0xc8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004ae4:	f10d 0006 	add.w	r0, sp, #6
 8004ae8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004aea:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004aec:	7043      	strb	r3, [r0, #1]
 8004aee:	e7df      	b.n	8004ab0 <USBD_StdDevReq+0x88>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	e7f7      	b.n	8004ae4 <USBD_StdDevReq+0xbc>
      switch ((uint8_t)(req->wValue))
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d8cf      	bhi.n	8004a9a <USBD_StdDevReq+0x72>
 8004afa:	e8df f003 	tbb	[pc, r3]
 8004afe:	0703      	.short	0x0703
 8004b00:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b04:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	e7c5      	b.n	8004a98 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b0c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	e7c1      	b.n	8004a98 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004b14:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	e7bd      	b.n	8004a98 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004b1c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	e7b9      	b.n	8004a98 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004b24:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	e7b5      	b.n	8004a98 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004b2c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	e7b1      	b.n	8004a98 <USBD_StdDevReq+0x70>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b34:	7c03      	ldrb	r3, [r0, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1af      	bne.n	8004a9a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004b3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b3e:	f10d 0006 	add.w	r0, sp, #6
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	4798      	blx	r3
 8004b46:	e7b3      	b.n	8004ab0 <USBD_StdDevReq+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b48:	7c03      	ldrb	r3, [r0, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1a5      	bne.n	8004a9a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004b4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b52:	f10d 0006 	add.w	r0, sp, #6
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004b5a:	2307      	movs	r3, #7
 8004b5c:	e7c6      	b.n	8004aec <USBD_StdDevReq+0xc4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004b5e:	888b      	ldrh	r3, [r1, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d19a      	bne.n	8004a9a <USBD_StdDevReq+0x72>
 8004b64:	88cb      	ldrh	r3, [r1, #6]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d197      	bne.n	8004a9a <USBD_StdDevReq+0x72>
 8004b6a:	884d      	ldrh	r5, [r1, #2]
 8004b6c:	2d7f      	cmp	r5, #127	; 0x7f
 8004b6e:	d894      	bhi.n	8004a9a <USBD_StdDevReq+0x72>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b74:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004b76:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b78:	d08f      	beq.n	8004a9a <USBD_StdDevReq+0x72>
      pdev->dev_address = dev_addr;
 8004b7a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004b7e:	f000 ff83 	bl	8005a88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004b82:	4620      	mov	r0, r4
 8004b84:	f000 f990 	bl	8004ea8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004b88:	b11d      	cbz	r5, 8004b92 <USBD_StdDevReq+0x16a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004b8a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004b8c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004b90:	e76a      	b.n	8004a68 <USBD_StdDevReq+0x40>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7fa      	b.n	8004b8c <USBD_StdDevReq+0x164>
  cfgidx = (uint8_t)(req->wValue);
 8004b96:	7889      	ldrb	r1, [r1, #2]
 8004b98:	4d38      	ldr	r5, [pc, #224]	; (8004c7c <USBD_StdDevReq+0x254>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004b9a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004b9c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004b9e:	f63f af7c 	bhi.w	8004a9a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 8004ba2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d008      	beq.n	8004bbc <USBD_StdDevReq+0x194>
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d014      	beq.n	8004bd8 <USBD_StdDevReq+0x1b0>
        USBD_CtlError(pdev, req);
 8004bae:	f7ff ff2f 	bl	8004a10 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004bb2:	7829      	ldrb	r1, [r5, #0]
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff fe18 	bl	80047ea <USBD_ClrClassConfig>
 8004bba:	e755      	b.n	8004a68 <USBD_StdDevReq+0x40>
        if (cfgidx)
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	d088      	beq.n	8004ad2 <USBD_StdDevReq+0xaa>
          pdev->dev_config = cfgidx;
 8004bc0:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004bc2:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004bc4:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004bc6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff fe02 	bl	80047d4 <USBD_SetClassConfig>
 8004bd0:	2802      	cmp	r0, #2
 8004bd2:	f47f af7e 	bne.w	8004ad2 <USBD_StdDevReq+0xaa>
 8004bd6:	e760      	b.n	8004a9a <USBD_StdDevReq+0x72>
        if (cfgidx == 0U)
 8004bd8:	b931      	cbnz	r1, 8004be8 <USBD_StdDevReq+0x1c0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004be0:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004be2:	f7ff fe02 	bl	80047ea <USBD_ClrClassConfig>
 8004be6:	e774      	b.n	8004ad2 <USBD_StdDevReq+0xaa>
        else if (cfgidx != pdev->dev_config)
 8004be8:	6841      	ldr	r1, [r0, #4]
 8004bea:	2901      	cmp	r1, #1
 8004bec:	f43f af71 	beq.w	8004ad2 <USBD_StdDevReq+0xaa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004bf0:	b2c9      	uxtb	r1, r1
 8004bf2:	f7ff fdfa 	bl	80047ea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004bf6:	7829      	ldrb	r1, [r5, #0]
 8004bf8:	6061      	str	r1, [r4, #4]
 8004bfa:	e7e6      	b.n	8004bca <USBD_StdDevReq+0x1a2>
  if (req->wLength != 1U)
 8004bfc:	88ca      	ldrh	r2, [r1, #6]
 8004bfe:	2a01      	cmp	r2, #1
 8004c00:	f47f af4b 	bne.w	8004a9a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 8004c04:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f43f af46 	beq.w	8004a9a <USBD_StdDevReq+0x72>
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d904      	bls.n	8004c1c <USBD_StdDevReq+0x1f4>
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	f47f af41 	bne.w	8004a9a <USBD_StdDevReq+0x72>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004c18:	1d01      	adds	r1, r0, #4
 8004c1a:	e003      	b.n	8004c24 <USBD_StdDevReq+0x1fc>
        pdev->dev_default_config = 0U;
 8004c1c:	4601      	mov	r1, r0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004c24:	4620      	mov	r0, r4
 8004c26:	f000 f913 	bl	8004e50 <USBD_CtlSendData>
 8004c2a:	e71d      	b.n	8004a68 <USBD_StdDevReq+0x40>
  switch (pdev->dev_state)
 8004c2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c30:	3b01      	subs	r3, #1
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	f63f af31 	bhi.w	8004a9a <USBD_StdDevReq+0x72>
      if (req->wLength != 0x2U)
 8004c38:	88cb      	ldrh	r3, [r1, #6]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	f47f af2d 	bne.w	8004a9a <USBD_StdDevReq+0x72>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004c40:	2301      	movs	r3, #1
 8004c42:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004c44:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004c48:	b10b      	cbz	r3, 8004c4e <USBD_StdDevReq+0x226>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f104 010c 	add.w	r1, r4, #12
 8004c54:	e7e6      	b.n	8004c24 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004c56:	884b      	ldrh	r3, [r1, #2]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f47f af05 	bne.w	8004a68 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8004c5e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8004c62:	e736      	b.n	8004ad2 <USBD_StdDevReq+0xaa>
  switch (pdev->dev_state)
 8004c64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	f63f af15 	bhi.w	8004a9a <USBD_StdDevReq+0x72>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004c70:	884b      	ldrh	r3, [r1, #2]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	f47f aef8 	bne.w	8004a68 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e7f0      	b.n	8004c5e <USBD_StdDevReq+0x236>
 8004c7c:	20000204 	.word	0x20000204

08004c80 <USBD_StdItfReq>:
{
 8004c80:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c82:	780b      	ldrb	r3, [r1, #0]
 8004c84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c88:	2b20      	cmp	r3, #32
{
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c8e:	d002      	beq.n	8004c96 <USBD_StdItfReq+0x16>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d000      	beq.n	8004c96 <USBD_StdItfReq+0x16>
 8004c94:	b9b3      	cbnz	r3, 8004cc4 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 8004c96:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d810      	bhi.n	8004cc2 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004ca0:	792b      	ldrb	r3, [r5, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d80d      	bhi.n	8004cc2 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ca6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004caa:	4629      	mov	r1, r5
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004cb2:	88eb      	ldrh	r3, [r5, #6]
 8004cb4:	b91b      	cbnz	r3, 8004cbe <USBD_StdItfReq+0x3e>
 8004cb6:	b910      	cbnz	r0, 8004cbe <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f000 f8f5 	bl	8004ea8 <USBD_CtlSendStatus>
}
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004cc2:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8004cc4:	f7ff fea4 	bl	8004a10 <USBD_CtlError.constprop.1>
      break;
 8004cc8:	e7f9      	b.n	8004cbe <USBD_StdItfReq+0x3e>

08004cca <USBD_StdEPReq>:
{
 8004cca:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ccc:	780a      	ldrb	r2, [r1, #0]
 8004cce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004cd2:	2a20      	cmp	r2, #32
{
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cd8:	d013      	beq.n	8004d02 <USBD_StdEPReq+0x38>
 8004cda:	2a40      	cmp	r2, #64	; 0x40
 8004cdc:	d011      	beq.n	8004d02 <USBD_StdEPReq+0x38>
 8004cde:	b96a      	cbnz	r2, 8004cfc <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8004ce0:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004ce2:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8004ce4:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004ce6:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004ce8:	d01f      	beq.n	8004d2a <USBD_StdEPReq+0x60>
 8004cea:	d335      	bcc.n	8004d58 <USBD_StdEPReq+0x8e>
 8004cec:	2d03      	cmp	r5, #3
 8004cee:	d105      	bne.n	8004cfc <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004cf0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004cf4:	2a02      	cmp	r2, #2
 8004cf6:	d026      	beq.n	8004d46 <USBD_StdEPReq+0x7c>
 8004cf8:	2a03      	cmp	r2, #3
 8004cfa:	d00a      	beq.n	8004d12 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 8004cfc:	f7ff fe88 	bl	8004a10 <USBD_CtlError.constprop.1>
      break;
 8004d00:	e005      	b.n	8004d0e <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 8004d02:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8004d06:	4619      	mov	r1, r3
 8004d08:	6892      	ldr	r2, [r2, #8]
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4790      	blx	r2
}
 8004d0e:	2000      	movs	r0, #0
 8004d10:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d12:	885a      	ldrh	r2, [r3, #2]
 8004d14:	b92a      	cbnz	r2, 8004d22 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 8004d16:	064a      	lsls	r2, r1, #25
 8004d18:	d003      	beq.n	8004d22 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004d1a:	88db      	ldrh	r3, [r3, #6]
 8004d1c:	b90b      	cbnz	r3, 8004d22 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004d1e:	f000 fe87 	bl	8005a30 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 f8c0 	bl	8004ea8 <USBD_CtlSendStatus>
              break;
 8004d28:	e7f1      	b.n	8004d0e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8004d2a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004d2e:	2a02      	cmp	r2, #2
 8004d30:	d009      	beq.n	8004d46 <USBD_StdEPReq+0x7c>
 8004d32:	2a03      	cmp	r2, #3
 8004d34:	d1e2      	bne.n	8004cfc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d36:	885b      	ldrh	r3, [r3, #2]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e8      	bne.n	8004d0e <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004d3c:	064d      	lsls	r5, r1, #25
 8004d3e:	d0f0      	beq.n	8004d22 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004d40:	f000 fe84 	bl	8005a4c <USBD_LL_ClearStallEP>
 8004d44:	e7ed      	b.n	8004d22 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d46:	064b      	lsls	r3, r1, #25
 8004d48:	d017      	beq.n	8004d7a <USBD_StdEPReq+0xb0>
                USBD_LL_StallEP(pdev, ep_addr);
 8004d4a:	f000 fe71 	bl	8005a30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fe6d 	bl	8005a30 <USBD_LL_StallEP>
 8004d56:	e7da      	b.n	8004d0e <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8004d58:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d00e      	beq.n	8004d7e <USBD_StdEPReq+0xb4>
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d1cb      	bne.n	8004cfc <USBD_StdEPReq+0x32>
              if ((ep_addr & 0x80U) == 0x80U)
 8004d64:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004d68:	f04f 0314 	mov.w	r3, #20
 8004d6c:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d70:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004d74:	d012      	beq.n	8004d9c <USBD_StdEPReq+0xd2>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d76:	6992      	ldr	r2, [r2, #24]
 8004d78:	b9da      	cbnz	r2, 8004db2 <USBD_StdEPReq+0xe8>
                USBD_CtlError(pdev, req);
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	e7be      	b.n	8004cfc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d7e:	0649      	lsls	r1, r1, #25
 8004d80:	d1fb      	bne.n	8004d7a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d82:	0613      	lsls	r3, r2, #24
 8004d84:	bf4c      	ite	mi
 8004d86:	f100 0114 	addmi.w	r1, r0, #20
 8004d8a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004d92:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 f85b 	bl	8004e50 <USBD_CtlSendData>
              break;
 8004d9a:	e7b8      	b.n	8004d0e <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004d9c:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	d0ea      	beq.n	8004d7a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004da4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004da8:	fb03 0505 	mla	r5, r3, r5, r0
 8004dac:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004db0:	e004      	b.n	8004dbc <USBD_StdEPReq+0xf2>
 8004db2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004db6:	fb05 3503 	mla	r5, r5, r3, r3
 8004dba:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004dbc:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004dc0:	d103      	bne.n	8004dca <USBD_StdEPReq+0x100>
                pep->status = 0x0001U;
 8004dc2:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	e7e4      	b.n	8004d94 <USBD_StdEPReq+0xca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f000 fe4c 	bl	8005a68 <USBD_LL_IsStallEP>
 8004dd0:	b108      	cbz	r0, 8004dd6 <USBD_StdEPReq+0x10c>
                pep->status = 0x0001U;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e7f5      	b.n	8004dc2 <USBD_StdEPReq+0xf8>
                pep->status = 0x0000U;
 8004dd6:	6028      	str	r0, [r5, #0]
 8004dd8:	e7f4      	b.n	8004dc4 <USBD_StdEPReq+0xfa>

08004dda <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004dda:	780b      	ldrb	r3, [r1, #0]
 8004ddc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004dde:	784b      	ldrb	r3, [r1, #1]
 8004de0:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004de2:	78ca      	ldrb	r2, [r1, #3]
 8004de4:	788b      	ldrb	r3, [r1, #2]
 8004de6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004dea:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004dec:	794a      	ldrb	r2, [r1, #5]
 8004dee:	790b      	ldrb	r3, [r1, #4]
 8004df0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004df4:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004df6:	79ca      	ldrb	r2, [r1, #7]
 8004df8:	798b      	ldrb	r3, [r1, #6]
 8004dfa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004dfe:	80c3      	strh	r3, [r0, #6]
 8004e00:	4770      	bx	lr

08004e02 <USBD_CtlError>:
{
 8004e02:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 8004e04:	2180      	movs	r1, #128	; 0x80
{
 8004e06:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004e08:	f000 fe12 	bl	8005a30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	2100      	movs	r1, #0
}
 8004e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004e14:	f000 be0c 	b.w	8005a30 <USBD_LL_StallEP>

08004e18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004e18:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8004e1a:	b188      	cbz	r0, 8004e40 <USBD_GetString+0x28>
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004e20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2c00      	cmp	r4, #0
 8004e28:	d1f9      	bne.n	8004e1e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004e30:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004e32:	2303      	movs	r3, #3
 8004e34:	704b      	strb	r3, [r1, #1]
 8004e36:	3801      	subs	r0, #1
 8004e38:	2302      	movs	r3, #2
    while (*desc != '\0')
 8004e3a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004e3e:	b905      	cbnz	r5, 8004e42 <USBD_GetString+0x2a>
 8004e40:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8004e48:	3302      	adds	r3, #2
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	548c      	strb	r4, [r1, r2]
 8004e4e:	e7f4      	b.n	8004e3a <USBD_GetString+0x22>

08004e50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004e50:	b510      	push	{r4, lr}
 8004e52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004e54:	2202      	movs	r2, #2
 8004e56:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004e5a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e5c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8004e5e:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e60:	2100      	movs	r1, #0
 8004e62:	f000 fe1f 	bl	8005aa4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e66:	2000      	movs	r0, #0
 8004e68:	bd10      	pop	{r4, pc}

08004e6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004e6a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	460a      	mov	r2, r1
 8004e70:	2100      	movs	r1, #0
 8004e72:	f000 fe17 	bl	8005aa4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004e76:	2000      	movs	r0, #0
 8004e78:	bd08      	pop	{r3, pc}

08004e7a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004e7a:	b510      	push	{r4, lr}
 8004e7c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004e7e:	2203      	movs	r2, #3
 8004e80:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004e84:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e88:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004e8a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f000 fe16 	bl	8005ac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004e94:	2000      	movs	r0, #0
 8004e96:	bd10      	pop	{r4, pc}

08004e98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004e98:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	f000 fe0e 	bl	8005ac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	bd08      	pop	{r3, pc}

08004ea8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004ea8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004eaa:	2304      	movs	r3, #4
 8004eac:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f000 fdf5 	bl	8005aa4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004eba:	2000      	movs	r0, #0
 8004ebc:	bd08      	pop	{r3, pc}

08004ebe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004ebe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004ec0:	2305      	movs	r3, #5
 8004ec2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f000 fdf8 	bl	8005ac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	bd08      	pop	{r3, pc}

08004ed4 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8004ed8:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004edc:	4302      	orrs	r2, r0
 8004ede:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	4018      	ands	r0, r3
 8004ee4:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004ee6:	9b01      	ldr	r3, [sp, #4]
}
 8004ee8:	b002      	add	sp, #8
 8004eea:	4770      	bx	lr

08004eec <print_PMS7003>:
static void MX_I2C1_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */

void print_PMS7003(void)
{
 8004eec:	b570      	push	{r4, r5, r6, lr}
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;

	check_byte_receive=pms7003_Buffer[30]<<8|pms7003_Buffer[31];
 8004eee:	4c31      	ldr	r4, [pc, #196]	; (8004fb4 <print_PMS7003+0xc8>)
 8004ef0:	7fa3      	ldrb	r3, [r4, #30]
 8004ef2:	7fe6      	ldrb	r6, [r4, #31]
 8004ef4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8004ef8:	2300      	movs	r3, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 8004efa:	461d      	mov	r5, r3


	for(uint8_t i=0;i<30;i++)
	{
		check_byte_calculate+=pms7003_Buffer[i];
 8004efc:	5ce2      	ldrb	r2, [r4, r3]
 8004efe:	3301      	adds	r3, #1
 8004f00:	4415      	add	r5, r2
	for(uint8_t i=0;i<30;i++)
 8004f02:	2b1e      	cmp	r3, #30
		check_byte_calculate+=pms7003_Buffer[i];
 8004f04:	b2ad      	uxth	r5, r5
	for(uint8_t i=0;i<30;i++)
 8004f06:	d1f9      	bne.n	8004efc <print_PMS7003+0x10>
	}

	printf("pms : 0x%X	crc_cal : 0x%X\r\n",check_byte_receive,check_byte_calculate);
 8004f08:	462a      	mov	r2, r5
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	482a      	ldr	r0, [pc, #168]	; (8004fb8 <print_PMS7003+0xcc>)
 8004f0e:	f000 fef5 	bl	8005cfc <iprintf>

	if(check_byte_receive==check_byte_calculate)
 8004f12:	42ae      	cmp	r6, r5
 8004f14:	d149      	bne.n	8004faa <print_PMS7003+0xbe>
	{
		printf("PM1.0 : %d	",(combine_value=(pms7003_Buffer[10]<<8)|pms7003_Buffer[11]));
 8004f16:	7ae3      	ldrb	r3, [r4, #11]
 8004f18:	7aa1      	ldrb	r1, [r4, #10]
 8004f1a:	4828      	ldr	r0, [pc, #160]	; (8004fbc <print_PMS7003+0xd0>)
 8004f1c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f20:	f000 feec 	bl	8005cfc <iprintf>
		printf("PM2.5 : %d	",(combine_value=(pms7003_Buffer[12]<<8)|pms7003_Buffer[13]));
 8004f24:	7b63      	ldrb	r3, [r4, #13]
 8004f26:	7b21      	ldrb	r1, [r4, #12]
 8004f28:	4825      	ldr	r0, [pc, #148]	; (8004fc0 <print_PMS7003+0xd4>)
 8004f2a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f2e:	f000 fee5 	bl	8005cfc <iprintf>
		printf("PM10 : %d	",(combine_value=(pms7003_Buffer[14]<<8)|pms7003_Buffer[15]));
 8004f32:	7be3      	ldrb	r3, [r4, #15]
 8004f34:	7ba1      	ldrb	r1, [r4, #14]
 8004f36:	4823      	ldr	r0, [pc, #140]	; (8004fc4 <print_PMS7003+0xd8>)
 8004f38:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f3c:	f000 fede 	bl	8005cfc <iprintf>
		printf("0.3um : %d	",(combine_value=(pms7003_Buffer[16]<<8)|pms7003_Buffer[17]));
 8004f40:	7c63      	ldrb	r3, [r4, #17]
 8004f42:	7c21      	ldrb	r1, [r4, #16]
 8004f44:	4820      	ldr	r0, [pc, #128]	; (8004fc8 <print_PMS7003+0xdc>)
 8004f46:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f4a:	f000 fed7 	bl	8005cfc <iprintf>
		printf("0.5um : %d	",(combine_value=(pms7003_Buffer[18]<<8)|pms7003_Buffer[19]));
 8004f4e:	7ce3      	ldrb	r3, [r4, #19]
 8004f50:	7ca1      	ldrb	r1, [r4, #18]
 8004f52:	481e      	ldr	r0, [pc, #120]	; (8004fcc <print_PMS7003+0xe0>)
 8004f54:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f58:	f000 fed0 	bl	8005cfc <iprintf>
		printf("1.0um : %d	",(combine_value=(pms7003_Buffer[20]<<8)|pms7003_Buffer[21]));
 8004f5c:	7d63      	ldrb	r3, [r4, #21]
 8004f5e:	7d21      	ldrb	r1, [r4, #20]
 8004f60:	481b      	ldr	r0, [pc, #108]	; (8004fd0 <print_PMS7003+0xe4>)
 8004f62:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f66:	f000 fec9 	bl	8005cfc <iprintf>
		printf("2.5um : %d	",(combine_value=(pms7003_Buffer[22]<<8)|pms7003_Buffer[23]));
 8004f6a:	7de3      	ldrb	r3, [r4, #23]
 8004f6c:	7da1      	ldrb	r1, [r4, #22]
 8004f6e:	4819      	ldr	r0, [pc, #100]	; (8004fd4 <print_PMS7003+0xe8>)
 8004f70:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f74:	f000 fec2 	bl	8005cfc <iprintf>
		printf("5.0um : %d	",(combine_value=(pms7003_Buffer[24]<<8)|pms7003_Buffer[25]));
 8004f78:	7e63      	ldrb	r3, [r4, #25]
 8004f7a:	7e21      	ldrb	r1, [r4, #24]
 8004f7c:	4816      	ldr	r0, [pc, #88]	; (8004fd8 <print_PMS7003+0xec>)
 8004f7e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f82:	f000 febb 	bl	8005cfc <iprintf>
		printf("10.0um : %d\n",(combine_value=(pms7003_Buffer[26]<<8)|pms7003_Buffer[27]));
 8004f86:	7ea1      	ldrb	r1, [r4, #26]
 8004f88:	7ee3      	ldrb	r3, [r4, #27]
 8004f8a:	4814      	ldr	r0, [pc, #80]	; (8004fdc <print_PMS7003+0xf0>)
 8004f8c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004f90:	f000 feb4 	bl	8005cfc <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004f94:	2101      	movs	r1, #1
 8004f96:	4812      	ldr	r0, [pc, #72]	; (8004fe0 <print_PMS7003+0xf4>)
 8004f98:	f7fb fdaf 	bl	8000afa <HAL_GPIO_TogglePin>
	}
	else
	{
		printf("Check bytes not matched\r\n");
	}
	HAL_UART_DMAStop(&hlpuart1);
 8004f9c:	4811      	ldr	r0, [pc, #68]	; (8004fe4 <print_PMS7003+0xf8>)
 8004f9e:	f7fd fe0d 	bl	8002bbc <HAL_UART_DMAStop>
	receive_complete=0;
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <print_PMS7003+0xfc>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
		printf("Check bytes not matched\r\n");
 8004faa:	4810      	ldr	r0, [pc, #64]	; (8004fec <print_PMS7003+0x100>)
 8004fac:	f000 ff1a 	bl	8005de4 <puts>
 8004fb0:	e7f4      	b.n	8004f9c <print_PMS7003+0xb0>
 8004fb2:	bf00      	nop
 8004fb4:	20000438 	.word	0x20000438
 8004fb8:	08006c14 	.word	0x08006c14
 8004fbc:	08006c30 	.word	0x08006c30
 8004fc0:	08006c3c 	.word	0x08006c3c
 8004fc4:	08006c48 	.word	0x08006c48
 8004fc8:	08006c53 	.word	0x08006c53
 8004fcc:	08006c5f 	.word	0x08006c5f
 8004fd0:	08006c6b 	.word	0x08006c6b
 8004fd4:	08006c77 	.word	0x08006c77
 8004fd8:	08006c83 	.word	0x08006c83
 8004fdc:	08006c8f 	.word	0x08006c8f
 8004fe0:	48000400 	.word	0x48000400
 8004fe4:	20000504 	.word	0x20000504
 8004fe8:	20000205 	.word	0x20000205
 8004fec:	08006c9c 	.word	0x08006c9c

08004ff0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8004ff0:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8004ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8004ff6:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <_write+0x14>)
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	f7fe fce4 	bl	80039c8 <HAL_UART_Transmit>
  return len;
}
 8005000:	4620      	mov	r0, r4
 8005002:	bd10      	pop	{r4, pc}
 8005004:	20000590 	.word	0x20000590

08005008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005008:	b530      	push	{r4, r5, lr}
 800500a:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800500c:	2248      	movs	r2, #72	; 0x48
 800500e:	2100      	movs	r1, #0
 8005010:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8005012:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005016:	f000 fe69 	bl	8005cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800501a:	221c      	movs	r2, #28
 800501c:	2100      	movs	r1, #0
 800501e:	a801      	add	r0, sp, #4
 8005020:	f000 fe64 	bl	8005cec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005024:	2100      	movs	r1, #0
 8005026:	2250      	movs	r2, #80	; 0x50
 8005028:	a81a      	add	r0, sp, #104	; 0x68
 800502a:	f000 fe5f 	bl	8005cec <memset>
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005034:	60e3      	str	r3, [r4, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	60e3      	str	r3, [r4, #12]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8005042:	f7fc fcfd 	bl	8001a40 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005046:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800504a:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <SystemClock_Config+0xec>)
 800504c:	f023 0318 	bic.w	r3, r3, #24
 8005050:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800505a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800506a:	2327      	movs	r3, #39	; 0x27
 800506c:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800506e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005072:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005078:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800507a:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800507c:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800507e:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005080:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005082:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005084:	2360      	movs	r3, #96	; 0x60
 8005086:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005088:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800508a:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800508c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800508e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005090:	f7fc fd92 	bl	8001bb8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005094:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005096:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005098:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800509a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800509c:	2302      	movs	r3, #2
 800509e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050a0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050a2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050a4:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80050a6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80050a8:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80050aa:	f7fd f865 	bl	8002178 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80050ae:	f242 1307 	movw	r3, #8455	; 0x2107
 80050b2:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80050b4:	2318      	movs	r3, #24
 80050b6:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80050b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050bc:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80050be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050c2:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80050c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80050c8:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80050ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ce:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80050d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80050d4:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80050d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050da:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050dc:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80050de:	2310      	movs	r3, #16
 80050e0:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80050e2:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80050e4:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80050e6:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050e8:	f7fd f9f3 	bl	80024d2 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80050ec:	f7fd fbb5 	bl	800285a <HAL_RCCEx_EnableMSIPLLMode>
}
 80050f0:	b02f      	add	sp, #188	; 0xbc
 80050f2:	bd30      	pop	{r4, r5, pc}
 80050f4:	58000400 	.word	0x58000400

080050f8 <main>:
{
 80050f8:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 80050fa:	f7fb fa3f 	bl	800057c <HAL_Init>
  SystemClock_Config();
 80050fe:	f7ff ff83 	bl	8005008 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005102:	2214      	movs	r2, #20
 8005104:	2100      	movs	r1, #0
 8005106:	a801      	add	r0, sp, #4
 8005108:	f000 fdf0 	bl	8005cec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800510c:	2004      	movs	r0, #4
 800510e:	f7ff fee1 	bl	8004ed4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005112:	2002      	movs	r0, #2
 8005114:	f7ff fede 	bl	8004ed4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005118:	2001      	movs	r0, #1
 800511a:	f7ff fedb 	bl	8004ed4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800511e:	2008      	movs	r0, #8
 8005120:	f7ff fed8 	bl	8004ed4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8005124:	2200      	movs	r2, #0
 8005126:	2123      	movs	r1, #35	; 0x23
 8005128:	4864      	ldr	r0, [pc, #400]	; (80052bc <main+0x1c4>)
  huart1.Instance = USART1;
 800512a:	4d65      	ldr	r5, [pc, #404]	; (80052c0 <main+0x1c8>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800512c:	f7fb fce0 	bl	8000af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005130:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005132:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = B1_Pin;
 8005134:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005136:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005138:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <main+0x1cc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800513a:	4863      	ldr	r0, [pc, #396]	; (80052c8 <main+0x1d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800513c:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005140:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005142:	f7fb fc1b 	bl	800097c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8005146:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005148:	a901      	add	r1, sp, #4
 800514a:	485c      	ldr	r0, [pc, #368]	; (80052bc <main+0x1c4>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800514c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800514e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005152:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005154:	f7fb fc12 	bl	800097c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8005158:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800515a:	a901      	add	r1, sp, #4
 800515c:	485b      	ldr	r0, [pc, #364]	; (80052cc <main+0x1d4>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800515e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005160:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005164:	f7fb fc0a 	bl	800097c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005168:	4621      	mov	r1, r4
 800516a:	4622      	mov	r2, r4
 800516c:	200a      	movs	r0, #10
 800516e:	f7fb fa59 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005172:	200a      	movs	r0, #10
 8005174:	f7fb fa8a 	bl	800068c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 8005178:	4a55      	ldr	r2, [pc, #340]	; (80052d0 <main+0x1d8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800517a:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 800517c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005180:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005182:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8005184:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005188:	616e      	str	r6, [r5, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800518a:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800518c:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800518e:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005190:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005192:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005194:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005196:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005198:	f7fe fca5 	bl	8003ae6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800519c:	4621      	mov	r1, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	f7fe fd3a 	bl	8003c18 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051a4:	4621      	mov	r1, r4
 80051a6:	4628      	mov	r0, r5
 80051a8:	f7fe fd5a 	bl	8003c60 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80051ac:	4628      	mov	r0, r5
 80051ae:	f7fe fd18 	bl	8003be2 <HAL_UARTEx_DisableFifoMode>
  SET_BIT(RCC->AHB1ENR, Periphs);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80051b6:	4621      	mov	r1, r4
 80051b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  hlpuart1.Instance = LPUART1;
 80051ba:	4d46      	ldr	r5, [pc, #280]	; (80052d4 <main+0x1dc>)
 80051bc:	f042 0204 	orr.w	r2, r2, #4
 80051c0:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80051c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c4:	f002 0204 	and.w	r2, r2, #4
 80051c8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80051ca:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80051cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ce:	433a      	orrs	r2, r7
 80051d0:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80051d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d4:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80051d6:	4622      	mov	r2, r4
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	200b      	movs	r0, #11
  (void)tmpreg;
 80051dc:	9b00      	ldr	r3, [sp, #0]
 80051de:	f7fb fa21 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80051e2:	200b      	movs	r0, #11
 80051e4:	f7fb fa52 	bl	800068c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80051e8:	4622      	mov	r2, r4
 80051ea:	4621      	mov	r1, r4
 80051ec:	4630      	mov	r0, r6
 80051ee:	f7fb fa19 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7fb fa4a 	bl	800068c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80051f8:	4622      	mov	r2, r4
 80051fa:	4621      	mov	r1, r4
 80051fc:	200d      	movs	r0, #13
 80051fe:	f7fb fa11 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005202:	200d      	movs	r0, #13
 8005204:	f7fb fa42 	bl	800068c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005208:	4622      	mov	r2, r4
 800520a:	4621      	mov	r1, r4
 800520c:	200e      	movs	r0, #14
 800520e:	f7fb fa09 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005212:	200e      	movs	r0, #14
 8005214:	f7fb fa3a 	bl	800068c <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 9600;
 8005218:	492f      	ldr	r1, [pc, #188]	; (80052d8 <main+0x1e0>)
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800521a:	616e      	str	r6, [r5, #20]
  hlpuart1.Init.BaudRate = 9600;
 800521c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005220:	4628      	mov	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 8005222:	e885 000a 	stmia.w	r5, {r1, r3}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005226:	60ac      	str	r4, [r5, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005228:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800522a:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800522c:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800522e:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005230:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005232:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005234:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005236:	f7fe fc56 	bl	8003ae6 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800523a:	4621      	mov	r1, r4
 800523c:	4628      	mov	r0, r5
 800523e:	f7fe fceb 	bl	8003c18 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	f7fe fd0b 	bl	8003c60 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800524a:	4628      	mov	r0, r5
 800524c:	f7fe fcc9 	bl	8003be2 <HAL_UARTEx_DisableFifoMode>
  hi2c1.Instance = I2C1;
 8005250:	4d22      	ldr	r5, [pc, #136]	; (80052dc <main+0x1e4>)
  MX_USB_Device_Init();
 8005252:	f000 faa5 	bl	80057a0 <MX_USB_Device_Init>
  hi2c1.Init.Timing = 0x00100413;
 8005256:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <main+0x1e8>)
 8005258:	4822      	ldr	r0, [pc, #136]	; (80052e4 <main+0x1ec>)
  hi2c1.Init.OwnAddress1 = 0;
 800525a:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x00100413;
 800525c:	e885 0009 	stmia.w	r5, {r0, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005260:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005262:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005264:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005266:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005268:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800526a:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800526c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800526e:	f7fb fc94 	bl	8000b9a <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005272:	4621      	mov	r1, r4
 8005274:	4628      	mov	r0, r5
 8005276:	f7fb ff81 	bl	800117c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800527a:	4621      	mov	r1, r4
 800527c:	4628      	mov	r0, r5
 800527e:	f7fb ffa3 	bl	80011c8 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8005282:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005286:	f7fb ffc5 	bl	8001214 <HAL_I2CEx_EnableFastModePlus>
  htim16.Instance = TIM16;
 800528a:	4d17      	ldr	r5, [pc, #92]	; (80052e8 <main+0x1f0>)
  htim16.Init.Prescaler = 32000-1;
 800528c:	4b17      	ldr	r3, [pc, #92]	; (80052ec <main+0x1f4>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800528e:	60ac      	str	r4, [r5, #8]
  htim16.Init.Prescaler = 32000-1;
 8005290:	f647 46ff 	movw	r6, #31999	; 0x7cff
 8005294:	e885 0048 	stmia.w	r5, {r3, r6}
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005298:	4628      	mov	r0, r5
  htim16.Init.Period = 5000-1;
 800529a:	f241 3387 	movw	r3, #4999	; 0x1387
 800529e:	60eb      	str	r3, [r5, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a0:	612c      	str	r4, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 80052a2:	616c      	str	r4, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052a4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80052a6:	f7fd fbe3 	bl	8002a70 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 80052aa:	4628      	mov	r0, r5
 80052ac:	f7fd fadc 	bl	8002868 <HAL_TIM_Base_Start_IT>
	  HAL_Delay(2300);
 80052b0:	f640 00fc 	movw	r0, #2300	; 0x8fc
 80052b4:	f7fb f990 	bl	80005d8 <HAL_Delay>
 80052b8:	e7fa      	b.n	80052b0 <main+0x1b8>
 80052ba:	bf00      	nop
 80052bc:	48000400 	.word	0x48000400
 80052c0:	20000590 	.word	0x20000590
 80052c4:	10110000 	.word	0x10110000
 80052c8:	48000800 	.word	0x48000800
 80052cc:	48000c00 	.word	0x48000c00
 80052d0:	40013800 	.word	0x40013800
 80052d4:	20000504 	.word	0x20000504
 80052d8:	40008000 	.word	0x40008000
 80052dc:	200004b8 	.word	0x200004b8
 80052e0:	00100413 	.word	0x00100413
 80052e4:	40005400 	.word	0x40005400
 80052e8:	2000073c 	.word	0x2000073c
 80052ec:	40014400 	.word	0x40014400

080052f0 <HAL_UART_TxCpltCallback>:
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
//	printf("transfer complete\r\n");
	transfer_complete=1;
 80052f0:	4b01      	ldr	r3, [pc, #4]	; (80052f8 <HAL_UART_TxCpltCallback+0x8>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	4770      	bx	lr
 80052f8:	20000206 	.word	0x20000206

080052fc <HAL_UART_RxCpltCallback>:
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
//	receive_complete=1;
	print_PMS7003();
 80052fc:	f7ff bdf6 	b.w	8004eec <print_PMS7003>

08005300 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005300:	4770      	bx	lr
	...

08005304 <HAL_TIM_PeriodElapsedCallback>:
//  {
//  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b508      	push	{r3, lr}
	printf("Timer Interrupt called\r\n");
 8005306:	4809      	ldr	r0, [pc, #36]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005308:	f000 fd6c 	bl	8005de4 <puts>
	if((receive_complete==0)&&(HAL_UART_GetState(&hlpuart1)==HAL_UART_STATE_READY))
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b95b      	cbnz	r3, 800532a <HAL_TIM_PeriodElapsedCallback+0x26>
 8005312:	4808      	ldr	r0, [pc, #32]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005314:	f7fd fe76 	bl	8003004 <HAL_UART_GetState>
 8005318:	2820      	cmp	r0, #32
 800531a:	4602      	mov	r2, r0
 800531c:	d105      	bne.n	800532a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)pms7003_Buffer,32);
 800531e:	4906      	ldr	r1, [pc, #24]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005320:	4804      	ldr	r0, [pc, #16]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x30>)
	}
}
 8005322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)pms7003_Buffer,32);
 8005326:	f7fd bbd1 	b.w	8002acc <HAL_UART_Receive_IT>
 800532a:	bd08      	pop	{r3, pc}
 800532c:	08006bfc 	.word	0x08006bfc
 8005330:	20000205 	.word	0x20000205
 8005334:	20000504 	.word	0x20000504
 8005338:	20000438 	.word	0x20000438

0800533c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800533c:	4770      	bx	lr

0800533e <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8005342:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005346:	4302      	orrs	r2, r0
 8005348:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800534a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534c:	4018      	ands	r0, r3
 800534e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8005350:	9b01      	ldr	r3, [sp, #4]
}
 8005352:	b002      	add	sp, #8
 8005354:	4770      	bx	lr

08005356 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005356:	4770      	bx	lr

08005358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	4606      	mov	r6, r0
 800535c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800535e:	2214      	movs	r2, #20
 8005360:	2100      	movs	r1, #0
 8005362:	a801      	add	r0, sp, #4
 8005364:	f000 fcc2 	bl	8005cec <memset>
  if(hi2c->Instance==I2C1)
 8005368:	6832      	ldr	r2, [r6, #0]
 800536a:	4b30      	ldr	r3, [pc, #192]	; (800542c <HAL_I2C_MspInit+0xd4>)
 800536c:	429a      	cmp	r2, r3
 800536e:	d15a      	bne.n	8005426 <HAL_I2C_MspInit+0xce>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005370:	2002      	movs	r0, #2
 8005372:	f7ff ffe4 	bl	800533e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800537a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800537c:	2312      	movs	r3, #18
 800537e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005380:	2301      	movs	r3, #1
 8005382:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005384:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005386:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005388:	eb0d 0103 	add.w	r1, sp, r3
 800538c:	4828      	ldr	r0, [pc, #160]	; (8005430 <HAL_I2C_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800538e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005390:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005392:	f7fb faf3 	bl	800097c <HAL_GPIO_Init>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800539a:	4c26      	ldr	r4, [pc, #152]	; (8005434 <HAL_I2C_MspInit+0xdc>)
 800539c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800539e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80053a2:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053a6:	60a5      	str	r5, [r4, #8]
 80053a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ac:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80053ae:	9b00      	ldr	r3, [sp, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <HAL_I2C_MspInit+0xe0>)
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b2:	60e5      	str	r5, [r4, #12]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80053b4:	f04f 0c0a 	mov.w	ip, #10
 80053b8:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80053bc:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053c2:	6165      	str	r5, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053c4:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80053c6:	61e5      	str	r5, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053c8:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80053ca:	f7fb f9ab 	bl	8000724 <HAL_DMA_Init>
 80053ce:	b108      	cbz	r0, 80053d4 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80053d0:	f7ff ffb4 	bl	800533c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053d4:	4b19      	ldr	r3, [pc, #100]	; (800543c <HAL_I2C_MspInit+0xe4>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80053d6:	63f4      	str	r4, [r6, #60]	; 0x3c
 80053d8:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 80053da:	4c19      	ldr	r4, [pc, #100]	; (8005440 <HAL_I2C_MspInit+0xe8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053dc:	250b      	movs	r5, #11
 80053de:	f04f 0e10 	mov.w	lr, #16
 80053e2:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053e6:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053e8:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80053ea:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053ec:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053ee:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053f0:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053f2:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80053f4:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053f6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80053f8:	f7fb f994 	bl	8000724 <HAL_DMA_Init>
 80053fc:	b108      	cbz	r0, 8005402 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80053fe:	f7ff ff9d 	bl	800533c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005402:	2200      	movs	r2, #0
 8005404:	4611      	mov	r1, r2
 8005406:	201e      	movs	r0, #30
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005408:	63b4      	str	r4, [r6, #56]	; 0x38
 800540a:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800540c:	f7fb f90a 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005410:	201e      	movs	r0, #30
 8005412:	f7fb f93b 	bl	800068c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005416:	2200      	movs	r2, #0
 8005418:	201f      	movs	r0, #31
 800541a:	4611      	mov	r1, r2
 800541c:	f7fb f902 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005420:	201f      	movs	r0, #31
 8005422:	f7fb f933 	bl	800068c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005426:	b006      	add	sp, #24
 8005428:	bd70      	pop	{r4, r5, r6, pc}
 800542a:	bf00      	nop
 800542c:	40005400 	.word	0x40005400
 8005430:	48000400 	.word	0x48000400
 8005434:	2000067c 	.word	0x2000067c
 8005438:	40020030 	.word	0x40020030
 800543c:	40020044 	.word	0x40020044
 8005440:	20000458 	.word	0x20000458

08005444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4606      	mov	r6, r0
 8005448:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544a:	2214      	movs	r2, #20
 800544c:	2100      	movs	r1, #0
 800544e:	a803      	add	r0, sp, #12
 8005450:	f000 fc4c 	bl	8005cec <memset>
  if(huart->Instance==LPUART1)
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <HAL_UART_MspInit+0xfc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d151      	bne.n	8005500 <HAL_UART_MspInit+0xbc>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005460:	2004      	movs	r0, #4
 8005462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8005464:	4c37      	ldr	r4, [pc, #220]	; (8005544 <HAL_UART_MspInit+0x100>)
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005474:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005476:	f7ff ff62 	bl	800533e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800547a:	2303      	movs	r3, #3
 800547c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005480:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005482:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005484:	4830      	ldr	r0, [pc, #192]	; (8005548 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005486:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005488:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800548a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800548c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005490:	f7fb fa74 	bl	800097c <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005494:	4b2d      	ldr	r3, [pc, #180]	; (800554c <HAL_UART_MspInit+0x108>)
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005496:	60a5      	str	r5, [r4, #8]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005498:	f04f 0c10 	mov.w	ip, #16
 800549c:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80054a0:	4620      	mov	r0, r4
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054a2:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054a4:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054a6:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054a8:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054aa:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80054ac:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054ae:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80054b0:	f7fb f938 	bl	8000724 <HAL_DMA_Init>
 80054b4:	b108      	cbz	r0, 80054ba <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 80054b6:	f7ff ff41 	bl	800533c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054ba:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_UART_MspInit+0x10c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80054bc:	67b4      	str	r4, [r6, #120]	; 0x78
 80054be:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80054c0:	4c24      	ldr	r4, [pc, #144]	; (8005554 <HAL_UART_MspInit+0x110>)
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054c2:	2511      	movs	r5, #17
 80054c4:	f04f 0e10 	mov.w	lr, #16
 80054c8:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054cc:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ce:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80054d0:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d2:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054d4:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054d6:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054d8:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80054da:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054dc:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80054de:	f7fb f921 	bl	8000724 <HAL_DMA_Init>
 80054e2:	b108      	cbz	r0, 80054e8 <HAL_UART_MspInit+0xa4>
    {
      Error_Handler();
 80054e4:	f7ff ff2a 	bl	800533c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80054e8:	2200      	movs	r2, #0
 80054ea:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80054ec:	6774      	str	r4, [r6, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80054ee:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80054f0:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80054f2:	f7fb f897 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80054f6:	2025      	movs	r0, #37	; 0x25
 80054f8:	f7fb f8c8 	bl	800068c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80054fc:	b008      	add	sp, #32
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART1)
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <HAL_UART_MspInit+0x114>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d1fa      	bne.n	80054fc <HAL_UART_MspInit+0xb8>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800550a:	2002      	movs	r0, #2
 800550c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800550e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800551c:	9b02      	ldr	r3, [sp, #8]
 800551e:	f7ff ff0e 	bl	800533e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8005522:	23c0      	movs	r3, #192	; 0xc0
 8005524:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005530:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005532:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005534:	4809      	ldr	r0, [pc, #36]	; (800555c <HAL_UART_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005536:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005538:	f7fb fa20 	bl	800097c <HAL_GPIO_Init>
}
 800553c:	e7de      	b.n	80054fc <HAL_UART_MspInit+0xb8>
 800553e:	bf00      	nop
 8005540:	40008000 	.word	0x40008000
 8005544:	200006dc 	.word	0x200006dc
 8005548:	48000800 	.word	0x48000800
 800554c:	40020008 	.word	0x40020008
 8005550:	4002001c 	.word	0x4002001c
 8005554:	2000061c 	.word	0x2000061c
 8005558:	40013800 	.word	0x40013800
 800555c:	48000400 	.word	0x48000400

08005560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005560:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <HAL_TIM_Base_MspInit+0x38>)
 8005564:	6802      	ldr	r2, [r0, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d112      	bne.n	8005590 <HAL_TIM_Base_MspInit+0x30>
  SET_BIT(RCC->APB2ENR, Periphs);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 3, 0);
 800556e:	2019      	movs	r0, #25
 8005570:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005572:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005576:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	2103      	movs	r1, #3
  (void)tmpreg;
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	f7fb f84d 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800558a:	2019      	movs	r0, #25
 800558c:	f7fb f87e 	bl	800068c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005590:	b003      	add	sp, #12
 8005592:	f85d fb04 	ldr.w	pc, [sp], #4
 8005596:	bf00      	nop
 8005598:	40014400 	.word	0x40014400

0800559c <NMI_Handler>:
 800559c:	4770      	bx	lr

0800559e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800559e:	e7fe      	b.n	800559e <HardFault_Handler>

080055a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055a0:	e7fe      	b.n	80055a0 <MemManage_Handler>

080055a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055a2:	e7fe      	b.n	80055a2 <BusFault_Handler>

080055a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055a4:	e7fe      	b.n	80055a4 <UsageFault_Handler>

080055a6 <SVC_Handler>:
 80055a6:	4770      	bx	lr

080055a8 <DebugMon_Handler>:
 80055a8:	4770      	bx	lr

080055aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055aa:	4770      	bx	lr

080055ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055ac:	f7fa bffc 	b.w	80005a8 <HAL_IncTick>

080055b0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80055b0:	2010      	movs	r0, #16
 80055b2:	f7fb baa9 	b.w	8000b08 <HAL_GPIO_EXTI_IRQHandler>
	...

080055b8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//	printf("rx dma\r\n");
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <DMA1_Channel1_IRQHandler+0x8>)
 80055ba:	f7fb b98f 	b.w	80008dc <HAL_DMA_IRQHandler>
 80055be:	bf00      	nop
 80055c0:	200006dc 	.word	0x200006dc

080055c4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <DMA1_Channel2_IRQHandler+0x8>)
 80055c6:	f7fb b989 	b.w	80008dc <HAL_DMA_IRQHandler>
 80055ca:	bf00      	nop
 80055cc:	2000061c 	.word	0x2000061c

080055d0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80055d0:	4801      	ldr	r0, [pc, #4]	; (80055d8 <DMA1_Channel3_IRQHandler+0x8>)
 80055d2:	f7fb b983 	b.w	80008dc <HAL_DMA_IRQHandler>
 80055d6:	bf00      	nop
 80055d8:	2000067c 	.word	0x2000067c

080055dc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <DMA1_Channel4_IRQHandler+0x8>)
 80055de:	f7fb b97d 	b.w	80008dc <HAL_DMA_IRQHandler>
 80055e2:	bf00      	nop
 80055e4:	20000458 	.word	0x20000458

080055e8 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <USB_LP_IRQHandler+0x8>)
 80055ea:	f7fb bf3b 	b.w	8001464 <HAL_PCD_IRQHandler>
 80055ee:	bf00      	nop
 80055f0:	20001a40 	.word	0x20001a40

080055f4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <TIM1_UP_TIM16_IRQHandler+0x8>)
 80055f6:	f7fd b951 	b.w	800289c <HAL_TIM_IRQHandler>
 80055fa:	bf00      	nop
 80055fc:	2000073c 	.word	0x2000073c

08005600 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <I2C1_EV_IRQHandler+0x8>)
 8005602:	f7fb bb1b 	b.w	8000c3c <HAL_I2C_EV_IRQHandler>
 8005606:	bf00      	nop
 8005608:	200004b8 	.word	0x200004b8

0800560c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <I2C1_ER_IRQHandler+0x8>)
 800560e:	f7fb bd7a 	b.w	8001106 <HAL_I2C_ER_IRQHandler>
 8005612:	bf00      	nop
 8005614:	200004b8 	.word	0x200004b8

08005618 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005618:	4801      	ldr	r0, [pc, #4]	; (8005620 <LPUART1_IRQHandler+0x8>)
 800561a:	f7fd bc17 	b.w	8002e4c <HAL_UART_IRQHandler>
 800561e:	bf00      	nop
 8005620:	20000504 	.word	0x20000504

08005624 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	460e      	mov	r6, r1
 8005628:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800562a:	460c      	mov	r4, r1
 800562c:	1ba3      	subs	r3, r4, r6
 800562e:	429d      	cmp	r5, r3
 8005630:	dc01      	bgt.n	8005636 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005632:	4628      	mov	r0, r5
 8005634:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005636:	f3af 8000 	nop.w
 800563a:	f804 0b01 	strb.w	r0, [r4], #1
 800563e:	e7f5      	b.n	800562c <_read+0x8>

08005640 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005640:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <_sbrk+0x2c>)
 8005644:	6819      	ldr	r1, [r3, #0]
{
 8005646:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005648:	b909      	cbnz	r1, 800564e <_sbrk+0xe>
		heap_end = &end;
 800564a:	4909      	ldr	r1, [pc, #36]	; (8005670 <_sbrk+0x30>)
 800564c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800564e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005650:	4669      	mov	r1, sp
 8005652:	4402      	add	r2, r0
 8005654:	428a      	cmp	r2, r1
 8005656:	d906      	bls.n	8005666 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005658:	f000 fb1e 	bl	8005c98 <__errno>
 800565c:	230c      	movs	r3, #12
 800565e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005666:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005668:	bd08      	pop	{r3, pc}
 800566a:	bf00      	nop
 800566c:	20000208 	.word	0x20000208
 8005670:	20001eb8 	.word	0x20001eb8

08005674 <_close>:

int _close(int file)
{
	return -1;
}
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	4770      	bx	lr

0800567a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800567a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800567e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005680:	2000      	movs	r0, #0
 8005682:	4770      	bx	lr

08005684 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005684:	2001      	movs	r0, #1
 8005686:	4770      	bx	lr

08005688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005688:	2000      	movs	r0, #0
 800568a:	4770      	bx	lr

0800568c <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <SystemInit+0x60>)
 800568e:	2100      	movs	r1, #0
 8005690:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005692:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005696:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800569a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800569e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80056a2:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 80056ae:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80056b2:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 80056ba:	4462      	add	r2, ip
 80056bc:	4002      	ands	r2, r0
 80056be:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80056c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80056c4:	f022 0205 	bic.w	r2, r2, #5
 80056c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80056cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80056d8:	4a05      	ldr	r2, [pc, #20]	; (80056f0 <SystemInit+0x64>)
 80056da:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80056dc:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056e4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80056e6:	6199      	str	r1, [r3, #24]
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	e000ed00 	.word	0xe000ed00
 80056f0:	22041000 	.word	0x22041000

080056f4 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80056f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f8:	4924      	ldr	r1, [pc, #144]	; (800578c <SystemCoreClockUpdate+0x98>)
 80056fa:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056fc:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80056fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005702:	f000 000c 	and.w	r0, r0, #12
{
 8005706:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8005708:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800570c:	4611      	mov	r1, r2
 800570e:	4a20      	ldr	r2, [pc, #128]	; (8005790 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005710:	280c      	cmp	r0, #12
 8005712:	d839      	bhi.n	8005788 <SystemCoreClockUpdate+0x94>
 8005714:	e8df f000 	tbb	[pc, r0]
 8005718:	38383838 	.word	0x38383838
 800571c:	38383807 	.word	0x38383807
 8005720:	38383816 	.word	0x38383816
 8005724:	18          	.byte	0x18
 8005725:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8005726:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8005728:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800572e:	481a      	ldr	r0, [pc, #104]	; (8005798 <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005730:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8005732:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005734:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8005738:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800573c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8005744:	4b15      	ldr	r3, [pc, #84]	; (800579c <SystemCoreClockUpdate+0xa8>)
 8005746:	e7ef      	b.n	8005728 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005748:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800574a:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800574c:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005750:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8005754:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8005756:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800575a:	d10e      	bne.n	800577a <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 800575c:	490d      	ldr	r1, [pc, #52]	; (8005794 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 800575e:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005766:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005768:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800576a:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800576e:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005770:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8005772:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8005774:	fbb3 f3f1 	udiv	r3, r3, r1
 8005778:	e7d6      	b.n	8005728 <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800577a:	2803      	cmp	r0, #3
 800577c:	d101      	bne.n	8005782 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 800577e:	4907      	ldr	r1, [pc, #28]	; (800579c <SystemCoreClockUpdate+0xa8>)
 8005780:	e7ed      	b.n	800575e <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8005782:	fbb4 f3f3 	udiv	r3, r4, r3
 8005786:	e7ec      	b.n	8005762 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8005788:	6014      	str	r4, [r2, #0]
      break;
 800578a:	e7ce      	b.n	800572a <SystemCoreClockUpdate+0x36>
 800578c:	08006d18 	.word	0x08006d18
 8005790:	2000011c 	.word	0x2000011c
 8005794:	00f42400 	.word	0x00f42400
 8005798:	08006cb8 	.word	0x08006cb8
 800579c:	01e84800 	.word	0x01e84800

080057a0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80057a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80057a2:	2200      	movs	r2, #0
 80057a4:	490e      	ldr	r1, [pc, #56]	; (80057e0 <MX_USB_Device_Init+0x40>)
 80057a6:	480f      	ldr	r0, [pc, #60]	; (80057e4 <MX_USB_Device_Init+0x44>)
 80057a8:	f7fe fff3 	bl	8004792 <USBD_Init>
 80057ac:	b108      	cbz	r0, 80057b2 <MX_USB_Device_Init+0x12>
    Error_Handler();
 80057ae:	f7ff fdc5 	bl	800533c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80057b2:	490d      	ldr	r1, [pc, #52]	; (80057e8 <MX_USB_Device_Init+0x48>)
 80057b4:	480b      	ldr	r0, [pc, #44]	; (80057e4 <MX_USB_Device_Init+0x44>)
 80057b6:	f7ff f801 	bl	80047bc <USBD_RegisterClass>
 80057ba:	b108      	cbz	r0, 80057c0 <MX_USB_Device_Init+0x20>
    Error_Handler();
 80057bc:	f7ff fdbe 	bl	800533c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80057c0:	490a      	ldr	r1, [pc, #40]	; (80057ec <MX_USB_Device_Init+0x4c>)
 80057c2:	4808      	ldr	r0, [pc, #32]	; (80057e4 <MX_USB_Device_Init+0x44>)
 80057c4:	f7fe ffbd 	bl	8004742 <USBD_CDC_RegisterInterface>
 80057c8:	b108      	cbz	r0, 80057ce <MX_USB_Device_Init+0x2e>
    Error_Handler();
 80057ca:	f7ff fdb7 	bl	800533c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80057ce:	4805      	ldr	r0, [pc, #20]	; (80057e4 <MX_USB_Device_Init+0x44>)
 80057d0:	f7fe fffb 	bl	80047ca <USBD_Start>
 80057d4:	b118      	cbz	r0, 80057de <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80057d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80057da:	f7ff bdaf 	b.w	800533c <Error_Handler>
 80057de:	bd08      	pop	{r3, pc}
 80057e0:	20000130 	.word	0x20000130
 80057e4:	2000077c 	.word	0x2000077c
 80057e8:	2000000c 	.word	0x2000000c
 80057ec:	20000120 	.word	0x20000120

080057f0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80057f0:	2000      	movs	r0, #0
 80057f2:	4770      	bx	lr

080057f4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80057f4:	2000      	movs	r0, #0
 80057f6:	4770      	bx	lr

080057f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80057f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80057fa:	4c05      	ldr	r4, [pc, #20]	; (8005810 <CDC_Receive_FS+0x18>)
 80057fc:	4601      	mov	r1, r0
 80057fe:	4620      	mov	r0, r4
 8005800:	f7fe ffae 	bl	8004760 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005804:	4620      	mov	r0, r4
 8005806:	f7fe ffb1 	bl	800476c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800580a:	2000      	movs	r0, #0
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	2000077c 	.word	0x2000077c

08005814 <CDC_Init_FS>:
{
 8005814:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005816:	4c06      	ldr	r4, [pc, #24]	; (8005830 <CDC_Init_FS+0x1c>)
 8005818:	4906      	ldr	r1, [pc, #24]	; (8005834 <CDC_Init_FS+0x20>)
 800581a:	2200      	movs	r2, #0
 800581c:	4620      	mov	r0, r4
 800581e:	f7fe ff97 	bl	8004750 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005822:	4905      	ldr	r1, [pc, #20]	; (8005838 <CDC_Init_FS+0x24>)
 8005824:	4620      	mov	r0, r4
 8005826:	f7fe ff9b 	bl	8004760 <USBD_CDC_SetRxBuffer>
}
 800582a:	2000      	movs	r0, #0
 800582c:	bd10      	pop	{r4, pc}
 800582e:	bf00      	nop
 8005830:	2000077c 	.word	0x2000077c
 8005834:	20001240 	.word	0x20001240
 8005838:	20000a40 	.word	0x20000a40

0800583c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800583c:	b510      	push	{r4, lr}
 800583e:	4604      	mov	r4, r0
 8005840:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005842:	2214      	movs	r2, #20
 8005844:	2100      	movs	r1, #0
 8005846:	a803      	add	r0, sp, #12
 8005848:	f000 fa50 	bl	8005cec <memset>
  if(pcdHandle->Instance==USB)
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <HAL_PCD_MspInit+0x6c>)
 8005850:	429a      	cmp	r2, r3
 8005852:	d127      	bne.n	80058a4 <HAL_PCD_MspInit+0x68>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005854:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005858:	a903      	add	r1, sp, #12
 800585a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005862:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800586a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800586c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005870:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005872:	2302      	movs	r3, #2
 8005874:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800587a:	230a      	movs	r3, #10
 800587c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587e:	f7fb f87d 	bl	800097c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005888:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800588a:	6da3      	ldr	r3, [r4, #88]	; 0x58

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800588c:	2200      	movs	r2, #0
 800588e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005892:	9301      	str	r3, [sp, #4]
 8005894:	2014      	movs	r0, #20
 8005896:	4611      	mov	r1, r2
  (void)tmpreg;
 8005898:	9b01      	ldr	r3, [sp, #4]
 800589a:	f7fa fec3 	bl	8000624 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800589e:	2014      	movs	r0, #20
 80058a0:	f7fa fef4 	bl	800068c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80058a4:	b008      	add	sp, #32
 80058a6:	bd10      	pop	{r4, pc}
 80058a8:	40006800 	.word	0x40006800

080058ac <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 80058ac:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80058b0:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 80058b4:	f7fe bfa0 	b.w	80047f8 <USBD_LL_SetupStage>

080058b8 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 80058b8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80058bc:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 80058c0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80058c4:	f7fe bfc5 	b.w	8004852 <USBD_LL_DataOutStage>

080058c8 <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 80058c8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80058cc:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 80058d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d2:	f7fe bff8 	b.w	80048c6 <USBD_LL_DataInStage>

080058d6 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 80058d6:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 80058da:	f7ff b88d 	b.w	80049f8 <USBD_LL_SOF>

080058de <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058de:	6883      	ldr	r3, [r0, #8]
 80058e0:	2b02      	cmp	r3, #2
{ 
 80058e2:	b510      	push	{r4, lr}
 80058e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058e6:	d001      	beq.n	80058ec <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80058e8:	f7ff fd28 	bl	800533c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058ec:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
 80058f0:	2101      	movs	r1, #1
 80058f2:	f7ff f86b 	bl	80049cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058f6:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80058fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058fe:	f7ff b83e 	b.w	800497e <USBD_LL_Reset>
	...

08005904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005904:	b510      	push	{r4, lr}
 8005906:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005908:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 800590c:	f7ff f861 	bl	80049d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005910:	69a3      	ldr	r3, [r4, #24]
 8005912:	b123      	cbz	r3, 800591e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005914:	4a02      	ldr	r2, [pc, #8]	; (8005920 <HAL_PCD_SuspendCallback+0x1c>)
 8005916:	6913      	ldr	r3, [r2, #16]
 8005918:	f043 0306 	orr.w	r3, r3, #6
 800591c:	6113      	str	r3, [r2, #16]
 800591e:	bd10      	pop	{r4, pc}
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005924:	6983      	ldr	r3, [r0, #24]
{
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 800592a:	b133      	cbz	r3, 800593a <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800592c:	4a06      	ldr	r2, [pc, #24]	; (8005948 <HAL_PCD_ResumeCallback+0x24>)
 800592e:	6913      	ldr	r3, [r2, #16]
 8005930:	f023 0306 	bic.w	r3, r3, #6
 8005934:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8005936:	f7ff fb67 	bl	8005008 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800593a:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 800593e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005942:	f7ff b84f 	b.w	80049e4 <USBD_LL_Resume>
 8005946:	bf00      	nop
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <USBD_LL_Init>:
{
 800594c:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 800594e:	4c20      	ldr	r4, [pc, #128]	; (80059d0 <USBD_LL_Init+0x84>)
  pdev->pData = &hpcd_USB_FS;
 8005950:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
{
 8005954:	4605      	mov	r5, r0
  hpcd_USB_FS.pData = pdev;
 8005956:	f8c4 0270 	str.w	r0, [r4, #624]	; 0x270
  HAL_PWREx_EnableVddUSB();
 800595a:	f7fc f881 	bl	8001a60 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800595e:	481d      	ldr	r0, [pc, #116]	; (80059d4 <USBD_LL_Init+0x88>)
 8005960:	2308      	movs	r3, #8
 8005962:	e884 0009 	stmia.w	r4, {r0, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005966:	2302      	movs	r3, #2
 8005968:	60a3      	str	r3, [r4, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800596a:	6123      	str	r3, [r4, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800596c:	4620      	mov	r0, r4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800596e:	2300      	movs	r3, #0
 8005970:	6163      	str	r3, [r4, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005972:	61a3      	str	r3, [r4, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005974:	61e3      	str	r3, [r4, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005976:	6223      	str	r3, [r4, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005978:	f7fb fc54 	bl	8001224 <HAL_PCD_Init>
 800597c:	b108      	cbz	r0, 8005982 <USBD_LL_Init+0x36>
    Error_Handler( );
 800597e:	f7ff fcdd 	bl	800533c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005982:	2200      	movs	r2, #0
 8005984:	4611      	mov	r1, r2
 8005986:	2318      	movs	r3, #24
 8005988:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800598c:	f7fc f829 	bl	80019e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005990:	2358      	movs	r3, #88	; 0x58
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 800599a:	f7fc f822 	bl	80019e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800599e:	23c0      	movs	r3, #192	; 0xc0
 80059a0:	2200      	movs	r2, #0
 80059a2:	2181      	movs	r1, #129	; 0x81
 80059a4:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 80059a8:	f7fc f81b 	bl	80019e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80059ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80059b0:	2200      	movs	r2, #0
 80059b2:	2101      	movs	r1, #1
 80059b4:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 80059b8:	f7fc f813 	bl	80019e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80059bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059c0:	2200      	movs	r2, #0
 80059c2:	2182      	movs	r1, #130	; 0x82
 80059c4:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 80059c8:	f7fc f80b 	bl	80019e2 <HAL_PCDEx_PMAConfig>
}
 80059cc:	2000      	movs	r0, #0
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20001a40 	.word	0x20001a40
 80059d4:	40006800 	.word	0x40006800

080059d8 <USBD_LL_Start>:
{
 80059d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80059da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059de:	f7fb fc81 	bl	80012e4 <HAL_PCD_Start>
 80059e2:	2803      	cmp	r0, #3
 80059e4:	bf9a      	itte	ls
 80059e6:	4b02      	ldrls	r3, [pc, #8]	; (80059f0 <USBD_LL_Start+0x18>)
 80059e8:	5c18      	ldrbls	r0, [r3, r0]
 80059ea:	2002      	movhi	r0, #2
}
 80059ec:	bd08      	pop	{r3, pc}
 80059ee:	bf00      	nop
 80059f0:	08006d58 	.word	0x08006d58

080059f4 <USBD_LL_OpenEP>:
{
 80059f4:	b510      	push	{r4, lr}
 80059f6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80059f8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059fc:	4613      	mov	r3, r2
 80059fe:	4622      	mov	r2, r4
 8005a00:	f7fb fc99 	bl	8001336 <HAL_PCD_EP_Open>
 8005a04:	2803      	cmp	r0, #3
 8005a06:	bf9a      	itte	ls
 8005a08:	4b01      	ldrls	r3, [pc, #4]	; (8005a10 <USBD_LL_OpenEP+0x1c>)
 8005a0a:	5c18      	ldrbls	r0, [r3, r0]
 8005a0c:	2002      	movhi	r0, #2
}
 8005a0e:	bd10      	pop	{r4, pc}
 8005a10:	08006d58 	.word	0x08006d58

08005a14 <USBD_LL_CloseEP>:
{
 8005a14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005a16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a1a:	f7fb fcc1 	bl	80013a0 <HAL_PCD_EP_Close>
 8005a1e:	2803      	cmp	r0, #3
 8005a20:	bf9a      	itte	ls
 8005a22:	4b02      	ldrls	r3, [pc, #8]	; (8005a2c <USBD_LL_CloseEP+0x18>)
 8005a24:	5c18      	ldrbls	r0, [r3, r0]
 8005a26:	2002      	movhi	r0, #2
}
 8005a28:	bd08      	pop	{r3, pc}
 8005a2a:	bf00      	nop
 8005a2c:	08006d58 	.word	0x08006d58

08005a30 <USBD_LL_StallEP>:
{
 8005a30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005a32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a36:	f7fb ff65 	bl	8001904 <HAL_PCD_EP_SetStall>
 8005a3a:	2803      	cmp	r0, #3
 8005a3c:	bf9a      	itte	ls
 8005a3e:	4b02      	ldrls	r3, [pc, #8]	; (8005a48 <USBD_LL_StallEP+0x18>)
 8005a40:	5c18      	ldrbls	r0, [r3, r0]
 8005a42:	2002      	movhi	r0, #2
}
 8005a44:	bd08      	pop	{r3, pc}
 8005a46:	bf00      	nop
 8005a48:	08006d58 	.word	0x08006d58

08005a4c <USBD_LL_ClearStallEP>:
{
 8005a4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005a4e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a52:	f7fb ff90 	bl	8001976 <HAL_PCD_EP_ClrStall>
 8005a56:	2803      	cmp	r0, #3
 8005a58:	bf9a      	itte	ls
 8005a5a:	4b02      	ldrls	r3, [pc, #8]	; (8005a64 <USBD_LL_ClearStallEP+0x18>)
 8005a5c:	5c18      	ldrbls	r0, [r3, r0]
 8005a5e:	2002      	movhi	r0, #2
}
 8005a60:	bd08      	pop	{r3, pc}
 8005a62:	bf00      	nop
 8005a64:	08006d58 	.word	0x08006d58

08005a68 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8005a68:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005a6a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005a6e:	bf45      	ittet	mi
 8005a70:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8005a74:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005a78:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005a7c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005a80:	bf58      	it	pl
 8005a82:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
}
 8005a86:	4770      	bx	lr

08005a88 <USBD_LL_SetUSBAddress>:
{
 8005a88:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a8a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a8e:	f7fb fc3e 	bl	800130e <HAL_PCD_SetAddress>
 8005a92:	2803      	cmp	r0, #3
 8005a94:	bf9a      	itte	ls
 8005a96:	4b02      	ldrls	r3, [pc, #8]	; (8005aa0 <USBD_LL_SetUSBAddress+0x18>)
 8005a98:	5c18      	ldrbls	r0, [r3, r0]
 8005a9a:	2002      	movhi	r0, #2
}
 8005a9c:	bd08      	pop	{r3, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08006d58 	.word	0x08006d58

08005aa4 <USBD_LL_Transmit>:
{
 8005aa4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005aa6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005aaa:	f7fb fcc4 	bl	8001436 <HAL_PCD_EP_Transmit>
 8005aae:	2803      	cmp	r0, #3
 8005ab0:	bf9a      	itte	ls
 8005ab2:	4b02      	ldrls	r3, [pc, #8]	; (8005abc <USBD_LL_Transmit+0x18>)
 8005ab4:	5c18      	ldrbls	r0, [r3, r0]
 8005ab6:	2002      	movhi	r0, #2
}
 8005ab8:	bd08      	pop	{r3, pc}
 8005aba:	bf00      	nop
 8005abc:	08006d58 	.word	0x08006d58

08005ac0 <USBD_LL_PrepareReceive>:
{
 8005ac0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005ac2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ac6:	f7fb fc96 	bl	80013f6 <HAL_PCD_EP_Receive>
 8005aca:	2803      	cmp	r0, #3
 8005acc:	bf9a      	itte	ls
 8005ace:	4b02      	ldrls	r3, [pc, #8]	; (8005ad8 <USBD_LL_PrepareReceive+0x18>)
 8005ad0:	5c18      	ldrbls	r0, [r3, r0]
 8005ad2:	2002      	movhi	r0, #2
}
 8005ad4:	bd08      	pop	{r3, pc}
 8005ad6:	bf00      	nop
 8005ad8:	08006d58 	.word	0x08006d58

08005adc <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005adc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005ae0:	f7fb bca2 	b.w	8001428 <HAL_PCD_EP_GetRxCount>

08005ae4 <HAL_PCDEx_LPM_Callback>:
{
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4604      	mov	r4, r0
  switch (msg)
 8005ae8:	b111      	cbz	r1, 8005af0 <HAL_PCDEx_LPM_Callback+0xc>
 8005aea:	2901      	cmp	r1, #1
 8005aec:	d00f      	beq.n	8005b0e <HAL_PCDEx_LPM_Callback+0x2a>
 8005aee:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8005af0:	6983      	ldr	r3, [r0, #24]
 8005af2:	b133      	cbz	r3, 8005b02 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8005af4:	f7ff fa88 	bl	8005008 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005af8:	4a0b      	ldr	r2, [pc, #44]	; (8005b28 <HAL_PCDEx_LPM_Callback+0x44>)
 8005afa:	6913      	ldr	r3, [r2, #16]
 8005afc:	f023 0306 	bic.w	r3, r3, #6
 8005b00:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8005b02:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 8005b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8005b0a:	f7fe bf6b 	b.w	80049e4 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8005b0e:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005b12:	f7fe ff5e 	bl	80049d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8005b16:	69a3      	ldr	r3, [r4, #24]
 8005b18:	b123      	cbz	r3, 8005b24 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005b1a:	4a03      	ldr	r2, [pc, #12]	; (8005b28 <HAL_PCDEx_LPM_Callback+0x44>)
 8005b1c:	6913      	ldr	r3, [r2, #16]
 8005b1e:	f043 0306 	orr.w	r3, r3, #6
 8005b22:	6113      	str	r3, [r2, #16]
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	bf00      	nop
 8005b28:	e000ed00 	.word	0xe000ed00

08005b2c <USBD_static_malloc>:
}
 8005b2c:	4800      	ldr	r0, [pc, #0]	; (8005b30 <USBD_static_malloc+0x4>)
 8005b2e:	4770      	bx	lr
 8005b30:	2000020c 	.word	0x2000020c

08005b34 <USBD_static_free>:
{
 8005b34:	4770      	bx	lr
	...

08005b38 <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8005b38:	2312      	movs	r3, #18
 8005b3a:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8005b3c:	4800      	ldr	r0, [pc, #0]	; (8005b40 <USBD_CDC_DeviceDescriptor+0x8>)
 8005b3e:	4770      	bx	lr
 8005b40:	20000150 	.word	0x20000150

08005b44 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005b44:	2304      	movs	r3, #4
 8005b46:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005b48:	4800      	ldr	r0, [pc, #0]	; (8005b4c <USBD_CDC_LangIDStrDescriptor+0x8>)
 8005b4a:	4770      	bx	lr
 8005b4c:	20000164 	.word	0x20000164

08005b50 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005b50:	2300      	movs	r3, #0
{
 8005b52:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005b54:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8005b56:	b2dc      	uxtb	r4, r3
 8005b58:	42a2      	cmp	r2, r4
 8005b5a:	d800      	bhi.n	8005b5e <IntToUnicode+0xe>
  }
}
 8005b5c:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8005b5e:	0f04      	lsrs	r4, r0, #28
 8005b60:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8005b62:	bf94      	ite	ls
 8005b64:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005b66:	3437      	addhi	r4, #55	; 0x37
 8005b68:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005b6c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8005b70:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8005b72:	7065      	strb	r5, [r4, #1]
 8005b74:	3301      	adds	r3, #1
 8005b76:	e7ee      	b.n	8005b56 <IntToUnicode+0x6>

08005b78 <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005b78:	231a      	movs	r3, #26
{
 8005b7a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005b7c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <USBD_CDC_SerialStrDescriptor+0x2c>)
 8005b80:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005b82:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8005b84:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8005b86:	18c0      	adds	r0, r0, r3
 8005b88:	d00a      	beq.n	8005ba0 <USBD_CDC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <USBD_CDC_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005b8c:	4907      	ldr	r1, [pc, #28]	; (8005bac <USBD_CDC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005b8e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005b90:	2208      	movs	r2, #8
 8005b92:	f7ff ffdd 	bl	8005b50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005b96:	2204      	movs	r2, #4
 8005b98:	4905      	ldr	r1, [pc, #20]	; (8005bb0 <USBD_CDC_SerialStrDescriptor+0x38>)
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f7ff ffd8 	bl	8005b50 <IntToUnicode>
}
 8005ba0:	4804      	ldr	r0, [pc, #16]	; (8005bb4 <USBD_CDC_SerialStrDescriptor+0x3c>)
 8005ba2:	bd10      	pop	{r4, pc}
 8005ba4:	1fff7590 	.word	0x1fff7590
 8005ba8:	1fff7594 	.word	0x1fff7594
 8005bac:	2000016a 	.word	0x2000016a
 8005bb0:	2000017a 	.word	0x2000017a
 8005bb4:	20000168 	.word	0x20000168

08005bb8 <USBD_CDC_ManufacturerStrDescriptor>:
{
 8005bb8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005bba:	4c04      	ldr	r4, [pc, #16]	; (8005bcc <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8005bbc:	4804      	ldr	r0, [pc, #16]	; (8005bd0 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	f7ff f929 	bl	8004e18 <USBD_GetString>
}
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	bf00      	nop
 8005bcc:	20001cb4 	.word	0x20001cb4
 8005bd0:	08006d75 	.word	0x08006d75

08005bd4 <USBD_CDC_ProductStrDescriptor>:
{
 8005bd4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005bd6:	4c04      	ldr	r4, [pc, #16]	; (8005be8 <USBD_CDC_ProductStrDescriptor+0x14>)
 8005bd8:	4804      	ldr	r0, [pc, #16]	; (8005bec <USBD_CDC_ProductStrDescriptor+0x18>)
 8005bda:	460a      	mov	r2, r1
 8005bdc:	4621      	mov	r1, r4
 8005bde:	f7ff f91b 	bl	8004e18 <USBD_GetString>
}
 8005be2:	4620      	mov	r0, r4
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	bf00      	nop
 8005be8:	20001cb4 	.word	0x20001cb4
 8005bec:	08006d88 	.word	0x08006d88

08005bf0 <USBD_CDC_ConfigStrDescriptor>:
{
 8005bf0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005bf2:	4c04      	ldr	r4, [pc, #16]	; (8005c04 <USBD_CDC_ConfigStrDescriptor+0x14>)
 8005bf4:	4804      	ldr	r0, [pc, #16]	; (8005c08 <USBD_CDC_ConfigStrDescriptor+0x18>)
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	f7ff f90d 	bl	8004e18 <USBD_GetString>
}
 8005bfe:	4620      	mov	r0, r4
 8005c00:	bd10      	pop	{r4, pc}
 8005c02:	bf00      	nop
 8005c04:	20001cb4 	.word	0x20001cb4
 8005c08:	08006d5c 	.word	0x08006d5c

08005c0c <USBD_CDC_InterfaceStrDescriptor>:
{
 8005c0c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005c0e:	4c04      	ldr	r4, [pc, #16]	; (8005c20 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8005c10:	4804      	ldr	r0, [pc, #16]	; (8005c24 <USBD_CDC_InterfaceStrDescriptor+0x18>)
 8005c12:	460a      	mov	r2, r1
 8005c14:	4621      	mov	r1, r4
 8005c16:	f7ff f8ff 	bl	8004e18 <USBD_GetString>
}
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	bf00      	nop
 8005c20:	20001cb4 	.word	0x20001cb4
 8005c24:	08006d67 	.word	0x08006d67

08005c28 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8005c28:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c2a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c2c:	3304      	adds	r3, #4

08005c2e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c2e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c30:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005c32:	d3f9      	bcc.n	8005c28 <CopyDataInit>
  bx lr
 8005c34:	4770      	bx	lr

08005c36 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8005c36:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8005c38:	3004      	adds	r0, #4

08005c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8005c3a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005c3c:	d3fb      	bcc.n	8005c36 <FillZerobss>
  bx lr
 8005c3e:	4770      	bx	lr

08005c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c40:	480c      	ldr	r0, [pc, #48]	; (8005c74 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8005c42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005c44:	480c      	ldr	r0, [pc, #48]	; (8005c78 <LoopForever+0x8>)
 8005c46:	490d      	ldr	r1, [pc, #52]	; (8005c7c <LoopForever+0xc>)
 8005c48:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <LoopForever+0x10>)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f7ff ffef 	bl	8005c2e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005c50:	480c      	ldr	r0, [pc, #48]	; (8005c84 <LoopForever+0x14>)
 8005c52:	490d      	ldr	r1, [pc, #52]	; (8005c88 <LoopForever+0x18>)
 8005c54:	2300      	movs	r3, #0
 8005c56:	f7ff fff0 	bl	8005c3a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005c5a:	480c      	ldr	r0, [pc, #48]	; (8005c8c <LoopForever+0x1c>)
 8005c5c:	490c      	ldr	r1, [pc, #48]	; (8005c90 <LoopForever+0x20>)
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f7ff ffeb 	bl	8005c3a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005c64:	f7ff fd12 	bl	800568c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005c68:	f000 f81c 	bl	8005ca4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005c6c:	f7ff fa44 	bl	80050f8 <main>

08005c70 <LoopForever>:

LoopForever:
  b LoopForever
 8005c70:	e7fe      	b.n	8005c70 <LoopForever>
 8005c72:	0000      	.short	0x0000
  ldr   r0, =_estack
 8005c74:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8005c78:	20000004 	.word	0x20000004
 8005c7c:	200001e8 	.word	0x200001e8
 8005c80:	08006e48 	.word	0x08006e48
  INIT_BSS _sbss, _ebss
 8005c84:	200001e8 	.word	0x200001e8
 8005c88:	20001eb8 	.word	0x20001eb8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005c8c:	20030000 	.word	0x20030000
 8005c90:	20030000 	.word	0x20030000

08005c94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c94:	e7fe      	b.n	8005c94 <ADC1_IRQHandler>
	...

08005c98 <__errno>:
 8005c98:	4b01      	ldr	r3, [pc, #4]	; (8005ca0 <__errno+0x8>)
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000184 	.word	0x20000184

08005ca4 <__libc_init_array>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4e0d      	ldr	r6, [pc, #52]	; (8005cdc <__libc_init_array+0x38>)
 8005ca8:	4c0d      	ldr	r4, [pc, #52]	; (8005ce0 <__libc_init_array+0x3c>)
 8005caa:	1ba4      	subs	r4, r4, r6
 8005cac:	10a4      	asrs	r4, r4, #2
 8005cae:	2500      	movs	r5, #0
 8005cb0:	42a5      	cmp	r5, r4
 8005cb2:	d109      	bne.n	8005cc8 <__libc_init_array+0x24>
 8005cb4:	4e0b      	ldr	r6, [pc, #44]	; (8005ce4 <__libc_init_array+0x40>)
 8005cb6:	4c0c      	ldr	r4, [pc, #48]	; (8005ce8 <__libc_init_array+0x44>)
 8005cb8:	f000 ff7c 	bl	8006bb4 <_init>
 8005cbc:	1ba4      	subs	r4, r4, r6
 8005cbe:	10a4      	asrs	r4, r4, #2
 8005cc0:	2500      	movs	r5, #0
 8005cc2:	42a5      	cmp	r5, r4
 8005cc4:	d105      	bne.n	8005cd2 <__libc_init_array+0x2e>
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ccc:	4798      	blx	r3
 8005cce:	3501      	adds	r5, #1
 8005cd0:	e7ee      	b.n	8005cb0 <__libc_init_array+0xc>
 8005cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cd6:	4798      	blx	r3
 8005cd8:	3501      	adds	r5, #1
 8005cda:	e7f2      	b.n	8005cc2 <__libc_init_array+0x1e>
 8005cdc:	08006e40 	.word	0x08006e40
 8005ce0:	08006e40 	.word	0x08006e40
 8005ce4:	08006e40 	.word	0x08006e40
 8005ce8:	08006e44 	.word	0x08006e44

08005cec <memset>:
 8005cec:	4402      	add	r2, r0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d100      	bne.n	8005cf6 <memset+0xa>
 8005cf4:	4770      	bx	lr
 8005cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfa:	e7f9      	b.n	8005cf0 <memset+0x4>

08005cfc <iprintf>:
 8005cfc:	b40f      	push	{r0, r1, r2, r3}
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <iprintf+0x2c>)
 8005d00:	b513      	push	{r0, r1, r4, lr}
 8005d02:	681c      	ldr	r4, [r3, #0]
 8005d04:	b124      	cbz	r4, 8005d10 <iprintf+0x14>
 8005d06:	69a3      	ldr	r3, [r4, #24]
 8005d08:	b913      	cbnz	r3, 8005d10 <iprintf+0x14>
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f000 fa24 	bl	8006158 <__sinit>
 8005d10:	ab05      	add	r3, sp, #20
 8005d12:	9a04      	ldr	r2, [sp, #16]
 8005d14:	68a1      	ldr	r1, [r4, #8]
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fbe1 	bl	80064e0 <_vfiprintf_r>
 8005d1e:	b002      	add	sp, #8
 8005d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	20000184 	.word	0x20000184

08005d2c <_puts_r>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	460e      	mov	r6, r1
 8005d30:	4605      	mov	r5, r0
 8005d32:	b118      	cbz	r0, 8005d3c <_puts_r+0x10>
 8005d34:	6983      	ldr	r3, [r0, #24]
 8005d36:	b90b      	cbnz	r3, 8005d3c <_puts_r+0x10>
 8005d38:	f000 fa0e 	bl	8006158 <__sinit>
 8005d3c:	69ab      	ldr	r3, [r5, #24]
 8005d3e:	68ac      	ldr	r4, [r5, #8]
 8005d40:	b913      	cbnz	r3, 8005d48 <_puts_r+0x1c>
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 fa08 	bl	8006158 <__sinit>
 8005d48:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <_puts_r+0xac>)
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	d117      	bne.n	8005d7e <_puts_r+0x52>
 8005d4e:	686c      	ldr	r4, [r5, #4]
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	071b      	lsls	r3, r3, #28
 8005d54:	d51d      	bpl.n	8005d92 <_puts_r+0x66>
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	b1db      	cbz	r3, 8005d92 <_puts_r+0x66>
 8005d5a:	3e01      	subs	r6, #1
 8005d5c:	68a3      	ldr	r3, [r4, #8]
 8005d5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d62:	3b01      	subs	r3, #1
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	b9e9      	cbnz	r1, 8005da4 <_puts_r+0x78>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	da2e      	bge.n	8005dca <_puts_r+0x9e>
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	210a      	movs	r1, #10
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 f83f 	bl	8005df4 <__swbuf_r>
 8005d76:	3001      	adds	r0, #1
 8005d78:	d011      	beq.n	8005d9e <_puts_r+0x72>
 8005d7a:	200a      	movs	r0, #10
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	4b17      	ldr	r3, [pc, #92]	; (8005ddc <_puts_r+0xb0>)
 8005d80:	429c      	cmp	r4, r3
 8005d82:	d101      	bne.n	8005d88 <_puts_r+0x5c>
 8005d84:	68ac      	ldr	r4, [r5, #8]
 8005d86:	e7e3      	b.n	8005d50 <_puts_r+0x24>
 8005d88:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <_puts_r+0xb4>)
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	bf08      	it	eq
 8005d8e:	68ec      	ldreq	r4, [r5, #12]
 8005d90:	e7de      	b.n	8005d50 <_puts_r+0x24>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f87f 	bl	8005e98 <__swsetup_r>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d0dd      	beq.n	8005d5a <_puts_r+0x2e>
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	da04      	bge.n	8005db2 <_puts_r+0x86>
 8005da8:	69a2      	ldr	r2, [r4, #24]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	db06      	blt.n	8005dbc <_puts_r+0x90>
 8005dae:	290a      	cmp	r1, #10
 8005db0:	d004      	beq.n	8005dbc <_puts_r+0x90>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	6022      	str	r2, [r4, #0]
 8005db8:	7019      	strb	r1, [r3, #0]
 8005dba:	e7cf      	b.n	8005d5c <_puts_r+0x30>
 8005dbc:	4622      	mov	r2, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 f818 	bl	8005df4 <__swbuf_r>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d1c9      	bne.n	8005d5c <_puts_r+0x30>
 8005dc8:	e7e9      	b.n	8005d9e <_puts_r+0x72>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	200a      	movs	r0, #10
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	6022      	str	r2, [r4, #0]
 8005dd2:	7018      	strb	r0, [r3, #0]
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	bf00      	nop
 8005dd8:	08006dc4 	.word	0x08006dc4
 8005ddc:	08006de4 	.word	0x08006de4
 8005de0:	08006da4 	.word	0x08006da4

08005de4 <puts>:
 8005de4:	4b02      	ldr	r3, [pc, #8]	; (8005df0 <puts+0xc>)
 8005de6:	4601      	mov	r1, r0
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	f7ff bf9f 	b.w	8005d2c <_puts_r>
 8005dee:	bf00      	nop
 8005df0:	20000184 	.word	0x20000184

08005df4 <__swbuf_r>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	460e      	mov	r6, r1
 8005df8:	4614      	mov	r4, r2
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	b118      	cbz	r0, 8005e06 <__swbuf_r+0x12>
 8005dfe:	6983      	ldr	r3, [r0, #24]
 8005e00:	b90b      	cbnz	r3, 8005e06 <__swbuf_r+0x12>
 8005e02:	f000 f9a9 	bl	8006158 <__sinit>
 8005e06:	4b21      	ldr	r3, [pc, #132]	; (8005e8c <__swbuf_r+0x98>)
 8005e08:	429c      	cmp	r4, r3
 8005e0a:	d12a      	bne.n	8005e62 <__swbuf_r+0x6e>
 8005e0c:	686c      	ldr	r4, [r5, #4]
 8005e0e:	69a3      	ldr	r3, [r4, #24]
 8005e10:	60a3      	str	r3, [r4, #8]
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	071a      	lsls	r2, r3, #28
 8005e16:	d52e      	bpl.n	8005e76 <__swbuf_r+0x82>
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	b363      	cbz	r3, 8005e76 <__swbuf_r+0x82>
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	6820      	ldr	r0, [r4, #0]
 8005e20:	1ac0      	subs	r0, r0, r3
 8005e22:	6963      	ldr	r3, [r4, #20]
 8005e24:	b2f6      	uxtb	r6, r6
 8005e26:	4298      	cmp	r0, r3
 8005e28:	4637      	mov	r7, r6
 8005e2a:	db04      	blt.n	8005e36 <__swbuf_r+0x42>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 f928 	bl	8006084 <_fflush_r>
 8005e34:	bb28      	cbnz	r0, 8005e82 <__swbuf_r+0x8e>
 8005e36:	68a3      	ldr	r3, [r4, #8]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	60a3      	str	r3, [r4, #8]
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	6022      	str	r2, [r4, #0]
 8005e42:	701e      	strb	r6, [r3, #0]
 8005e44:	6963      	ldr	r3, [r4, #20]
 8005e46:	3001      	adds	r0, #1
 8005e48:	4298      	cmp	r0, r3
 8005e4a:	d004      	beq.n	8005e56 <__swbuf_r+0x62>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	07db      	lsls	r3, r3, #31
 8005e50:	d519      	bpl.n	8005e86 <__swbuf_r+0x92>
 8005e52:	2e0a      	cmp	r6, #10
 8005e54:	d117      	bne.n	8005e86 <__swbuf_r+0x92>
 8005e56:	4621      	mov	r1, r4
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 f913 	bl	8006084 <_fflush_r>
 8005e5e:	b190      	cbz	r0, 8005e86 <__swbuf_r+0x92>
 8005e60:	e00f      	b.n	8005e82 <__swbuf_r+0x8e>
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <__swbuf_r+0x9c>)
 8005e64:	429c      	cmp	r4, r3
 8005e66:	d101      	bne.n	8005e6c <__swbuf_r+0x78>
 8005e68:	68ac      	ldr	r4, [r5, #8]
 8005e6a:	e7d0      	b.n	8005e0e <__swbuf_r+0x1a>
 8005e6c:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <__swbuf_r+0xa0>)
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	bf08      	it	eq
 8005e72:	68ec      	ldreq	r4, [r5, #12]
 8005e74:	e7cb      	b.n	8005e0e <__swbuf_r+0x1a>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 f80d 	bl	8005e98 <__swsetup_r>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d0cc      	beq.n	8005e1c <__swbuf_r+0x28>
 8005e82:	f04f 37ff 	mov.w	r7, #4294967295
 8005e86:	4638      	mov	r0, r7
 8005e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08006dc4 	.word	0x08006dc4
 8005e90:	08006de4 	.word	0x08006de4
 8005e94:	08006da4 	.word	0x08006da4

08005e98 <__swsetup_r>:
 8005e98:	4b32      	ldr	r3, [pc, #200]	; (8005f64 <__swsetup_r+0xcc>)
 8005e9a:	b570      	push	{r4, r5, r6, lr}
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	b125      	cbz	r5, 8005eae <__swsetup_r+0x16>
 8005ea4:	69ab      	ldr	r3, [r5, #24]
 8005ea6:	b913      	cbnz	r3, 8005eae <__swsetup_r+0x16>
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f000 f955 	bl	8006158 <__sinit>
 8005eae:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <__swsetup_r+0xd0>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d10f      	bne.n	8005ed4 <__swsetup_r+0x3c>
 8005eb4:	686c      	ldr	r4, [r5, #4]
 8005eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	0715      	lsls	r5, r2, #28
 8005ebe:	d42c      	bmi.n	8005f1a <__swsetup_r+0x82>
 8005ec0:	06d0      	lsls	r0, r2, #27
 8005ec2:	d411      	bmi.n	8005ee8 <__swsetup_r+0x50>
 8005ec4:	2209      	movs	r2, #9
 8005ec6:	6032      	str	r2, [r6, #0]
 8005ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <__swsetup_r+0xd4>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d101      	bne.n	8005ede <__swsetup_r+0x46>
 8005eda:	68ac      	ldr	r4, [r5, #8]
 8005edc:	e7eb      	b.n	8005eb6 <__swsetup_r+0x1e>
 8005ede:	4b24      	ldr	r3, [pc, #144]	; (8005f70 <__swsetup_r+0xd8>)
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	bf08      	it	eq
 8005ee4:	68ec      	ldreq	r4, [r5, #12]
 8005ee6:	e7e6      	b.n	8005eb6 <__swsetup_r+0x1e>
 8005ee8:	0751      	lsls	r1, r2, #29
 8005eea:	d512      	bpl.n	8005f12 <__swsetup_r+0x7a>
 8005eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eee:	b141      	cbz	r1, 8005f02 <__swsetup_r+0x6a>
 8005ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	d002      	beq.n	8005efe <__swsetup_r+0x66>
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f000 fa1b 	bl	8006334 <_free_r>
 8005efe:	2300      	movs	r3, #0
 8005f00:	6363      	str	r3, [r4, #52]	; 0x34
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6063      	str	r3, [r4, #4]
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	f043 0308 	orr.w	r3, r3, #8
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	b94b      	cbnz	r3, 8005f32 <__swsetup_r+0x9a>
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f28:	d003      	beq.n	8005f32 <__swsetup_r+0x9a>
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f000 f9c1 	bl	80062b4 <__smakebuf_r>
 8005f32:	89a2      	ldrh	r2, [r4, #12]
 8005f34:	f012 0301 	ands.w	r3, r2, #1
 8005f38:	d00c      	beq.n	8005f54 <__swsetup_r+0xbc>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60a3      	str	r3, [r4, #8]
 8005f3e:	6963      	ldr	r3, [r4, #20]
 8005f40:	425b      	negs	r3, r3
 8005f42:	61a3      	str	r3, [r4, #24]
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	b953      	cbnz	r3, 8005f5e <__swsetup_r+0xc6>
 8005f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005f50:	d1ba      	bne.n	8005ec8 <__swsetup_r+0x30>
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	0792      	lsls	r2, r2, #30
 8005f56:	bf58      	it	pl
 8005f58:	6963      	ldrpl	r3, [r4, #20]
 8005f5a:	60a3      	str	r3, [r4, #8]
 8005f5c:	e7f2      	b.n	8005f44 <__swsetup_r+0xac>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e7f7      	b.n	8005f52 <__swsetup_r+0xba>
 8005f62:	bf00      	nop
 8005f64:	20000184 	.word	0x20000184
 8005f68:	08006dc4 	.word	0x08006dc4
 8005f6c:	08006de4 	.word	0x08006de4
 8005f70:	08006da4 	.word	0x08006da4

08005f74 <__sflush_r>:
 8005f74:	898a      	ldrh	r2, [r1, #12]
 8005f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	0710      	lsls	r0, r2, #28
 8005f7e:	460c      	mov	r4, r1
 8005f80:	d45a      	bmi.n	8006038 <__sflush_r+0xc4>
 8005f82:	684b      	ldr	r3, [r1, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dc05      	bgt.n	8005f94 <__sflush_r+0x20>
 8005f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dc02      	bgt.n	8005f94 <__sflush_r+0x20>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	d0f9      	beq.n	8005f8e <__sflush_r+0x1a>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fa0:	682f      	ldr	r7, [r5, #0]
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	d033      	beq.n	800600e <__sflush_r+0x9a>
 8005fa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	075a      	lsls	r2, r3, #29
 8005fac:	d505      	bpl.n	8005fba <__sflush_r+0x46>
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	1ac0      	subs	r0, r0, r3
 8005fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fb4:	b10b      	cbz	r3, 8005fba <__sflush_r+0x46>
 8005fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fb8:	1ac0      	subs	r0, r0, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fc0:	6a21      	ldr	r1, [r4, #32]
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b0      	blx	r6
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	d106      	bne.n	8005fda <__sflush_r+0x66>
 8005fcc:	6829      	ldr	r1, [r5, #0]
 8005fce:	291d      	cmp	r1, #29
 8005fd0:	d84b      	bhi.n	800606a <__sflush_r+0xf6>
 8005fd2:	4a2b      	ldr	r2, [pc, #172]	; (8006080 <__sflush_r+0x10c>)
 8005fd4:	40ca      	lsrs	r2, r1
 8005fd6:	07d6      	lsls	r6, r2, #31
 8005fd8:	d547      	bpl.n	800606a <__sflush_r+0xf6>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	6062      	str	r2, [r4, #4]
 8005fde:	04d9      	lsls	r1, r3, #19
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	6022      	str	r2, [r4, #0]
 8005fe4:	d504      	bpl.n	8005ff0 <__sflush_r+0x7c>
 8005fe6:	1c42      	adds	r2, r0, #1
 8005fe8:	d101      	bne.n	8005fee <__sflush_r+0x7a>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b903      	cbnz	r3, 8005ff0 <__sflush_r+0x7c>
 8005fee:	6560      	str	r0, [r4, #84]	; 0x54
 8005ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff2:	602f      	str	r7, [r5, #0]
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	d0ca      	beq.n	8005f8e <__sflush_r+0x1a>
 8005ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	d002      	beq.n	8006006 <__sflush_r+0x92>
 8006000:	4628      	mov	r0, r5
 8006002:	f000 f997 	bl	8006334 <_free_r>
 8006006:	2000      	movs	r0, #0
 8006008:	6360      	str	r0, [r4, #52]	; 0x34
 800600a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600e:	6a21      	ldr	r1, [r4, #32]
 8006010:	2301      	movs	r3, #1
 8006012:	4628      	mov	r0, r5
 8006014:	47b0      	blx	r6
 8006016:	1c41      	adds	r1, r0, #1
 8006018:	d1c6      	bne.n	8005fa8 <__sflush_r+0x34>
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0c3      	beq.n	8005fa8 <__sflush_r+0x34>
 8006020:	2b1d      	cmp	r3, #29
 8006022:	d001      	beq.n	8006028 <__sflush_r+0xb4>
 8006024:	2b16      	cmp	r3, #22
 8006026:	d101      	bne.n	800602c <__sflush_r+0xb8>
 8006028:	602f      	str	r7, [r5, #0]
 800602a:	e7b0      	b.n	8005f8e <__sflush_r+0x1a>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006038:	690f      	ldr	r7, [r1, #16]
 800603a:	2f00      	cmp	r7, #0
 800603c:	d0a7      	beq.n	8005f8e <__sflush_r+0x1a>
 800603e:	0793      	lsls	r3, r2, #30
 8006040:	680e      	ldr	r6, [r1, #0]
 8006042:	bf08      	it	eq
 8006044:	694b      	ldreq	r3, [r1, #20]
 8006046:	600f      	str	r7, [r1, #0]
 8006048:	bf18      	it	ne
 800604a:	2300      	movne	r3, #0
 800604c:	eba6 0807 	sub.w	r8, r6, r7
 8006050:	608b      	str	r3, [r1, #8]
 8006052:	f1b8 0f00 	cmp.w	r8, #0
 8006056:	dd9a      	ble.n	8005f8e <__sflush_r+0x1a>
 8006058:	4643      	mov	r3, r8
 800605a:	463a      	mov	r2, r7
 800605c:	6a21      	ldr	r1, [r4, #32]
 800605e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006060:	4628      	mov	r0, r5
 8006062:	47b0      	blx	r6
 8006064:	2800      	cmp	r0, #0
 8006066:	dc07      	bgt.n	8006078 <__sflush_r+0x104>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006078:	4407      	add	r7, r0
 800607a:	eba8 0800 	sub.w	r8, r8, r0
 800607e:	e7e8      	b.n	8006052 <__sflush_r+0xde>
 8006080:	20400001 	.word	0x20400001

08006084 <_fflush_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	690b      	ldr	r3, [r1, #16]
 8006088:	4605      	mov	r5, r0
 800608a:	460c      	mov	r4, r1
 800608c:	b1db      	cbz	r3, 80060c6 <_fflush_r+0x42>
 800608e:	b118      	cbz	r0, 8006098 <_fflush_r+0x14>
 8006090:	6983      	ldr	r3, [r0, #24]
 8006092:	b90b      	cbnz	r3, 8006098 <_fflush_r+0x14>
 8006094:	f000 f860 	bl	8006158 <__sinit>
 8006098:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <_fflush_r+0x48>)
 800609a:	429c      	cmp	r4, r3
 800609c:	d109      	bne.n	80060b2 <_fflush_r+0x2e>
 800609e:	686c      	ldr	r4, [r5, #4]
 80060a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a4:	b17b      	cbz	r3, 80060c6 <_fflush_r+0x42>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ae:	f7ff bf61 	b.w	8005f74 <__sflush_r>
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <_fflush_r+0x4c>)
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d101      	bne.n	80060bc <_fflush_r+0x38>
 80060b8:	68ac      	ldr	r4, [r5, #8]
 80060ba:	e7f1      	b.n	80060a0 <_fflush_r+0x1c>
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <_fflush_r+0x50>)
 80060be:	429c      	cmp	r4, r3
 80060c0:	bf08      	it	eq
 80060c2:	68ec      	ldreq	r4, [r5, #12]
 80060c4:	e7ec      	b.n	80060a0 <_fflush_r+0x1c>
 80060c6:	2000      	movs	r0, #0
 80060c8:	bd38      	pop	{r3, r4, r5, pc}
 80060ca:	bf00      	nop
 80060cc:	08006dc4 	.word	0x08006dc4
 80060d0:	08006de4 	.word	0x08006de4
 80060d4:	08006da4 	.word	0x08006da4

080060d8 <_cleanup_r>:
 80060d8:	4901      	ldr	r1, [pc, #4]	; (80060e0 <_cleanup_r+0x8>)
 80060da:	f000 b8a9 	b.w	8006230 <_fwalk_reent>
 80060de:	bf00      	nop
 80060e0:	08006085 	.word	0x08006085

080060e4 <std.isra.0>:
 80060e4:	2300      	movs	r3, #0
 80060e6:	b510      	push	{r4, lr}
 80060e8:	4604      	mov	r4, r0
 80060ea:	6003      	str	r3, [r0, #0]
 80060ec:	6043      	str	r3, [r0, #4]
 80060ee:	6083      	str	r3, [r0, #8]
 80060f0:	8181      	strh	r1, [r0, #12]
 80060f2:	6643      	str	r3, [r0, #100]	; 0x64
 80060f4:	81c2      	strh	r2, [r0, #14]
 80060f6:	6103      	str	r3, [r0, #16]
 80060f8:	6143      	str	r3, [r0, #20]
 80060fa:	6183      	str	r3, [r0, #24]
 80060fc:	4619      	mov	r1, r3
 80060fe:	2208      	movs	r2, #8
 8006100:	305c      	adds	r0, #92	; 0x5c
 8006102:	f7ff fdf3 	bl	8005cec <memset>
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <std.isra.0+0x38>)
 8006108:	6263      	str	r3, [r4, #36]	; 0x24
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <std.isra.0+0x3c>)
 800610c:	62a3      	str	r3, [r4, #40]	; 0x28
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <std.isra.0+0x40>)
 8006110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <std.isra.0+0x44>)
 8006114:	6224      	str	r4, [r4, #32]
 8006116:	6323      	str	r3, [r4, #48]	; 0x30
 8006118:	bd10      	pop	{r4, pc}
 800611a:	bf00      	nop
 800611c:	08006a59 	.word	0x08006a59
 8006120:	08006a7b 	.word	0x08006a7b
 8006124:	08006ab3 	.word	0x08006ab3
 8006128:	08006ad7 	.word	0x08006ad7

0800612c <__sfmoreglue>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	1e4a      	subs	r2, r1, #1
 8006130:	2568      	movs	r5, #104	; 0x68
 8006132:	4355      	muls	r5, r2
 8006134:	460e      	mov	r6, r1
 8006136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800613a:	f000 f949 	bl	80063d0 <_malloc_r>
 800613e:	4604      	mov	r4, r0
 8006140:	b140      	cbz	r0, 8006154 <__sfmoreglue+0x28>
 8006142:	2100      	movs	r1, #0
 8006144:	e880 0042 	stmia.w	r0, {r1, r6}
 8006148:	300c      	adds	r0, #12
 800614a:	60a0      	str	r0, [r4, #8]
 800614c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006150:	f7ff fdcc 	bl	8005cec <memset>
 8006154:	4620      	mov	r0, r4
 8006156:	bd70      	pop	{r4, r5, r6, pc}

08006158 <__sinit>:
 8006158:	6983      	ldr	r3, [r0, #24]
 800615a:	b510      	push	{r4, lr}
 800615c:	4604      	mov	r4, r0
 800615e:	bb33      	cbnz	r3, 80061ae <__sinit+0x56>
 8006160:	6483      	str	r3, [r0, #72]	; 0x48
 8006162:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006164:	6503      	str	r3, [r0, #80]	; 0x50
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <__sinit+0x58>)
 8006168:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <__sinit+0x5c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6282      	str	r2, [r0, #40]	; 0x28
 800616e:	4298      	cmp	r0, r3
 8006170:	bf04      	itt	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	6183      	streq	r3, [r0, #24]
 8006176:	f000 f81f 	bl	80061b8 <__sfp>
 800617a:	6060      	str	r0, [r4, #4]
 800617c:	4620      	mov	r0, r4
 800617e:	f000 f81b 	bl	80061b8 <__sfp>
 8006182:	60a0      	str	r0, [r4, #8]
 8006184:	4620      	mov	r0, r4
 8006186:	f000 f817 	bl	80061b8 <__sfp>
 800618a:	2200      	movs	r2, #0
 800618c:	60e0      	str	r0, [r4, #12]
 800618e:	2104      	movs	r1, #4
 8006190:	6860      	ldr	r0, [r4, #4]
 8006192:	f7ff ffa7 	bl	80060e4 <std.isra.0>
 8006196:	2201      	movs	r2, #1
 8006198:	2109      	movs	r1, #9
 800619a:	68a0      	ldr	r0, [r4, #8]
 800619c:	f7ff ffa2 	bl	80060e4 <std.isra.0>
 80061a0:	2202      	movs	r2, #2
 80061a2:	2112      	movs	r1, #18
 80061a4:	68e0      	ldr	r0, [r4, #12]
 80061a6:	f7ff ff9d 	bl	80060e4 <std.isra.0>
 80061aa:	2301      	movs	r3, #1
 80061ac:	61a3      	str	r3, [r4, #24]
 80061ae:	bd10      	pop	{r4, pc}
 80061b0:	08006da0 	.word	0x08006da0
 80061b4:	080060d9 	.word	0x080060d9

080061b8 <__sfp>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	4b1c      	ldr	r3, [pc, #112]	; (800622c <__sfp+0x74>)
 80061bc:	681e      	ldr	r6, [r3, #0]
 80061be:	69b3      	ldr	r3, [r6, #24]
 80061c0:	4607      	mov	r7, r0
 80061c2:	b913      	cbnz	r3, 80061ca <__sfp+0x12>
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff ffc7 	bl	8006158 <__sinit>
 80061ca:	3648      	adds	r6, #72	; 0x48
 80061cc:	68b4      	ldr	r4, [r6, #8]
 80061ce:	6873      	ldr	r3, [r6, #4]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	d503      	bpl.n	80061dc <__sfp+0x24>
 80061d4:	6833      	ldr	r3, [r6, #0]
 80061d6:	b133      	cbz	r3, 80061e6 <__sfp+0x2e>
 80061d8:	6836      	ldr	r6, [r6, #0]
 80061da:	e7f7      	b.n	80061cc <__sfp+0x14>
 80061dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061e0:	b16d      	cbz	r5, 80061fe <__sfp+0x46>
 80061e2:	3468      	adds	r4, #104	; 0x68
 80061e4:	e7f4      	b.n	80061d0 <__sfp+0x18>
 80061e6:	2104      	movs	r1, #4
 80061e8:	4638      	mov	r0, r7
 80061ea:	f7ff ff9f 	bl	800612c <__sfmoreglue>
 80061ee:	6030      	str	r0, [r6, #0]
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d1f1      	bne.n	80061d8 <__sfp+0x20>
 80061f4:	230c      	movs	r3, #12
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4604      	mov	r4, r0
 80061fa:	4620      	mov	r0, r4
 80061fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006202:	81e3      	strh	r3, [r4, #14]
 8006204:	2301      	movs	r3, #1
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	6665      	str	r5, [r4, #100]	; 0x64
 800620a:	6025      	str	r5, [r4, #0]
 800620c:	60a5      	str	r5, [r4, #8]
 800620e:	6065      	str	r5, [r4, #4]
 8006210:	6125      	str	r5, [r4, #16]
 8006212:	6165      	str	r5, [r4, #20]
 8006214:	61a5      	str	r5, [r4, #24]
 8006216:	2208      	movs	r2, #8
 8006218:	4629      	mov	r1, r5
 800621a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800621e:	f7ff fd65 	bl	8005cec <memset>
 8006222:	6365      	str	r5, [r4, #52]	; 0x34
 8006224:	63a5      	str	r5, [r4, #56]	; 0x38
 8006226:	64a5      	str	r5, [r4, #72]	; 0x48
 8006228:	64e5      	str	r5, [r4, #76]	; 0x4c
 800622a:	e7e6      	b.n	80061fa <__sfp+0x42>
 800622c:	08006da0 	.word	0x08006da0

08006230 <_fwalk_reent>:
 8006230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006234:	4680      	mov	r8, r0
 8006236:	4689      	mov	r9, r1
 8006238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800623c:	2600      	movs	r6, #0
 800623e:	b914      	cbnz	r4, 8006246 <_fwalk_reent+0x16>
 8006240:	4630      	mov	r0, r6
 8006242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006246:	68a5      	ldr	r5, [r4, #8]
 8006248:	6867      	ldr	r7, [r4, #4]
 800624a:	3f01      	subs	r7, #1
 800624c:	d501      	bpl.n	8006252 <_fwalk_reent+0x22>
 800624e:	6824      	ldr	r4, [r4, #0]
 8006250:	e7f5      	b.n	800623e <_fwalk_reent+0xe>
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d907      	bls.n	8006268 <_fwalk_reent+0x38>
 8006258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800625c:	3301      	adds	r3, #1
 800625e:	d003      	beq.n	8006268 <_fwalk_reent+0x38>
 8006260:	4629      	mov	r1, r5
 8006262:	4640      	mov	r0, r8
 8006264:	47c8      	blx	r9
 8006266:	4306      	orrs	r6, r0
 8006268:	3568      	adds	r5, #104	; 0x68
 800626a:	e7ee      	b.n	800624a <_fwalk_reent+0x1a>

0800626c <__swhatbuf_r>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	460e      	mov	r6, r1
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	2900      	cmp	r1, #0
 8006276:	b090      	sub	sp, #64	; 0x40
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	da07      	bge.n	800628e <__swhatbuf_r+0x22>
 800627e:	2300      	movs	r3, #0
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	89b3      	ldrh	r3, [r6, #12]
 8006284:	061a      	lsls	r2, r3, #24
 8006286:	d410      	bmi.n	80062aa <__swhatbuf_r+0x3e>
 8006288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800628c:	e00e      	b.n	80062ac <__swhatbuf_r+0x40>
 800628e:	aa01      	add	r2, sp, #4
 8006290:	f000 fc48 	bl	8006b24 <_fstat_r>
 8006294:	2800      	cmp	r0, #0
 8006296:	dbf2      	blt.n	800627e <__swhatbuf_r+0x12>
 8006298:	9a02      	ldr	r2, [sp, #8]
 800629a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800629e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062a2:	425a      	negs	r2, r3
 80062a4:	415a      	adcs	r2, r3
 80062a6:	602a      	str	r2, [r5, #0]
 80062a8:	e7ee      	b.n	8006288 <__swhatbuf_r+0x1c>
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	2000      	movs	r0, #0
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	b010      	add	sp, #64	; 0x40
 80062b2:	bd70      	pop	{r4, r5, r6, pc}

080062b4 <__smakebuf_r>:
 80062b4:	898b      	ldrh	r3, [r1, #12]
 80062b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062b8:	079d      	lsls	r5, r3, #30
 80062ba:	4606      	mov	r6, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	d507      	bpl.n	80062d0 <__smakebuf_r+0x1c>
 80062c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	6123      	str	r3, [r4, #16]
 80062c8:	2301      	movs	r3, #1
 80062ca:	6163      	str	r3, [r4, #20]
 80062cc:	b002      	add	sp, #8
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	ab01      	add	r3, sp, #4
 80062d2:	466a      	mov	r2, sp
 80062d4:	f7ff ffca 	bl	800626c <__swhatbuf_r>
 80062d8:	9900      	ldr	r1, [sp, #0]
 80062da:	4605      	mov	r5, r0
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 f877 	bl	80063d0 <_malloc_r>
 80062e2:	b948      	cbnz	r0, 80062f8 <__smakebuf_r+0x44>
 80062e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e8:	059a      	lsls	r2, r3, #22
 80062ea:	d4ef      	bmi.n	80062cc <__smakebuf_r+0x18>
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	f043 0302 	orr.w	r3, r3, #2
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	e7e3      	b.n	80062c0 <__smakebuf_r+0xc>
 80062f8:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <__smakebuf_r+0x7c>)
 80062fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	6020      	str	r0, [r4, #0]
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	81a3      	strh	r3, [r4, #12]
 8006306:	9b00      	ldr	r3, [sp, #0]
 8006308:	6163      	str	r3, [r4, #20]
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	6120      	str	r0, [r4, #16]
 800630e:	b15b      	cbz	r3, 8006328 <__smakebuf_r+0x74>
 8006310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006314:	4630      	mov	r0, r6
 8006316:	f000 fc17 	bl	8006b48 <_isatty_r>
 800631a:	b128      	cbz	r0, 8006328 <__smakebuf_r+0x74>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	431d      	orrs	r5, r3
 800632c:	81a5      	strh	r5, [r4, #12]
 800632e:	e7cd      	b.n	80062cc <__smakebuf_r+0x18>
 8006330:	080060d9 	.word	0x080060d9

08006334 <_free_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	d045      	beq.n	80063c8 <_free_r+0x94>
 800633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfb8      	it	lt
 8006346:	18e4      	addlt	r4, r4, r3
 8006348:	f000 fc20 	bl	8006b8c <__malloc_lock>
 800634c:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <_free_r+0x98>)
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	4610      	mov	r0, r2
 8006352:	b933      	cbnz	r3, 8006362 <_free_r+0x2e>
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	6014      	str	r4, [r2, #0]
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635e:	f000 bc16 	b.w	8006b8e <__malloc_unlock>
 8006362:	42a3      	cmp	r3, r4
 8006364:	d90c      	bls.n	8006380 <_free_r+0x4c>
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	1862      	adds	r2, r4, r1
 800636a:	4293      	cmp	r3, r2
 800636c:	bf04      	itt	eq
 800636e:	681a      	ldreq	r2, [r3, #0]
 8006370:	685b      	ldreq	r3, [r3, #4]
 8006372:	6063      	str	r3, [r4, #4]
 8006374:	bf04      	itt	eq
 8006376:	1852      	addeq	r2, r2, r1
 8006378:	6022      	streq	r2, [r4, #0]
 800637a:	6004      	str	r4, [r0, #0]
 800637c:	e7ec      	b.n	8006358 <_free_r+0x24>
 800637e:	4613      	mov	r3, r2
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	b10a      	cbz	r2, 8006388 <_free_r+0x54>
 8006384:	42a2      	cmp	r2, r4
 8006386:	d9fa      	bls.n	800637e <_free_r+0x4a>
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	1858      	adds	r0, r3, r1
 800638c:	42a0      	cmp	r0, r4
 800638e:	d10b      	bne.n	80063a8 <_free_r+0x74>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	4401      	add	r1, r0
 8006394:	1858      	adds	r0, r3, r1
 8006396:	4282      	cmp	r2, r0
 8006398:	6019      	str	r1, [r3, #0]
 800639a:	d1dd      	bne.n	8006358 <_free_r+0x24>
 800639c:	6810      	ldr	r0, [r2, #0]
 800639e:	6852      	ldr	r2, [r2, #4]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	4401      	add	r1, r0
 80063a4:	6019      	str	r1, [r3, #0]
 80063a6:	e7d7      	b.n	8006358 <_free_r+0x24>
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x7c>
 80063aa:	230c      	movs	r3, #12
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	e7d3      	b.n	8006358 <_free_r+0x24>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	1821      	adds	r1, r4, r0
 80063b4:	428a      	cmp	r2, r1
 80063b6:	bf04      	itt	eq
 80063b8:	6811      	ldreq	r1, [r2, #0]
 80063ba:	6852      	ldreq	r2, [r2, #4]
 80063bc:	6062      	str	r2, [r4, #4]
 80063be:	bf04      	itt	eq
 80063c0:	1809      	addeq	r1, r1, r0
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	605c      	str	r4, [r3, #4]
 80063c6:	e7c7      	b.n	8006358 <_free_r+0x24>
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
 80063ca:	bf00      	nop
 80063cc:	2000042c 	.word	0x2000042c

080063d0 <_malloc_r>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	1ccd      	adds	r5, r1, #3
 80063d4:	f025 0503 	bic.w	r5, r5, #3
 80063d8:	3508      	adds	r5, #8
 80063da:	2d0c      	cmp	r5, #12
 80063dc:	bf38      	it	cc
 80063de:	250c      	movcc	r5, #12
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	4606      	mov	r6, r0
 80063e4:	db01      	blt.n	80063ea <_malloc_r+0x1a>
 80063e6:	42a9      	cmp	r1, r5
 80063e8:	d903      	bls.n	80063f2 <_malloc_r+0x22>
 80063ea:	230c      	movs	r3, #12
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	2000      	movs	r0, #0
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	f000 fbcb 	bl	8006b8c <__malloc_lock>
 80063f6:	4a23      	ldr	r2, [pc, #140]	; (8006484 <_malloc_r+0xb4>)
 80063f8:	6814      	ldr	r4, [r2, #0]
 80063fa:	4621      	mov	r1, r4
 80063fc:	b991      	cbnz	r1, 8006424 <_malloc_r+0x54>
 80063fe:	4c22      	ldr	r4, [pc, #136]	; (8006488 <_malloc_r+0xb8>)
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b91b      	cbnz	r3, 800640c <_malloc_r+0x3c>
 8006404:	4630      	mov	r0, r6
 8006406:	f000 fb17 	bl	8006a38 <_sbrk_r>
 800640a:	6020      	str	r0, [r4, #0]
 800640c:	4629      	mov	r1, r5
 800640e:	4630      	mov	r0, r6
 8006410:	f000 fb12 	bl	8006a38 <_sbrk_r>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d126      	bne.n	8006466 <_malloc_r+0x96>
 8006418:	230c      	movs	r3, #12
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	4630      	mov	r0, r6
 800641e:	f000 fbb6 	bl	8006b8e <__malloc_unlock>
 8006422:	e7e4      	b.n	80063ee <_malloc_r+0x1e>
 8006424:	680b      	ldr	r3, [r1, #0]
 8006426:	1b5b      	subs	r3, r3, r5
 8006428:	d41a      	bmi.n	8006460 <_malloc_r+0x90>
 800642a:	2b0b      	cmp	r3, #11
 800642c:	d90f      	bls.n	800644e <_malloc_r+0x7e>
 800642e:	600b      	str	r3, [r1, #0]
 8006430:	50cd      	str	r5, [r1, r3]
 8006432:	18cc      	adds	r4, r1, r3
 8006434:	4630      	mov	r0, r6
 8006436:	f000 fbaa 	bl	8006b8e <__malloc_unlock>
 800643a:	f104 000b 	add.w	r0, r4, #11
 800643e:	1d23      	adds	r3, r4, #4
 8006440:	f020 0007 	bic.w	r0, r0, #7
 8006444:	1ac3      	subs	r3, r0, r3
 8006446:	d01b      	beq.n	8006480 <_malloc_r+0xb0>
 8006448:	425a      	negs	r2, r3
 800644a:	50e2      	str	r2, [r4, r3]
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	428c      	cmp	r4, r1
 8006450:	bf0d      	iteet	eq
 8006452:	6863      	ldreq	r3, [r4, #4]
 8006454:	684b      	ldrne	r3, [r1, #4]
 8006456:	6063      	strne	r3, [r4, #4]
 8006458:	6013      	streq	r3, [r2, #0]
 800645a:	bf18      	it	ne
 800645c:	460c      	movne	r4, r1
 800645e:	e7e9      	b.n	8006434 <_malloc_r+0x64>
 8006460:	460c      	mov	r4, r1
 8006462:	6849      	ldr	r1, [r1, #4]
 8006464:	e7ca      	b.n	80063fc <_malloc_r+0x2c>
 8006466:	1cc4      	adds	r4, r0, #3
 8006468:	f024 0403 	bic.w	r4, r4, #3
 800646c:	42a0      	cmp	r0, r4
 800646e:	d005      	beq.n	800647c <_malloc_r+0xac>
 8006470:	1a21      	subs	r1, r4, r0
 8006472:	4630      	mov	r0, r6
 8006474:	f000 fae0 	bl	8006a38 <_sbrk_r>
 8006478:	3001      	adds	r0, #1
 800647a:	d0cd      	beq.n	8006418 <_malloc_r+0x48>
 800647c:	6025      	str	r5, [r4, #0]
 800647e:	e7d9      	b.n	8006434 <_malloc_r+0x64>
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	bf00      	nop
 8006484:	2000042c 	.word	0x2000042c
 8006488:	20000430 	.word	0x20000430

0800648c <__sfputc_r>:
 800648c:	6893      	ldr	r3, [r2, #8]
 800648e:	3b01      	subs	r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	b410      	push	{r4}
 8006494:	6093      	str	r3, [r2, #8]
 8006496:	da09      	bge.n	80064ac <__sfputc_r+0x20>
 8006498:	6994      	ldr	r4, [r2, #24]
 800649a:	42a3      	cmp	r3, r4
 800649c:	db02      	blt.n	80064a4 <__sfputc_r+0x18>
 800649e:	b2cb      	uxtb	r3, r1
 80064a0:	2b0a      	cmp	r3, #10
 80064a2:	d103      	bne.n	80064ac <__sfputc_r+0x20>
 80064a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a8:	f7ff bca4 	b.w	8005df4 <__swbuf_r>
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	1c58      	adds	r0, r3, #1
 80064b0:	6010      	str	r0, [r2, #0]
 80064b2:	7019      	strb	r1, [r3, #0]
 80064b4:	b2c8      	uxtb	r0, r1
 80064b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <__sfputs_r>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	4606      	mov	r6, r0
 80064c0:	460f      	mov	r7, r1
 80064c2:	4614      	mov	r4, r2
 80064c4:	18d5      	adds	r5, r2, r3
 80064c6:	42ac      	cmp	r4, r5
 80064c8:	d101      	bne.n	80064ce <__sfputs_r+0x12>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e007      	b.n	80064de <__sfputs_r+0x22>
 80064ce:	463a      	mov	r2, r7
 80064d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d4:	4630      	mov	r0, r6
 80064d6:	f7ff ffd9 	bl	800648c <__sfputc_r>
 80064da:	1c43      	adds	r3, r0, #1
 80064dc:	d1f3      	bne.n	80064c6 <__sfputs_r+0xa>
 80064de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064e0 <_vfiprintf_r>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	b09d      	sub	sp, #116	; 0x74
 80064e6:	460c      	mov	r4, r1
 80064e8:	4617      	mov	r7, r2
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	4606      	mov	r6, r0
 80064ee:	b118      	cbz	r0, 80064f8 <_vfiprintf_r+0x18>
 80064f0:	6983      	ldr	r3, [r0, #24]
 80064f2:	b90b      	cbnz	r3, 80064f8 <_vfiprintf_r+0x18>
 80064f4:	f7ff fe30 	bl	8006158 <__sinit>
 80064f8:	4b7c      	ldr	r3, [pc, #496]	; (80066ec <_vfiprintf_r+0x20c>)
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d157      	bne.n	80065ae <_vfiprintf_r+0xce>
 80064fe:	6874      	ldr	r4, [r6, #4]
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	0718      	lsls	r0, r3, #28
 8006504:	d55d      	bpl.n	80065c2 <_vfiprintf_r+0xe2>
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05a      	beq.n	80065c2 <_vfiprintf_r+0xe2>
 800650c:	2300      	movs	r3, #0
 800650e:	9309      	str	r3, [sp, #36]	; 0x24
 8006510:	2320      	movs	r3, #32
 8006512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006516:	2330      	movs	r3, #48	; 0x30
 8006518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800651c:	f04f 0b01 	mov.w	fp, #1
 8006520:	46b8      	mov	r8, r7
 8006522:	4645      	mov	r5, r8
 8006524:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d155      	bne.n	80065d8 <_vfiprintf_r+0xf8>
 800652c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006530:	d00b      	beq.n	800654a <_vfiprintf_r+0x6a>
 8006532:	4653      	mov	r3, sl
 8006534:	463a      	mov	r2, r7
 8006536:	4621      	mov	r1, r4
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff ffbf 	bl	80064bc <__sfputs_r>
 800653e:	3001      	adds	r0, #1
 8006540:	f000 80c4 	beq.w	80066cc <_vfiprintf_r+0x1ec>
 8006544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006546:	4453      	add	r3, sl
 8006548:	9309      	str	r3, [sp, #36]	; 0x24
 800654a:	f898 3000 	ldrb.w	r3, [r8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80bc 	beq.w	80066cc <_vfiprintf_r+0x1ec>
 8006554:	2300      	movs	r3, #0
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	9307      	str	r3, [sp, #28]
 800655e:	9205      	str	r2, [sp, #20]
 8006560:	9306      	str	r3, [sp, #24]
 8006562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006566:	931a      	str	r3, [sp, #104]	; 0x68
 8006568:	2205      	movs	r2, #5
 800656a:	7829      	ldrb	r1, [r5, #0]
 800656c:	4860      	ldr	r0, [pc, #384]	; (80066f0 <_vfiprintf_r+0x210>)
 800656e:	f7f9 fe07 	bl	8000180 <memchr>
 8006572:	f105 0801 	add.w	r8, r5, #1
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	2800      	cmp	r0, #0
 800657a:	d131      	bne.n	80065e0 <_vfiprintf_r+0x100>
 800657c:	06d9      	lsls	r1, r3, #27
 800657e:	bf44      	itt	mi
 8006580:	2220      	movmi	r2, #32
 8006582:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006586:	071a      	lsls	r2, r3, #28
 8006588:	bf44      	itt	mi
 800658a:	222b      	movmi	r2, #43	; 0x2b
 800658c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006590:	782a      	ldrb	r2, [r5, #0]
 8006592:	2a2a      	cmp	r2, #42	; 0x2a
 8006594:	d02c      	beq.n	80065f0 <_vfiprintf_r+0x110>
 8006596:	9a07      	ldr	r2, [sp, #28]
 8006598:	2100      	movs	r1, #0
 800659a:	200a      	movs	r0, #10
 800659c:	46a8      	mov	r8, r5
 800659e:	3501      	adds	r5, #1
 80065a0:	f898 3000 	ldrb.w	r3, [r8]
 80065a4:	3b30      	subs	r3, #48	; 0x30
 80065a6:	2b09      	cmp	r3, #9
 80065a8:	d96d      	bls.n	8006686 <_vfiprintf_r+0x1a6>
 80065aa:	b371      	cbz	r1, 800660a <_vfiprintf_r+0x12a>
 80065ac:	e026      	b.n	80065fc <_vfiprintf_r+0x11c>
 80065ae:	4b51      	ldr	r3, [pc, #324]	; (80066f4 <_vfiprintf_r+0x214>)
 80065b0:	429c      	cmp	r4, r3
 80065b2:	d101      	bne.n	80065b8 <_vfiprintf_r+0xd8>
 80065b4:	68b4      	ldr	r4, [r6, #8]
 80065b6:	e7a3      	b.n	8006500 <_vfiprintf_r+0x20>
 80065b8:	4b4f      	ldr	r3, [pc, #316]	; (80066f8 <_vfiprintf_r+0x218>)
 80065ba:	429c      	cmp	r4, r3
 80065bc:	bf08      	it	eq
 80065be:	68f4      	ldreq	r4, [r6, #12]
 80065c0:	e79e      	b.n	8006500 <_vfiprintf_r+0x20>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4630      	mov	r0, r6
 80065c6:	f7ff fc67 	bl	8005e98 <__swsetup_r>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d09e      	beq.n	800650c <_vfiprintf_r+0x2c>
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295
 80065d2:	b01d      	add	sp, #116	; 0x74
 80065d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d8:	2b25      	cmp	r3, #37	; 0x25
 80065da:	d0a7      	beq.n	800652c <_vfiprintf_r+0x4c>
 80065dc:	46a8      	mov	r8, r5
 80065de:	e7a0      	b.n	8006522 <_vfiprintf_r+0x42>
 80065e0:	4a43      	ldr	r2, [pc, #268]	; (80066f0 <_vfiprintf_r+0x210>)
 80065e2:	1a80      	subs	r0, r0, r2
 80065e4:	fa0b f000 	lsl.w	r0, fp, r0
 80065e8:	4318      	orrs	r0, r3
 80065ea:	9004      	str	r0, [sp, #16]
 80065ec:	4645      	mov	r5, r8
 80065ee:	e7bb      	b.n	8006568 <_vfiprintf_r+0x88>
 80065f0:	9a03      	ldr	r2, [sp, #12]
 80065f2:	1d11      	adds	r1, r2, #4
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	9103      	str	r1, [sp, #12]
 80065f8:	2a00      	cmp	r2, #0
 80065fa:	db01      	blt.n	8006600 <_vfiprintf_r+0x120>
 80065fc:	9207      	str	r2, [sp, #28]
 80065fe:	e004      	b.n	800660a <_vfiprintf_r+0x12a>
 8006600:	4252      	negs	r2, r2
 8006602:	f043 0302 	orr.w	r3, r3, #2
 8006606:	9207      	str	r2, [sp, #28]
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	f898 3000 	ldrb.w	r3, [r8]
 800660e:	2b2e      	cmp	r3, #46	; 0x2e
 8006610:	d110      	bne.n	8006634 <_vfiprintf_r+0x154>
 8006612:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006616:	2b2a      	cmp	r3, #42	; 0x2a
 8006618:	f108 0101 	add.w	r1, r8, #1
 800661c:	d137      	bne.n	800668e <_vfiprintf_r+0x1ae>
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	9203      	str	r2, [sp, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfb8      	it	lt
 800662a:	f04f 33ff 	movlt.w	r3, #4294967295
 800662e:	f108 0802 	add.w	r8, r8, #2
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	4d31      	ldr	r5, [pc, #196]	; (80066fc <_vfiprintf_r+0x21c>)
 8006636:	f898 1000 	ldrb.w	r1, [r8]
 800663a:	2203      	movs	r2, #3
 800663c:	4628      	mov	r0, r5
 800663e:	f7f9 fd9f 	bl	8000180 <memchr>
 8006642:	b140      	cbz	r0, 8006656 <_vfiprintf_r+0x176>
 8006644:	2340      	movs	r3, #64	; 0x40
 8006646:	1b40      	subs	r0, r0, r5
 8006648:	fa03 f000 	lsl.w	r0, r3, r0
 800664c:	9b04      	ldr	r3, [sp, #16]
 800664e:	4303      	orrs	r3, r0
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	f108 0801 	add.w	r8, r8, #1
 8006656:	f898 1000 	ldrb.w	r1, [r8]
 800665a:	4829      	ldr	r0, [pc, #164]	; (8006700 <_vfiprintf_r+0x220>)
 800665c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006660:	2206      	movs	r2, #6
 8006662:	f108 0701 	add.w	r7, r8, #1
 8006666:	f7f9 fd8b 	bl	8000180 <memchr>
 800666a:	2800      	cmp	r0, #0
 800666c:	d034      	beq.n	80066d8 <_vfiprintf_r+0x1f8>
 800666e:	4b25      	ldr	r3, [pc, #148]	; (8006704 <_vfiprintf_r+0x224>)
 8006670:	bb03      	cbnz	r3, 80066b4 <_vfiprintf_r+0x1d4>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	3307      	adds	r3, #7
 8006676:	f023 0307 	bic.w	r3, r3, #7
 800667a:	3308      	adds	r3, #8
 800667c:	9303      	str	r3, [sp, #12]
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	444b      	add	r3, r9
 8006682:	9309      	str	r3, [sp, #36]	; 0x24
 8006684:	e74c      	b.n	8006520 <_vfiprintf_r+0x40>
 8006686:	fb00 3202 	mla	r2, r0, r2, r3
 800668a:	2101      	movs	r1, #1
 800668c:	e786      	b.n	800659c <_vfiprintf_r+0xbc>
 800668e:	2300      	movs	r3, #0
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	4618      	mov	r0, r3
 8006694:	250a      	movs	r5, #10
 8006696:	4688      	mov	r8, r1
 8006698:	3101      	adds	r1, #1
 800669a:	f898 2000 	ldrb.w	r2, [r8]
 800669e:	3a30      	subs	r2, #48	; 0x30
 80066a0:	2a09      	cmp	r2, #9
 80066a2:	d903      	bls.n	80066ac <_vfiprintf_r+0x1cc>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0c5      	beq.n	8006634 <_vfiprintf_r+0x154>
 80066a8:	9005      	str	r0, [sp, #20]
 80066aa:	e7c3      	b.n	8006634 <_vfiprintf_r+0x154>
 80066ac:	fb05 2000 	mla	r0, r5, r0, r2
 80066b0:	2301      	movs	r3, #1
 80066b2:	e7f0      	b.n	8006696 <_vfiprintf_r+0x1b6>
 80066b4:	ab03      	add	r3, sp, #12
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	4622      	mov	r2, r4
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <_vfiprintf_r+0x228>)
 80066bc:	a904      	add	r1, sp, #16
 80066be:	4630      	mov	r0, r6
 80066c0:	f3af 8000 	nop.w
 80066c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066c8:	4681      	mov	r9, r0
 80066ca:	d1d8      	bne.n	800667e <_vfiprintf_r+0x19e>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	065b      	lsls	r3, r3, #25
 80066d0:	f53f af7d 	bmi.w	80065ce <_vfiprintf_r+0xee>
 80066d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066d6:	e77c      	b.n	80065d2 <_vfiprintf_r+0xf2>
 80066d8:	ab03      	add	r3, sp, #12
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	4622      	mov	r2, r4
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <_vfiprintf_r+0x228>)
 80066e0:	a904      	add	r1, sp, #16
 80066e2:	4630      	mov	r0, r6
 80066e4:	f000 f888 	bl	80067f8 <_printf_i>
 80066e8:	e7ec      	b.n	80066c4 <_vfiprintf_r+0x1e4>
 80066ea:	bf00      	nop
 80066ec:	08006dc4 	.word	0x08006dc4
 80066f0:	08006e04 	.word	0x08006e04
 80066f4:	08006de4 	.word	0x08006de4
 80066f8:	08006da4 	.word	0x08006da4
 80066fc:	08006e0a 	.word	0x08006e0a
 8006700:	08006e0e 	.word	0x08006e0e
 8006704:	00000000 	.word	0x00000000
 8006708:	080064bd 	.word	0x080064bd

0800670c <_printf_common>:
 800670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	4691      	mov	r9, r2
 8006712:	461f      	mov	r7, r3
 8006714:	688a      	ldr	r2, [r1, #8]
 8006716:	690b      	ldr	r3, [r1, #16]
 8006718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800671c:	4293      	cmp	r3, r2
 800671e:	bfb8      	it	lt
 8006720:	4613      	movlt	r3, r2
 8006722:	f8c9 3000 	str.w	r3, [r9]
 8006726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800672a:	4606      	mov	r6, r0
 800672c:	460c      	mov	r4, r1
 800672e:	b112      	cbz	r2, 8006736 <_printf_common+0x2a>
 8006730:	3301      	adds	r3, #1
 8006732:	f8c9 3000 	str.w	r3, [r9]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0699      	lsls	r1, r3, #26
 800673a:	bf42      	ittt	mi
 800673c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006740:	3302      	addmi	r3, #2
 8006742:	f8c9 3000 	strmi.w	r3, [r9]
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	f015 0506 	ands.w	r5, r5, #6
 800674c:	d107      	bne.n	800675e <_printf_common+0x52>
 800674e:	f104 0a19 	add.w	sl, r4, #25
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	f8d9 2000 	ldr.w	r2, [r9]
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	429d      	cmp	r5, r3
 800675c:	db29      	blt.n	80067b2 <_printf_common+0xa6>
 800675e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	3300      	adds	r3, #0
 8006766:	bf18      	it	ne
 8006768:	2301      	movne	r3, #1
 800676a:	0692      	lsls	r2, r2, #26
 800676c:	d42e      	bmi.n	80067cc <_printf_common+0xc0>
 800676e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006772:	4639      	mov	r1, r7
 8006774:	4630      	mov	r0, r6
 8006776:	47c0      	blx	r8
 8006778:	3001      	adds	r0, #1
 800677a:	d021      	beq.n	80067c0 <_printf_common+0xb4>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	68e5      	ldr	r5, [r4, #12]
 8006780:	f8d9 2000 	ldr.w	r2, [r9]
 8006784:	f003 0306 	and.w	r3, r3, #6
 8006788:	2b04      	cmp	r3, #4
 800678a:	bf08      	it	eq
 800678c:	1aad      	subeq	r5, r5, r2
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	6922      	ldr	r2, [r4, #16]
 8006792:	bf0c      	ite	eq
 8006794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006798:	2500      	movne	r5, #0
 800679a:	4293      	cmp	r3, r2
 800679c:	bfc4      	itt	gt
 800679e:	1a9b      	subgt	r3, r3, r2
 80067a0:	18ed      	addgt	r5, r5, r3
 80067a2:	f04f 0900 	mov.w	r9, #0
 80067a6:	341a      	adds	r4, #26
 80067a8:	454d      	cmp	r5, r9
 80067aa:	d11b      	bne.n	80067e4 <_printf_common+0xd8>
 80067ac:	2000      	movs	r0, #0
 80067ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b2:	2301      	movs	r3, #1
 80067b4:	4652      	mov	r2, sl
 80067b6:	4639      	mov	r1, r7
 80067b8:	4630      	mov	r0, r6
 80067ba:	47c0      	blx	r8
 80067bc:	3001      	adds	r0, #1
 80067be:	d103      	bne.n	80067c8 <_printf_common+0xbc>
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c8:	3501      	adds	r5, #1
 80067ca:	e7c2      	b.n	8006752 <_printf_common+0x46>
 80067cc:	18e1      	adds	r1, r4, r3
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	2030      	movs	r0, #48	; 0x30
 80067d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067d6:	4422      	add	r2, r4
 80067d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067e0:	3302      	adds	r3, #2
 80067e2:	e7c4      	b.n	800676e <_printf_common+0x62>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4622      	mov	r2, r4
 80067e8:	4639      	mov	r1, r7
 80067ea:	4630      	mov	r0, r6
 80067ec:	47c0      	blx	r8
 80067ee:	3001      	adds	r0, #1
 80067f0:	d0e6      	beq.n	80067c0 <_printf_common+0xb4>
 80067f2:	f109 0901 	add.w	r9, r9, #1
 80067f6:	e7d7      	b.n	80067a8 <_printf_common+0x9c>

080067f8 <_printf_i>:
 80067f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067fc:	4617      	mov	r7, r2
 80067fe:	7e0a      	ldrb	r2, [r1, #24]
 8006800:	b085      	sub	sp, #20
 8006802:	2a6e      	cmp	r2, #110	; 0x6e
 8006804:	4698      	mov	r8, r3
 8006806:	4606      	mov	r6, r0
 8006808:	460c      	mov	r4, r1
 800680a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800680c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006810:	f000 80bc 	beq.w	800698c <_printf_i+0x194>
 8006814:	d81a      	bhi.n	800684c <_printf_i+0x54>
 8006816:	2a63      	cmp	r2, #99	; 0x63
 8006818:	d02e      	beq.n	8006878 <_printf_i+0x80>
 800681a:	d80a      	bhi.n	8006832 <_printf_i+0x3a>
 800681c:	2a00      	cmp	r2, #0
 800681e:	f000 80c8 	beq.w	80069b2 <_printf_i+0x1ba>
 8006822:	2a58      	cmp	r2, #88	; 0x58
 8006824:	f000 808a 	beq.w	800693c <_printf_i+0x144>
 8006828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800682c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006830:	e02a      	b.n	8006888 <_printf_i+0x90>
 8006832:	2a64      	cmp	r2, #100	; 0x64
 8006834:	d001      	beq.n	800683a <_printf_i+0x42>
 8006836:	2a69      	cmp	r2, #105	; 0x69
 8006838:	d1f6      	bne.n	8006828 <_printf_i+0x30>
 800683a:	6821      	ldr	r1, [r4, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006842:	d023      	beq.n	800688c <_printf_i+0x94>
 8006844:	1d11      	adds	r1, r2, #4
 8006846:	6019      	str	r1, [r3, #0]
 8006848:	6813      	ldr	r3, [r2, #0]
 800684a:	e027      	b.n	800689c <_printf_i+0xa4>
 800684c:	2a73      	cmp	r2, #115	; 0x73
 800684e:	f000 80b4 	beq.w	80069ba <_printf_i+0x1c2>
 8006852:	d808      	bhi.n	8006866 <_printf_i+0x6e>
 8006854:	2a6f      	cmp	r2, #111	; 0x6f
 8006856:	d02a      	beq.n	80068ae <_printf_i+0xb6>
 8006858:	2a70      	cmp	r2, #112	; 0x70
 800685a:	d1e5      	bne.n	8006828 <_printf_i+0x30>
 800685c:	680a      	ldr	r2, [r1, #0]
 800685e:	f042 0220 	orr.w	r2, r2, #32
 8006862:	600a      	str	r2, [r1, #0]
 8006864:	e003      	b.n	800686e <_printf_i+0x76>
 8006866:	2a75      	cmp	r2, #117	; 0x75
 8006868:	d021      	beq.n	80068ae <_printf_i+0xb6>
 800686a:	2a78      	cmp	r2, #120	; 0x78
 800686c:	d1dc      	bne.n	8006828 <_printf_i+0x30>
 800686e:	2278      	movs	r2, #120	; 0x78
 8006870:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006874:	496e      	ldr	r1, [pc, #440]	; (8006a30 <_printf_i+0x238>)
 8006876:	e064      	b.n	8006942 <_printf_i+0x14a>
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800687e:	1d11      	adds	r1, r2, #4
 8006880:	6019      	str	r1, [r3, #0]
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006888:	2301      	movs	r3, #1
 800688a:	e0a3      	b.n	80069d4 <_printf_i+0x1dc>
 800688c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006890:	f102 0104 	add.w	r1, r2, #4
 8006894:	6019      	str	r1, [r3, #0]
 8006896:	d0d7      	beq.n	8006848 <_printf_i+0x50>
 8006898:	f9b2 3000 	ldrsh.w	r3, [r2]
 800689c:	2b00      	cmp	r3, #0
 800689e:	da03      	bge.n	80068a8 <_printf_i+0xb0>
 80068a0:	222d      	movs	r2, #45	; 0x2d
 80068a2:	425b      	negs	r3, r3
 80068a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068a8:	4962      	ldr	r1, [pc, #392]	; (8006a34 <_printf_i+0x23c>)
 80068aa:	220a      	movs	r2, #10
 80068ac:	e017      	b.n	80068de <_printf_i+0xe6>
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	6819      	ldr	r1, [r3, #0]
 80068b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80068b6:	d003      	beq.n	80068c0 <_printf_i+0xc8>
 80068b8:	1d08      	adds	r0, r1, #4
 80068ba:	6018      	str	r0, [r3, #0]
 80068bc:	680b      	ldr	r3, [r1, #0]
 80068be:	e006      	b.n	80068ce <_printf_i+0xd6>
 80068c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068c4:	f101 0004 	add.w	r0, r1, #4
 80068c8:	6018      	str	r0, [r3, #0]
 80068ca:	d0f7      	beq.n	80068bc <_printf_i+0xc4>
 80068cc:	880b      	ldrh	r3, [r1, #0]
 80068ce:	4959      	ldr	r1, [pc, #356]	; (8006a34 <_printf_i+0x23c>)
 80068d0:	2a6f      	cmp	r2, #111	; 0x6f
 80068d2:	bf14      	ite	ne
 80068d4:	220a      	movne	r2, #10
 80068d6:	2208      	moveq	r2, #8
 80068d8:	2000      	movs	r0, #0
 80068da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80068de:	6865      	ldr	r5, [r4, #4]
 80068e0:	60a5      	str	r5, [r4, #8]
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	f2c0 809c 	blt.w	8006a20 <_printf_i+0x228>
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	f020 0004 	bic.w	r0, r0, #4
 80068ee:	6020      	str	r0, [r4, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d13f      	bne.n	8006974 <_printf_i+0x17c>
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	f040 8095 	bne.w	8006a24 <_printf_i+0x22c>
 80068fa:	4675      	mov	r5, lr
 80068fc:	2a08      	cmp	r2, #8
 80068fe:	d10b      	bne.n	8006918 <_printf_i+0x120>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	07da      	lsls	r2, r3, #31
 8006904:	d508      	bpl.n	8006918 <_printf_i+0x120>
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6862      	ldr	r2, [r4, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	bfde      	ittt	le
 800690e:	2330      	movle	r3, #48	; 0x30
 8006910:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006914:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006918:	ebae 0305 	sub.w	r3, lr, r5
 800691c:	6123      	str	r3, [r4, #16]
 800691e:	f8cd 8000 	str.w	r8, [sp]
 8006922:	463b      	mov	r3, r7
 8006924:	aa03      	add	r2, sp, #12
 8006926:	4621      	mov	r1, r4
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff feef 	bl	800670c <_printf_common>
 800692e:	3001      	adds	r0, #1
 8006930:	d155      	bne.n	80069de <_printf_i+0x1e6>
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	b005      	add	sp, #20
 8006938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800693c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006940:	493c      	ldr	r1, [pc, #240]	; (8006a34 <_printf_i+0x23c>)
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f012 0f80 	tst.w	r2, #128	; 0x80
 800694a:	f100 0504 	add.w	r5, r0, #4
 800694e:	601d      	str	r5, [r3, #0]
 8006950:	d001      	beq.n	8006956 <_printf_i+0x15e>
 8006952:	6803      	ldr	r3, [r0, #0]
 8006954:	e002      	b.n	800695c <_printf_i+0x164>
 8006956:	0655      	lsls	r5, r2, #25
 8006958:	d5fb      	bpl.n	8006952 <_printf_i+0x15a>
 800695a:	8803      	ldrh	r3, [r0, #0]
 800695c:	07d0      	lsls	r0, r2, #31
 800695e:	bf44      	itt	mi
 8006960:	f042 0220 	orrmi.w	r2, r2, #32
 8006964:	6022      	strmi	r2, [r4, #0]
 8006966:	b91b      	cbnz	r3, 8006970 <_printf_i+0x178>
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	f022 0220 	bic.w	r2, r2, #32
 800696e:	6022      	str	r2, [r4, #0]
 8006970:	2210      	movs	r2, #16
 8006972:	e7b1      	b.n	80068d8 <_printf_i+0xe0>
 8006974:	4675      	mov	r5, lr
 8006976:	fbb3 f0f2 	udiv	r0, r3, r2
 800697a:	fb02 3310 	mls	r3, r2, r0, r3
 800697e:	5ccb      	ldrb	r3, [r1, r3]
 8006980:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006984:	4603      	mov	r3, r0
 8006986:	2800      	cmp	r0, #0
 8006988:	d1f5      	bne.n	8006976 <_printf_i+0x17e>
 800698a:	e7b7      	b.n	80068fc <_printf_i+0x104>
 800698c:	6808      	ldr	r0, [r1, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	6949      	ldr	r1, [r1, #20]
 8006992:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006996:	d004      	beq.n	80069a2 <_printf_i+0x1aa>
 8006998:	1d10      	adds	r0, r2, #4
 800699a:	6018      	str	r0, [r3, #0]
 800699c:	6813      	ldr	r3, [r2, #0]
 800699e:	6019      	str	r1, [r3, #0]
 80069a0:	e007      	b.n	80069b2 <_printf_i+0x1ba>
 80069a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069a6:	f102 0004 	add.w	r0, r2, #4
 80069aa:	6018      	str	r0, [r3, #0]
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	d0f6      	beq.n	800699e <_printf_i+0x1a6>
 80069b0:	8019      	strh	r1, [r3, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	4675      	mov	r5, lr
 80069b8:	e7b1      	b.n	800691e <_printf_i+0x126>
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	1d11      	adds	r1, r2, #4
 80069be:	6019      	str	r1, [r3, #0]
 80069c0:	6815      	ldr	r5, [r2, #0]
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	2100      	movs	r1, #0
 80069c6:	4628      	mov	r0, r5
 80069c8:	f7f9 fbda 	bl	8000180 <memchr>
 80069cc:	b108      	cbz	r0, 80069d2 <_printf_i+0x1da>
 80069ce:	1b40      	subs	r0, r0, r5
 80069d0:	6060      	str	r0, [r4, #4]
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	2300      	movs	r3, #0
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069dc:	e79f      	b.n	800691e <_printf_i+0x126>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	462a      	mov	r2, r5
 80069e2:	4639      	mov	r1, r7
 80069e4:	4630      	mov	r0, r6
 80069e6:	47c0      	blx	r8
 80069e8:	3001      	adds	r0, #1
 80069ea:	d0a2      	beq.n	8006932 <_printf_i+0x13a>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	079b      	lsls	r3, r3, #30
 80069f0:	d507      	bpl.n	8006a02 <_printf_i+0x20a>
 80069f2:	2500      	movs	r5, #0
 80069f4:	f104 0919 	add.w	r9, r4, #25
 80069f8:	68e3      	ldr	r3, [r4, #12]
 80069fa:	9a03      	ldr	r2, [sp, #12]
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	429d      	cmp	r5, r3
 8006a00:	db05      	blt.n	8006a0e <_printf_i+0x216>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	4298      	cmp	r0, r3
 8006a08:	bfb8      	it	lt
 8006a0a:	4618      	movlt	r0, r3
 8006a0c:	e793      	b.n	8006936 <_printf_i+0x13e>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	464a      	mov	r2, r9
 8006a12:	4639      	mov	r1, r7
 8006a14:	4630      	mov	r0, r6
 8006a16:	47c0      	blx	r8
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d08a      	beq.n	8006932 <_printf_i+0x13a>
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	e7eb      	b.n	80069f8 <_printf_i+0x200>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1a7      	bne.n	8006974 <_printf_i+0x17c>
 8006a24:	780b      	ldrb	r3, [r1, #0]
 8006a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a2e:	e765      	b.n	80068fc <_printf_i+0x104>
 8006a30:	08006e26 	.word	0x08006e26
 8006a34:	08006e15 	.word	0x08006e15

08006a38 <_sbrk_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4c06      	ldr	r4, [pc, #24]	; (8006a54 <_sbrk_r+0x1c>)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4605      	mov	r5, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	f7fe fdfc 	bl	8005640 <_sbrk>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_sbrk_r+0x1a>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_sbrk_r+0x1a>
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20001eb4 	.word	0x20001eb4

08006a58 <__sread>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	f000 f896 	bl	8006b90 <_read_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	bfab      	itete	ge
 8006a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a6c:	181b      	addge	r3, r3, r0
 8006a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a72:	bfac      	ite	ge
 8006a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a76:	81a3      	strhlt	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__swrite>:
 8006a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	461f      	mov	r7, r3
 8006a80:	898b      	ldrh	r3, [r1, #12]
 8006a82:	05db      	lsls	r3, r3, #23
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4616      	mov	r6, r2
 8006a8a:	d505      	bpl.n	8006a98 <__swrite+0x1e>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	f000 f868 	bl	8006b68 <_lseek_r>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aae:	f000 b817 	b.w	8006ae0 <_write_r>

08006ab2 <__sseek>:
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aba:	f000 f855 	bl	8006b68 <_lseek_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	bf15      	itete	ne
 8006ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ace:	81a3      	strheq	r3, [r4, #12]
 8006ad0:	bf18      	it	ne
 8006ad2:	81a3      	strhne	r3, [r4, #12]
 8006ad4:	bd10      	pop	{r4, pc}

08006ad6 <__sclose>:
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 b813 	b.w	8006b04 <_close_r>
	...

08006ae0 <_write_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4c07      	ldr	r4, [pc, #28]	; (8006b00 <_write_r+0x20>)
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	6022      	str	r2, [r4, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fe fa7e 	bl	8004ff0 <_write>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_write_r+0x1e>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_write_r+0x1e>
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20001eb4 	.word	0x20001eb4

08006b04 <_close_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4c06      	ldr	r4, [pc, #24]	; (8006b20 <_close_r+0x1c>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	f7fe fdb0 	bl	8005674 <_close>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_close_r+0x1a>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_close_r+0x1a>
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	20001eb4 	.word	0x20001eb4

08006b24 <_fstat_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4c07      	ldr	r4, [pc, #28]	; (8006b44 <_fstat_r+0x20>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	f7fe fda2 	bl	800567a <_fstat>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d102      	bne.n	8006b40 <_fstat_r+0x1c>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	b103      	cbz	r3, 8006b40 <_fstat_r+0x1c>
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	20001eb4 	.word	0x20001eb4

08006b48 <_isatty_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4c06      	ldr	r4, [pc, #24]	; (8006b64 <_isatty_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4605      	mov	r5, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	f7fe fd96 	bl	8005684 <_isatty>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_isatty_r+0x1a>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_isatty_r+0x1a>
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20001eb4 	.word	0x20001eb4

08006b68 <_lseek_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4c07      	ldr	r4, [pc, #28]	; (8006b88 <_lseek_r+0x20>)
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	6022      	str	r2, [r4, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7fe fd86 	bl	8005688 <_lseek>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_lseek_r+0x1e>
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_lseek_r+0x1e>
 8006b84:	602b      	str	r3, [r5, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20001eb4 	.word	0x20001eb4

08006b8c <__malloc_lock>:
 8006b8c:	4770      	bx	lr

08006b8e <__malloc_unlock>:
 8006b8e:	4770      	bx	lr

08006b90 <_read_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4c07      	ldr	r4, [pc, #28]	; (8006bb0 <_read_r+0x20>)
 8006b94:	4605      	mov	r5, r0
 8006b96:	4608      	mov	r0, r1
 8006b98:	4611      	mov	r1, r2
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	6022      	str	r2, [r4, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f7fe fd40 	bl	8005624 <_read>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_read_r+0x1e>
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_read_r+0x1e>
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	20001eb4 	.word	0x20001eb4

08006bb4 <_init>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr

08006bc0 <_fini>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

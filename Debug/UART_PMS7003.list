
UART_PMS7003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000004  08006328  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001bc4  200001e8  0800650c  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00001504  20001dac  0800650c  00021dac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000272a9  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000050f2  00000000  00000000  000474c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e400  00000000  00000000  0004c5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014d0  00000000  00000000  0005a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ff8  00000000  00000000  0005be88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b500  00000000  00000000  0005de80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008596  00000000  00000000  00069380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00071916  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f90  00000000  00000000  00071994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	080060a8 	.word	0x080060a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	080060a8 	.word	0x080060a8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000532:	4c10      	ldr	r4, [pc, #64]	; (8000574 <HAL_InitTick+0x44>)
 8000534:	7823      	ldrb	r3, [r4, #0]
{
 8000536:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000538:	b90b      	cbnz	r3, 800053e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800053a:	2001      	movs	r0, #1
 800053c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800053e:	f001 fbe9 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8000542:	7822      	ldrb	r2, [r4, #0]
 8000544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000548:	fbb3 f3f2 	udiv	r3, r3, r2
 800054c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000550:	f000 f896 	bl	8000680 <HAL_SYSTICK_Config>
 8000554:	4604      	mov	r4, r0
 8000556:	2800      	cmp	r0, #0
 8000558:	d1ef      	bne.n	800053a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	2d0f      	cmp	r5, #15
 800055c:	d8ed      	bhi.n	800053a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055e:	4602      	mov	r2, r0
 8000560:	4629      	mov	r1, r5
 8000562:	f04f 30ff 	mov.w	r0, #4294967295
 8000566:	f000 f849 	bl	80005fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_InitTick+0x48>)
 800056c:	4620      	mov	r0, r4
 800056e:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000570:	bd38      	pop	{r3, r4, r5, pc}
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	20000008 	.word	0x20000008

0800057c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <HAL_Init+0x28>)
 800057e:	6813      	ldr	r3, [r2, #0]
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000584:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	f000 f825 	bl	80005d8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffce 	bl	8000530 <HAL_InitTick>
 8000594:	4604      	mov	r4, r0
 8000596:	b918      	cbnz	r0, 80005a0 <HAL_Init+0x24>
    HAL_MspInit();
 8000598:	f004 f9e0 	bl	800495c <HAL_MspInit>
}
 800059c:	4620      	mov	r0, r4
 800059e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005a0:	2401      	movs	r4, #1
 80005a2:	e7fb      	b.n	800059c <HAL_Init+0x20>
 80005a4:	58004000 	.word	0x58004000

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000434 	.word	0x20000434
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000434 	.word	0x20000434

080005cc <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <HAL_GetTickPrio+0x8>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000008 	.word	0x20000008

080005d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	0c1b      	lsrs	r3, r3, #16
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	0200      	lsls	r0, r0, #8
 80005ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f4:	60d3      	str	r3, [r2, #12]
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	68dc      	ldr	r4, [r3, #12]
 8000602:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000606:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060c:	2b04      	cmp	r3, #4
 800060e:	bf28      	it	cs
 8000610:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	f04f 0501 	mov.w	r5, #1
 8000618:	fa05 f303 	lsl.w	r3, r5, r3
 800061c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000620:	bf8c      	ite	hi
 8000622:	3c03      	subhi	r4, #3
 8000624:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000626:	4019      	ands	r1, r3
 8000628:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062a:	fa05 f404 	lsl.w	r4, r5, r4
 800062e:	3c01      	subs	r4, #1
 8000630:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000632:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	ea42 0201 	orr.w	r2, r2, r1
 8000638:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	bfad      	iteet	ge
 800063e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	f000 000f 	andlt.w	r0, r0, #15
 8000646:	4b06      	ldrlt	r3, [pc, #24]	; (8000660 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	bfb5      	itete	lt
 800064e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00
 8000660:	e000ed14 	.word	0xe000ed14

08000664 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000664:	2800      	cmp	r0, #0
 8000666:	db08      	blt.n	800067a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000668:	0942      	lsrs	r2, r0, #5
 800066a:	2301      	movs	r3, #1
 800066c:	f000 001f 	and.w	r0, r0, #31
 8000670:	fa03 f000 	lsl.w	r0, r3, r0
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <HAL_NVIC_EnableIRQ+0x18>)
 8000676:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100

08000680 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	3801      	subs	r0, #1
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000686:	d20a      	bcs.n	800069e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000696:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e010 	.word	0xe000e010
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80006ae:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80006b0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80006b2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80006b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80006b6:	b114      	cbz	r4, 80006be <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80006b8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80006ba:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80006bc:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80006be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80006c0:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80006c2:	f004 051c 	and.w	r5, r4, #28
 80006c6:	2401      	movs	r4, #1
 80006c8:	40ac      	lsls	r4, r5
 80006ca:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80006cc:	6804      	ldr	r4, [r0, #0]
 80006ce:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80006d0:	6883      	ldr	r3, [r0, #8]
 80006d2:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80006d4:	bf0b      	itete	eq
 80006d6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80006d8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80006da:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80006dc:	60e2      	strne	r2, [r4, #12]
 80006de:	bd70      	pop	{r4, r5, r6, pc}

080006e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80006e0:	6803      	ldr	r3, [r0, #0]
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006e8:	bf88      	it	hi
 80006ea:	490f      	ldrhi	r1, [pc, #60]	; (8000728 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006ec:	f022 0203 	bic.w	r2, r2, #3
 80006f0:	bf9b      	ittet	ls
 80006f2:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
 80006f6:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80006fa:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80006fc:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80006fe:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8000702:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000704:	f1a3 0308 	sub.w	r3, r3, #8
 8000708:	f04f 0214 	mov.w	r2, #20
 800070c:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000710:	f04f 0201 	mov.w	r2, #1
 8000714:	f003 031c 	and.w	r3, r3, #28
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800071c:	bf88      	it	hi
 800071e:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000720:	6503      	str	r3, [r0, #80]	; 0x50
 8000722:	4770      	bx	lr
 8000724:	40020407 	.word	0x40020407
 8000728:	4002081c 	.word	0x4002081c
 800072c:	40020880 	.word	0x40020880

08000730 <HAL_DMA_Init>:
{
 8000730:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8000732:	4604      	mov	r4, r0
 8000734:	2800      	cmp	r0, #0
 8000736:	d05d      	beq.n	80007f4 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000738:	6801      	ldr	r1, [r0, #0]
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <HAL_DMA_Init+0xc8>)
 800073c:	4299      	cmp	r1, r3
 800073e:	f04f 0014 	mov.w	r0, #20
 8000742:	d84a      	bhi.n	80007da <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000744:	4a2d      	ldr	r2, [pc, #180]	; (80007fc <HAL_DMA_Init+0xcc>)
 8000746:	440a      	add	r2, r1
 8000748:	fbb2 f2f0 	udiv	r2, r2, r0
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000750:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8000754:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000756:	2302      	movs	r3, #2
 8000758:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800075c:	68e0      	ldr	r0, [r4, #12]
 800075e:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8000760:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000762:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000764:	6920      	ldr	r0, [r4, #16]
 8000766:	4303      	orrs	r3, r0
 8000768:	6960      	ldr	r0, [r4, #20]
 800076a:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800076c:	69a0      	ldr	r0, [r4, #24]
 800076e:	4303      	orrs	r3, r0
 8000770:	69e0      	ldr	r0, [r4, #28]
 8000772:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000774:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000776:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800077a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800077e:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000780:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8000782:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000784:	4620      	mov	r0, r4
 8000786:	f7ff ffab 	bl	80006e0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800078a:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800078c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800078e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000794:	bf04      	itt	eq
 8000796:	2300      	moveq	r3, #0
 8000798:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800079a:	6862      	ldr	r2, [r4, #4]
 800079c:	b2d3      	uxtb	r3, r2
 800079e:	600b      	str	r3, [r1, #0]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007a0:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007a4:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007a6:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007a8:	d81f      	bhi.n	80007ea <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80007ac:	4815      	ldr	r0, [pc, #84]	; (8000804 <HAL_DMA_Init+0xd4>)
 80007ae:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007b0:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007b2:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007b4:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007b6:	2101      	movs	r1, #1
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007c0:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007c2:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007c6:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007c8:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ca:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80007cc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ce:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80007d0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80007d4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 80007d8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_DMA_Init+0xd8>)
 80007dc:	440b      	add	r3, r1
 80007de:	fbb3 f3f0 	udiv	r3, r3, r0
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_DMA_Init+0xdc>)
 80007e8:	e7b4      	b.n	8000754 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80007ee:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80007f0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80007f2:	e7ea      	b.n	80007ca <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80007f4:	2001      	movs	r0, #1
}
 80007f6:	bd10      	pop	{r4, pc}
 80007f8:	40020407 	.word	0x40020407
 80007fc:	bffdfff8 	.word	0xbffdfff8
 8000800:	1000823f 	.word	0x1000823f
 8000804:	40020940 	.word	0x40020940
 8000808:	bffdfbf8 	.word	0xbffdfbf8
 800080c:	40020400 	.word	0x40020400

08000810 <HAL_DMA_Start_IT>:
{
 8000810:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000812:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8000816:	2d01      	cmp	r5, #1
{
 8000818:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800081a:	d039      	beq.n	8000890 <HAL_DMA_Start_IT+0x80>
 800081c:	2501      	movs	r5, #1
 800081e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8000822:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8000826:	2d01      	cmp	r5, #1
 8000828:	f04f 0600 	mov.w	r6, #0
 800082c:	f04f 0502 	mov.w	r5, #2
 8000830:	d12c      	bne.n	800088c <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000832:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000836:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000838:	6806      	ldr	r6, [r0, #0]
 800083a:	6835      	ldr	r5, [r6, #0]
 800083c:	f025 0501 	bic.w	r5, r5, #1
 8000840:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000842:	f7ff ff33 	bl	80006ac <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8000846:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000848:	6803      	ldr	r3, [r0, #0]
 800084a:	b1ba      	cbz	r2, 800087c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000852:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000854:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000856:	6811      	ldr	r1, [r2, #0]
 8000858:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800085a:	bf42      	ittt	mi
 800085c:	6811      	ldrmi	r1, [r2, #0]
 800085e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8000862:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8000864:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000866:	b11a      	cbz	r2, 8000870 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000868:	6811      	ldr	r1, [r2, #0]
 800086a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800086e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f042 0201 	orr.w	r2, r2, #1
 8000876:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000878:	2000      	movs	r0, #0
 800087a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	f022 0204 	bic.w	r2, r2, #4
 8000882:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	f042 020a 	orr.w	r2, r2, #10
 800088a:	e7e2      	b.n	8000852 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 800088c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000890:	2002      	movs	r0, #2
}
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000894:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000898:	2b02      	cmp	r3, #2
{
 800089a:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800089c:	d003      	beq.n	80008a6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800089e:	2304      	movs	r3, #4
 80008a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
 80008a4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008a6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80008a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	f022 020e 	bic.w	r2, r2, #14
 80008b0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f022 0201 	bic.w	r2, r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80008ba:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008c2:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80008c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008c6:	f003 021c 	and.w	r2, r3, #28
 80008ca:	2301      	movs	r3, #1
 80008cc:	4093      	lsls	r3, r2
 80008ce:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80008d2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80008d4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80008d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80008d8:	b133      	cbz	r3, 80008e8 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80008e4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008e6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008e8:	2301      	movs	r3, #1
 80008ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 80008ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80008f0:	2400      	movs	r4, #0
 80008f2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80008f6:	b113      	cbz	r3, 80008fe <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 80008f8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008fa:	4620      	mov	r0, r4
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	4618      	mov	r0, r3
}
 8000900:	bd10      	pop	{r4, pc}

08000902 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000902:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000904:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000906:	6803      	ldr	r3, [r0, #0]
{
 8000908:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800090a:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800090e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000910:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000912:	2404      	movs	r4, #4
 8000914:	4094      	lsls	r4, r2
 8000916:	4226      	tst	r6, r4
 8000918:	d00e      	beq.n	8000938 <HAL_DMA_IRQHandler+0x36>
 800091a:	f015 0f04 	tst.w	r5, #4
 800091e:	d00b      	beq.n	8000938 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000924:	bf5e      	ittt	pl
 8000926:	681a      	ldrpl	r2, [r3, #0]
 8000928:	f022 0204 	bicpl.w	r2, r2, #4
 800092c:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800092e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8000930:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8000932:	b373      	cbz	r3, 8000992 <HAL_DMA_IRQHandler+0x90>
}
 8000934:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000936:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000938:	2402      	movs	r4, #2
 800093a:	4094      	lsls	r4, r2
 800093c:	4226      	tst	r6, r4
 800093e:	d012      	beq.n	8000966 <HAL_DMA_IRQHandler+0x64>
 8000940:	f015 0f02 	tst.w	r5, #2
 8000944:	d00f      	beq.n	8000966 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	0695      	lsls	r5, r2, #26
 800094a:	d406      	bmi.n	800095a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	f022 020a 	bic.w	r2, r2, #10
 8000952:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000954:	2301      	movs	r3, #1
 8000956:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800095a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800095c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800095e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8000962:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000964:	e7e5      	b.n	8000932 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000966:	2408      	movs	r4, #8
 8000968:	4094      	lsls	r4, r2
 800096a:	4234      	tst	r4, r6
 800096c:	d011      	beq.n	8000992 <HAL_DMA_IRQHandler+0x90>
 800096e:	072c      	lsls	r4, r5, #28
 8000970:	d50f      	bpl.n	8000992 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000972:	681c      	ldr	r4, [r3, #0]
 8000974:	f024 040e 	bic.w	r4, r4, #14
 8000978:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800097a:	2301      	movs	r3, #1
 800097c:	fa03 f202 	lsl.w	r2, r3, r2
 8000980:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000982:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000984:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000988:	2300      	movs	r3, #0
 800098a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800098e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000990:	e7cf      	b.n	8000932 <HAL_DMA_IRQHandler+0x30>
}
 8000992:	bc70      	pop	{r4, r5, r6}
 8000994:	4770      	bx	lr
	...

08000998 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099c:	680b      	ldr	r3, [r1, #0]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800099e:	4a59      	ldr	r2, [pc, #356]	; (8000b04 <HAL_GPIO_Init+0x16c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a0:	9301      	str	r3, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009a2:	f04f 0803 	mov.w	r8, #3
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009a8:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ac:	9c01      	ldr	r4, [sp, #4]
 80009ae:	40dc      	lsrs	r4, r3
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  }
}
 80009b2:	b003      	add	sp, #12
 80009b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b8:	2401      	movs	r4, #1
 80009ba:	fa04 fe03 	lsl.w	lr, r4, r3
    if (iocurrent != 0x00u)
 80009be:	9c01      	ldr	r4, [sp, #4]
 80009c0:	ea14 050e 	ands.w	r5, r4, lr
 80009c4:	f000 8094 	beq.w	8000af0 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c8:	684c      	ldr	r4, [r1, #4]
 80009ca:	f024 0c10 	bic.w	ip, r4, #16
 80009ce:	f10c 36ff 	add.w	r6, ip, #4294967295
 80009d2:	2e01      	cmp	r6, #1
 80009d4:	ea4f 0643 	mov.w	r6, r3, lsl #1
 80009d8:	d812      	bhi.n	8000a00 <HAL_GPIO_Init+0x68>
        temp = GPIOx->OSPEEDR;
 80009da:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009dc:	fa08 fa06 	lsl.w	sl, r8, r6
 80009e0:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e4:	68cf      	ldr	r7, [r1, #12]
 80009e6:	40b7      	lsls	r7, r6
 80009e8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80009ec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009ee:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009f8:	409f      	lsls	r7, r3
 80009fa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80009fe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a00:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a02:	fa08 fe06 	lsl.w	lr, r8, r6
 8000a06:	ea6f 0e0e 	mvn.w	lr, lr
 8000a0a:	ea07 0a0e 	and.w	sl, r7, lr
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a0e:	688f      	ldr	r7, [r1, #8]
 8000a10:	40b7      	lsls	r7, r6
 8000a12:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a16:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000a1a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1c:	d114      	bne.n	8000a48 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8000a1e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a22:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a26:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000a2a:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a2e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000a32:	fa09 fb0a 	lsl.w	fp, r9, sl
 8000a36:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a3a:	690f      	ldr	r7, [r1, #16]
 8000a3c:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a40:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8000a44:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8000a48:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a4a:	ea0e 0e07 	and.w	lr, lr, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4e:	f004 0703 	and.w	r7, r4, #3
 8000a52:	fa07 f606 	lsl.w	r6, r7, r6
 8000a56:	ea46 060e 	orr.w	r6, r6, lr
      GPIOx->MODER = temp;
 8000a5a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5c:	00e6      	lsls	r6, r4, #3
 8000a5e:	d547      	bpl.n	8000af0 <HAL_GPIO_Init+0x158>
 8000a60:	f023 0703 	bic.w	r7, r3, #3
 8000a64:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a68:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a6c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a70:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a72:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a76:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a7a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a7e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a82:	d037      	beq.n	8000af4 <HAL_GPIO_Init+0x15c>
 8000a84:	4e20      	ldr	r6, [pc, #128]	; (8000b08 <HAL_GPIO_Init+0x170>)
 8000a86:	42b0      	cmp	r0, r6
 8000a88:	d036      	beq.n	8000af8 <HAL_GPIO_Init+0x160>
 8000a8a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a8e:	42b0      	cmp	r0, r6
 8000a90:	d034      	beq.n	8000afc <HAL_GPIO_Init+0x164>
 8000a92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a96:	42b0      	cmp	r0, r6
 8000a98:	d032      	beq.n	8000b00 <HAL_GPIO_Init+0x168>
 8000a9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a9e:	42b0      	cmp	r0, r6
 8000aa0:	bf14      	ite	ne
 8000aa2:	2607      	movne	r6, #7
 8000aa4:	2604      	moveq	r6, #4
 8000aa6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000aaa:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aae:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000ab0:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8000ab4:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000aba:	bf0c      	ite	eq
 8000abc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000abe:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000ac0:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8000ac4:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000acc:	bf0c      	ite	eq
 8000ace:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ad0:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000ad2:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8000ad6:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000adc:	bf0c      	ite	eq
 8000ade:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ae0:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000ae2:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8000ae4:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae6:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000ae8:	bf54      	ite	pl
 8000aea:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000aec:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000aee:	6056      	str	r6, [r2, #4]
    position++;
 8000af0:	3301      	adds	r3, #1
 8000af2:	e75b      	b.n	80009ac <HAL_GPIO_Init+0x14>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af4:	2600      	movs	r6, #0
 8000af6:	e7d6      	b.n	8000aa6 <HAL_GPIO_Init+0x10e>
 8000af8:	2601      	movs	r6, #1
 8000afa:	e7d4      	b.n	8000aa6 <HAL_GPIO_Init+0x10e>
 8000afc:	2602      	movs	r6, #2
 8000afe:	e7d2      	b.n	8000aa6 <HAL_GPIO_Init+0x10e>
 8000b00:	2603      	movs	r6, #3
 8000b02:	e7d0      	b.n	8000aa6 <HAL_GPIO_Init+0x10e>
 8000b04:	58000800 	.word	0x58000800
 8000b08:	48000400 	.word	0x48000400

08000b0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b0c:	b10a      	cbz	r2, 8000b12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b0e:	6181      	str	r1, [r0, #24]
 8000b10:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b12:	6281      	str	r1, [r0, #40]	; 0x28
 8000b14:	4770      	bx	lr

08000b16 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b16:	6943      	ldr	r3, [r0, #20]
 8000b18:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b1a:	bf14      	ite	ne
 8000b1c:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b1e:	6181      	streq	r1, [r0, #24]
 8000b20:	4770      	bx	lr

08000b22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b22:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b24:	4604      	mov	r4, r0
{
 8000b26:	b086      	sub	sp, #24
  if (hpcd == NULL)
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d057      	beq.n	8000bdc <HAL_PCD_Init+0xba>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b2c:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000b30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b34:	b91b      	cbnz	r3, 8000b3e <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b36:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b3a:	f004 f8f9 	bl	8004d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	f002 fc12 	bl	800336e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	6860      	ldr	r0, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b4e:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b50:	4615      	mov	r5, r2
 8000b52:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b54:	4298      	cmp	r0, r3
 8000b56:	f102 0201 	add.w	r2, r2, #1
 8000b5a:	d820      	bhi.n	8000b9e <HAL_PCD_Init+0x7c>
 8000b5c:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b5e:	4611      	mov	r1, r2
 8000b60:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b62:	4298      	cmp	r0, r3
 8000b64:	f102 0201 	add.w	r2, r2, #1
 8000b68:	d828      	bhi.n	8000bbc <HAL_PCD_Init+0x9a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b6a:	f104 0610 	add.w	r6, r4, #16
 8000b6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b70:	466d      	mov	r5, sp
 8000b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b74:	6833      	ldr	r3, [r6, #0]
 8000b76:	602b      	str	r3, [r5, #0]
 8000b78:	1d23      	adds	r3, r4, #4
 8000b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b7c:	6820      	ldr	r0, [r4, #0]
 8000b7e:	f002 fc00 	bl	8003382 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000b82:	2500      	movs	r5, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8000b84:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000b86:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000b8a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b8e:	69e3      	ldr	r3, [r4, #28]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d102      	bne.n	8000b9a <HAL_PCD_Init+0x78>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b94:	4620      	mov	r0, r4
 8000b96:	f000 fbbc 	bl	8001312 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	e01f      	b.n	8000bde <HAL_PCD_Init+0xbc>
    hpcd->IN_ep[i].is_in = 1U;
 8000b9e:	eb04 1143 	add.w	r1, r4, r3, lsl #5
    hpcd->IN_ep[i].num = i;
 8000ba2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ba6:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ba8:	3302      	adds	r3, #2
 8000baa:	015b      	lsls	r3, r3, #5
    hpcd->IN_ep[i].is_in = 1U;
 8000bac:	f881 6029 	strb.w	r6, [r1, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bb0:	f881 502b 	strb.w	r5, [r1, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bb4:	638d      	str	r5, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bb6:	63cd      	str	r5, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bb8:	50e5      	str	r5, [r4, r3]
 8000bba:	e7ca      	b.n	8000b52 <HAL_PCD_Init+0x30>
    hpcd->OUT_ep[i].is_in = 0U;
 8000bbc:	eb04 1543 	add.w	r5, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8000bc0:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bc4:	330a      	adds	r3, #10
 8000bc6:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8000bc8:	f885 1129 	strb.w	r1, [r5, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000bcc:	f885 112b 	strb.w	r1, [r5, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000bd0:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bd4:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000bd8:	50e1      	str	r1, [r4, r3]
 8000bda:	e7c1      	b.n	8000b60 <HAL_PCD_Init+0x3e>
    return HAL_ERROR;
 8000bdc:	2001      	movs	r0, #1
}
 8000bde:	b006      	add	sp, #24
 8000be0:	bd70      	pop	{r4, r5, r6, pc}

08000be2 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000be2:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8000be6:	2b01      	cmp	r3, #1
{
 8000be8:	b510      	push	{r4, lr}
 8000bea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000bec:	d00c      	beq.n	8000c08 <HAL_PCD_Start+0x26>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8000bf4:	6800      	ldr	r0, [r0, #0]
 8000bf6:	f002 fea6 	bl	8003946 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000bfa:	6820      	ldr	r0, [r4, #0]
 8000bfc:	f002 fbac 	bl	8003358 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000c06:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c08:	2002      	movs	r0, #2
}
 8000c0a:	bd10      	pop	{r4, pc}

08000c0c <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000c0c:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8000c10:	2a01      	cmp	r2, #1
{
 8000c12:	b510      	push	{r4, lr}
 8000c14:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c16:	d00b      	beq.n	8000c30 <HAL_PCD_SetAddress+0x24>
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8000c1e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c22:	6800      	ldr	r0, [r0, #0]
 8000c24:	f002 fe89 	bl	800393a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8000c2e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000c30:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000c32:	bd10      	pop	{r4, pc}

08000c34 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	4604      	mov	r4, r0
 8000c38:	f001 0007 	and.w	r0, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c3c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000c40:	b2c5      	uxtb	r5, r0
 8000c42:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c46:	fb01 4105 	mla	r1, r1, r5, r4
    ep->is_in = 1U;
 8000c4a:	bf15      	itete	ne
 8000c4c:	eb04 1545 	addne.w	r5, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8000c50:	eb04 1545 	addeq.w	r5, r4, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c54:	3128      	addne	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c56:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 1U;
 8000c5a:	bf15      	itete	ne
 8000c5c:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8000c5e:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8000c60:	f885 6029 	strbne.w	r6, [r5, #41]	; 0x29
    ep->is_in = 0U;
 8000c64:	f885 6129 	strbeq.w	r6, [r5, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8000c68:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8000c6a:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8000c6c:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c6e:	b2c0      	uxtb	r0, r0
 8000c70:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8000c72:	b102      	cbz	r2, 8000c76 <HAL_PCD_EP_Open+0x42>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c74:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c76:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8000c78:	bf04      	itt	eq
 8000c7a:	2300      	moveq	r3, #0
 8000c7c:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000c7e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d009      	beq.n	8000c9a <HAL_PCD_EP_Open+0x66>
 8000c86:	2301      	movs	r3, #1
 8000c88:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c8c:	6820      	ldr	r0, [r4, #0]
 8000c8e:	f002 fb95 	bl	80033bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000c9a:	2002      	movs	r0, #2
}
 8000c9c:	bd70      	pop	{r4, r5, r6, pc}

08000c9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c9e:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ca2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	f04f 0120 	mov.w	r1, #32
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cac:	fb01 0102 	mla	r1, r1, r2, r0
{
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	4604      	mov	r4, r0
    ep->is_in = 1U;
 8000cb4:	bf19      	ittee	ne
 8000cb6:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cba:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cbc:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 8000cc0:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 8000cc4:	bf15      	itete	ne
 8000cc6:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8000cc8:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8000cca:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 8000cce:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000cd2:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 8000cd4:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d009      	beq.n	8000cf0 <HAL_PCD_EP_Close+0x52>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000ce2:	6820      	ldr	r0, [r4, #0]
 8000ce4:	f002 fcdc 	bl	80036a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8000cee:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000cf0:	2002      	movs	r0, #2
}
 8000cf2:	bd10      	pop	{r4, pc}

08000cf4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cfa:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8000cfe:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000d00:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d02:	f886 1128 	strb.w	r1, [r6, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d06:	f504 7194 	add.w	r1, r4, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d0a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d0c:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
  ep->xfer_len = len;
 8000d10:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
  ep->xfer_count = 0U;
 8000d14:	f8c6 5144 	str.w	r5, [r6, #324]	; 0x144
  ep->is_in = 0U;
 8000d18:	f886 5129 	strb.w	r5, [r6, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d1c:	6800      	ldr	r0, [r0, #0]
 8000d1e:	f002 fe33 	bl	8003988 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000d22:	4628      	mov	r0, r5
 8000d24:	bd70      	pop	{r4, r5, r6, pc}

08000d26 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d26:	f001 0107 	and.w	r1, r1, #7
 8000d2a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000d2e:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8000d32:	4770      	bx	lr

08000d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	f001 0107 	and.w	r1, r1, #7
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d3a:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8000d3e:	014c      	lsls	r4, r1, #5
  ep->xfer_len = len;
 8000d40:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0U;
 8000d42:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000d44:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d46:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d4a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d4e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8000d50:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000d52:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1U;
 8000d54:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d58:	6800      	ldr	r0, [r0, #0]
 8000d5a:	f002 fe15 	bl	8003988 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000d5e:	4630      	mov	r0, r6
 8000d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d64 <HAL_PCD_IRQHandler>:
{
 8000d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d68:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d6a:	6800      	ldr	r0, [r0, #0]
 8000d6c:	f002 fdf6 	bl	800395c <USB_ReadInterrupts>
 8000d70:	0402      	lsls	r2, r0, #16
 8000d72:	f100 823a 	bmi.w	80011ea <HAL_PCD_IRQHandler+0x486>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d76:	6820      	ldr	r0, [r4, #0]
 8000d78:	f002 fdf0 	bl	800395c <USB_ReadInterrupts>
 8000d7c:	0543      	lsls	r3, r0, #21
 8000d7e:	d50f      	bpl.n	8000da0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d80:	6822      	ldr	r2, [r4, #0]
 8000d82:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000d8e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d90:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000d94:	f004 f81d 	bl	8004dd2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f7ff ff36 	bl	8000c0c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	f002 fddb 	bl	800395c <USB_ReadInterrupts>
 8000da6:	0443      	lsls	r3, r0, #17
 8000da8:	d508      	bpl.n	8000dbc <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000daa:	6822      	ldr	r2, [r4, #0]
 8000dac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	0c1b      	lsrs	r3, r3, #16
 8000db8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dbc:	6820      	ldr	r0, [r4, #0]
 8000dbe:	f002 fdcd 	bl	800395c <USB_ReadInterrupts>
 8000dc2:	0487      	lsls	r7, r0, #18
 8000dc4:	d508      	bpl.n	8000dd8 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dc6:	6822      	ldr	r2, [r4, #0]
 8000dc8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dd0:	041b      	lsls	r3, r3, #16
 8000dd2:	0c1b      	lsrs	r3, r3, #16
 8000dd4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000dd8:	6820      	ldr	r0, [r4, #0]
 8000dda:	f002 fdbf 	bl	800395c <USB_ReadInterrupts>
 8000dde:	04c6      	lsls	r6, r0, #19
 8000de0:	d526      	bpl.n	8000e30 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000de2:	6822      	ldr	r2, [r4, #0]
 8000de4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000de8:	f023 0304 	bic.w	r3, r3, #4
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000df4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000df8:	f023 0308 	bic.w	r3, r3, #8
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	0c1b      	lsrs	r3, r3, #16
 8000e00:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 8000e04:	f894 3260 	ldrb.w	r3, [r4, #608]	; 0x260
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <HAL_PCD_IRQHandler+0xb4>
      hpcd->LPM_State = LPM_L0;
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e12:	4620      	mov	r0, r4
 8000e14:	f004 f8e0 	bl	8004fd8 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f003 fffd 	bl	8004e18 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e1e:	6822      	ldr	r2, [r4, #0]
 8000e20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e30:	6820      	ldr	r0, [r4, #0]
 8000e32:	f002 fd93 	bl	800395c <USB_ReadInterrupts>
 8000e36:	0505      	lsls	r5, r0, #20
 8000e38:	d51d      	bpl.n	8000e76 <HAL_PCD_IRQHandler+0x112>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e3a:	6820      	ldr	r0, [r4, #0]
 8000e3c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	f043 0308 	orr.w	r3, r3, #8
 8000e46:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e4a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e5a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000e68:	f002 fd78 	bl	800395c <USB_ReadInterrupts>
 8000e6c:	04c0      	lsls	r0, r0, #19
 8000e6e:	d402      	bmi.n	8000e76 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SuspendCallback(hpcd);
 8000e70:	4620      	mov	r0, r4
 8000e72:	f003 ffc1 	bl	8004df8 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000e76:	6820      	ldr	r0, [r4, #0]
 8000e78:	f002 fd70 	bl	800395c <USB_ReadInterrupts>
 8000e7c:	0601      	lsls	r1, r0, #24
 8000e7e:	d529      	bpl.n	8000ed4 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e8a:	0412      	lsls	r2, r2, #16
 8000e8c:	0c12      	lsrs	r2, r2, #16
 8000e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000e92:	f894 2260 	ldrb.w	r2, [r4, #608]	; 0x260
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	f040 81ac 	bne.w	80011f4 <HAL_PCD_IRQHandler+0x490>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e9c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000ea0:	b292      	uxth	r2, r2
 8000ea2:	f042 0204 	orr.w	r2, r2, #4
 8000ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000eaa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	f042 0208 	orr.w	r2, r2, #8
 8000eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000eb8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000ebc:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8000ec0:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000ec2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8000ec6:	f884 1260 	strb.w	r1, [r4, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000eca:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f004 f882 	bl	8004fd8 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ed4:	6820      	ldr	r0, [r4, #0]
 8000ed6:	f002 fd41 	bl	800395c <USB_ReadInterrupts>
 8000eda:	0582      	lsls	r2, r0, #22
 8000edc:	d50b      	bpl.n	8000ef6 <HAL_PCD_IRQHandler+0x192>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	0c1b      	lsrs	r3, r3, #16
 8000eec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f003 ff6a 	bl	8004dca <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	f002 fd30 	bl	800395c <USB_ReadInterrupts>
 8000efc:	05c3      	lsls	r3, r0, #23
 8000efe:	d508      	bpl.n	8000f12 <HAL_PCD_IRQHandler+0x1ae>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f0a:	041b      	lsls	r3, r3, #16
 8000f0c:	0c1b      	lsrs	r3, r3, #16
 8000f0e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8000f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 8000f16:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8000f1a:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8000f1c:	f011 070f 	ands.w	r7, r1, #15
 8000f20:	f040 80ab 	bne.w	800107a <HAL_PCD_IRQHandler+0x316>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f24:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f26:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f2a:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f2c:	d12b      	bne.n	8000f86 <HAL_PCD_IRQHandler+0x222>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f2e:	ea03 030a 	and.w	r3, r3, sl
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f36:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f3c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000f40:	f200 4002 	addw	r0, r0, #1026	; 0x402
 8000f44:	fa10 f083 	uxtah	r0, r0, r3
 8000f48:	f830 3032 	ldrh.w	r3, [r0, r2, lsl #3]
        ep->xfer_buff += ep->xfer_count;
 8000f4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f52:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000f54:	4413      	add	r3, r2
 8000f56:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f003 ff2f 	bl	8004dbc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f5e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f62:	b153      	cbz	r3, 8000f7a <HAL_PCD_IRQHandler+0x216>
 8000f64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f66:	b942      	cbnz	r2, 8000f7a <HAL_PCD_IRQHandler+0x216>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f68:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f6c:	6821      	ldr	r1, [r4, #0]
 8000f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f72:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f76:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f7a:	6820      	ldr	r0, [r4, #0]
 8000f7c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	d4c8      	bmi.n	8000f16 <HAL_PCD_IRQHandler+0x1b2>
 8000f84:	e6f7      	b.n	8000d76 <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f86:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8000f8a:	d020      	beq.n	8000fce <HAL_PCD_IRQHandler+0x26a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f8c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f90:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000f94:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000f98:	fa11 f383 	uxtah	r3, r1, r3

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f9c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8000fa0:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000fa4:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8000fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fb0:	f002 fdcc 	bl	8003b4c <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	8813      	ldrh	r3, [r2, #0]
 8000fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fbc:	051b      	lsls	r3, r3, #20
 8000fbe:	0d1b      	lsrs	r3, r3, #20
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	8013      	strh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f003 feea 	bl	8004da0 <HAL_PCD_SetupStageCallback>
 8000fcc:	e7d5      	b.n	8000f7a <HAL_PCD_IRQHandler+0x216>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fce:	041f      	lsls	r7, r3, #16
 8000fd0:	d5d3      	bpl.n	8000f7a <HAL_PCD_IRQHandler+0x216>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fd2:	8803      	ldrh	r3, [r0, #0]
 8000fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fd8:	051b      	lsls	r3, r3, #20
 8000fda:	0d1b      	lsrs	r3, r3, #20
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fe2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fe6:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8000fea:	f200 4106 	addw	r1, r0, #1030	; 0x406
 8000fee:	fa11 f383 	uxtah	r3, r1, r3
 8000ff2:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
 8000ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ffa:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000ffe:	b18b      	cbz	r3, 8001024 <HAL_PCD_IRQHandler+0x2c0>
 8001000:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001004:	b171      	cbz	r1, 8001024 <HAL_PCD_IRQHandler+0x2c0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001006:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800100a:	f002 fd9f 	bl	8003b4c <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800100e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001012:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8001016:	4413      	add	r3, r2
 8001018:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800101c:	4629      	mov	r1, r5
 800101e:	4620      	mov	r0, r4
 8001020:	f003 fec4 	bl	8004dac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800102a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800102e:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8001032:	b292      	uxth	r2, r2
 8001034:	b933      	cbnz	r3, 8001044 <HAL_PCD_IRQHandler+0x2e0>
 8001036:	5aab      	ldrh	r3, [r5, r2]
 8001038:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800103c:	ea43 030b 	orr.w	r3, r3, fp
 8001040:	52ab      	strh	r3, [r5, r2]
 8001042:	e007      	b.n	8001054 <HAL_PCD_IRQHandler+0x2f0>
 8001044:	2b3d      	cmp	r3, #61	; 0x3d
 8001046:	d814      	bhi.n	8001072 <HAL_PCD_IRQHandler+0x30e>
 8001048:	0859      	lsrs	r1, r3, #1
 800104a:	07de      	lsls	r6, r3, #31
 800104c:	bf48      	it	mi
 800104e:	3101      	addmi	r1, #1
 8001050:	0289      	lsls	r1, r1, #10
 8001052:	52a9      	strh	r1, [r5, r2]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001054:	8803      	ldrh	r3, [r0, #0]
 8001056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800105a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	0c1b      	lsrs	r3, r3, #16
 8001062:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106e:	8003      	strh	r3, [r0, #0]
 8001070:	e783      	b.n	8000f7a <HAL_PCD_IRQHandler+0x216>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	ea4b 2383 	orr.w	r3, fp, r3, lsl #10
 8001078:	e7e2      	b.n	8001040 <HAL_PCD_IRQHandler+0x2dc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800107a:	b23e      	sxth	r6, r7
 800107c:	f830 9026 	ldrh.w	r9, [r0, r6, lsl #2]
 8001080:	fa1f f989 	uxth.w	r9, r9
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001084:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8001088:	d040      	beq.n	800110c <HAL_PCD_IRQHandler+0x3a8>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800108a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800108e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001092:	051b      	lsls	r3, r3, #20
 8001094:	0d1b      	lsrs	r3, r3, #20
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800109a:	ea4f 1847 	mov.w	r8, r7, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800109e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80010a2:	eb04 0108 	add.w	r1, r4, r8
 80010a6:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d159      	bne.n	8001162 <HAL_PCD_IRQHandler+0x3fe>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010b2:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 80010b6:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80010ba:	fa15 f383 	uxtah	r3, r5, r3
 80010be:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80010c2:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80010c6:	b135      	cbz	r5, 80010d6 <HAL_PCD_IRQHandler+0x372>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80010c8:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 80010cc:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80010d0:	462b      	mov	r3, r5
 80010d2:	f002 fd3b 	bl	8003b4c <USB_ReadPMA>
 80010d6:	eb04 1346 	add.w	r3, r4, r6, lsl #5
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
        ep->xfer_buff += count;
 80010da:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count += count;
 80010de:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80010e2:	442a      	add	r2, r5
 80010e4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        ep->xfer_buff += count;
 80010e8:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
 80010ec:	442a      	add	r2, r5
 80010ee:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80010f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f6:	b11b      	cbz	r3, 8001100 <HAL_PCD_IRQHandler+0x39c>
 80010f8:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 80010fc:	4285      	cmp	r5, r0
 80010fe:	d26b      	bcs.n	80011d8 <HAL_PCD_IRQHandler+0x474>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001100:	44a0      	add	r8, r4
 8001102:	4620      	mov	r0, r4
 8001104:	f898 1128 	ldrb.w	r1, [r8, #296]	; 0x128
 8001108:	f003 fe50 	bl	8004dac <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800110c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001110:	f43f af33 	beq.w	8000f7a <HAL_PCD_IRQHandler+0x216>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 800111a:	b29b      	uxth	r3, r3
 800111c:	ea03 030a 	and.w	r3, r3, sl
 8001120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001124:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001128:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 800112c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001130:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001134:	f202 4202 	addw	r2, r2, #1026	; 0x402
 8001138:	fa12 f283 	uxtah	r2, r2, r3
 800113c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001140:	f832 2031 	ldrh.w	r2, [r2, r1, lsl #3]
 8001144:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001148:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800114a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800114c:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8001150:	441a      	add	r2, r3
 8001152:	63fa      	str	r2, [r7, #60]	; 0x3c

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001154:	6c33      	ldr	r3, [r6, #64]	; 0x40
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001156:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001158:	2b00      	cmp	r3, #0
 800115a:	d143      	bne.n	80011e4 <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800115c:	f003 fe2e 	bl	8004dbc <HAL_PCD_DataInStageCallback>
 8001160:	e70b      	b.n	8000f7a <HAL_PCD_IRQHandler+0x216>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001162:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8001166:	b213      	sxth	r3, r2
 8001168:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800116c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001170:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001174:	d022      	beq.n	80011bc <HAL_PCD_IRQHandler+0x458>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001176:	f200 4502 	addw	r5, r0, #1026	; 0x402
 800117a:	fa15 f383 	uxtah	r3, r5, r3
 800117e:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 8001182:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001186:	b135      	cbz	r5, 8001196 <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001188:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
 800118c:	462b      	mov	r3, r5
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800118e:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001192:	f002 fcdb 	bl	8003b4c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001196:	eb04 0308 	add.w	r3, r4, r8
 800119a:	6822      	ldr	r2, [r4, #0]
 800119c:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80011a0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80011aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011b6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80011ba:	e78c      	b.n	80010d6 <HAL_PCD_IRQHandler+0x372>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011bc:	f200 4506 	addw	r5, r0, #1030	; 0x406
 80011c0:	fa15 f383 	uxtah	r3, r5, r3
 80011c4:	f833 5032 	ldrh.w	r5, [r3, r2, lsl #3]
 80011c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	d0e2      	beq.n	8001196 <HAL_PCD_IRQHandler+0x432>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011d0:	462b      	mov	r3, r5
 80011d2:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 80011d6:	e7da      	b.n	800118e <HAL_PCD_IRQHandler+0x42a>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80011d8:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fd89 	bl	8000cf4 <HAL_PCD_EP_Receive>
 80011e2:	e793      	b.n	800110c <HAL_PCD_IRQHandler+0x3a8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80011e4:	f7ff fda6 	bl	8000d34 <HAL_PCD_EP_Transmit>
 80011e8:	e6c7      	b.n	8000f7a <HAL_PCD_IRQHandler+0x216>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80011ea:	f8df a010 	ldr.w	sl, [pc, #16]	; 80011fc <HAL_PCD_IRQHandler+0x498>
 80011ee:	f8df b010 	ldr.w	fp, [pc, #16]	; 8001200 <HAL_PCD_IRQHandler+0x49c>
 80011f2:	e6c2      	b.n	8000f7a <HAL_PCD_IRQHandler+0x216>
      HAL_PCD_SuspendCallback(hpcd);
 80011f4:	4620      	mov	r0, r4
 80011f6:	f003 fdff 	bl	8004df8 <HAL_PCD_SuspendCallback>
 80011fa:	e66b      	b.n	8000ed4 <HAL_PCD_IRQHandler+0x170>
 80011fc:	ffff8f0f 	.word	0xffff8f0f
 8001200:	ffff8000 	.word	0xffff8000

08001204 <HAL_PCD_EP_SetStall>:
{
 8001204:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001206:	6843      	ldr	r3, [r0, #4]
 8001208:	f001 0507 	and.w	r5, r1, #7
 800120c:	429d      	cmp	r5, r3
{
 800120e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001210:	d82d      	bhi.n	800126e <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8001212:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001216:	f04f 0320 	mov.w	r3, #32
 800121a:	d01e      	beq.n	800125a <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 800121c:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001220:	fb03 0305 	mla	r3, r3, r5, r0
    ep->is_in = 1U;
 8001224:	2101      	movs	r1, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001226:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8001228:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
  ep->is_stall = 1U;
 800122c:	2201      	movs	r2, #1
 800122e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001230:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001232:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
 8001236:	4291      	cmp	r1, r2
 8001238:	d01b      	beq.n	8001272 <HAL_PCD_EP_SetStall+0x6e>
 800123a:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800123e:	4619      	mov	r1, r3
 8001240:	6820      	ldr	r0, [r4, #0]
 8001242:	f002 fb0d 	bl	8003860 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001246:	b925      	cbnz	r5, 8001252 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001248:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	f002 fb89 	bl	8003964 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001252:	2000      	movs	r0, #0
 8001254:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 8001258:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800125a:	fb03 0301 	mla	r3, r3, r1, r0
    ep->is_in = 0U;
 800125e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001262:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001264:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 8001268:	f881 2129 	strb.w	r2, [r1, #297]	; 0x129
 800126c:	e7de      	b.n	800122c <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 800126e:	2001      	movs	r0, #1
 8001270:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001272:	2002      	movs	r0, #2
}
 8001274:	bd38      	pop	{r3, r4, r5, pc}

08001276 <HAL_PCD_EP_ClrStall>:
{
 8001276:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001278:	6843      	ldr	r3, [r0, #4]
 800127a:	f001 020f 	and.w	r2, r1, #15
 800127e:	429a      	cmp	r2, r3
{
 8001280:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001282:	d82a      	bhi.n	80012da <HAL_PCD_EP_ClrStall+0x64>
 8001284:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8001288:	f011 0f80 	tst.w	r1, #128	; 0x80
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f04f 0120 	mov.w	r1, #32
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001292:	fb01 0102 	mla	r1, r1, r2, r0
 8001296:	bf19      	ittee	ne
 8001298:	3128      	addne	r1, #40	; 0x28
    ep->is_in = 1U;
 800129a:	eb00 1242 	addne.w	r2, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800129e:	f501 7194 	addeq.w	r1, r1, #296	; 0x128
    ep->is_in = 0U;
 80012a2:	eb04 1242 	addeq.w	r2, r4, r2, lsl #5
    ep->is_in = 1U;
 80012a6:	bf14      	ite	ne
 80012a8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80012aa:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80012ac:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80012b0:	bf14      	ite	ne
 80012b2:	f882 0029 	strbne.w	r0, [r2, #41]	; 0x29
    ep->is_in = 0U;
 80012b6:	f882 0129 	strbeq.w	r0, [r2, #297]	; 0x129
  ep->is_stall = 0U;
 80012ba:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012bc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80012be:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d00b      	beq.n	80012de <HAL_PCD_EP_ClrStall+0x68>
 80012c6:	2301      	movs	r3, #1
 80012c8:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012cc:	6820      	ldr	r0, [r4, #0]
 80012ce:	f002 fae8 	bl	80038a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012d2:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 80012d6:	4628      	mov	r0, r5
 80012d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
 80012dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80012de:	2002      	movs	r0, #2
}
 80012e0:	bd38      	pop	{r3, r4, r5, pc}

080012e2 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80012e2:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012e6:	bf1b      	ittet	ne
 80012e8:	f001 0107 	andne.w	r1, r1, #7
 80012ec:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012f0:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f4:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80012f6:	bf08      	it	eq
 80012f8:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80012fc:	b91a      	cbnz	r2, 8001306 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80012fe:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001300:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001302:	2000      	movs	r0, #0
 8001304:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001306:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001308:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800130a:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800130c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800130e:	8143      	strh	r3, [r0, #10]
 8001310:	e7f7      	b.n	8001302 <HAL_PCDEx_PMAConfig+0x20>

08001312 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001312:	6802      	ldr	r2, [r0, #0]
{
 8001314:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001316:	2101      	movs	r1, #1
 8001318:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800131c:	2000      	movs	r0, #0
 800131e:	f883 0260 	strb.w	r0, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001322:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001326:	b29b      	uxth	r3, r3
 8001328:	430b      	orrs	r3, r1
 800132a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800132e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 8001332:	b29b      	uxth	r3, r3
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800133c:	4770      	bx	lr
	...

08001340 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001340:	4a02      	ldr	r2, [pc, #8]	; (800134c <HAL_PWR_EnableBkUpAccess+0xc>)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4770      	bx	lr
 800134c:	58000400 	.word	0x58000400

08001350 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_PWREx_GetVoltageRange+0xc>)
 8001352:	6818      	ldr	r0, [r3, #0]
}
 8001354:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	58000400 	.word	0x58000400

08001360 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001360:	4a02      	ldr	r2, [pc, #8]	; (800136c <HAL_PWREx_EnableVddUSB+0xc>)
 8001362:	6853      	ldr	r3, [r2, #4]
 8001364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001368:	6053      	str	r3, [r2, #4]
 800136a:	4770      	bx	lr
 800136c:	58000400 	.word	0x58000400

08001370 <LL_RCC_HSE_IsReady>:
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6818      	ldr	r0, [r3, #0]
}
 8001376:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800137a:	4770      	bx	lr

0800137c <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001380:	6818      	ldr	r0, [r3, #0]
}
 8001382:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8001386:	4770      	bx	lr

08001388 <LL_RCC_LSI1_IsReady>:
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
 8001390:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001394:	4770      	bx	lr

08001396 <LL_RCC_MSI_IsReady>:
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	6818      	ldr	r0, [r3, #0]
}
 800139c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80013a0:	4770      	bx	lr

080013a2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80013a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a6:	6813      	ldr	r3, [r2, #0]
 80013a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ac:	4318      	orrs	r0, r3
 80013ae:	6010      	str	r0, [r2, #0]
 80013b0:	4770      	bx	lr

080013b2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
  {
    msiRange = LL_RCC_MSIRANGE_11;
  }
  return msiRange;
}
 80013bc:	28b0      	cmp	r0, #176	; 0xb0
 80013be:	bf28      	it	cs
 80013c0:	20b0      	movcs	r0, #176	; 0xb0
 80013c2:	4770      	bx	lr

080013c4 <LL_RCC_MSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80013c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c8:	6853      	ldr	r3, [r2, #4]
 80013ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80013ce:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80013d2:	6050      	str	r0, [r2, #4]
 80013d4:	4770      	bx	lr
	...

080013d8 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80013d8:	28b0      	cmp	r0, #176	; 0xb0
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80013dc:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80013de:	bf98      	it	ls
 80013e0:	0900      	lsrls	r0, r0, #4
{
 80013e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80013e4:	bf8c      	ite	hi
 80013e6:	6add      	ldrhi	r5, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80013e8:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80013ec:	4c2f      	ldr	r4, [pc, #188]	; (80014ac <RCC_SetFlashLatencyFromMSIRange+0xd4>)
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80013f2:	b08d      	sub	sp, #52	; 0x34
 80013f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80013f8:	f003 030f 	and.w	r3, r3, #15
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80013fc:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8001408:	fbb5 f5f3 	udiv	r5, r5, r3
 800140c:	f7ff ffa0 	bl	8001350 <HAL_PWREx_GetVoltageRange>
 8001410:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001412:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001416:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800141a:	f104 0210 	add.w	r2, r4, #16
 800141e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001420:	ab01      	add	r3, sp, #4
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001422:	341c      	adds	r4, #28
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001424:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001428:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001430:	ac0c      	add	r4, sp, #48	; 0x30
 8001432:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001436:	d11f      	bne.n	8001478 <RCC_SetFlashLatencyFromMSIRange+0xa0>
 8001438:	2300      	movs	r3, #0
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800143a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800143e:	4295      	cmp	r5, r2
 8001440:	d815      	bhi.n	800146e <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001442:	aa0c      	add	r2, sp, #48	; 0x30
 8001444:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001448:	f853 4c10 	ldr.w	r4, [r3, #-16]
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800144c:	4d19      	ldr	r5, [pc, #100]	; (80014b4 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	f023 0307 	bic.w	r3, r3, #7
 8001454:	4323      	orrs	r3, r4
 8001456:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001458:	f7ff f8b2 	bl	80005c0 <HAL_GetTick>
 800145c:	4606      	mov	r6, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	429c      	cmp	r4, r3
 8001466:	d116      	bne.n	8001496 <RCC_SetFlashLatencyFromMSIRange+0xbe>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001468:	2000      	movs	r0, #0
}
 800146a:	b00d      	add	sp, #52	; 0x34
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800146e:	3301      	adds	r3, #1
 8001470:	2b04      	cmp	r3, #4
 8001472:	d1e2      	bne.n	800143a <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001474:	2400      	movs	r4, #0
 8001476:	e7e9      	b.n	800144c <RCC_SetFlashLatencyFromMSIRange+0x74>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001478:	9b01      	ldr	r3, [sp, #4]
 800147a:	429d      	cmp	r5, r3
 800147c:	d907      	bls.n	800148e <RCC_SetFlashLatencyFromMSIRange+0xb6>
 800147e:	9b02      	ldr	r3, [sp, #8]
 8001480:	429d      	cmp	r5, r3
 8001482:	d906      	bls.n	8001492 <RCC_SetFlashLatencyFromMSIRange+0xba>
 8001484:	9b03      	ldr	r3, [sp, #12]
 8001486:	429d      	cmp	r5, r3
 8001488:	d8f4      	bhi.n	8001474 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800148a:	2302      	movs	r3, #2
 800148c:	e7d9      	b.n	8001442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800148e:	2300      	movs	r3, #0
 8001490:	e7d7      	b.n	8001442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001492:	2301      	movs	r3, #1
 8001494:	e7d5      	b.n	8001442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001496:	f7ff f893 	bl	80005c0 <HAL_GetTick>
 800149a:	1b80      	subs	r0, r0, r6
 800149c:	2802      	cmp	r0, #2
 800149e:	d9de      	bls.n	800145e <RCC_SetFlashLatencyFromMSIRange+0x86>
      return HAL_TIMEOUT;
 80014a0:	2003      	movs	r0, #3
 80014a2:	e7e2      	b.n	800146a <RCC_SetFlashLatencyFromMSIRange+0x92>
 80014a4:	080061f8 	.word	0x080061f8
 80014a8:	08006198 	.word	0x08006198
 80014ac:	080060c0 	.word	0x080060c0
 80014b0:	000f4240 	.word	0x000f4240
 80014b4:	58004000 	.word	0x58004000

080014b8 <HAL_RCC_OscConfig>:
{
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RCC_OscInitStruct == NULL)
 80014ba:	4604      	mov	r4, r0
 80014bc:	b908      	cbnz	r0, 80014c2 <HAL_RCC_OscConfig+0xa>
    return HAL_ERROR;
 80014be:	2001      	movs	r0, #1
 80014c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c2:	6803      	ldr	r3, [r0, #0]
 80014c4:	069f      	lsls	r7, r3, #26
 80014c6:	d52a      	bpl.n	800151e <HAL_RCC_OscConfig+0x66>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014cc:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80014ce:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014d0:	f013 030c 	ands.w	r3, r3, #12
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2a>
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d146      	bne.n	8001568 <HAL_RCC_OscConfig+0xb0>
 80014da:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d142      	bne.n	8001568 <HAL_RCC_OscConfig+0xb0>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e2:	f7ff ff58 	bl	8001396 <LL_RCC_MSI_IsReady>
 80014e6:	b110      	cbz	r0, 80014ee <HAL_RCC_OscConfig+0x36>
 80014e8:	69e3      	ldr	r3, [r4, #28]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0e7      	beq.n	80014be <HAL_RCC_OscConfig+0x6>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014f0:	f7ff ff5f 	bl	80013b2 <LL_RCC_MSI_GetRange>
 80014f4:	4282      	cmp	r2, r0
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f8:	d92b      	bls.n	8001552 <HAL_RCC_OscConfig+0x9a>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fa:	f7ff ff6d 	bl	80013d8 <RCC_SetFlashLatencyFromMSIRange>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d1dd      	bne.n	80014be <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001504:	f7ff ff4d 	bl	80013a2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001508:	6a20      	ldr	r0, [r4, #32]
 800150a:	f7ff ff5b 	bl	80013c4 <LL_RCC_MSI_SetCalibTrimming>
        SystemCoreClockUpdate();
 800150e:	f003 fb6b 	bl	8004be8 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001512:	4bb8      	ldr	r3, [pc, #736]	; (80017f4 <HAL_RCC_OscConfig+0x33c>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f7ff f80b 	bl	8000530 <HAL_InitTick>
 800151a:	2800      	cmp	r0, #0
 800151c:	d1cf      	bne.n	80014be <HAL_RCC_OscConfig+0x6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	07de      	lsls	r6, r3, #31
 8001522:	d44e      	bmi.n	80015c2 <HAL_RCC_OscConfig+0x10a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	079d      	lsls	r5, r3, #30
 8001528:	f100 8098 	bmi.w	800165c <HAL_RCC_OscConfig+0x1a4>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	f013 0f18 	tst.w	r3, #24
 8001532:	f040 80d9 	bne.w	80016e8 <HAL_RCC_OscConfig+0x230>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001536:	6823      	ldr	r3, [r4, #0]
 8001538:	0758      	lsls	r0, r3, #29
 800153a:	f100 8168 	bmi.w	800180e <HAL_RCC_OscConfig+0x356>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	0658      	lsls	r0, r3, #25
 8001542:	f100 81ba 	bmi.w	80018ba <HAL_RCC_OscConfig+0x402>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001546:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001548:	2900      	cmp	r1, #0
 800154a:	f040 81e2 	bne.w	8001912 <HAL_RCC_OscConfig+0x45a>
  return HAL_OK;
 800154e:	2000      	movs	r0, #0
 8001550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001552:	f7ff ff26 	bl	80013a2 <LL_RCC_MSI_SetRange>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001556:	6a20      	ldr	r0, [r4, #32]
 8001558:	f7ff ff34 	bl	80013c4 <LL_RCC_MSI_SetCalibTrimming>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800155e:	f7ff ff3b 	bl	80013d8 <RCC_SetFlashLatencyFromMSIRange>
 8001562:	2800      	cmp	r0, #0
 8001564:	d0d3      	beq.n	800150e <HAL_RCC_OscConfig+0x56>
 8001566:	e7aa      	b.n	80014be <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001568:	69e2      	ldr	r2, [r4, #28]
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	b1ba      	cbz	r2, 80015a0 <HAL_RCC_OscConfig+0xe8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001578:	f7ff f822 	bl	80005c0 <HAL_GetTick>
 800157c:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 800157e:	f7ff ff0a 	bl	8001396 <LL_RCC_MSI_IsReady>
 8001582:	b130      	cbz	r0, 8001592 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001584:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001586:	f7ff ff0c 	bl	80013a2 <LL_RCC_MSI_SetRange>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158a:	6a20      	ldr	r0, [r4, #32]
 800158c:	f7ff ff1a 	bl	80013c4 <LL_RCC_MSI_SetCalibTrimming>
 8001590:	e7c5      	b.n	800151e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001592:	f7ff f815 	bl	80005c0 <HAL_GetTick>
 8001596:	1b40      	subs	r0, r0, r5
 8001598:	2802      	cmp	r0, #2
 800159a:	d9f0      	bls.n	800157e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800159c:	2003      	movs	r0, #3
 800159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a8:	f7ff f80a 	bl	80005c0 <HAL_GetTick>
 80015ac:	4605      	mov	r5, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 80015ae:	f7ff fef2 	bl	8001396 <LL_RCC_MSI_IsReady>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d0b3      	beq.n	800151e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b6:	f7ff f803 	bl	80005c0 <HAL_GetTick>
 80015ba:	1b40      	subs	r0, r0, r5
 80015bc:	2802      	cmp	r0, #2
 80015be:	d9f6      	bls.n	80015ae <HAL_RCC_OscConfig+0xf6>
 80015c0:	e7ec      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c6:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015c8:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x126>
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d10b      	bne.n	80015ee <HAL_RCC_OscConfig+0x136>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015d6:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_OscConfig+0x136>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	f7ff fec7 	bl	8001370 <LL_RCC_HSE_IsReady>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d09e      	beq.n	8001524 <HAL_RCC_OscConfig+0x6c>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d19b      	bne.n	8001524 <HAL_RCC_OscConfig+0x6c>
 80015ec:	e767      	b.n	80014be <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	6862      	ldr	r2, [r4, #4]
 80015f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f8:	d110      	bne.n	800161c <HAL_RCC_OscConfig+0x164>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001600:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001602:	f7fe ffdd 	bl	80005c0 <HAL_GetTick>
 8001606:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 8001608:	f7ff feb2 	bl	8001370 <LL_RCC_HSE_IsReady>
 800160c:	2800      	cmp	r0, #0
 800160e:	d189      	bne.n	8001524 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7fe ffd6 	bl	80005c0 <HAL_GetTick>
 8001614:	1b40      	subs	r0, r0, r5
 8001616:	2864      	cmp	r0, #100	; 0x64
 8001618:	d9f6      	bls.n	8001608 <HAL_RCC_OscConfig+0x150>
 800161a:	e7bf      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001620:	d104      	bne.n	800162c <HAL_RCC_OscConfig+0x174>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e7e6      	b.n	80015fa <HAL_RCC_OscConfig+0x142>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001632:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800163a:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800163c:	2a00      	cmp	r2, #0
 800163e:	d1e0      	bne.n	8001602 <HAL_RCC_OscConfig+0x14a>
        tickstart = HAL_GetTick();
 8001640:	f7fe ffbe 	bl	80005c0 <HAL_GetTick>
 8001644:	4605      	mov	r5, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 8001646:	f7ff fe93 	bl	8001370 <LL_RCC_HSE_IsReady>
 800164a:	2800      	cmp	r0, #0
 800164c:	f43f af6a 	beq.w	8001524 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7fe ffb6 	bl	80005c0 <HAL_GetTick>
 8001654:	1b40      	subs	r0, r0, r5
 8001656:	2864      	cmp	r0, #100	; 0x64
 8001658:	d9f5      	bls.n	8001646 <HAL_RCC_OscConfig+0x18e>
 800165a:	e79f      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800165c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001660:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001662:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001664:	f003 030c 	and.w	r3, r3, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001668:	2b04      	cmp	r3, #4
 800166a:	d005      	beq.n	8001678 <HAL_RCC_OscConfig+0x1c0>
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d114      	bne.n	800169a <HAL_RCC_OscConfig+0x1e2>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001670:	f002 0303 	and.w	r3, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001674:	2b02      	cmp	r3, #2
 8001676:	d110      	bne.n	800169a <HAL_RCC_OscConfig+0x1e2>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	f7ff fe80 	bl	800137c <LL_RCC_HSI_IsReady>
 800167c:	b118      	cbz	r0, 8001686 <HAL_RCC_OscConfig+0x1ce>
 800167e:	68e3      	ldr	r3, [r4, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f43f af1c 	beq.w	80014be <HAL_RCC_OscConfig+0x6>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168a:	6921      	ldr	r1, [r4, #16]
 800168c:	6853      	ldr	r3, [r2, #4]
 800168e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001692:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001696:	6053      	str	r3, [r2, #4]
 8001698:	e748      	b.n	800152c <HAL_RCC_OscConfig+0x74>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169a:	68e2      	ldr	r2, [r4, #12]
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	b182      	cbz	r2, 80016c4 <HAL_RCC_OscConfig+0x20c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016aa:	f7fe ff89 	bl	80005c0 <HAL_GetTick>
 80016ae:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 80016b0:	f7ff fe64 	bl	800137c <LL_RCC_HSI_IsReady>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d1e6      	bne.n	8001686 <HAL_RCC_OscConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7fe ff82 	bl	80005c0 <HAL_GetTick>
 80016bc:	1b40      	subs	r0, r0, r5
 80016be:	2802      	cmp	r0, #2
 80016c0:	d9f6      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1f8>
 80016c2:	e76b      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016cc:	f7fe ff78 	bl	80005c0 <HAL_GetTick>
 80016d0:	4605      	mov	r5, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 80016d2:	f7ff fe53 	bl	800137c <LL_RCC_HSI_IsReady>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	f43f af28 	beq.w	800152c <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7fe ff70 	bl	80005c0 <HAL_GetTick>
 80016e0:	1b40      	subs	r0, r0, r5
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d9f5      	bls.n	80016d2 <HAL_RCC_OscConfig+0x21a>
 80016e6:	e759      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e8:	6962      	ldr	r2, [r4, #20]
 80016ea:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	d06b      	beq.n	80017ca <HAL_RCC_OscConfig+0x312>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80016f2:	06d9      	lsls	r1, r3, #27
 80016f4:	d543      	bpl.n	800177e <HAL_RCC_OscConfig+0x2c6>
        if (LL_RCC_LSI1_IsReady() == 0U)
 80016f6:	f7ff fe47 	bl	8001388 <LL_RCC_LSI1_IsReady>
 80016fa:	b310      	cbz	r0, 8001742 <HAL_RCC_OscConfig+0x28a>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80016fc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001700:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800170c:	f7fe ff58 	bl	80005c0 <HAL_GetTick>
 8001710:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001712:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001716:	071a      	lsls	r2, r3, #28
 8001718:	f140 8199 	bpl.w	8001a4e <HAL_RCC_OscConfig+0x596>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800171c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001720:	69a2      	ldr	r2, [r4, #24]
 8001722:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001726:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800172a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800172e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800173a:	f7fe ff41 	bl	80005c0 <HAL_GetTick>
 800173e:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001740:	e018      	b.n	8001774 <HAL_RCC_OscConfig+0x2bc>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001742:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 800174e:	f7fe ff37 	bl	80005c0 <HAL_GetTick>
 8001752:	4605      	mov	r5, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001754:	f7ff fe18 	bl	8001388 <LL_RCC_LSI1_IsReady>
 8001758:	2800      	cmp	r0, #0
 800175a:	d1cf      	bne.n	80016fc <HAL_RCC_OscConfig+0x244>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800175c:	f7fe ff30 	bl	80005c0 <HAL_GetTick>
 8001760:	1b40      	subs	r0, r0, r5
 8001762:	2802      	cmp	r0, #2
 8001764:	d9f6      	bls.n	8001754 <HAL_RCC_OscConfig+0x29c>
 8001766:	e719      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001768:	f7fe ff2a 	bl	80005c0 <HAL_GetTick>
 800176c:	1b40      	subs	r0, r0, r5
 800176e:	2802      	cmp	r0, #2
 8001770:	f63f af14 	bhi.w	800159c <HAL_RCC_OscConfig+0xe4>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001774:	f7ff fe08 	bl	8001388 <LL_RCC_LSI1_IsReady>
 8001778:	2800      	cmp	r0, #0
 800177a:	d1f5      	bne.n	8001768 <HAL_RCC_OscConfig+0x2b0>
 800177c:	e6db      	b.n	8001536 <HAL_RCC_OscConfig+0x7e>
 800177e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800178a:	f7fe ff19 	bl	80005c0 <HAL_GetTick>
 800178e:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001790:	f7ff fdfa 	bl	8001388 <LL_RCC_LSI1_IsReady>
 8001794:	b198      	cbz	r0, 80017be <HAL_RCC_OscConfig+0x306>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800179a:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800179c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80017a0:	f022 0204 	bic.w	r2, r2, #4
 80017a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017a8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80017ac:	071b      	lsls	r3, r3, #28
 80017ae:	f57f aec2 	bpl.w	8001536 <HAL_RCC_OscConfig+0x7e>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017b2:	f7fe ff05 	bl	80005c0 <HAL_GetTick>
 80017b6:	1b80      	subs	r0, r0, r6
 80017b8:	2803      	cmp	r0, #3
 80017ba:	d9f5      	bls.n	80017a8 <HAL_RCC_OscConfig+0x2f0>
 80017bc:	e6ee      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017be:	f7fe feff 	bl	80005c0 <HAL_GetTick>
 80017c2:	1b80      	subs	r0, r0, r6
 80017c4:	2802      	cmp	r0, #2
 80017c6:	d9e3      	bls.n	8001790 <HAL_RCC_OscConfig+0x2d8>
 80017c8:	e6e8      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017ca:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80017d6:	f7fe fef3 	bl	80005c0 <HAL_GetTick>
 80017da:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017dc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80017e0:	071f      	lsls	r7, r3, #28
 80017e2:	f140 813b 	bpl.w	8001a5c <HAL_RCC_OscConfig+0x5a4>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017e6:	f7fe feeb 	bl	80005c0 <HAL_GetTick>
 80017ea:	1b80      	subs	r0, r0, r6
 80017ec:	2803      	cmp	r0, #3
 80017ee:	d9f5      	bls.n	80017dc <HAL_RCC_OscConfig+0x324>
 80017f0:	e6d4      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017f8:	f7fe fee2 	bl	80005c0 <HAL_GetTick>
 80017fc:	1b40      	subs	r0, r0, r5
 80017fe:	2802      	cmp	r0, #2
 8001800:	f63f aecc 	bhi.w	800159c <HAL_RCC_OscConfig+0xe4>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001804:	f7ff fdc0 	bl	8001388 <LL_RCC_LSI1_IsReady>
 8001808:	2800      	cmp	r0, #0
 800180a:	d1f5      	bne.n	80017f8 <HAL_RCC_OscConfig+0x340>
 800180c:	e693      	b.n	8001536 <HAL_RCC_OscConfig+0x7e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180e:	4d98      	ldr	r5, [pc, #608]	; (8001a70 <HAL_RCC_OscConfig+0x5b8>)
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	05d9      	lsls	r1, r3, #23
 8001814:	d51c      	bpl.n	8001850 <HAL_RCC_OscConfig+0x398>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001816:	68a3      	ldr	r3, [r4, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800181e:	d125      	bne.n	800186c <HAL_RCC_OscConfig+0x3b4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001820:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 800182c:	f7fe fec8 	bl	80005c0 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001830:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001834:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f241 3588 	movw	r5, #5000	; 0x1388
 800183a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800183e:	079b      	lsls	r3, r3, #30
 8001840:	f53f ae7d 	bmi.w	800153e <HAL_RCC_OscConfig+0x86>
 8001844:	f7fe febc 	bl	80005c0 <HAL_GetTick>
 8001848:	1b80      	subs	r0, r0, r6
 800184a:	42a8      	cmp	r0, r5
 800184c:	d9f5      	bls.n	800183a <HAL_RCC_OscConfig+0x382>
 800184e:	e6a5      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
      HAL_PWR_EnableBkUpAccess();
 8001850:	f7ff fd76 	bl	8001340 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8001854:	f7fe feb4 	bl	80005c0 <HAL_GetTick>
 8001858:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185a:	682b      	ldr	r3, [r5, #0]
 800185c:	05da      	lsls	r2, r3, #23
 800185e:	d4da      	bmi.n	8001816 <HAL_RCC_OscConfig+0x35e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001860:	f7fe feae 	bl	80005c0 <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	2802      	cmp	r0, #2
 8001868:	d9f7      	bls.n	800185a <HAL_RCC_OscConfig+0x3a2>
 800186a:	e697      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186c:	2b05      	cmp	r3, #5
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x3c6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001870:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 800187c:	e7d0      	b.n	8001820 <HAL_RCC_OscConfig+0x368>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800187e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800188a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800188e:	f022 0204 	bic.w	r2, r2, #4
 8001892:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1c8      	bne.n	800182c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 800189a:	f7fe fe91 	bl	80005c0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018a2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018a4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80018a8:	0798      	lsls	r0, r3, #30
 80018aa:	f57f ae48 	bpl.w	800153e <HAL_RCC_OscConfig+0x86>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7fe fe87 	bl	80005c0 <HAL_GetTick>
 80018b2:	1bc0      	subs	r0, r0, r7
 80018b4:	42b0      	cmp	r0, r6
 80018b6:	d9f5      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3ec>
 80018b8:	e670      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018bc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80018c0:	b19b      	cbz	r3, 80018ea <HAL_RCC_OscConfig+0x432>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018c2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80018ce:	f7fe fe77 	bl	80005c0 <HAL_GetTick>
 80018d2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018d4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018d8:	0799      	lsls	r1, r3, #30
 80018da:	f53f ae34 	bmi.w	8001546 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018de:	f7fe fe6f 	bl	80005c0 <HAL_GetTick>
 80018e2:	1b80      	subs	r0, r0, r6
 80018e4:	2802      	cmp	r0, #2
 80018e6:	d9f5      	bls.n	80018d4 <HAL_RCC_OscConfig+0x41c>
 80018e8:	e658      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018ea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80018f6:	f7fe fe63 	bl	80005c0 <HAL_GetTick>
 80018fa:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018fc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001900:	079a      	lsls	r2, r3, #30
 8001902:	f57f ae20 	bpl.w	8001546 <HAL_RCC_OscConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001906:	f7fe fe5b 	bl	80005c0 <HAL_GetTick>
 800190a:	1b80      	subs	r0, r0, r6
 800190c:	2802      	cmp	r0, #2
 800190e:	d9f5      	bls.n	80018fc <HAL_RCC_OscConfig+0x444>
 8001910:	e644      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001912:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001916:	2902      	cmp	r1, #2
 8001918:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800191a:	68eb      	ldr	r3, [r5, #12]
 800191c:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001920:	d177      	bne.n	8001a12 <HAL_RCC_OscConfig+0x55a>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001924:	f003 0103 	and.w	r1, r3, #3
 8001928:	4281      	cmp	r1, r0
 800192a:	d118      	bne.n	800195e <HAL_RCC_OscConfig+0x4a6>
 800192c:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800192e:	f003 0170 	and.w	r1, r3, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	4281      	cmp	r1, r0
 8001934:	d113      	bne.n	800195e <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001936:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001938:	f3c3 2106 	ubfx	r1, r3, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800193c:	4281      	cmp	r1, r0
 800193e:	d10e      	bne.n	800195e <HAL_RCC_OscConfig+0x4a6>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001940:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001942:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001946:	4281      	cmp	r1, r0
 8001948:	d109      	bne.n	800195e <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800194a:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800194c:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001950:	4281      	cmp	r1, r0
 8001952:	d104      	bne.n	800195e <HAL_RCC_OscConfig+0x4a6>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001954:	6c61      	ldr	r1, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001956:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800195a:	428b      	cmp	r3, r1
 800195c:	d040      	beq.n	80019e0 <HAL_RCC_OscConfig+0x528>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195e:	2a0c      	cmp	r2, #12
 8001960:	f43f adad 	beq.w	80014be <HAL_RCC_OscConfig+0x6>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001964:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	f53f ada7 	bmi.w	80014be <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001976:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8001978:	f7fe fe22 	bl	80005c0 <HAL_GetTick>
 800197c:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197e:	682b      	ldr	r3, [r5, #0]
 8001980:	019f      	lsls	r7, r3, #6
 8001982:	d427      	bmi.n	80019d4 <HAL_RCC_OscConfig+0x51c>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001988:	68e9      	ldr	r1, [r5, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	4a39      	ldr	r2, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x5bc>)
 800198e:	400a      	ands	r2, r1
 8001990:	4313      	orrs	r3, r2
 8001992:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001994:	4313      	orrs	r3, r2
 8001996:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001998:	4313      	orrs	r3, r2
 800199a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800199c:	4313      	orrs	r3, r2
 800199e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019a4:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019a6:	682b      	ldr	r3, [r5, #0]
 80019a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ac:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ae:	68eb      	ldr	r3, [r5, #12]
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80019b6:	f7fe fe03 	bl	80005c0 <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ba:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 80019be:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	0198      	lsls	r0, r3, #6
 80019c4:	f53f adc3 	bmi.w	800154e <HAL_RCC_OscConfig+0x96>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7fe fdfa 	bl	80005c0 <HAL_GetTick>
 80019cc:	1b40      	subs	r0, r0, r5
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9f6      	bls.n	80019c0 <HAL_RCC_OscConfig+0x508>
 80019d2:	e5e3      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7fe fdf4 	bl	80005c0 <HAL_GetTick>
 80019d8:	1b80      	subs	r0, r0, r6
 80019da:	2802      	cmp	r0, #2
 80019dc:	d9cf      	bls.n	800197e <HAL_RCC_OscConfig+0x4c6>
 80019de:	e5dd      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	0199      	lsls	r1, r3, #6
 80019e4:	f53f adb3 	bmi.w	800154e <HAL_RCC_OscConfig+0x96>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f0:	68eb      	ldr	r3, [r5, #12]
 80019f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 80019f8:	f7fe fde2 	bl	80005c0 <HAL_GetTick>
 80019fc:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	682b      	ldr	r3, [r5, #0]
 8001a00:	019a      	lsls	r2, r3, #6
 8001a02:	f53f ada4 	bmi.w	800154e <HAL_RCC_OscConfig+0x96>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7fe fddb 	bl	80005c0 <HAL_GetTick>
 8001a0a:	1b00      	subs	r0, r0, r4
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d9f6      	bls.n	80019fe <HAL_RCC_OscConfig+0x546>
 8001a10:	e5c4      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a12:	2a0c      	cmp	r2, #12
 8001a14:	f43f ad53 	beq.w	80014be <HAL_RCC_OscConfig+0x6>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a20:	68eb      	ldr	r3, [r5, #12]
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001a28:	68eb      	ldr	r3, [r5, #12]
 8001a2a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001a34:	f7fe fdc4 	bl	80005c0 <HAL_GetTick>
 8001a38:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	019b      	lsls	r3, r3, #6
 8001a3e:	f57f ad86 	bpl.w	800154e <HAL_RCC_OscConfig+0x96>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a42:	f7fe fdbd 	bl	80005c0 <HAL_GetTick>
 8001a46:	1b00      	subs	r0, r0, r4
 8001a48:	2802      	cmp	r0, #2
 8001a4a:	d9f6      	bls.n	8001a3a <HAL_RCC_OscConfig+0x582>
 8001a4c:	e5a6      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001a4e:	f7fe fdb7 	bl	80005c0 <HAL_GetTick>
 8001a52:	1b80      	subs	r0, r0, r6
 8001a54:	2803      	cmp	r0, #3
 8001a56:	f67f ae5c 	bls.w	8001712 <HAL_RCC_OscConfig+0x25a>
 8001a5a:	e59f      	b.n	800159c <HAL_RCC_OscConfig+0xe4>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001a68:	f7fe fdaa 	bl	80005c0 <HAL_GetTick>
 8001a6c:	4605      	mov	r5, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001a6e:	e6c9      	b.n	8001804 <HAL_RCC_OscConfig+0x34c>
 8001a70:	58000400 	.word	0x58000400
 8001a74:	11c1808c 	.word	0x11c1808c

08001a78 <HAL_RCC_ClockConfig>:
{
 8001a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a7c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001a7e:	4604      	mov	r4, r0
 8001a80:	b910      	cbnz	r0, 8001a88 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
 8001a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4e7a      	ldr	r6, [pc, #488]	; (8001c74 <HAL_RCC_ClockConfig+0x1fc>)
 8001a8a:	6833      	ldr	r3, [r6, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d372      	bcc.n	8001b7a <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	0799      	lsls	r1, r3, #30
 8001a98:	d50e      	bpl.n	8001ab8 <HAL_RCC_ClockConfig+0x40>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a9a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001a9e:	68a2      	ldr	r2, [r4, #8]
 8001aa0:	68b3      	ldr	r3, [r6, #8]
 8001aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001aaa:	f7fe fd89 	bl	80005c0 <HAL_GetTick>
 8001aae:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ab0:	68b3      	ldr	r3, [r6, #8]
 8001ab2:	03db      	lsls	r3, r3, #15
 8001ab4:	f140 80ba 	bpl.w	8001c2c <HAL_RCC_ClockConfig+0x1b4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	069a      	lsls	r2, r3, #26
 8001abc:	d511      	bpl.n	8001ae2 <HAL_RCC_ClockConfig+0x6a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001abe:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001ac2:	6962      	ldr	r2, [r4, #20]
 8001ac4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001acc:	4313      	orrs	r3, r2
 8001ace:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001ad2:	f7fe fd75 	bl	80005c0 <HAL_GetTick>
 8001ad6:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ad8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001adc:	0399      	lsls	r1, r3, #14
 8001ade:	f140 80ac 	bpl.w	8001c3a <HAL_RCC_ClockConfig+0x1c2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	0658      	lsls	r0, r3, #25
 8001ae6:	d512      	bpl.n	8001b0e <HAL_RCC_ClockConfig+0x96>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ae8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001aec:	69a2      	ldr	r2, [r4, #24]
 8001aee:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001af2:	f023 030f 	bic.w	r3, r3, #15
 8001af6:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8001afa:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 8001afe:	f7fe fd5f 	bl	80005c0 <HAL_GetTick>
 8001b02:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b04:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 8001b08:	03db      	lsls	r3, r3, #15
 8001b0a:	f140 809d 	bpl.w	8001c48 <HAL_RCC_ClockConfig+0x1d0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	075a      	lsls	r2, r3, #29
 8001b12:	d50e      	bpl.n	8001b32 <HAL_RCC_ClockConfig+0xba>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b14:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001b18:	68e2      	ldr	r2, [r4, #12]
 8001b1a:	68b3      	ldr	r3, [r6, #8]
 8001b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b24:	f7fe fd4c 	bl	80005c0 <HAL_GetTick>
 8001b28:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b2a:	68b3      	ldr	r3, [r6, #8]
 8001b2c:	0398      	lsls	r0, r3, #14
 8001b2e:	f140 8092 	bpl.w	8001c56 <HAL_RCC_ClockConfig+0x1de>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	071e      	lsls	r6, r3, #28
 8001b36:	d50f      	bpl.n	8001b58 <HAL_RCC_ClockConfig+0xe0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b38:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001b3c:	6922      	ldr	r2, [r4, #16]
 8001b3e:	68b3      	ldr	r3, [r6, #8]
 8001b40:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b48:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001b4a:	f7fe fd39 	bl	80005c0 <HAL_GetTick>
 8001b4e:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b50:	68b3      	ldr	r3, [r6, #8]
 8001b52:	035a      	lsls	r2, r3, #13
 8001b54:	f140 8086 	bpl.w	8001c64 <HAL_RCC_ClockConfig+0x1ec>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	07d9      	lsls	r1, r3, #31
 8001b5c:	d423      	bmi.n	8001ba6 <HAL_RCC_ClockConfig+0x12e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5e:	4c45      	ldr	r4, [pc, #276]	; (8001c74 <HAL_RCC_ClockConfig+0x1fc>)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	429d      	cmp	r5, r3
 8001b68:	d34d      	bcc.n	8001c06 <HAL_RCC_ClockConfig+0x18e>
  SystemCoreClockUpdate();
 8001b6a:	f003 f83d 	bl	8004be8 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 8001b6e:	f7fe fd2d 	bl	80005cc <HAL_GetTickPrio>
}
 8001b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 8001b76:	f7fe bcdb 	b.w	8000530 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	6833      	ldr	r3, [r6, #0]
 8001b7c:	f023 0307 	bic.w	r3, r3, #7
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b84:	f7fe fd1c 	bl	80005c0 <HAL_GetTick>
 8001b88:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	6833      	ldr	r3, [r6, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	429d      	cmp	r5, r3
 8001b92:	f43f af7f 	beq.w	8001a94 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b96:	f7fe fd13 	bl	80005c0 <HAL_GetTick>
 8001b9a:	1bc0      	subs	r0, r0, r7
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d9f4      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	6863      	ldr	r3, [r4, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d103      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x13c>
      if (LL_RCC_HSE_IsReady() == 0U)
 8001bac:	f7ff fbe0 	bl	8001370 <LL_RCC_HSE_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001bb0:	b940      	cbnz	r0, 8001bc4 <HAL_RCC_ClockConfig+0x14c>
 8001bb2:	e766      	b.n	8001a82 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d11f      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x180>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	019b      	lsls	r3, r3, #6
 8001bc0:	f57f af5f 	bpl.w	8001a82 <HAL_RCC_ClockConfig+0xa>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bc4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 8001bc8:	6862      	ldr	r2, [r4, #4]
 8001bca:	68b3      	ldr	r3, [r6, #8]
 8001bcc:	f023 0303 	bic.w	r3, r3, #3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001bd4:	f7fe fcf4 	bl	80005c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bdc:	4607      	mov	r7, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bde:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be0:	6862      	ldr	r2, [r4, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bea:	d0b8      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7fe fce8 	bl	80005c0 <HAL_GetTick>
 8001bf0:	1bc0      	subs	r0, r0, r7
 8001bf2:	4540      	cmp	r0, r8
 8001bf4:	d9f3      	bls.n	8001bde <HAL_RCC_ClockConfig+0x166>
 8001bf6:	e7d3      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bf8:	b913      	cbnz	r3, 8001c00 <HAL_RCC_ClockConfig+0x188>
      if (LL_RCC_MSI_IsReady() == 0U)
 8001bfa:	f7ff fbcc 	bl	8001396 <LL_RCC_MSI_IsReady>
 8001bfe:	e7d7      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x138>
      if (LL_RCC_HSI_IsReady() == 0U)
 8001c00:	f7ff fbbc 	bl	800137c <LL_RCC_HSI_IsReady>
 8001c04:	e7d4      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	f023 0307 	bic.w	r3, r3, #7
 8001c0c:	432b      	orrs	r3, r5
 8001c0e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001c10:	f7fe fcd6 	bl	80005c0 <HAL_GetTick>
 8001c14:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	429d      	cmp	r5, r3
 8001c1e:	d0a4      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xf2>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c20:	f7fe fcce 	bl	80005c0 <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	2802      	cmp	r0, #2
 8001c28:	d9f5      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x19e>
 8001c2a:	e7b9      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c2c:	f7fe fcc8 	bl	80005c0 <HAL_GetTick>
 8001c30:	1bc0      	subs	r0, r0, r7
 8001c32:	2802      	cmp	r0, #2
 8001c34:	f67f af3c 	bls.w	8001ab0 <HAL_RCC_ClockConfig+0x38>
 8001c38:	e7b2      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c3a:	f7fe fcc1 	bl	80005c0 <HAL_GetTick>
 8001c3e:	1bc0      	subs	r0, r0, r7
 8001c40:	2802      	cmp	r0, #2
 8001c42:	f67f af49 	bls.w	8001ad8 <HAL_RCC_ClockConfig+0x60>
 8001c46:	e7ab      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c48:	f7fe fcba 	bl	80005c0 <HAL_GetTick>
 8001c4c:	1bc0      	subs	r0, r0, r7
 8001c4e:	2802      	cmp	r0, #2
 8001c50:	f67f af58 	bls.w	8001b04 <HAL_RCC_ClockConfig+0x8c>
 8001c54:	e7a4      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c56:	f7fe fcb3 	bl	80005c0 <HAL_GetTick>
 8001c5a:	1bc0      	subs	r0, r0, r7
 8001c5c:	2802      	cmp	r0, #2
 8001c5e:	f67f af64 	bls.w	8001b2a <HAL_RCC_ClockConfig+0xb2>
 8001c62:	e79d      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c64:	f7fe fcac 	bl	80005c0 <HAL_GetTick>
 8001c68:	1bc0      	subs	r0, r0, r7
 8001c6a:	2802      	cmp	r0, #2
 8001c6c:	f67f af70 	bls.w	8001b50 <HAL_RCC_ClockConfig+0xd8>
 8001c70:	e796      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x128>
 8001c72:	bf00      	nop
 8001c74:	58004000 	.word	0x58004000

08001c78 <HAL_RCC_GetSysClockFreq>:
 8001c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 8001c7c:	b508      	push	{r3, lr}
 8001c7e:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c80:	f013 030c 	ands.w	r3, r3, #12
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c86:	f7ff fb94 	bl	80013b2 <LL_RCC_MSI_GetRange>
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x90>)
 8001c8c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001c90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c94:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d033      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c9e:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8001ca0:	481a      	ldr	r0, [pc, #104]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ca8:	bf08      	it	eq
 8001caa:	4618      	moveq	r0, r3
 8001cac:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001cae:	68d3      	ldr	r3, [r2, #12]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d022      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x86>
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d118      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001cbc:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE;
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cc6:	bf08      	it	eq
 8001cc8:	4603      	moveq	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cce:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cd0:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cd2:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cd4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001cd8:	4358      	muls	r0, r3
 8001cda:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ce4:	0f53      	lsrs	r3, r2, #29
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cec:	bd08      	pop	{r3, pc}
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001cee:	f7ff fb60 	bl	80013b2 <LL_RCC_MSI_GetRange>
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x90>)
 8001cf4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8001cf8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001cfc:	e7e5      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8001cfe:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d00:	e7e3      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 8001d02:	4802      	ldr	r0, [pc, #8]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
}
 8001d04:	bd08      	pop	{r3, pc}
 8001d06:	bf00      	nop
 8001d08:	080061f8 	.word	0x080061f8
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	01e84800 	.word	0x01e84800

08001d14 <HAL_RCC_GetHCLKFreq>:
{
 8001d14:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d16:	f7ff ffaf 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x1c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d2e:	bd08      	pop	{r3, pc}
 8001d30:	08006198 	.word	0x08006198

08001d34 <HAL_RCC_GetPCLK1Freq>:
{
 8001d34:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d36:	f7ff ffed 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
}
 8001d4e:	40d8      	lsrs	r0, r3
 8001d50:	bd08      	pop	{r3, pc}
 8001d52:	bf00      	nop
 8001d54:	080061d8 	.word	0x080061d8

08001d58 <HAL_RCC_GetPCLK2Freq>:
{
 8001d58:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001d5a:	f7ff ffdb 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
}
 8001d72:	40d8      	lsrs	r0, r3
 8001d74:	bd08      	pop	{r3, pc}
 8001d76:	bf00      	nop
 8001d78:	080061d8 	.word	0x080061d8

08001d7c <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8001d84:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001d88:	4770      	bx	lr

08001d8a <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8e:	0902      	lsrs	r2, r0, #4
 8001d90:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d94:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 8001d98:	0100      	lsls	r0, r0, #4
 8001d9a:	ea23 0302 	bic.w	r3, r3, r2
 8001d9e:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 8001da2:	4318      	orrs	r0, r3
 8001da4:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_PLLSAI1_Enable>:
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dae:	6813      	ldr	r3, [r2, #0]
 8001db0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_PLLSAI1_Disable>:
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dbc:	6813      	ldr	r3, [r2, #0]
 8001dbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4770      	bx	lr

08001dc6 <LL_RCC_PLLSAI1_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	6818      	ldr	r0, [r3, #0]
}
 8001dcc:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd4:	6805      	ldr	r5, [r0, #0]
 8001dd6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
{
 8001dda:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ddc:	d043      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001dde:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de4:	d015      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001de6:	d802      	bhi.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001de8:	b1d3      	cbz	r3, 8001e20 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001dea:	2501      	movs	r5, #1
 8001dec:	e03b      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001df2:	d002      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001df4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001df8:	d1f7      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x18>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e04:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e0e:	2500      	movs	r5, #0
 8001e10:	e029      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x94>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8001e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e16:	68d3      	ldr	r3, [r2, #12]
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1c:	60d3      	str	r3, [r2, #12]
        break;
 8001e1e:	e7ec      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x28>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001e20:	f7ff ffca 	bl	8001db8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e24:	f7fe fbcc 	bl	80005c0 <HAL_GetTick>
 8001e28:	4605      	mov	r5, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001e2a:	f7ff ffcc 	bl	8001dc6 <LL_RCC_PLLSAI1_IsReady>
 8001e2e:	b9a0      	cbnz	r0, 8001e5a <HAL_RCCEx_PeriphCLKConfig+0x88>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8001e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e34:	6861      	ldr	r1, [r4, #4]
 8001e36:	6913      	ldr	r3, [r2, #16]
 8001e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e40:	6113      	str	r3, [r2, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8001e42:	6913      	ldr	r3, [r2, #16]
 8001e44:	68a1      	ldr	r1, [r4, #8]
 8001e46:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8001e4e:	f7ff ffac 	bl	8001daa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e52:	f7fe fbb5 	bl	80005c0 <HAL_GetTick>
 8001e56:	4605      	mov	r5, r0
 8001e58:	e0cd      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e5a:	f7fe fbb1 	bl	80005c0 <HAL_GetTick>
 8001e5e:	1b40      	subs	r0, r0, r5
 8001e60:	2802      	cmp	r0, #2
 8001e62:	d9e2      	bls.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x58>
      status = HAL_TIMEOUT;
 8001e64:	2503      	movs	r5, #3
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	051a      	lsls	r2, r3, #20
 8001e6a:	d515      	bpl.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001e6c:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e72:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8001e76:	f407 7740 	and.w	r7, r7, #768	; 0x300
 8001e7a:	42bb      	cmp	r3, r7
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      HAL_PWR_EnableBkUpAccess();
 8001e7e:	f7ff fa5f 	bl	8001340 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001e82:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	f040 80c0 	bne.w	800200c <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8001e8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	07df      	lsls	r7, r3, #31
 8001e9c:	d509      	bpl.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea2:	69a0      	ldr	r0, [r4, #24]
 8001ea4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ea8:	f022 0203 	bic.w	r2, r2, #3
 8001eac:	4302      	orrs	r2, r0
 8001eae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eb2:	079e      	lsls	r6, r3, #30
 8001eb4:	d509      	bpl.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0xf8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eba:	69e0      	ldr	r0, [r4, #28]
 8001ebc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ec0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ec4:	4302      	orrs	r2, r0
 8001ec6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eca:	06d8      	lsls	r0, r3, #27
 8001ecc:	d50c      	bpl.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001ed0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001ed4:	0c31      	lsrs	r1, r6, #16
 8001ed6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001eda:	0409      	lsls	r1, r1, #16
 8001edc:	ea22 0201 	bic.w	r2, r2, r1
 8001ee0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001ee4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ee8:	0699      	lsls	r1, r3, #26
 8001eea:	d50c      	bpl.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001eee:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8001ef2:	0c31      	lsrs	r1, r6, #16
 8001ef4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001ef8:	0409      	lsls	r1, r1, #16
 8001efa:	ea22 0201 	bic.w	r2, r2, r1
 8001efe:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001f02:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f06:	075a      	lsls	r2, r3, #29
 8001f08:	d502      	bpl.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f0a:	6a20      	ldr	r0, [r4, #32]
 8001f0c:	f7ff ff3d 	bl	8001d8a <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	071b      	lsls	r3, r3, #28
 8001f14:	d502      	bpl.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001f18:	f7ff ff37 	bl	8001d8a <LL_RCC_SetI2CClockSource>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	05df      	lsls	r7, r3, #23
 8001f20:	d511      	bpl.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f28:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f2c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f30:	430b      	orrs	r3, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f32:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001f36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001f3a:	f040 8090 	bne.w	800205e <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001f3e:	68d3      	ldr	r3, [r2, #12]
 8001f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f44:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	059e      	lsls	r6, r3, #22
 8001f4a:	d51a      	bpl.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f4e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	d003      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8001f58:	f032 4180 	bics.w	r1, r2, #1073741824	; 0x40000000
 8001f5c:	f040 80b7 	bne.w	80020ce <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001f60:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001f64:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001f68:	4311      	orrs	r1, r2
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f6a:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8001f6e:	bf08      	it	eq
 8001f70:	f04f 42b0 	moveq.w	r2, #1476395008	; 0x58000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001f74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8001f78:	bf02      	ittt	eq
 8001f7a:	68d3      	ldreq	r3, [r2, #12]
 8001f7c:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
 8001f80:	60d3      	streq	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	0558      	lsls	r0, r3, #21
 8001f86:	d511      	bpl.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1da>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f92:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001f96:	430b      	orrs	r3, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001f98:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fa0:	f040 80a3 	bne.w	80020ea <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fa4:	68d3      	ldr	r3, [r2, #12]
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	60d3      	str	r3, [r2, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001fac:	6822      	ldr	r2, [r4, #0]
 8001fae:	04d1      	lsls	r1, r2, #19
 8001fb0:	d509      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001fb8:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8001fbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fc0:	4303      	orrs	r3, r0
 8001fc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001fc6:	0493      	lsls	r3, r2, #18
 8001fc8:	d50d      	bpl.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x214>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001fd0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001fd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001fda:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001fdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fea:	f7fe fae9 	bl	80005c0 <HAL_GetTick>
 8001fee:	1b40      	subs	r0, r0, r5
 8001ff0:	2802      	cmp	r0, #2
 8001ff2:	f63f af37 	bhi.w	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x92>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8001ff6:	f7ff fee6 	bl	8001dc6 <LL_RCC_PLLSAI1_IsReady>
 8001ffa:	2801      	cmp	r0, #1
 8001ffc:	d1f5      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x218>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8001ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002002:	6961      	ldr	r1, [r4, #20]
 8002004:	6913      	ldr	r3, [r2, #16]
 8002006:	430b      	orrs	r3, r1
 8002008:	6113      	str	r3, [r2, #16]
 800200a:	e6f6      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x28>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800200c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002010:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002014:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002018:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800201c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002020:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002024:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202a:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800202c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002030:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002034:	07db      	lsls	r3, r3, #31
 8002036:	f57f af2f 	bpl.w	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xc6>
          tickstart = HAL_GetTick();
 800203a:	f7fe fac1 	bl	80005c0 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f241 3688 	movw	r6, #5000	; 0x1388
          tickstart = HAL_GetTick();
 8002042:	4607      	mov	r7, r0
          while (LL_RCC_LSE_IsReady() != 1U)
 8002044:	e004      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x27e>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fabb 	bl	80005c0 <HAL_GetTick>
 800204a:	1bc0      	subs	r0, r0, r7
 800204c:	42b0      	cmp	r0, r6
 800204e:	d804      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x288>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002050:	f7ff fe94 	bl	8001d7c <LL_RCC_LSE_IsReady>
 8002054:	2801      	cmp	r0, #1
 8002056:	d1f6      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002058:	e71e      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xc6>
              ret = HAL_TIMEOUT;
 800205a:	2503      	movs	r5, #3
 800205c:	e71c      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800205e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002062:	f47f af70 	bne.w	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x174>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002066:	f7ff fea7 	bl	8001db8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800206a:	f7fe faa9 	bl	80005c0 <HAL_GetTick>
 800206e:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002070:	f7ff fea9 	bl	8001dc6 <LL_RCC_PLLSAI1_IsReady>
 8002074:	b9a0      	cbnz	r0, 80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207a:	6861      	ldr	r1, [r4, #4]
 800207c:	6913      	ldr	r3, [r2, #16]
 800207e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002082:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002086:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002088:	6913      	ldr	r3, [r2, #16]
 800208a:	68e1      	ldr	r1, [r4, #12]
 800208c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8002090:	430b      	orrs	r3, r1
 8002092:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002094:	f7ff fe89 	bl	8001daa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7fe fa92 	bl	80005c0 <HAL_GetTick>
 800209c:	4606      	mov	r6, r0
 800209e:	e00b      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020a0:	f7fe fa8e 	bl	80005c0 <HAL_GetTick>
 80020a4:	1b80      	subs	r0, r0, r6
 80020a6:	2802      	cmp	r0, #2
 80020a8:	d9e2      	bls.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x29e>
              ret = HAL_TIMEOUT;
 80020aa:	2503      	movs	r5, #3
 80020ac:	e74b      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x174>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020ae:	f7fe fa87 	bl	80005c0 <HAL_GetTick>
 80020b2:	1b80      	subs	r0, r0, r6
 80020b4:	2802      	cmp	r0, #2
 80020b6:	d8f8      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80020b8:	f7ff fe85 	bl	8001dc6 <LL_RCC_PLLSAI1_IsReady>
 80020bc:	2801      	cmp	r0, #1
 80020be:	d1f6      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80020c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c4:	6961      	ldr	r1, [r4, #20]
 80020c6:	6913      	ldr	r3, [r2, #16]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6113      	str	r3, [r2, #16]
 80020cc:	e73b      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x174>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80020ce:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80020d2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80020d6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80020da:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020de:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80020e2:	f020 6040 	bic.w	r0, r0, #201326592	; 0xc000000
 80020e6:	4301      	orrs	r1, r0
 80020e8:	e73f      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x198>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020ea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80020ee:	f47f af5d 	bne.w	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1da>
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80020f2:	f7ff fe61 	bl	8001db8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80020f6:	f7fe fa63 	bl	80005c0 <HAL_GetTick>
 80020fa:	4606      	mov	r6, r0

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80020fc:	f7ff fe63 	bl	8001dc6 <LL_RCC_PLLSAI1_IsReady>
 8002100:	b9a0      	cbnz	r0, 800212c <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002106:	6861      	ldr	r1, [r4, #4]
 8002108:	6913      	ldr	r3, [r2, #16]
 800210a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800210e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002112:	6113      	str	r3, [r2, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002114:	6913      	ldr	r3, [r2, #16]
 8002116:	6921      	ldr	r1, [r4, #16]
 8002118:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800211c:	430b      	orrs	r3, r1
 800211e:	6113      	str	r3, [r2, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002120:	f7ff fe43 	bl	8001daa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002124:	f7fe fa4c 	bl	80005c0 <HAL_GetTick>
 8002128:	4606      	mov	r6, r0
 800212a:	e00b      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800212c:	f7fe fa48 	bl	80005c0 <HAL_GetTick>
 8002130:	1b80      	subs	r0, r0, r6
 8002132:	2802      	cmp	r0, #2
 8002134:	d9e2      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x32a>
              ret = HAL_TIMEOUT;
 8002136:	2503      	movs	r5, #3
 8002138:	e738      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1da>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800213a:	f7fe fa41 	bl	80005c0 <HAL_GetTick>
 800213e:	1b80      	subs	r0, r0, r6
 8002140:	2802      	cmp	r0, #2
 8002142:	d8f8      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002144:	f7ff fe3f 	bl	8001dc6 <LL_RCC_PLLSAI1_IsReady>
 8002148:	2801      	cmp	r0, #1
 800214a:	d1f6      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x368>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002150:	6961      	ldr	r1, [r4, #20]
 8002152:	6913      	ldr	r3, [r2, #16]
 8002154:	430b      	orrs	r3, r1
 8002156:	6113      	str	r3, [r2, #16]
 8002158:	e728      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1da>

0800215a <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800215a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002168:	6803      	ldr	r3, [r0, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002172:	6899      	ldr	r1, [r3, #8]
 8002174:	4a06      	ldr	r2, [pc, #24]	; (8002190 <HAL_TIM_Base_Start_IT+0x28>)
 8002176:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002178:	2a06      	cmp	r2, #6
 800217a:	d006      	beq.n	800218a <HAL_TIM_Base_Start_IT+0x22>
 800217c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002180:	bf1e      	ittt	ne
 8002182:	681a      	ldrne	r2, [r3, #0]
 8002184:	f042 0201 	orrne.w	r2, r2, #1
 8002188:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800218a:	2000      	movs	r0, #0
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	00010007 	.word	0x00010007

08002194 <HAL_TIM_OC_DelayElapsedCallback>:
 8002194:	4770      	bx	lr

08002196 <HAL_TIM_IC_CaptureCallback>:
 8002196:	4770      	bx	lr

08002198 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002198:	4770      	bx	lr

0800219a <HAL_TIM_TriggerCallback>:
 800219a:	4770      	bx	lr

0800219c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	0791      	lsls	r1, r2, #30
{
 80021a2:	b510      	push	{r4, lr}
 80021a4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a6:	d50f      	bpl.n	80021c8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	0792      	lsls	r2, r2, #30
 80021ac:	d50c      	bpl.n	80021c8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ae:	f06f 0202 	mvn.w	r2, #2
 80021b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b6:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	f000 8085 	beq.w	80022ca <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021c0:	f7ff ffe9 	bl	8002196 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c4:	2300      	movs	r3, #0
 80021c6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	0752      	lsls	r2, r2, #29
 80021ce:	d510      	bpl.n	80021f2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	0750      	lsls	r0, r2, #29
 80021d4:	d50d      	bpl.n	80021f2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021d6:	f06f 0204 	mvn.w	r2, #4
 80021da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021dc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021de:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021e4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e8:	d075      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	f7ff ffd4 	bl	8002196 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	2300      	movs	r3, #0
 80021f0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	0711      	lsls	r1, r2, #28
 80021f8:	d50f      	bpl.n	800221a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	0712      	lsls	r2, r2, #28
 80021fe:	d50c      	bpl.n	800221a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002200:	f06f 0208 	mvn.w	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002206:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002208:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002210:	d067      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	f7ff ffc0 	bl	8002196 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	2300      	movs	r3, #0
 8002218:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	06d0      	lsls	r0, r2, #27
 8002220:	d510      	bpl.n	8002244 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	06d1      	lsls	r1, r2, #27
 8002226:	d50d      	bpl.n	8002244 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002228:	f06f 0210 	mvn.w	r2, #16
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002230:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002232:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002236:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002238:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223a:	d058      	beq.n	80022ee <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800223c:	f7ff ffab 	bl	8002196 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002240:	2300      	movs	r3, #0
 8002242:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	07d2      	lsls	r2, r2, #31
 800224a:	d508      	bpl.n	800225e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	07d0      	lsls	r0, r2, #31
 8002250:	d505      	bpl.n	800225e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002252:	f06f 0201 	mvn.w	r2, #1
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002258:	4620      	mov	r0, r4
 800225a:	f002 fb7d 	bl	8004958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	0611      	lsls	r1, r2, #24
 8002264:	d508      	bpl.n	8002278 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	0612      	lsls	r2, r2, #24
 800226a:	d505      	bpl.n	8002278 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800226c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002272:	4620      	mov	r0, r4
 8002274:	f000 f897 	bl	80023a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	05d0      	lsls	r0, r2, #23
 800227e:	d508      	bpl.n	8002292 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	0611      	lsls	r1, r2, #24
 8002284:	d505      	bpl.n	8002292 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002286:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800228a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800228c:	4620      	mov	r0, r4
 800228e:	f000 f88b 	bl	80023a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	0652      	lsls	r2, r2, #25
 8002298:	d508      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	0650      	lsls	r0, r2, #25
 800229e:	d505      	bpl.n	80022ac <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff ff77 	bl	800219a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	0691      	lsls	r1, r2, #26
 80022b2:	d522      	bpl.n	80022fa <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	0692      	lsls	r2, r2, #26
 80022b8:	d51f      	bpl.n	80022fa <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ba:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80022c6:	f000 b86d 	b.w	80023a4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	f7ff ff63 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff ff62 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
 80022d4:	e776      	b.n	80021c4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	f7ff ff5d 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ff5c 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
 80022e0:	e785      	b.n	80021ee <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	f7ff ff57 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff ff56 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
 80022ec:	e793      	b.n	8002216 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	f7ff ff51 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7ff ff50 	bl	8002198 <HAL_TIM_PWM_PulseFinishedCallback>
 80022f8:	e7a2      	b.n	8002240 <HAL_TIM_IRQHandler+0xa4>
 80022fa:	bd10      	pop	{r4, pc}

080022fc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80022fe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002300:	4290      	cmp	r0, r2
{
 8002302:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002304:	d002      	beq.n	800230c <TIM_Base_SetConfig+0x10>
 8002306:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800230a:	d109      	bne.n	8002320 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800230c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002312:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002314:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002318:	d009      	beq.n	800232e <TIM_Base_SetConfig+0x32>
 800231a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800231e:	d006      	beq.n	800232e <TIM_Base_SetConfig+0x32>
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <TIM_Base_SetConfig+0x70>)
 8002322:	4290      	cmp	r0, r2
 8002324:	d003      	beq.n	800232e <TIM_Base_SetConfig+0x32>
 8002326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800232a:	4290      	cmp	r0, r2
 800232c:	d103      	bne.n	8002336 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800232e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002334:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002336:	694a      	ldr	r2, [r1, #20]
 8002338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800233c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800233e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002340:	688b      	ldr	r3, [r1, #8]
 8002342:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002344:	680b      	ldr	r3, [r1, #0]
 8002346:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <TIM_Base_SetConfig+0x6c>)
 800234a:	4298      	cmp	r0, r3
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 800234e:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8002352:	4298      	cmp	r0, r3
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x62>
 8002356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800235a:	4298      	cmp	r0, r3
 800235c:	d101      	bne.n	8002362 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235e:	690b      	ldr	r3, [r1, #16]
 8002360:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002362:	2301      	movs	r3, #1
 8002364:	6143      	str	r3, [r0, #20]
 8002366:	bd10      	pop	{r4, pc}
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40014400 	.word	0x40014400

08002370 <HAL_TIM_Base_Init>:
{
 8002370:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002372:	4604      	mov	r4, r0
 8002374:	b1a0      	cbz	r0, 80023a0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800237a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800237e:	b91b      	cbnz	r3, 8002388 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002380:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002384:	f002 fb82 	bl	8004a8c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	2302      	movs	r3, #2
 800238a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	1d21      	adds	r1, r4, #4
 8002392:	f7ff ffb3 	bl	80022fc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002396:	2301      	movs	r3, #1
 8002398:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800239c:	2000      	movs	r0, #0
 800239e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023a0:	2001      	movs	r0, #1
}
 80023a2:	bd10      	pop	{r4, pc}

080023a4 <HAL_TIMEx_CommutCallback>:
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIMEx_BreakCallback>:
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023a8:	4770      	bx	lr

080023aa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80023aa:	6802      	ldr	r2, [r0, #0]
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023b2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80023b4:	6893      	ldr	r3, [r2, #8]
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023c0:	2320      	movs	r3, #32
 80023c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	66c3      	str	r3, [r0, #108]	; 0x6c
 80023ca:	4770      	bx	lr

080023cc <HAL_UART_Receive_DMA>:
{
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ce:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 80023d2:	2f20      	cmp	r7, #32
{
 80023d4:	4604      	mov	r4, r0
 80023d6:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80023d8:	d13a      	bne.n	8002450 <HAL_UART_Receive_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 80023da:	b331      	cbz	r1, 800242a <HAL_UART_Receive_DMA+0x5e>
 80023dc:	b32a      	cbz	r2, 800242a <HAL_UART_Receive_DMA+0x5e>
    __HAL_LOCK(huart);
 80023de:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80023e2:	2a01      	cmp	r2, #1
 80023e4:	d034      	beq.n	8002450 <HAL_UART_Receive_DMA+0x84>
 80023e6:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e8:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ea:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ec:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 80023f0:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->pRxBuffPtr = pData;
 80023f4:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 80023f6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023fa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 80023fe:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8002400:	b1a8      	cbz	r0, 800242e <HAL_UART_Receive_DMA+0x62>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002402:	4a14      	ldr	r2, [pc, #80]	; (8002454 <HAL_UART_Receive_DMA+0x88>)
 8002404:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_UART_Receive_DMA+0x8c>)
 8002408:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_UART_Receive_DMA+0x90>)
 800240c:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800240e:	460a      	mov	r2, r1
 8002410:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferAbortCallback = NULL;
 8002412:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002414:	3124      	adds	r1, #36	; 0x24
 8002416:	f7fe f9fb 	bl	8000810 <HAL_DMA_Start_IT>
 800241a:	b140      	cbz	r0, 800242e <HAL_UART_Receive_DMA+0x62>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800241c:	2310      	movs	r3, #16
 800241e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8002422:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8002426:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800242a:	2001      	movs	r0, #1
 800242c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002432:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_UNLOCK(huart);
 8002438:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800243c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244c:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002450:	2002      	movs	r0, #2
}
 8002452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002454:	08002461 	.word	0x08002461
 8002458:	0800249d 	.word	0x0800249d
 800245c:	080024a9 	.word	0x080024a9

08002460 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002460:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002462:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002464:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f013 0320 	ands.w	r3, r3, #32
 800246c:	d111      	bne.n	8002492 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
 800246e:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800247a:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	f021 0101 	bic.w	r1, r1, #1
 8002482:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800248a:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800248c:	2320      	movs	r3, #32
 800248e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002492:	4610      	mov	r0, r2
 8002494:	f002 fa56 	bl	8004944 <HAL_UART_RxCpltCallback>
 8002498:	bd08      	pop	{r3, pc}

0800249a <HAL_UART_RxHalfCpltCallback>:
 800249a:	4770      	bx	lr

0800249c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800249c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800249e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80024a0:	f7ff fffb 	bl	800249a <HAL_UART_RxHalfCpltCallback>
 80024a4:	bd08      	pop	{r3, pc}

080024a6 <HAL_UART_ErrorCallback>:
 80024a6:	4770      	bx	lr

080024a8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024a8:	6a81      	ldr	r1, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80024aa:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80024ac:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80024b0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 80024b4:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80024b6:	689c      	ldr	r4, [r3, #8]
 80024b8:	0624      	lsls	r4, r4, #24
 80024ba:	d50f      	bpl.n	80024dc <UART_DMAError+0x34>
 80024bc:	2a21      	cmp	r2, #33	; 0x21
 80024be:	d10d      	bne.n	80024dc <UART_DMAError+0x34>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024cc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80024d4:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 80024d6:	2220      	movs	r2, #32
 80024d8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	065b      	lsls	r3, r3, #25
 80024e0:	d507      	bpl.n	80024f2 <UART_DMAError+0x4a>
 80024e2:	2822      	cmp	r0, #34	; 0x22
 80024e4:	d105      	bne.n	80024f2 <UART_DMAError+0x4a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80024ec:	4608      	mov	r0, r1
 80024ee:	f7ff ff5c 	bl	80023aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80024f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024fe:	4608      	mov	r0, r1
 8002500:	f7ff ffd1 	bl	80024a6 <HAL_UART_ErrorCallback>
 8002504:	bd10      	pop	{r4, pc}
	...

08002508 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002508:	6802      	ldr	r2, [r0, #0]
 800250a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800250c:	6811      	ldr	r1, [r2, #0]
{
 800250e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8002510:	f640 050f 	movw	r5, #2063	; 0x80f
 8002514:	422b      	tst	r3, r5
{
 8002516:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002518:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800251a:	d10d      	bne.n	8002538 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800251c:	069e      	lsls	r6, r3, #26
 800251e:	f140 8087 	bpl.w	8002630 <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002522:	068d      	lsls	r5, r1, #26
 8002524:	d402      	bmi.n	800252c <HAL_UART_IRQHandler+0x24>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002526:	00c6      	lsls	r6, r0, #3
 8002528:	f140 8082 	bpl.w	8002630 <HAL_UART_IRQHandler+0x128>
      if (huart->RxISR != NULL)
 800252c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80b5 	beq.w	800269e <HAL_UART_IRQHandler+0x196>
      huart->TxISR(huart);
 8002534:	4620      	mov	r0, r4
 8002536:	e06f      	b.n	8002618 <HAL_UART_IRQHandler+0x110>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002538:	4e59      	ldr	r6, [pc, #356]	; (80026a0 <HAL_UART_IRQHandler+0x198>)
 800253a:	4006      	ands	r6, r0
 800253c:	d102      	bne.n	8002544 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800253e:	4d59      	ldr	r5, [pc, #356]	; (80026a4 <HAL_UART_IRQHandler+0x19c>)
 8002540:	4229      	tst	r1, r5
 8002542:	d075      	beq.n	8002630 <HAL_UART_IRQHandler+0x128>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002544:	07dd      	lsls	r5, r3, #31
 8002546:	d509      	bpl.n	800255c <HAL_UART_IRQHandler+0x54>
 8002548:	05cd      	lsls	r5, r1, #23
 800254a:	d507      	bpl.n	800255c <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800254c:	2501      	movs	r5, #1
 800254e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002550:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002554:	f045 0501 	orr.w	r5, r5, #1
 8002558:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800255c:	079d      	lsls	r5, r3, #30
 800255e:	d509      	bpl.n	8002574 <HAL_UART_IRQHandler+0x6c>
 8002560:	07c5      	lsls	r5, r0, #31
 8002562:	d507      	bpl.n	8002574 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002564:	2502      	movs	r5, #2
 8002566:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002568:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800256c:	f045 0504 	orr.w	r5, r5, #4
 8002570:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002574:	075d      	lsls	r5, r3, #29
 8002576:	d509      	bpl.n	800258c <HAL_UART_IRQHandler+0x84>
 8002578:	07c5      	lsls	r5, r0, #31
 800257a:	d507      	bpl.n	800258c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800257c:	2504      	movs	r5, #4
 800257e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002580:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8002584:	f045 0502 	orr.w	r5, r5, #2
 8002588:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 800258c:	071d      	lsls	r5, r3, #28
 800258e:	d50a      	bpl.n	80025a6 <HAL_UART_IRQHandler+0x9e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002590:	068d      	lsls	r5, r1, #26
 8002592:	d400      	bmi.n	8002596 <HAL_UART_IRQHandler+0x8e>
 8002594:	b13e      	cbz	r6, 80025a6 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002596:	2508      	movs	r5, #8
 8002598:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800259a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800259e:	f045 0508 	orr.w	r5, r5, #8
 80025a2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025a6:	051e      	lsls	r6, r3, #20
 80025a8:	d50a      	bpl.n	80025c0 <HAL_UART_IRQHandler+0xb8>
 80025aa:	014d      	lsls	r5, r1, #5
 80025ac:	d508      	bpl.n	80025c0 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ae:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80025b2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025b4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025c0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80025c4:	2a00      	cmp	r2, #0
 80025c6:	d06a      	beq.n	800269e <HAL_UART_IRQHandler+0x196>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025c8:	069e      	lsls	r6, r3, #26
 80025ca:	d507      	bpl.n	80025dc <HAL_UART_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025cc:	068d      	lsls	r5, r1, #26
 80025ce:	d401      	bmi.n	80025d4 <HAL_UART_IRQHandler+0xcc>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025d0:	00c0      	lsls	r0, r0, #3
 80025d2:	d503      	bpl.n	80025dc <HAL_UART_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 80025d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80025d6:	b10b      	cbz	r3, 80025dc <HAL_UART_IRQHandler+0xd4>
          huart->RxISR(huart);
 80025d8:	4620      	mov	r0, r4
 80025da:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025dc:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80025de:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025e2:	6892      	ldr	r2, [r2, #8]
 80025e4:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 80025e6:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025e8:	d402      	bmi.n	80025f0 <HAL_UART_IRQHandler+0xe8>
 80025ea:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80025ee:	d01a      	beq.n	8002626 <HAL_UART_IRQHandler+0x11e>
        UART_EndRxTransfer(huart);
 80025f0:	f7ff fedb 	bl	80023aa <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	0652      	lsls	r2, r2, #25
 80025fa:	d510      	bpl.n	800261e <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fc:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80025fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002604:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002606:	b150      	cbz	r0, 800261e <HAL_UART_IRQHandler+0x116>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_UART_IRQHandler+0x1a0>)
 800260a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800260c:	f7fe f942 	bl	8000894 <HAL_DMA_Abort_IT>
 8002610:	2800      	cmp	r0, #0
 8002612:	d044      	beq.n	800269e <HAL_UART_IRQHandler+0x196>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002614:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002616:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800261c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff ff41 	bl	80024a6 <HAL_UART_ErrorCallback>
 8002624:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002626:	f7ff ff3e 	bl	80024a6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800262e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002630:	02de      	lsls	r6, r3, #11
 8002632:	d509      	bpl.n	8002648 <HAL_UART_IRQHandler+0x140>
 8002634:	0245      	lsls	r5, r0, #9
 8002636:	d507      	bpl.n	8002648 <HAL_UART_IRQHandler+0x140>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800263c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800263e:	6213      	str	r3, [r2, #32]
}
 8002640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002644:	f000 be22 	b.w	800328c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002648:	061e      	lsls	r6, r3, #24
 800264a:	d505      	bpl.n	8002658 <HAL_UART_IRQHandler+0x150>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800264c:	060d      	lsls	r5, r1, #24
 800264e:	d401      	bmi.n	8002654 <HAL_UART_IRQHandler+0x14c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002650:	0200      	lsls	r0, r0, #8
 8002652:	d501      	bpl.n	8002658 <HAL_UART_IRQHandler+0x150>
    if (huart->TxISR != NULL)
 8002654:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002656:	e76a      	b.n	800252e <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002658:	065e      	lsls	r6, r3, #25
 800265a:	d50e      	bpl.n	800267a <HAL_UART_IRQHandler+0x172>
 800265c:	064d      	lsls	r5, r1, #25
 800265e:	d50c      	bpl.n	800267a <HAL_UART_IRQHandler+0x172>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002666:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002668:	2320      	movs	r3, #32
 800266a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	6723      	str	r3, [r4, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002672:	4620      	mov	r0, r4
 8002674:	f002 f964 	bl	8004940 <HAL_UART_TxCpltCallback>
 8002678:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800267a:	0218      	lsls	r0, r3, #8
 800267c:	d506      	bpl.n	800268c <HAL_UART_IRQHandler+0x184>
 800267e:	004a      	lsls	r2, r1, #1
 8002680:	d504      	bpl.n	800268c <HAL_UART_IRQHandler+0x184>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002682:	4620      	mov	r0, r4
}
 8002684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002688:	f000 be02 	b.w	8003290 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800268c:	01db      	lsls	r3, r3, #7
 800268e:	d506      	bpl.n	800269e <HAL_UART_IRQHandler+0x196>
 8002690:	2900      	cmp	r1, #0
 8002692:	da04      	bge.n	800269e <HAL_UART_IRQHandler+0x196>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002694:	4620      	mov	r0, r4
}
 8002696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800269a:	f000 bdf8 	b.w	800328e <HAL_UARTEx_RxFifoFullCallback>
 800269e:	bd70      	pop	{r4, r5, r6, pc}
 80026a0:	10000001 	.word	0x10000001
 80026a4:	04000120 	.word	0x04000120
 80026a8:	080026ad 	.word	0x080026ad

080026ac <UART_DMAAbortOnError>:
{
 80026ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80026b6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80026ba:	f7ff fef4 	bl	80024a6 <HAL_UART_ErrorCallback>
 80026be:	bd08      	pop	{r3, pc}

080026c0 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 80026c0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026c2:	69c1      	ldr	r1, [r0, #28]
 80026c4:	6883      	ldr	r3, [r0, #8]
{
 80026c6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80026ca:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026cc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ce:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d0:	4303      	orrs	r3, r0
 80026d2:	6960      	ldr	r0, [r4, #20]
 80026d4:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 80026d6:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d8:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 80026da:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026dc:	48ac      	ldr	r0, [pc, #688]	; (8002990 <UART_SetConfig+0x2d0>)
 80026de:	4028      	ands	r0, r5
 80026e0:	4303      	orrs	r3, r0
 80026e2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e4:	6853      	ldr	r3, [r2, #4]
 80026e6:	68e0      	ldr	r0, [r4, #12]
 80026e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ec:	4303      	orrs	r3, r0
 80026ee:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026f0:	4ba8      	ldr	r3, [pc, #672]	; (8002994 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026f2:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026f4:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80026f6:	bf1c      	itt	ne
 80026f8:	6a23      	ldrne	r3, [r4, #32]
 80026fa:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026fc:	6893      	ldr	r3, [r2, #8]
 80026fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002702:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002706:	4303      	orrs	r3, r0
 8002708:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800270a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800270c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800270e:	f020 000f 	bic.w	r0, r0, #15
 8002712:	4318      	orrs	r0, r3
 8002714:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002716:	48a0      	ldr	r0, [pc, #640]	; (8002998 <UART_SetConfig+0x2d8>)
 8002718:	4282      	cmp	r2, r0
 800271a:	d11a      	bne.n	8002752 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800271c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002720:	489e      	ldr	r0, [pc, #632]	; (800299c <UART_SetConfig+0x2dc>)
 8002722:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002726:	f002 0203 	and.w	r2, r2, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800272e:	5c82      	ldrb	r2, [r0, r2]
 8002730:	f102 32ff 	add.w	r2, r2, #4294967295
 8002734:	f000 8220 	beq.w	8002b78 <UART_SetConfig+0x4b8>
    switch (clocksource)
 8002738:	2a07      	cmp	r2, #7
 800273a:	f200 83e7 	bhi.w	8002f0c <UART_SetConfig+0x84c>
 800273e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002742:	0327      	.short	0x0327
 8002744:	03e50349 	.word	0x03e50349
 8002748:	03e5038c 	.word	0x03e5038c
 800274c:	03e503e5 	.word	0x03e503e5
 8002750:	03a5      	.short	0x03a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002752:	4890      	ldr	r0, [pc, #576]	; (8002994 <UART_SetConfig+0x2d4>)
 8002754:	4282      	cmp	r2, r0
 8002756:	f040 83d5 	bne.w	8002f04 <UART_SetConfig+0x844>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800275a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800275e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002762:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002766:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800276a:	f000 8094 	beq.w	8002896 <UART_SetConfig+0x1d6>
 800276e:	d80c      	bhi.n	800278a <UART_SetConfig+0xca>
 8002770:	b3ca      	cbz	r2, 80027e6 <UART_SetConfig+0x126>
        ret = HAL_ERROR;
 8002772:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 8002774:	2301      	movs	r3, #1
 8002776:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800277a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8002782:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002784:	4610      	mov	r0, r2
 8002786:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800278a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800278e:	d064      	beq.n	800285a <UART_SetConfig+0x19a>
 8002790:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002794:	d1ed      	bne.n	8002772 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80e1 	beq.w	800295e <UART_SetConfig+0x29e>
 800279c:	2b01      	cmp	r3, #1
 800279e:	f000 80e1 	beq.w	8002964 <UART_SetConfig+0x2a4>
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	f000 80e1 	beq.w	800296a <UART_SetConfig+0x2aa>
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	f000 80e1 	beq.w	8002970 <UART_SetConfig+0x2b0>
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	f000 80e1 	beq.w	8002976 <UART_SetConfig+0x2b6>
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	f000 80e1 	beq.w	800297c <UART_SetConfig+0x2bc>
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	f000 80e1 	beq.w	8002982 <UART_SetConfig+0x2c2>
 80027c0:	2b07      	cmp	r3, #7
 80027c2:	f000 80e1 	beq.w	8002988 <UART_SetConfig+0x2c8>
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	f000 8100 	beq.w	80029cc <UART_SetConfig+0x30c>
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	f000 8100 	beq.w	80029d2 <UART_SetConfig+0x312>
 80027d2:	2b0a      	cmp	r3, #10
 80027d4:	f000 8100 	beq.w	80029d8 <UART_SetConfig+0x318>
 80027d8:	2b0b      	cmp	r3, #11
 80027da:	bf14      	ite	ne
 80027dc:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80027e0:	2080      	moveq	r0, #128	; 0x80
 80027e2:	2308      	movs	r3, #8
 80027e4:	e093      	b.n	800290e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80027e6:	f7ff faa5 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80027ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ec:	b1fb      	cbz	r3, 800282e <UART_SetConfig+0x16e>
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d01f      	beq.n	8002832 <UART_SetConfig+0x172>
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d01f      	beq.n	8002836 <UART_SetConfig+0x176>
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d01f      	beq.n	800283a <UART_SetConfig+0x17a>
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d01f      	beq.n	800283e <UART_SetConfig+0x17e>
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d01f      	beq.n	8002842 <UART_SetConfig+0x182>
 8002802:	2b06      	cmp	r3, #6
 8002804:	d01f      	beq.n	8002846 <UART_SetConfig+0x186>
 8002806:	2b07      	cmp	r3, #7
 8002808:	d01f      	beq.n	800284a <UART_SetConfig+0x18a>
 800280a:	2b08      	cmp	r3, #8
 800280c:	d01f      	beq.n	800284e <UART_SetConfig+0x18e>
 800280e:	2b09      	cmp	r3, #9
 8002810:	d01f      	beq.n	8002852 <UART_SetConfig+0x192>
 8002812:	2b0a      	cmp	r3, #10
 8002814:	d01f      	beq.n	8002856 <UART_SetConfig+0x196>
 8002816:	2b0b      	cmp	r3, #11
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002820:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002824:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002826:	2800      	cmp	r0, #0
 8002828:	d171      	bne.n	800290e <UART_SetConfig+0x24e>
 800282a:	4602      	mov	r2, r0
 800282c:	e7a2      	b.n	8002774 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800282e:	2301      	movs	r3, #1
 8002830:	e7f6      	b.n	8002820 <UART_SetConfig+0x160>
 8002832:	2302      	movs	r3, #2
 8002834:	e7f4      	b.n	8002820 <UART_SetConfig+0x160>
 8002836:	2304      	movs	r3, #4
 8002838:	e7f2      	b.n	8002820 <UART_SetConfig+0x160>
 800283a:	2306      	movs	r3, #6
 800283c:	e7f0      	b.n	8002820 <UART_SetConfig+0x160>
 800283e:	2308      	movs	r3, #8
 8002840:	e7ee      	b.n	8002820 <UART_SetConfig+0x160>
 8002842:	230a      	movs	r3, #10
 8002844:	e7ec      	b.n	8002820 <UART_SetConfig+0x160>
 8002846:	230c      	movs	r3, #12
 8002848:	e7ea      	b.n	8002820 <UART_SetConfig+0x160>
 800284a:	2310      	movs	r3, #16
 800284c:	e7e8      	b.n	8002820 <UART_SetConfig+0x160>
 800284e:	2320      	movs	r3, #32
 8002850:	e7e6      	b.n	8002820 <UART_SetConfig+0x160>
 8002852:	2340      	movs	r3, #64	; 0x40
 8002854:	e7e4      	b.n	8002820 <UART_SetConfig+0x160>
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	e7e2      	b.n	8002820 <UART_SetConfig+0x160>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800285a:	2b00      	cmp	r3, #0
 800285c:	d052      	beq.n	8002904 <UART_SetConfig+0x244>
 800285e:	2b01      	cmp	r3, #1
 8002860:	d052      	beq.n	8002908 <UART_SetConfig+0x248>
 8002862:	2b02      	cmp	r3, #2
 8002864:	d052      	beq.n	800290c <UART_SetConfig+0x24c>
 8002866:	2b03      	cmp	r3, #3
 8002868:	d069      	beq.n	800293e <UART_SetConfig+0x27e>
 800286a:	2b04      	cmp	r3, #4
 800286c:	d069      	beq.n	8002942 <UART_SetConfig+0x282>
 800286e:	2b05      	cmp	r3, #5
 8002870:	d069      	beq.n	8002946 <UART_SetConfig+0x286>
 8002872:	2b06      	cmp	r3, #6
 8002874:	d069      	beq.n	800294a <UART_SetConfig+0x28a>
 8002876:	2b07      	cmp	r3, #7
 8002878:	d069      	beq.n	800294e <UART_SetConfig+0x28e>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d069      	beq.n	8002952 <UART_SetConfig+0x292>
 800287e:	2b09      	cmp	r3, #9
 8002880:	d069      	beq.n	8002956 <UART_SetConfig+0x296>
 8002882:	2b0a      	cmp	r3, #10
 8002884:	d069      	beq.n	800295a <UART_SetConfig+0x29a>
 8002886:	4846      	ldr	r0, [pc, #280]	; (80029a0 <UART_SetConfig+0x2e0>)
 8002888:	f24f 4224 	movw	r2, #62500	; 0xf424
 800288c:	2b0b      	cmp	r3, #11
 800288e:	bf08      	it	eq
 8002890:	4610      	moveq	r0, r2
 8002892:	2302      	movs	r3, #2
 8002894:	e03b      	b.n	800290e <UART_SetConfig+0x24e>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002896:	f7ff f9ef 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 800289a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800289c:	b1e3      	cbz	r3, 80028d8 <UART_SetConfig+0x218>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d01c      	beq.n	80028dc <UART_SetConfig+0x21c>
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d01c      	beq.n	80028e0 <UART_SetConfig+0x220>
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d01c      	beq.n	80028e4 <UART_SetConfig+0x224>
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d01c      	beq.n	80028e8 <UART_SetConfig+0x228>
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d01c      	beq.n	80028ec <UART_SetConfig+0x22c>
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d01c      	beq.n	80028f0 <UART_SetConfig+0x230>
 80028b6:	2b07      	cmp	r3, #7
 80028b8:	d01c      	beq.n	80028f4 <UART_SetConfig+0x234>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d01c      	beq.n	80028f8 <UART_SetConfig+0x238>
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d01c      	beq.n	80028fc <UART_SetConfig+0x23c>
 80028c2:	2b0a      	cmp	r3, #10
 80028c4:	d01c      	beq.n	8002900 <UART_SetConfig+0x240>
 80028c6:	2b0b      	cmp	r3, #11
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80028d0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80028d4:	2304      	movs	r3, #4
 80028d6:	e7a6      	b.n	8002826 <UART_SetConfig+0x166>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80028d8:	2301      	movs	r3, #1
 80028da:	e7f9      	b.n	80028d0 <UART_SetConfig+0x210>
 80028dc:	2302      	movs	r3, #2
 80028de:	e7f7      	b.n	80028d0 <UART_SetConfig+0x210>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e7f5      	b.n	80028d0 <UART_SetConfig+0x210>
 80028e4:	2306      	movs	r3, #6
 80028e6:	e7f3      	b.n	80028d0 <UART_SetConfig+0x210>
 80028e8:	2308      	movs	r3, #8
 80028ea:	e7f1      	b.n	80028d0 <UART_SetConfig+0x210>
 80028ec:	230a      	movs	r3, #10
 80028ee:	e7ef      	b.n	80028d0 <UART_SetConfig+0x210>
 80028f0:	230c      	movs	r3, #12
 80028f2:	e7ed      	b.n	80028d0 <UART_SetConfig+0x210>
 80028f4:	2310      	movs	r3, #16
 80028f6:	e7eb      	b.n	80028d0 <UART_SetConfig+0x210>
 80028f8:	2320      	movs	r3, #32
 80028fa:	e7e9      	b.n	80028d0 <UART_SetConfig+0x210>
 80028fc:	2340      	movs	r3, #64	; 0x40
 80028fe:	e7e7      	b.n	80028d0 <UART_SetConfig+0x210>
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	e7e5      	b.n	80028d0 <UART_SetConfig+0x210>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002904:	4826      	ldr	r0, [pc, #152]	; (80029a0 <UART_SetConfig+0x2e0>)
 8002906:	e7c4      	b.n	8002892 <UART_SetConfig+0x1d2>
 8002908:	4826      	ldr	r0, [pc, #152]	; (80029a4 <UART_SetConfig+0x2e4>)
 800290a:	e7c2      	b.n	8002892 <UART_SetConfig+0x1d2>
 800290c:	4826      	ldr	r0, [pc, #152]	; (80029a8 <UART_SetConfig+0x2e8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800290e:	6862      	ldr	r2, [r4, #4]
 8002910:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002914:	4281      	cmp	r1, r0
 8002916:	f63f af2c 	bhi.w	8002772 <UART_SetConfig+0xb2>
 800291a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800291e:	f63f af28 	bhi.w	8002772 <UART_SetConfig+0xb2>
        switch (clocksource)
 8002922:	2b08      	cmp	r3, #8
 8002924:	f200 8125 	bhi.w	8002b72 <UART_SetConfig+0x4b2>
 8002928:	e8df f013 	tbh	[pc, r3, lsl #1]
 800292c:	01230059 	.word	0x01230059
 8002930:	01230095 	.word	0x01230095
 8002934:	012300d1 	.word	0x012300d1
 8002938:	01230123 	.word	0x01230123
 800293c:	00ea      	.short	0x00ea
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800293e:	481b      	ldr	r0, [pc, #108]	; (80029ac <UART_SetConfig+0x2ec>)
 8002940:	e7a7      	b.n	8002892 <UART_SetConfig+0x1d2>
 8002942:	481b      	ldr	r0, [pc, #108]	; (80029b0 <UART_SetConfig+0x2f0>)
 8002944:	e7a5      	b.n	8002892 <UART_SetConfig+0x1d2>
 8002946:	481b      	ldr	r0, [pc, #108]	; (80029b4 <UART_SetConfig+0x2f4>)
 8002948:	e7a3      	b.n	8002892 <UART_SetConfig+0x1d2>
 800294a:	481b      	ldr	r0, [pc, #108]	; (80029b8 <UART_SetConfig+0x2f8>)
 800294c:	e7a1      	b.n	8002892 <UART_SetConfig+0x1d2>
 800294e:	481b      	ldr	r0, [pc, #108]	; (80029bc <UART_SetConfig+0x2fc>)
 8002950:	e79f      	b.n	8002892 <UART_SetConfig+0x1d2>
 8002952:	481b      	ldr	r0, [pc, #108]	; (80029c0 <UART_SetConfig+0x300>)
 8002954:	e79d      	b.n	8002892 <UART_SetConfig+0x1d2>
 8002956:	481b      	ldr	r0, [pc, #108]	; (80029c4 <UART_SetConfig+0x304>)
 8002958:	e79b      	b.n	8002892 <UART_SetConfig+0x1d2>
 800295a:	481b      	ldr	r0, [pc, #108]	; (80029c8 <UART_SetConfig+0x308>)
 800295c:	e799      	b.n	8002892 <UART_SetConfig+0x1d2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800295e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002962:	e73e      	b.n	80027e2 <UART_SetConfig+0x122>
 8002964:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002968:	e73b      	b.n	80027e2 <UART_SetConfig+0x122>
 800296a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800296e:	e738      	b.n	80027e2 <UART_SetConfig+0x122>
 8002970:	f241 5055 	movw	r0, #5461	; 0x1555
 8002974:	e735      	b.n	80027e2 <UART_SetConfig+0x122>
 8002976:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800297a:	e732      	b.n	80027e2 <UART_SetConfig+0x122>
 800297c:	f640 40cc 	movw	r0, #3276	; 0xccc
 8002980:	e72f      	b.n	80027e2 <UART_SetConfig+0x122>
 8002982:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8002986:	e72c      	b.n	80027e2 <UART_SetConfig+0x122>
 8002988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800298c:	e729      	b.n	80027e2 <UART_SetConfig+0x122>
 800298e:	bf00      	nop
 8002990:	cfff69f3 	.word	0xcfff69f3
 8002994:	40008000 	.word	0x40008000
 8002998:	40013800 	.word	0x40013800
 800299c:	080060ec 	.word	0x080060ec
 80029a0:	00f42400 	.word	0x00f42400
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	003d0900 	.word	0x003d0900
 80029ac:	0028b0aa 	.word	0x0028b0aa
 80029b0:	001e8480 	.word	0x001e8480
 80029b4:	00186a00 	.word	0x00186a00
 80029b8:	00145855 	.word	0x00145855
 80029bc:	000f4240 	.word	0x000f4240
 80029c0:	0007a120 	.word	0x0007a120
 80029c4:	0003d090 	.word	0x0003d090
 80029c8:	0001e848 	.word	0x0001e848
 80029cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029d0:	e79d      	b.n	800290e <UART_SetConfig+0x24e>
 80029d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029d6:	e704      	b.n	80027e2 <UART_SetConfig+0x122>
 80029d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029dc:	e701      	b.n	80027e2 <UART_SetConfig+0x122>
            pclk = HAL_RCC_GetPCLK1Freq();
 80029de:	f7ff f9a9 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8089 	beq.w	8002afc <UART_SetConfig+0x43c>
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d072      	beq.n	8002ad4 <UART_SetConfig+0x414>
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d072      	beq.n	8002ad8 <UART_SetConfig+0x418>
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d072      	beq.n	8002adc <UART_SetConfig+0x41c>
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d072      	beq.n	8002ae0 <UART_SetConfig+0x420>
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d072      	beq.n	8002ae4 <UART_SetConfig+0x424>
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d072      	beq.n	8002ae8 <UART_SetConfig+0x428>
 8002a02:	2b07      	cmp	r3, #7
 8002a04:	d072      	beq.n	8002aec <UART_SetConfig+0x42c>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d072      	beq.n	8002af0 <UART_SetConfig+0x430>
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	d072      	beq.n	8002af4 <UART_SetConfig+0x434>
 8002a0e:	2b0a      	cmp	r3, #10
 8002a10:	d072      	beq.n	8002af8 <UART_SetConfig+0x438>
 8002a12:	2b0b      	cmp	r3, #11
 8002a14:	d172      	bne.n	8002afc <UART_SetConfig+0x43c>
 8002a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f7fd fbff 	bl	8000220 <__aeabi_uldivmod>
 8002a22:	6865      	ldr	r5, [r4, #4]
 8002a24:	020f      	lsls	r7, r1, #8
 8002a26:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002a2a:	0206      	lsls	r6, r0, #8
 8002a2c:	0868      	lsrs	r0, r5, #1
 8002a2e:	eb16 0b00 	adds.w	fp, r6, r0
 8002a32:	f147 0c00 	adc.w	ip, r7, #0
 8002a36:	462a      	mov	r2, r5
 8002a38:	2300      	movs	r3, #0
 8002a3a:	4658      	mov	r0, fp
 8002a3c:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a3e:	f7fd fbef 	bl	8000220 <__aeabi_uldivmod>
            break;
 8002a42:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a44:	4b9a      	ldr	r3, [pc, #616]	; (8002cb0 <UART_SetConfig+0x5f0>)
 8002a46:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002a4a:	4299      	cmp	r1, r3
 8002a4c:	f63f ae91 	bhi.w	8002772 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	60d8      	str	r0, [r3, #12]
 8002a54:	e68e      	b.n	8002774 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d036      	beq.n	8002aca <UART_SetConfig+0x40a>
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d016      	beq.n	8002a8e <UART_SetConfig+0x3ce>
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d016      	beq.n	8002a92 <UART_SetConfig+0x3d2>
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d016      	beq.n	8002a96 <UART_SetConfig+0x3d6>
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d01e      	beq.n	8002aaa <UART_SetConfig+0x3ea>
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d01e      	beq.n	8002aae <UART_SetConfig+0x3ee>
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d01e      	beq.n	8002ab2 <UART_SetConfig+0x3f2>
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	d020      	beq.n	8002aba <UART_SetConfig+0x3fa>
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d020      	beq.n	8002abe <UART_SetConfig+0x3fe>
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	d020      	beq.n	8002ac2 <UART_SetConfig+0x402>
 8002a80:	2b0a      	cmp	r3, #10
 8002a82:	d020      	beq.n	8002ac6 <UART_SetConfig+0x406>
 8002a84:	2b0b      	cmp	r3, #11
 8002a86:	d120      	bne.n	8002aca <UART_SetConfig+0x40a>
 8002a88:	488a      	ldr	r0, [pc, #552]	; (8002cb4 <UART_SetConfig+0x5f4>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	e006      	b.n	8002a9c <UART_SetConfig+0x3dc>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a8e:	488a      	ldr	r0, [pc, #552]	; (8002cb8 <UART_SetConfig+0x5f8>)
 8002a90:	e7fb      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002a92:	488a      	ldr	r0, [pc, #552]	; (8002cbc <UART_SetConfig+0x5fc>)
 8002a94:	e7f9      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002a96:	a182      	add	r1, pc, #520	; (adr r1, 8002ca0 <UART_SetConfig+0x5e0>)
 8002a98:	e9d1 0100 	ldrd	r0, r1, [r1]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a9c:	0855      	lsrs	r5, r2, #1
 8002a9e:	1940      	adds	r0, r0, r5
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	f141 0100 	adc.w	r1, r1, #0
 8002aa8:	e7c9      	b.n	8002a3e <UART_SetConfig+0x37e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aaa:	4885      	ldr	r0, [pc, #532]	; (8002cc0 <UART_SetConfig+0x600>)
 8002aac:	e7ed      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002aae:	4885      	ldr	r0, [pc, #532]	; (8002cc4 <UART_SetConfig+0x604>)
 8002ab0:	e7eb      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002ab2:	a17d      	add	r1, pc, #500	; (adr r1, 8002ca8 <UART_SetConfig+0x5e8>)
 8002ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ab8:	e7f0      	b.n	8002a9c <UART_SetConfig+0x3dc>
 8002aba:	4883      	ldr	r0, [pc, #524]	; (8002cc8 <UART_SetConfig+0x608>)
 8002abc:	e7e5      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002abe:	4883      	ldr	r0, [pc, #524]	; (8002ccc <UART_SetConfig+0x60c>)
 8002ac0:	e7e3      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002ac2:	4883      	ldr	r0, [pc, #524]	; (8002cd0 <UART_SetConfig+0x610>)
 8002ac4:	e7e1      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002ac6:	4883      	ldr	r0, [pc, #524]	; (8002cd4 <UART_SetConfig+0x614>)
 8002ac8:	e7df      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002aca:	4883      	ldr	r0, [pc, #524]	; (8002cd8 <UART_SetConfig+0x618>)
 8002acc:	e7dd      	b.n	8002a8a <UART_SetConfig+0x3ca>
            pclk = HAL_RCC_GetSysClockFreq();
 8002ace:	f7ff f8d3 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002ad2:	e786      	b.n	80029e2 <UART_SetConfig+0x322>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	e7a0      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002ad8:	2204      	movs	r2, #4
 8002ada:	e79e      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002adc:	2206      	movs	r2, #6
 8002ade:	e79c      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	e79a      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002ae4:	220a      	movs	r2, #10
 8002ae6:	e798      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002ae8:	220c      	movs	r2, #12
 8002aea:	e796      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002aec:	2210      	movs	r2, #16
 8002aee:	e794      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002af0:	2220      	movs	r2, #32
 8002af2:	e792      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002af4:	2240      	movs	r2, #64	; 0x40
 8002af6:	e790      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	e78e      	b.n	8002a1a <UART_SetConfig+0x35a>
 8002afc:	2201      	movs	r2, #1
 8002afe:	e78c      	b.n	8002a1a <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b02:	b39b      	cbz	r3, 8002b6c <UART_SetConfig+0x4ac>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d016      	beq.n	8002b36 <UART_SetConfig+0x476>
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d017      	beq.n	8002b3c <UART_SetConfig+0x47c>
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d018      	beq.n	8002b42 <UART_SetConfig+0x482>
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d018      	beq.n	8002b46 <UART_SetConfig+0x486>
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d019      	beq.n	8002b4c <UART_SetConfig+0x48c>
 8002b18:	2b06      	cmp	r3, #6
 8002b1a:	d019      	beq.n	8002b50 <UART_SetConfig+0x490>
 8002b1c:	2b07      	cmp	r3, #7
 8002b1e:	d019      	beq.n	8002b54 <UART_SetConfig+0x494>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d01a      	beq.n	8002b5a <UART_SetConfig+0x49a>
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d01b      	beq.n	8002b60 <UART_SetConfig+0x4a0>
 8002b28:	2b0a      	cmp	r3, #10
 8002b2a:	d01c      	beq.n	8002b66 <UART_SetConfig+0x4a6>
 8002b2c:	2b0b      	cmp	r3, #11
 8002b2e:	d11d      	bne.n	8002b6c <UART_SetConfig+0x4ac>
 8002b30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b34:	e7a9      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b36:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002b3a:	e7a6      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b40:	e7a3      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b42:	4866      	ldr	r0, [pc, #408]	; (8002cdc <UART_SetConfig+0x61c>)
 8002b44:	e7a1      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b4a:	e79e      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b4c:	4864      	ldr	r0, [pc, #400]	; (8002ce0 <UART_SetConfig+0x620>)
 8002b4e:	e79c      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b50:	4864      	ldr	r0, [pc, #400]	; (8002ce4 <UART_SetConfig+0x624>)
 8002b52:	e79a      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b58:	e797      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002b5e:	e794      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b60:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b64:	e791      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002b6a:	e78e      	b.n	8002a8a <UART_SetConfig+0x3ca>
 8002b6c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002b70:	e78b      	b.n	8002a8a <UART_SetConfig+0x3ca>
            ret = HAL_ERROR;
 8002b72:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002b74:	2000      	movs	r0, #0
 8002b76:	e765      	b.n	8002a44 <UART_SetConfig+0x384>
    switch (clocksource)
 8002b78:	2a07      	cmp	r2, #7
 8002b7a:	f200 8106 	bhi.w	8002d8a <UART_SetConfig+0x6ca>
 8002b7e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002b82:	0008      	.short	0x0008
 8002b84:	0104003f 	.word	0x0104003f
 8002b88:	01040076 	.word	0x01040076
 8002b8c:	01040104 	.word	0x01040104
 8002b90:	00c7      	.short	0x00c7
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b92:	f7ff f8e1 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	d06b      	beq.n	8002c74 <UART_SetConfig+0x5b4>
 8002b9c:	2901      	cmp	r1, #1
 8002b9e:	d06b      	beq.n	8002c78 <UART_SetConfig+0x5b8>
 8002ba0:	2902      	cmp	r1, #2
 8002ba2:	d06b      	beq.n	8002c7c <UART_SetConfig+0x5bc>
 8002ba4:	2903      	cmp	r1, #3
 8002ba6:	d06b      	beq.n	8002c80 <UART_SetConfig+0x5c0>
 8002ba8:	2904      	cmp	r1, #4
 8002baa:	d06b      	beq.n	8002c84 <UART_SetConfig+0x5c4>
 8002bac:	2905      	cmp	r1, #5
 8002bae:	d06b      	beq.n	8002c88 <UART_SetConfig+0x5c8>
 8002bb0:	2906      	cmp	r1, #6
 8002bb2:	d06b      	beq.n	8002c8c <UART_SetConfig+0x5cc>
 8002bb4:	2907      	cmp	r1, #7
 8002bb6:	d06b      	beq.n	8002c90 <UART_SetConfig+0x5d0>
 8002bb8:	2908      	cmp	r1, #8
 8002bba:	d06b      	beq.n	8002c94 <UART_SetConfig+0x5d4>
 8002bbc:	2909      	cmp	r1, #9
 8002bbe:	d06b      	beq.n	8002c98 <UART_SetConfig+0x5d8>
 8002bc0:	290a      	cmp	r1, #10
 8002bc2:	d06b      	beq.n	8002c9c <UART_SetConfig+0x5dc>
 8002bc4:	290b      	cmp	r1, #11
 8002bc6:	bf14      	ite	ne
 8002bc8:	2201      	movne	r2, #1
 8002bca:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8002bce:	6861      	ldr	r1, [r4, #4]
 8002bd0:	fbb0 f2f2 	udiv	r2, r0, r2
 8002bd4:	084b      	lsrs	r3, r1, #1
 8002bd6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002be0:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be2:	f1a3 0010 	sub.w	r0, r3, #16
 8002be6:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002bea:	4288      	cmp	r0, r1
 8002bec:	f63f adc1 	bhi.w	8002772 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bf0:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002bf4:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bf6:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	60c3      	str	r3, [r0, #12]
 8002bfe:	e5b9      	b.n	8002774 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c00:	b1fb      	cbz	r3, 8002c42 <UART_SetConfig+0x582>
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d01f      	beq.n	8002c46 <UART_SetConfig+0x586>
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d01f      	beq.n	8002c4a <UART_SetConfig+0x58a>
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d01f      	beq.n	8002c4e <UART_SetConfig+0x58e>
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d01f      	beq.n	8002c52 <UART_SetConfig+0x592>
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d01f      	beq.n	8002c56 <UART_SetConfig+0x596>
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d01f      	beq.n	8002c5a <UART_SetConfig+0x59a>
 8002c1a:	2b07      	cmp	r3, #7
 8002c1c:	d01f      	beq.n	8002c5e <UART_SetConfig+0x59e>
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d01f      	beq.n	8002c62 <UART_SetConfig+0x5a2>
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d01f      	beq.n	8002c66 <UART_SetConfig+0x5a6>
 8002c26:	2b0a      	cmp	r3, #10
 8002c28:	d01f      	beq.n	8002c6a <UART_SetConfig+0x5aa>
 8002c2a:	492f      	ldr	r1, [pc, #188]	; (8002ce8 <UART_SetConfig+0x628>)
 8002c2c:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <UART_SetConfig+0x614>)
 8002c2e:	2b0b      	cmp	r3, #11
 8002c30:	bf14      	ite	ne
 8002c32:	4613      	movne	r3, r2
 8002c34:	460b      	moveq	r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c36:	6862      	ldr	r2, [r4, #4]
 8002c38:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c40:	e7cd      	b.n	8002bde <UART_SetConfig+0x51e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <UART_SetConfig+0x614>)
 8002c44:	e7f7      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c46:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <UART_SetConfig+0x5f4>)
 8002c48:	e7f5      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <UART_SetConfig+0x62c>)
 8002c4c:	e7f3      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c4e:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <UART_SetConfig+0x630>)
 8002c50:	e7f1      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <UART_SetConfig+0x634>)
 8002c54:	e7ef      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <UART_SetConfig+0x638>)
 8002c58:	e7ed      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <UART_SetConfig+0x63c>)
 8002c5c:	e7eb      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <UART_SetConfig+0x640>)
 8002c60:	e7e9      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <UART_SetConfig+0x644>)
 8002c64:	e7e7      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <UART_SetConfig+0x648>)
 8002c68:	e7e5      	b.n	8002c36 <UART_SetConfig+0x576>
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <UART_SetConfig+0x64c>)
 8002c6c:	e7e3      	b.n	8002c36 <UART_SetConfig+0x576>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c6e:	f7ff f803 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002c72:	e790      	b.n	8002b96 <UART_SetConfig+0x4d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c74:	2201      	movs	r2, #1
 8002c76:	e7aa      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c78:	2202      	movs	r2, #2
 8002c7a:	e7a8      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	e7a6      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c80:	2206      	movs	r2, #6
 8002c82:	e7a4      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c84:	2208      	movs	r2, #8
 8002c86:	e7a2      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c88:	220a      	movs	r2, #10
 8002c8a:	e7a0      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c8c:	220c      	movs	r2, #12
 8002c8e:	e79e      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c90:	2210      	movs	r2, #16
 8002c92:	e79c      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c94:	2220      	movs	r2, #32
 8002c96:	e79a      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c98:	2240      	movs	r2, #64	; 0x40
 8002c9a:	e798      	b.n	8002bce <UART_SetConfig+0x50e>
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	e796      	b.n	8002bce <UART_SetConfig+0x50e>
 8002ca0:	28b0aa00 	.word	0x28b0aa00
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	14585500 	.word	0x14585500
 8002cac:	00000000 	.word	0x00000000
 8002cb0:	000ffcff 	.word	0x000ffcff
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	7a120000 	.word	0x7a120000
 8002cbc:	3d090000 	.word	0x3d090000
 8002cc0:	1e848000 	.word	0x1e848000
 8002cc4:	186a0000 	.word	0x186a0000
 8002cc8:	0f424000 	.word	0x0f424000
 8002ccc:	07a12000 	.word	0x07a12000
 8002cd0:	03d09000 	.word	0x03d09000
 8002cd4:	01e84800 	.word	0x01e84800
 8002cd8:	f4240000 	.word	0xf4240000
 8002cdc:	00155500 	.word	0x00155500
 8002ce0:	000ccc00 	.word	0x000ccc00
 8002ce4:	000aaa00 	.word	0x000aaa00
 8002ce8:	0001e848 	.word	0x0001e848
 8002cec:	007a1200 	.word	0x007a1200
 8002cf0:	00516154 	.word	0x00516154
 8002cf4:	003d0900 	.word	0x003d0900
 8002cf8:	0030d400 	.word	0x0030d400
 8002cfc:	0028b0aa 	.word	0x0028b0aa
 8002d00:	001e8480 	.word	0x001e8480
 8002d04:	000f4240 	.word	0x000f4240
 8002d08:	0007a120 	.word	0x0007a120
 8002d0c:	0003d090 	.word	0x0003d090
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d10:	b1d3      	cbz	r3, 8002d48 <UART_SetConfig+0x688>
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d01b      	beq.n	8002d4e <UART_SetConfig+0x68e>
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d01c      	beq.n	8002d54 <UART_SetConfig+0x694>
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d01d      	beq.n	8002d5a <UART_SetConfig+0x69a>
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d01e      	beq.n	8002d60 <UART_SetConfig+0x6a0>
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d01f      	beq.n	8002d66 <UART_SetConfig+0x6a6>
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d020      	beq.n	8002d6c <UART_SetConfig+0x6ac>
 8002d2a:	2b07      	cmp	r3, #7
 8002d2c:	d021      	beq.n	8002d72 <UART_SetConfig+0x6b2>
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d022      	beq.n	8002d78 <UART_SetConfig+0x6b8>
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d023      	beq.n	8002d7e <UART_SetConfig+0x6be>
 8002d36:	2b0a      	cmp	r3, #10
 8002d38:	d024      	beq.n	8002d84 <UART_SetConfig+0x6c4>
 8002d3a:	2b0b      	cmp	r3, #11
 8002d3c:	bf14      	ite	ne
 8002d3e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8002d42:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002d46:	e776      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4c:	e773      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d52:	e770      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d58:	e76d      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d5a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8002d5e:	e76a      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d64:	e767      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d66:	f641 1398 	movw	r3, #6552	; 0x1998
 8002d6a:	e764      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d6c:	f241 5354 	movw	r3, #5460	; 0x1554
 8002d70:	e761      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d76:	e75e      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7c:	e75b      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d82:	e758      	b.n	8002c36 <UART_SetConfig+0x576>
 8002d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d88:	e755      	b.n	8002c36 <UART_SetConfig+0x576>
        ret = HAL_ERROR;
 8002d8a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e728      	b.n	8002be2 <UART_SetConfig+0x522>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d90:	f7fe ffe2 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d062      	beq.n	8002e60 <UART_SetConfig+0x7a0>
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d062      	beq.n	8002e64 <UART_SetConfig+0x7a4>
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d062      	beq.n	8002e68 <UART_SetConfig+0x7a8>
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d062      	beq.n	8002e6c <UART_SetConfig+0x7ac>
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d062      	beq.n	8002e70 <UART_SetConfig+0x7b0>
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d062      	beq.n	8002e74 <UART_SetConfig+0x7b4>
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d062      	beq.n	8002e78 <UART_SetConfig+0x7b8>
 8002db2:	2b07      	cmp	r3, #7
 8002db4:	d062      	beq.n	8002e7c <UART_SetConfig+0x7bc>
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d062      	beq.n	8002e80 <UART_SetConfig+0x7c0>
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	d062      	beq.n	8002e84 <UART_SetConfig+0x7c4>
 8002dbe:	2b0a      	cmp	r3, #10
 8002dc0:	d062      	beq.n	8002e88 <UART_SetConfig+0x7c8>
 8002dc2:	2b0b      	cmp	r3, #11
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8002dcc:	6862      	ldr	r2, [r4, #4]
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	e01c      	b.n	8002e0e <UART_SetConfig+0x74e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd4:	b35b      	cbz	r3, 8002e2e <UART_SetConfig+0x76e>
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d02b      	beq.n	8002e32 <UART_SetConfig+0x772>
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d02b      	beq.n	8002e36 <UART_SetConfig+0x776>
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d02b      	beq.n	8002e3a <UART_SetConfig+0x77a>
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d02b      	beq.n	8002e3e <UART_SetConfig+0x77e>
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d02b      	beq.n	8002e42 <UART_SetConfig+0x782>
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d02b      	beq.n	8002e46 <UART_SetConfig+0x786>
 8002dee:	2b07      	cmp	r3, #7
 8002df0:	d02b      	beq.n	8002e4a <UART_SetConfig+0x78a>
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d02b      	beq.n	8002e4e <UART_SetConfig+0x78e>
 8002df6:	2b09      	cmp	r3, #9
 8002df8:	d02b      	beq.n	8002e52 <UART_SetConfig+0x792>
 8002dfa:	2b0a      	cmp	r3, #10
 8002dfc:	d02b      	beq.n	8002e56 <UART_SetConfig+0x796>
 8002dfe:	4a45      	ldr	r2, [pc, #276]	; (8002f14 <UART_SetConfig+0x854>)
 8002e00:	f24f 4124 	movw	r1, #62500	; 0xf424
 8002e04:	2b0b      	cmp	r3, #11
 8002e06:	bf14      	ite	ne
 8002e08:	4613      	movne	r3, r2
 8002e0a:	460b      	moveq	r3, r1
 8002e0c:	6862      	ldr	r2, [r4, #4]
 8002e0e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002e12:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e16:	2200      	movs	r2, #0
 8002e18:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e1a:	f1a3 0010 	sub.w	r0, r3, #16
 8002e1e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002e22:	4288      	cmp	r0, r1
 8002e24:	f63f aca5 	bhi.w	8002772 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8002e28:	6821      	ldr	r1, [r4, #0]
 8002e2a:	60cb      	str	r3, [r1, #12]
 8002e2c:	e4a2      	b.n	8002774 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e2e:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <UART_SetConfig+0x854>)
 8002e30:	e7ec      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <UART_SetConfig+0x858>)
 8002e34:	e7ea      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <UART_SetConfig+0x85c>)
 8002e38:	e7e8      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <UART_SetConfig+0x860>)
 8002e3c:	e7e6      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e3e:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <UART_SetConfig+0x864>)
 8002e40:	e7e4      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <UART_SetConfig+0x868>)
 8002e44:	e7e2      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <UART_SetConfig+0x86c>)
 8002e48:	e7e0      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <UART_SetConfig+0x870>)
 8002e4c:	e7de      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <UART_SetConfig+0x874>)
 8002e50:	e7dc      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <UART_SetConfig+0x878>)
 8002e54:	e7da      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <UART_SetConfig+0x87c>)
 8002e58:	e7d8      	b.n	8002e0c <UART_SetConfig+0x74c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e5a:	f7fe ff0d 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002e5e:	e799      	b.n	8002d94 <UART_SetConfig+0x6d4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e60:	2301      	movs	r3, #1
 8002e62:	e7b3      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e7b1      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e7af      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e6c:	2306      	movs	r3, #6
 8002e6e:	e7ad      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e70:	2308      	movs	r3, #8
 8002e72:	e7ab      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e74:	230a      	movs	r3, #10
 8002e76:	e7a9      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e78:	230c      	movs	r3, #12
 8002e7a:	e7a7      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	e7a5      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e80:	2320      	movs	r3, #32
 8002e82:	e7a3      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	e7a1      	b.n	8002dcc <UART_SetConfig+0x70c>
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	e79f      	b.n	8002dcc <UART_SetConfig+0x70c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e8c:	b1cb      	cbz	r3, 8002ec2 <UART_SetConfig+0x802>
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d01a      	beq.n	8002ec8 <UART_SetConfig+0x808>
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d01b      	beq.n	8002ece <UART_SetConfig+0x80e>
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d01c      	beq.n	8002ed4 <UART_SetConfig+0x814>
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d01d      	beq.n	8002eda <UART_SetConfig+0x81a>
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d01e      	beq.n	8002ee0 <UART_SetConfig+0x820>
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d01f      	beq.n	8002ee6 <UART_SetConfig+0x826>
 8002ea6:	2b07      	cmp	r3, #7
 8002ea8:	d020      	beq.n	8002eec <UART_SetConfig+0x82c>
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d021      	beq.n	8002ef2 <UART_SetConfig+0x832>
 8002eae:	2b09      	cmp	r3, #9
 8002eb0:	d022      	beq.n	8002ef8 <UART_SetConfig+0x838>
 8002eb2:	2b0a      	cmp	r3, #10
 8002eb4:	d023      	beq.n	8002efe <UART_SetConfig+0x83e>
 8002eb6:	2b0b      	cmp	r3, #11
 8002eb8:	bf14      	ite	ne
 8002eba:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8002ebe:	2380      	moveq	r3, #128	; 0x80
 8002ec0:	e7a4      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	e7a1      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ec8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ecc:	e79e      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed2:	e79b      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ed4:	f241 5355 	movw	r3, #5461	; 0x1555
 8002ed8:	e798      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ede:	e795      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ee0:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002ee4:	e792      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ee6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002eea:	e78f      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ef0:	e78c      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef6:	e789      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efc:	e786      	b.n	8002e0c <UART_SetConfig+0x74c>
 8002efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f02:	e783      	b.n	8002e0c <UART_SetConfig+0x74c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f04:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002f08:	f43f af3f 	beq.w	8002d8a <UART_SetConfig+0x6ca>
        ret = HAL_ERROR;
 8002f0c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e783      	b.n	8002e1a <UART_SetConfig+0x75a>
 8002f12:	bf00      	nop
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	007a1200 	.word	0x007a1200
 8002f1c:	003d0900 	.word	0x003d0900
 8002f20:	0028b0aa 	.word	0x0028b0aa
 8002f24:	001e8480 	.word	0x001e8480
 8002f28:	00186a00 	.word	0x00186a00
 8002f2c:	00145855 	.word	0x00145855
 8002f30:	000f4240 	.word	0x000f4240
 8002f34:	0007a120 	.word	0x0007a120
 8002f38:	0003d090 	.word	0x0003d090
 8002f3c:	0001e848 	.word	0x0001e848

08002f40 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f42:	07da      	lsls	r2, r3, #31
{
 8002f44:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f46:	d506      	bpl.n	8002f56 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f48:	6801      	ldr	r1, [r0, #0]
 8002f4a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002f4c:	684a      	ldr	r2, [r1, #4]
 8002f4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f52:	4322      	orrs	r2, r4
 8002f54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f56:	079c      	lsls	r4, r3, #30
 8002f58:	d506      	bpl.n	8002f68 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f5a:	6801      	ldr	r1, [r0, #0]
 8002f5c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002f5e:	684a      	ldr	r2, [r1, #4]
 8002f60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f64:	4322      	orrs	r2, r4
 8002f66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f68:	0759      	lsls	r1, r3, #29
 8002f6a:	d506      	bpl.n	8002f7a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f6c:	6801      	ldr	r1, [r0, #0]
 8002f6e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f70:	684a      	ldr	r2, [r1, #4]
 8002f72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f76:	4322      	orrs	r2, r4
 8002f78:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f7a:	071a      	lsls	r2, r3, #28
 8002f7c:	d506      	bpl.n	8002f8c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f7e:	6801      	ldr	r1, [r0, #0]
 8002f80:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f82:	684a      	ldr	r2, [r1, #4]
 8002f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f88:	4322      	orrs	r2, r4
 8002f8a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f8c:	06dc      	lsls	r4, r3, #27
 8002f8e:	d506      	bpl.n	8002f9e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f90:	6801      	ldr	r1, [r0, #0]
 8002f92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002f94:	688a      	ldr	r2, [r1, #8]
 8002f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f9a:	4322      	orrs	r2, r4
 8002f9c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f9e:	0699      	lsls	r1, r3, #26
 8002fa0:	d506      	bpl.n	8002fb0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fa2:	6801      	ldr	r1, [r0, #0]
 8002fa4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002fa6:	688a      	ldr	r2, [r1, #8]
 8002fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fac:	4322      	orrs	r2, r4
 8002fae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb0:	065a      	lsls	r2, r3, #25
 8002fb2:	d50f      	bpl.n	8002fd4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fb4:	6801      	ldr	r1, [r0, #0]
 8002fb6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002fb8:	684a      	ldr	r2, [r1, #4]
 8002fba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002fbe:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fc0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fc6:	d105      	bne.n	8002fd4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fc8:	684a      	ldr	r2, [r1, #4]
 8002fca:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002fcc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002fd0:	4322      	orrs	r2, r4
 8002fd2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	d506      	bpl.n	8002fe6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fd8:	6802      	ldr	r2, [r0, #0]
 8002fda:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002fdc:	6853      	ldr	r3, [r2, #4]
 8002fde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6053      	str	r3, [r2, #4]
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <UART_WaitOnFlagUntilTimeout>:
{
 8002fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fec:	9d06      	ldr	r5, [sp, #24]
 8002fee:	4604      	mov	r4, r0
 8002ff0:	460f      	mov	r7, r1
 8002ff2:	4616      	mov	r6, r2
 8002ff4:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	6821      	ldr	r1, [r4, #0]
 8002ff8:	69ca      	ldr	r2, [r1, #28]
 8002ffa:	ea37 0302 	bics.w	r3, r7, r2
 8002ffe:	bf0c      	ite	eq
 8003000:	2201      	moveq	r2, #1
 8003002:	2200      	movne	r2, #0
 8003004:	42b2      	cmp	r2, r6
 8003006:	d002      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003008:	2000      	movs	r0, #0
}
 800300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800300e:	1c68      	adds	r0, r5, #1
 8003010:	d0f2      	beq.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fd fad5 	bl	80005c0 <HAL_GetTick>
 8003016:	eba0 0008 	sub.w	r0, r0, r8
 800301a:	4285      	cmp	r5, r0
 800301c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800301e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	d300      	bcc.n	8003024 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003022:	b98d      	cbnz	r5, 8003048 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003028:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	6883      	ldr	r3, [r0, #8]
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003032:	2320      	movs	r3, #32
 8003034:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003038:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800303c:	2300      	movs	r3, #0
 800303e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8003042:	2003      	movs	r0, #3
 8003044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003048:	075a      	lsls	r2, r3, #29
 800304a:	d5d4      	bpl.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800304c:	69c3      	ldr	r3, [r0, #28]
 800304e:	051b      	lsls	r3, r3, #20
 8003050:	d5d1      	bpl.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003056:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003058:	6803      	ldr	r3, [r0, #0]
 800305a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800305e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003060:	6883      	ldr	r3, [r0, #8]
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003068:	2320      	movs	r3, #32
 800306a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800306e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003072:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003076:	e7e1      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0x54>

08003078 <HAL_UART_Transmit>:
{
 8003078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800307c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800307e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003082:	2b20      	cmp	r3, #32
{
 8003084:	4604      	mov	r4, r0
 8003086:	460e      	mov	r6, r1
 8003088:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800308a:	d14f      	bne.n	800312c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800308c:	2900      	cmp	r1, #0
 800308e:	d04b      	beq.n	8003128 <HAL_UART_Transmit+0xb0>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d049      	beq.n	8003128 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8003094:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d047      	beq.n	800312c <HAL_UART_Transmit+0xb4>
 800309c:	2301      	movs	r3, #1
 800309e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030aa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 80030ae:	f7fd fa87 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80030b4:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80030bc:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80030be:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c2:	d103      	bne.n	80030cc <HAL_UART_Transmit+0x54>
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	b90b      	cbnz	r3, 80030cc <HAL_UART_Transmit+0x54>
 80030c8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80030ca:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80030cc:	2300      	movs	r3, #0
 80030ce:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 80030d2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80030da:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030dc:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 80030de:	b942      	cbnz	r2, 80030f2 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e0:	2140      	movs	r1, #64	; 0x40
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff ff80 	bl	8002fe8 <UART_WaitOnFlagUntilTimeout>
 80030e8:	b948      	cbnz	r0, 80030fe <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 80030ea:	2320      	movs	r3, #32
 80030ec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 80030f0:	e006      	b.n	8003100 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	2200      	movs	r2, #0
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	4620      	mov	r0, r4
 80030f8:	f7ff ff76 	bl	8002fe8 <UART_WaitOnFlagUntilTimeout>
 80030fc:	b118      	cbz	r0, 8003106 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 80030fe:	2003      	movs	r0, #3
}
 8003100:	b003      	add	sp, #12
 8003102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003106:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003108:	b95e      	cbnz	r6, 8003122 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800310a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800310e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003112:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003114:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003118:	3b01      	subs	r3, #1
 800311a:	b29b      	uxth	r3, r3
 800311c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8003120:	e7d7      	b.n	80030d2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003122:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003126:	e7f4      	b.n	8003112 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8003128:	2001      	movs	r0, #1
 800312a:	e7e9      	b.n	8003100 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800312c:	2002      	movs	r0, #2
 800312e:	e7e7      	b.n	8003100 <HAL_UART_Transmit+0x88>

08003130 <UART_CheckIdleState>:
{
 8003130:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003132:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	2600      	movs	r6, #0
 8003136:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800313a:	f7fd fa41 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003144:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003146:	d417      	bmi.n	8003178 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	075b      	lsls	r3, r3, #29
 800314e:	d50a      	bpl.n	8003166 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	462b      	mov	r3, r5
 800315a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800315e:	4620      	mov	r0, r4
 8003160:	f7ff ff42 	bl	8002fe8 <UART_WaitOnFlagUntilTimeout>
 8003164:	b9a0      	cbnz	r0, 8003190 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003166:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003168:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800316a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800316e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003172:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8003176:	e00c      	b.n	8003192 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	4632      	mov	r2, r6
 8003180:	4603      	mov	r3, r0
 8003182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003186:	4620      	mov	r0, r4
 8003188:	f7ff ff2e 	bl	8002fe8 <UART_WaitOnFlagUntilTimeout>
 800318c:	2800      	cmp	r0, #0
 800318e:	d0db      	beq.n	8003148 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003190:	2003      	movs	r0, #3
}
 8003192:	b002      	add	sp, #8
 8003194:	bd70      	pop	{r4, r5, r6, pc}

08003196 <HAL_UART_Init>:
{
 8003196:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003198:	4604      	mov	r4, r0
 800319a:	b350      	cbz	r0, 80031f2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800319c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80031a0:	b91b      	cbnz	r3, 80031aa <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80031a2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80031a6:	f001 fbdb 	bl	8004960 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80031aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031ac:	2324      	movs	r3, #36	; 0x24
 80031ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80031b2:	6813      	ldr	r3, [r2, #0]
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ba:	4620      	mov	r0, r4
 80031bc:	f7ff fa80 	bl	80026c0 <UART_SetConfig>
 80031c0:	2801      	cmp	r0, #1
 80031c2:	d016      	beq.n	80031f2 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031c6:	b113      	cbz	r3, 80031ce <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7ff feb9 	bl	8002f40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031de:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80031e6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80031ee:	f7ff bf9f 	b.w	8003130 <UART_CheckIdleState>
}
 80031f2:	2001      	movs	r0, #1
 80031f4:	bd10      	pop	{r4, pc}

080031f6 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80031f8:	2203      	movs	r2, #3
 80031fa:	f88d 2003 	strb.w	r2, [sp, #3]
 80031fe:	2207      	movs	r2, #7
 8003200:	f88d 2004 	strb.w	r2, [sp, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f88d 2006 	strb.w	r2, [sp, #6]
 800320a:	f88d 2007 	strb.w	r2, [sp, #7]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800320e:	2208      	movs	r2, #8
 8003210:	f88d 2008 	strb.w	r2, [sp, #8]
 8003214:	f88d 200c 	strb.w	r2, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003218:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800321a:	2301      	movs	r3, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800321c:	2104      	movs	r1, #4
 800321e:	2402      	movs	r4, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003220:	f88d 3000 	strb.w	r3, [sp]
 8003224:	f88d 3001 	strb.w	r3, [sp, #1]
 8003228:	f88d 3002 	strb.w	r3, [sp, #2]
 800322c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003230:	f88d 1009 	strb.w	r1, [sp, #9]
 8003234:	f88d 400a 	strb.w	r4, [sp, #10]
 8003238:	f88d 100b 	strb.w	r1, [sp, #11]
 800323c:	f88d 300d 	strb.w	r3, [sp, #13]
 8003240:	f88d 300e 	strb.w	r3, [sp, #14]
 8003244:	f88d 300f 	strb.w	r3, [sp, #15]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003248:	b92a      	cbnz	r2, 8003256 <UARTEx_SetNbDataToProcess+0x60>
  {
    huart->NbTxDataToProcess = 1U;
 800324a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800324e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8003252:	b004      	add	sp, #16
 8003254:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003256:	6802      	ldr	r2, [r0, #0]
 8003258:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800325a:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800325c:	aa04      	add	r2, sp, #16
 800325e:	eb02 7151 	add.w	r1, r2, r1, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003262:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003266:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800326a:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800326e:	00d2      	lsls	r2, r2, #3
 8003270:	fb92 f2f1 	sdiv	r2, r2, r1
 8003274:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003278:	aa04      	add	r2, sp, #16
 800327a:	4413      	add	r3, r2
 800327c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003280:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003284:	00d2      	lsls	r2, r2, #3
 8003286:	fb92 f3f3 	sdiv	r3, r2, r3
 800328a:	e7e0      	b.n	800324e <UARTEx_SetNbDataToProcess+0x58>

0800328c <HAL_UARTEx_WakeupCallback>:
 800328c:	4770      	bx	lr

0800328e <HAL_UARTEx_RxFifoFullCallback>:
 800328e:	4770      	bx	lr

08003290 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8003290:	4770      	bx	lr

08003292 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8003292:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d014      	beq.n	80032c4 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800329a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	2324      	movs	r3, #36	; 0x24
 800329e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032a2:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032ac:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032b4:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032b6:	2220      	movs	r2, #32
 80032b8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80032bc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80032c0:	4618      	mov	r0, r3
 80032c2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80032c4:	2002      	movs	r0, #2
}
 80032c6:	4770      	bx	lr

080032c8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80032c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80032ca:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80032ce:	2b01      	cmp	r3, #1
{
 80032d0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80032d2:	d01b      	beq.n	800330c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80032d4:	2301      	movs	r3, #1
 80032d6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80032da:	2324      	movs	r3, #36	; 0x24
 80032dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032e0:	6803      	ldr	r3, [r0, #0]
 80032e2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80032f2:	4311      	orrs	r1, r2
 80032f4:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80032f6:	f7ff ff7e 	bl	80031f6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032fa:	6803      	ldr	r3, [r0, #0]
 80032fc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80032fe:	2320      	movs	r3, #32
 8003300:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8003304:	2000      	movs	r0, #0
 8003306:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 800330a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800330c:	2002      	movs	r0, #2
}
 800330e:	bd38      	pop	{r3, r4, r5, pc}

08003310 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003310:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003312:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003316:	2b01      	cmp	r3, #1
{
 8003318:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800331a:	d01b      	beq.n	8003354 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800331c:	2301      	movs	r3, #1
 800331e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8003322:	2324      	movs	r3, #36	; 0x24
 8003324:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003328:	6803      	ldr	r3, [r0, #0]
 800332a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800333a:	4311      	orrs	r1, r2
 800333c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800333e:	f7ff ff5a 	bl	80031f6 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003342:	6803      	ldr	r3, [r0, #0]
 8003344:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003346:	2320      	movs	r3, #32
 8003348:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800334c:	2000      	movs	r0, #0
 800334e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8003352:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003354:	2002      	movs	r0, #2
}
 8003356:	bd38      	pop	{r3, r4, r5, pc}

08003358 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003358:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800335c:	b29b      	uxth	r3, r3
 800335e:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8003362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003366:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800336a:	2000      	movs	r0, #0
 800336c:	4770      	bx	lr

0800336e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800336e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003372:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8003376:	045b      	lsls	r3, r3, #17
 8003378:	0c5b      	lsrs	r3, r3, #17
 800337a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800337e:	2000      	movs	r0, #0
 8003380:	4770      	bx	lr

08003382 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003382:	b084      	sub	sp, #16
 8003384:	b510      	push	{r4, lr}
 8003386:	ac03      	add	r4, sp, #12
 8003388:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800338c:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 800338e:	2301      	movs	r3, #1
 8003390:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8003394:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003398:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800339c:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80033a0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80033a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR |= winterruptmask;
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80033ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80033b6:	b004      	add	sp, #16
 80033b8:	4610      	mov	r0, r2
 80033ba:	4770      	bx	lr

080033bc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033be:	780d      	ldrb	r5, [r1, #0]
 80033c0:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80033c4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
{
 80033c8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80033ce:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033d0:	0412      	lsls	r2, r2, #16
 80033d2:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80033d4:	2803      	cmp	r0, #3
 80033d6:	d84f      	bhi.n	8003478 <USB_ActivateEndpoint+0xbc>
 80033d8:	e8df f000 	tbb	[pc, r0]
 80033dc:	48044b02 	.word	0x48044b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80033e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80033e4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80033e6:	f248 0480 	movw	r4, #32896	; 0x8080
 80033ea:	4322      	orrs	r2, r4
 80033ec:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80033f0:	780f      	ldrb	r7, [r1, #0]
 80033f2:	4da8      	ldr	r5, [pc, #672]	; (8003694 <USB_ActivateEndpoint+0x2d8>)
 80033f4:	b23e      	sxth	r6, r7
 80033f6:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80033fa:	b292      	uxth	r2, r2
 80033fc:	402a      	ands	r2, r5
 80033fe:	433a      	orrs	r2, r7
 8003400:	4322      	orrs	r2, r4
 8003402:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8003406:	7b0c      	ldrb	r4, [r1, #12]
 8003408:	780a      	ldrb	r2, [r1, #0]
 800340a:	2c00      	cmp	r4, #0
 800340c:	d17f      	bne.n	800350e <USB_ActivateEndpoint+0x152>
  {
    if (ep->is_in != 0U)
 800340e:	784f      	ldrb	r7, [r1, #1]
 8003410:	88ce      	ldrh	r6, [r1, #6]
 8003412:	2408      	movs	r4, #8
 8003414:	b397      	cbz	r7, 800347c <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003416:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800341a:	fb14 3202 	smlabb	r2, r4, r2, r3
 800341e:	fa12 f287 	uxtah	r2, r2, r7
 8003422:	f026 0601 	bic.w	r6, r6, #1
 8003426:	f8a2 6400 	strh.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800342a:	780a      	ldrb	r2, [r1, #0]
 800342c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003430:	0666      	lsls	r6, r4, #25
 8003432:	d509      	bpl.n	8003448 <USB_ActivateEndpoint+0x8c>
 8003434:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003438:	b2a4      	uxth	r4, r4
 800343a:	402c      	ands	r4, r5
 800343c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003440:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003444:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003448:	78ca      	ldrb	r2, [r1, #3]
 800344a:	7809      	ldrb	r1, [r1, #0]
 800344c:	4c92      	ldr	r4, [pc, #584]	; (8003698 <USB_ActivateEndpoint+0x2dc>)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800344e:	b209      	sxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8003450:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003452:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003456:	b292      	uxth	r2, r2
 8003458:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 800345c:	d001      	beq.n	8003462 <USB_ActivateEndpoint+0xa6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800345e:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800346a:	e0c3      	b.n	80035f4 <USB_ActivateEndpoint+0x238>
      wEpRegVal |= USB_EP_INTERRUPT;
 800346c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003470:	e7b8      	b.n	80033e4 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003472:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003476:	e7b5      	b.n	80033e4 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003478:	2001      	movs	r0, #1
 800347a:	e7b4      	b.n	80033e6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800347c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003480:	fb14 3202 	smlabb	r2, r4, r2, r3
 8003484:	fa12 f285 	uxtah	r2, r2, r5
 8003488:	f026 0601 	bic.w	r6, r6, #1
 800348c:	f8a2 6404 	strh.w	r6, [r2, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003490:	780a      	ldrb	r2, [r1, #0]
 8003492:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003496:	fb14 3202 	smlabb	r2, r4, r2, r3
 800349a:	690c      	ldr	r4, [r1, #16]
 800349c:	b2ad      	uxth	r5, r5
 800349e:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80034a2:	b944      	cbnz	r4, 80034b6 <USB_ActivateEndpoint+0xfa>
 80034a4:	5b54      	ldrh	r4, [r2, r5]
 80034a6:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80034aa:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80034ae:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80034b2:	5354      	strh	r4, [r2, r5]
 80034b4:	e007      	b.n	80034c6 <USB_ActivateEndpoint+0x10a>
 80034b6:	2c3d      	cmp	r4, #61	; 0x3d
 80034b8:	d824      	bhi.n	8003504 <USB_ActivateEndpoint+0x148>
 80034ba:	0866      	lsrs	r6, r4, #1
 80034bc:	07e4      	lsls	r4, r4, #31
 80034be:	bf48      	it	mi
 80034c0:	3601      	addmi	r6, #1
 80034c2:	02b6      	lsls	r6, r6, #10
 80034c4:	5356      	strh	r6, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034c6:	780c      	ldrb	r4, [r1, #0]
 80034c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034cc:	0457      	lsls	r7, r2, #17
 80034ce:	d50d      	bpl.n	80034ec <USB_ActivateEndpoint+0x130>
 80034d0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80034d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80034d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034dc:	0412      	lsls	r2, r2, #16
 80034de:	0c12      	lsrs	r2, r2, #16
 80034e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80034ec:	7809      	ldrb	r1, [r1, #0]
 80034ee:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80034f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034fa:	0412      	lsls	r2, r2, #16
 80034fc:	0c12      	lsrs	r2, r2, #16
 80034fe:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003502:	e7ae      	b.n	8003462 <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003504:	4e65      	ldr	r6, [pc, #404]	; (800369c <USB_ActivateEndpoint+0x2e0>)
 8003506:	0964      	lsrs	r4, r4, #5
 8003508:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 800350c:	e7d1      	b.n	80034b2 <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800350e:	b212      	sxth	r2, r2
 8003510:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003514:	b2a4      	uxth	r4, r4
 8003516:	402c      	ands	r4, r5
 8003518:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800351c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003520:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003524:	780e      	ldrb	r6, [r1, #0]
 8003526:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800352a:	2208      	movs	r2, #8
 800352c:	fb12 3606 	smlabb	r6, r2, r6, r3
 8003530:	fa16 f484 	uxtah	r4, r6, r4
 8003534:	890e      	ldrh	r6, [r1, #8]
 8003536:	f026 0601 	bic.w	r6, r6, #1
 800353a:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 800353e:	780e      	ldrb	r6, [r1, #0]
 8003540:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003544:	fb12 3206 	smlabb	r2, r2, r6, r3
 8003548:	fa12 f284 	uxtah	r2, r2, r4
 800354c:	894c      	ldrh	r4, [r1, #10]
 800354e:	f024 0401 	bic.w	r4, r4, #1
 8003552:	f8a2 4404 	strh.w	r4, [r2, #1028]	; 0x404
 8003556:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8003558:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800355a:	b212      	sxth	r2, r2
    if (ep->is_in == 0U)
 800355c:	2c00      	cmp	r4, #0
 800355e:	d14c      	bne.n	80035fa <USB_ActivateEndpoint+0x23e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003560:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003564:	0466      	lsls	r6, r4, #17
 8003566:	d509      	bpl.n	800357c <USB_ActivateEndpoint+0x1c0>
 8003568:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800356c:	b2a4      	uxth	r4, r4
 800356e:	402c      	ands	r4, r5
 8003570:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003574:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003578:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800357c:	780c      	ldrb	r4, [r1, #0]
 800357e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003582:	0655      	lsls	r5, r2, #25
 8003584:	d50d      	bpl.n	80035a2 <USB_ActivateEndpoint+0x1e6>
 8003586:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800358a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800358e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003592:	0412      	lsls	r2, r2, #16
 8003594:	0c12      	lsrs	r2, r2, #16
 8003596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800359e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80035a2:	780c      	ldrb	r4, [r1, #0]
 80035a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80035a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035b0:	0412      	lsls	r2, r2, #16
 80035b2:	0c12      	lsrs	r2, r2, #16
 80035b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80035bc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035c0:	780d      	ldrb	r5, [r1, #0]
 80035c2:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80035c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035ce:	0412      	lsls	r2, r2, #16
 80035d0:	0c12      	lsrs	r2, r2, #16
 80035d2:	f248 0480 	movw	r4, #32896	; 0x8080
 80035d6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80035da:	4322      	orrs	r2, r4
 80035dc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035e0:	7809      	ldrb	r1, [r1, #0]
 80035e2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80035e6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ee:	0412      	lsls	r2, r2, #16
 80035f0:	0c12      	lsrs	r2, r2, #16
 80035f2:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035f4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80035f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035fa:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80035fe:	0464      	lsls	r4, r4, #17
 8003600:	d509      	bpl.n	8003616 <USB_ActivateEndpoint+0x25a>
 8003602:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003606:	b2a4      	uxth	r4, r4
 8003608:	402c      	ands	r4, r5
 800360a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800360e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003612:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003616:	780c      	ldrb	r4, [r1, #0]
 8003618:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800361c:	0652      	lsls	r2, r2, #25
 800361e:	d50d      	bpl.n	800363c <USB_ActivateEndpoint+0x280>
 8003620:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003624:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003628:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800362c:	0412      	lsls	r2, r2, #16
 800362e:	0c12      	lsrs	r2, r2, #16
 8003630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003634:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003638:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800363c:	780c      	ldrb	r4, [r1, #0]
 800363e:	4d16      	ldr	r5, [pc, #88]	; (8003698 <USB_ActivateEndpoint+0x2dc>)
 8003640:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003644:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003648:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800364c:	0412      	lsls	r2, r2, #16
 800364e:	0c12      	lsrs	r2, r2, #16
 8003650:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003658:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800365c:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 800365e:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003660:	b224      	sxth	r4, r4
      if (ep->type != EP_TYPE_ISOC)
 8003662:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003664:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003668:	b292      	uxth	r2, r2
 800366a:	ea02 0205 	and.w	r2, r2, r5
 800366e:	bf18      	it	ne
 8003670:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003674:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003678:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003680:	7809      	ldrb	r1, [r1, #0]
 8003682:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003686:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800368a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800368e:	0412      	lsls	r2, r2, #16
 8003690:	0c12      	lsrs	r2, r2, #16
 8003692:	e6e6      	b.n	8003462 <USB_ActivateEndpoint+0xa6>
 8003694:	ffff8f8f 	.word	0xffff8f8f
 8003698:	ffff8fbf 	.word	0xffff8fbf
 800369c:	ffff8000 	.word	0xffff8000

080036a0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036a0:	b510      	push	{r4, lr}
 80036a2:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80036a4:	7b0c      	ldrb	r4, [r1, #12]
 80036a6:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036a8:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0U)
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d13d      	bne.n	800372a <USB_DeactivateEndpoint+0x8a>
    if (ep->is_in != 0U)
 80036ae:	b312      	cbz	r2, 80036f6 <USB_DeactivateEndpoint+0x56>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036b4:	0652      	lsls	r2, r2, #25
 80036b6:	d50d      	bpl.n	80036d4 <USB_DeactivateEndpoint+0x34>
 80036b8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80036c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036c4:	0412      	lsls	r2, r2, #16
 80036c6:	0c12      	lsrs	r2, r2, #16
 80036c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036cc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80036d0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036d4:	780a      	ldrb	r2, [r1, #0]
 80036d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80036f2:	2000      	movs	r0, #0
 80036f4:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036fa:	0454      	lsls	r4, r2, #17
 80036fc:	d50d      	bpl.n	800371a <USB_DeactivateEndpoint+0x7a>
 80036fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003702:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003706:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800370a:	0412      	lsls	r2, r2, #16
 800370c:	0c12      	lsrs	r2, r2, #16
 800370e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003716:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800371a:	780a      	ldrb	r2, [r1, #0]
 800371c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003728:	e7db      	b.n	80036e2 <USB_DeactivateEndpoint+0x42>
    if (ep->is_in == 0U)
 800372a:	2a00      	cmp	r2, #0
 800372c:	d14e      	bne.n	80037cc <USB_DeactivateEndpoint+0x12c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800372e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003732:	0452      	lsls	r2, r2, #17
 8003734:	d50d      	bpl.n	8003752 <USB_DeactivateEndpoint+0xb2>
 8003736:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800373a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800373e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003742:	0412      	lsls	r2, r2, #16
 8003744:	0c12      	lsrs	r2, r2, #16
 8003746:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800374a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800374e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003752:	780a      	ldrb	r2, [r1, #0]
 8003754:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003758:	065c      	lsls	r4, r3, #25
 800375a:	d50d      	bpl.n	8003778 <USB_DeactivateEndpoint+0xd8>
 800375c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003774:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003778:	780a      	ldrb	r2, [r1, #0]
 800377a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800377e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003792:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003796:	780c      	ldrb	r4, [r1, #0]
 8003798:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800379c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	f248 0280 	movw	r2, #32896	; 0x8080
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037b2:	7809      	ldrb	r1, [r1, #0]
 80037b4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80037b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	0c1b      	lsrs	r3, r3, #16
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80037ca:	e792      	b.n	80036f2 <USB_DeactivateEndpoint+0x52>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80037d0:	0452      	lsls	r2, r2, #17
 80037d2:	d50d      	bpl.n	80037f0 <USB_DeactivateEndpoint+0x150>
 80037d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80037d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80037dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037e0:	0412      	lsls	r2, r2, #16
 80037e2:	0c12      	lsrs	r2, r2, #16
 80037e4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80037e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037ec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037f0:	780a      	ldrb	r2, [r1, #0]
 80037f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037f6:	065b      	lsls	r3, r3, #25
 80037f8:	d50d      	bpl.n	8003816 <USB_DeactivateEndpoint+0x176>
 80037fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	041b      	lsls	r3, r3, #16
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003812:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003816:	780a      	ldrb	r2, [r1, #0]
 8003818:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800381c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003830:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003834:	780c      	ldrb	r4, [r1, #0]
 8003836:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800383a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	f248 0280 	movw	r2, #32896	; 0x8080
 800384a:	4313      	orrs	r3, r2
 800384c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003850:	7809      	ldrb	r1, [r1, #0]
 8003852:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	e7af      	b.n	80037c0 <USB_DeactivateEndpoint+0x120>

08003860 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003860:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003862:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003864:	b212      	sxth	r2, r2
  if (ep->is_in != 0U)
 8003866:	b18b      	cbz	r3, 800388c <USB_EPSetStall+0x2c>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003868:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800386c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800387c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003888:	2000      	movs	r0, #0
 800388a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800388c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80038a0:	e7ec      	b.n	800387c <USB_EPSetStall+0x1c>

080038a2 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80038a2:	7b0b      	ldrb	r3, [r1, #12]
 80038a4:	bb4b      	cbnz	r3, 80038fa <USB_EPClearStall+0x58>
 80038a6:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 80038a8:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038aa:	b212      	sxth	r2, r2
    if (ep->is_in != 0U)
 80038ac:	b33b      	cbz	r3, 80038fe <USB_EPClearStall+0x5c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038b2:	065b      	lsls	r3, r3, #25
 80038b4:	d50d      	bpl.n	80038d2 <USB_EPClearStall+0x30>
 80038b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80038d2:	78cb      	ldrb	r3, [r1, #3]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d010      	beq.n	80038fa <USB_EPClearStall+0x58>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038d8:	780a      	ldrb	r2, [r1, #0]
 80038da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80038fa:	2000      	movs	r0, #0
 80038fc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003902:	045b      	lsls	r3, r3, #17
 8003904:	d50d      	bpl.n	8003922 <USB_EPClearStall+0x80>
 8003906:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800390a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003922:	780a      	ldrb	r2, [r1, #0]
 8003924:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	0c1b      	lsrs	r3, r3, #16
 8003934:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003938:	e7d9      	b.n	80038ee <USB_EPClearStall+0x4c>

0800393a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800393a:	b911      	cbnz	r1, 8003942 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003942:	2000      	movs	r0, #0
 8003944:	4770      	bx	lr

08003946 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003946:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800394a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800394e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003952:	b29b      	uxth	r3, r3
 8003954:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58

  return HAL_OK;
}
 8003958:	2000      	movs	r0, #0
 800395a:	4770      	bx	lr

0800395c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800395c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003960:	b280      	uxth	r0, r0
 8003962:	4770      	bx	lr

08003964 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003964:	2000      	movs	r0, #0
 8003966:	4770      	bx	lr

08003968 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800396c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800396e:	4402      	add	r2, r0
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	440b      	add	r3, r1
 8003976:	1a52      	subs	r2, r2, r1

  for (i = n; i != 0U; i--)
 8003978:	4299      	cmp	r1, r3
 800397a:	d100      	bne.n	800397e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800397c:	4770      	bx	lr
 800397e:	8808      	ldrh	r0, [r1, #0]
    *pdwVal = (uint16_t)temp2;
 8003980:	5288      	strh	r0, [r1, r2]
 8003982:	3102      	adds	r1, #2
 8003984:	e7f8      	b.n	8003978 <USB_WritePMA+0x10>
	...

08003988 <USB_EPStartXfer>:
{
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800398c:	7848      	ldrb	r0, [r1, #1]
 800398e:	698a      	ldr	r2, [r1, #24]
 8003990:	690b      	ldr	r3, [r1, #16]
 8003992:	7b0f      	ldrb	r7, [r1, #12]
 8003994:	2801      	cmp	r0, #1
{
 8003996:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8003998:	d16b      	bne.n	8003a72 <USB_EPStartXfer+0xea>
    if (ep->xfer_len > ep->maxpacket)
 800399a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800399c:	bf97      	itett	ls
 800399e:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80039a0:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 80039a2:	618b      	strls	r3, [r1, #24]
 80039a4:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 80039a6:	bf88      	it	hi
 80039a8:	618a      	strhi	r2, [r1, #24]
 80039aa:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 80039ac:	bb0f      	cbnz	r7, 80039f2 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80039ae:	88ca      	ldrh	r2, [r1, #6]
 80039b0:	6949      	ldr	r1, [r1, #20]
 80039b2:	4633      	mov	r3, r6
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7ff ffd7 	bl	8003968 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80039ba:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80039be:	782a      	ldrb	r2, [r5, #0]
 80039c0:	f204 4102 	addw	r1, r4, #1026	; 0x402
 80039c4:	fa11 f383 	uxtah	r3, r1, r3
 80039c8:	f823 6032 	strh.w	r6, [r3, r2, lsl #3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80039cc:	782a      	ldrb	r2, [r5, #0]
 80039ce:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80039d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ea:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80039ee:	2000      	movs	r0, #0
 80039f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039f2:	7809      	ldrb	r1, [r1, #0]
 80039f4:	b20a      	sxth	r2, r1
 80039f6:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 80039fa:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039fe:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003a02:	bf15      	itete	ne
 8003a04:	f204 4006 	addwne	r0, r4, #1030	; 0x406
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a08:	f204 4002 	addweq	r0, r4, #1026	; 0x402
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a0c:	fa10 f282 	uxtahne	r2, r0, r2
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a10:	fa10 f282 	uxtaheq	r2, r0, r2
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a14:	bf15      	itete	ne
 8003a16:	f822 3031 	strhne.w	r3, [r2, r1, lsl #3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a1a:	f822 3031 	strheq.w	r3, [r2, r1, lsl #3]
        pmabuffer = ep->pmaaddr1;
 8003a1e:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8003a20:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a22:	6969      	ldr	r1, [r5, #20]
 8003a24:	4633      	mov	r3, r6
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7ff ff9e 	bl	8003968 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003a2c:	786b      	ldrb	r3, [r5, #1]
 8003a2e:	782a      	ldrb	r2, [r5, #0]
 8003a30:	b97b      	cbnz	r3, 8003a52 <USB_EPStartXfer+0xca>
 8003a32:	b212      	sxth	r2, r2
 8003a34:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a4c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003a50:	e7bc      	b.n	80039cc <USB_EPStartXfer+0x44>
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d1ba      	bne.n	80039cc <USB_EPStartXfer+0x44>
 8003a56:	b212      	sxth	r2, r2
 8003a58:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a70:	e7ec      	b.n	8003a4c <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 8003a72:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003a74:	bf95      	itete	ls
 8003a76:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003a78:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len = 0U;
 8003a7a:	618b      	strls	r3, [r1, #24]
      ep->xfer_len -= len;
 8003a7c:	618a      	strhi	r2, [r1, #24]
      ep->xfer_len = 0U;
 8003a7e:	bf98      	it	ls
 8003a80:	4613      	movls	r3, r2
 8003a82:	7809      	ldrb	r1, [r1, #0]
    if (ep->doublebuffer == 0U)
 8003a84:	b98f      	cbnz	r7, 8003aaa <USB_EPStartXfer+0x122>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003a86:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003a8a:	f204 4006 	addw	r0, r4, #1030	; 0x406
 8003a8e:	fa10 f282 	uxtah	r2, r0, r2
 8003a92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003a96:	bb9b      	cbnz	r3, 8003b00 <USB_EPStartXfer+0x178>
 8003a98:	8813      	ldrh	r3, [r2, #0]
 8003a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa6:	8013      	strh	r3, [r2, #0]
 8003aa8:	e032      	b.n	8003b10 <USB_EPStartXfer+0x188>
 8003aaa:	b980      	cbnz	r0, 8003ace <USB_EPStartXfer+0x146>
 8003aac:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003ab0:	f204 4002 	addw	r0, r4, #1026	; 0x402
 8003ab4:	fa10 f282 	uxtah	r2, r0, r2
 8003ab8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003abc:	b99b      	cbnz	r3, 8003ae6 <USB_EPStartXfer+0x15e>
 8003abe:	8811      	ldrh	r1, [r2, #0]
 8003ac0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003ac4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003ac8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003acc:	8011      	strh	r1, [r2, #0]
 8003ace:	786a      	ldrb	r2, [r5, #1]
 8003ad0:	7828      	ldrb	r0, [r5, #0]
 8003ad2:	bb72      	cbnz	r2, 8003b32 <USB_EPStartXfer+0x1aa>
 8003ad4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8003ad8:	f204 4106 	addw	r1, r4, #1030	; 0x406
 8003adc:	fa11 f282 	uxtah	r2, r1, r2
 8003ae0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003ae4:	e7d7      	b.n	8003a96 <USB_EPStartXfer+0x10e>
 8003ae6:	2b3d      	cmp	r3, #61	; 0x3d
 8003ae8:	d805      	bhi.n	8003af6 <USB_EPStartXfer+0x16e>
 8003aea:	0859      	lsrs	r1, r3, #1
 8003aec:	07d8      	lsls	r0, r3, #31
 8003aee:	bf48      	it	mi
 8003af0:	3101      	addmi	r1, #1
 8003af2:	0289      	lsls	r1, r1, #10
 8003af4:	e7ea      	b.n	8003acc <USB_EPStartXfer+0x144>
 8003af6:	4814      	ldr	r0, [pc, #80]	; (8003b48 <USB_EPStartXfer+0x1c0>)
 8003af8:	0959      	lsrs	r1, r3, #5
 8003afa:	ea40 2181 	orr.w	r1, r0, r1, lsl #10
 8003afe:	e7e5      	b.n	8003acc <USB_EPStartXfer+0x144>
 8003b00:	2b3d      	cmp	r3, #61	; 0x3d
 8003b02:	d811      	bhi.n	8003b28 <USB_EPStartXfer+0x1a0>
 8003b04:	0859      	lsrs	r1, r3, #1
 8003b06:	07db      	lsls	r3, r3, #31
 8003b08:	bf48      	it	mi
 8003b0a:	3101      	addmi	r1, #1
 8003b0c:	0289      	lsls	r1, r1, #10
 8003b0e:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b10:	782a      	ldrb	r2, [r5, #0]
 8003b12:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b26:	e75c      	b.n	80039e2 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003b28:	0959      	lsrs	r1, r3, #5
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <USB_EPStartXfer+0x1c0>)
 8003b2c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003b30:	e7b9      	b.n	8003aa6 <USB_EPStartXfer+0x11e>
 8003b32:	2a01      	cmp	r2, #1
 8003b34:	bf01      	itttt	eq
 8003b36:	f8b4 1050 	ldrheq.w	r1, [r4, #80]	; 0x50
 8003b3a:	f204 4206 	addweq	r2, r4, #1030	; 0x406
 8003b3e:	fa12 f181 	uxtaheq	r1, r2, r1
 8003b42:	f821 3030 	strheq.w	r3, [r1, r0, lsl #3]
 8003b46:	e7e3      	b.n	8003b10 <USB_EPStartXfer+0x188>
 8003b48:	ffff8000 	.word	0xffff8000

08003b4c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
{
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b52:	4410      	add	r0, r2
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003b54:	085e      	lsrs	r6, r3, #1

  for (i = n; i != 0U; i--)
 8003b56:	460d      	mov	r5, r1
 8003b58:	4632      	mov	r2, r6
 8003b5a:	1a47      	subs	r7, r0, r1
 8003b5c:	197c      	adds	r4, r7, r5
 8003b5e:	3502      	adds	r5, #2
 8003b60:	b932      	cbnz	r2, 8003b70 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003b62:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003b64:	bf44      	itt	mi
 8003b66:	f830 3016 	ldrhmi.w	r3, [r0, r6, lsl #1]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b6a:	f801 3016 	strbmi.w	r3, [r1, r6, lsl #1]
 8003b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003b70:	8824      	ldrh	r4, [r4, #0]
 8003b72:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b74:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003b78:	0a24      	lsrs	r4, r4, #8
 8003b7a:	f805 4c01 	strb.w	r4, [r5, #-1]
  for (i = n; i != 0U; i--)
 8003b7e:	3a01      	subs	r2, #1
 8003b80:	e7ec      	b.n	8003b5c <USB_ReadPMA+0x10>

08003b82 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003b82:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003b86:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b88:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003b8c:	b15b      	cbz	r3, 8003ba6 <USBD_CDC_EP0_RxReady+0x24>
 8003b8e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003b92:	28ff      	cmp	r0, #255	; 0xff
 8003b94:	d007      	beq.n	8003ba6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003ba0:	23ff      	movs	r3, #255	; 0xff
 8003ba2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	bd10      	pop	{r4, pc}
	...

08003bac <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003bac:	2343      	movs	r3, #67	; 0x43
 8003bae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003bb0:	4800      	ldr	r0, [pc, #0]	; (8003bb4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003bb2:	4770      	bx	lr
 8003bb4:	20000044 	.word	0x20000044

08003bb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003bb8:	2343      	movs	r3, #67	; 0x43
 8003bba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003bbc:	4800      	ldr	r0, [pc, #0]	; (8003bc0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003bbe:	4770      	bx	lr
 8003bc0:	20000088 	.word	0x20000088

08003bc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003bc4:	2343      	movs	r3, #67	; 0x43
 8003bc6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003bc8:	4800      	ldr	r0, [pc, #0]	; (8003bcc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003bca:	4770      	bx	lr
 8003bcc:	200000d8 	.word	0x200000d8

08003bd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003bd0:	230a      	movs	r3, #10
 8003bd2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003bd4:	4800      	ldr	r0, [pc, #0]	; (8003bd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003bd6:	4770      	bx	lr
 8003bd8:	200000cc 	.word	0x200000cc

08003bdc <USBD_CDC_DataOut>:
{
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003be0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003be4:	f001 f9f4 	bl	8004fd0 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003be8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003bec:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003bf0:	b14b      	cbz	r3, 8003c06 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003bf2:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003bf6:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003c00:	4798      	blx	r3
    return USBD_OK;
 8003c02:	2000      	movs	r0, #0
 8003c04:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003c06:	2002      	movs	r0, #2
}
 8003c08:	bd38      	pop	{r3, r4, r5, pc}

08003c0a <USBD_CDC_DataIn>:
{
 8003c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003c0c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003c10:	b1ce      	cbz	r6, 8003c46 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003c12:	2314      	movs	r3, #20
 8003c14:	fb03 0301 	mla	r3, r3, r1, r0
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	b182      	cbz	r2, 8003c3e <USBD_CDC_DataIn+0x34>
 8003c1c:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003c20:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003c24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003c26:	fbb2 f4f5 	udiv	r4, r2, r5
 8003c2a:	fb05 2414 	mls	r4, r5, r4, r2
 8003c2e:	b934      	cbnz	r4, 8003c3e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8003c30:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003c32:	4622      	mov	r2, r4
 8003c34:	4623      	mov	r3, r4
 8003c36:	f001 f9af 	bl	8004f98 <USBD_LL_Transmit>
    return USBD_OK;
 8003c3a:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8003c46:	2002      	movs	r0, #2
}
 8003c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c4a <USBD_CDC_Setup>:
{
 8003c4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c4e:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c50:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003c54:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c58:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 8003c60:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003c64:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c68:	d028      	beq.n	8003cbc <USBD_CDC_Setup+0x72>
 8003c6a:	2c20      	cmp	r4, #32
 8003c6c:	d147      	bne.n	8003cfe <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8003c6e:	88cc      	ldrh	r4, [r1, #6]
 8003c70:	784b      	ldrb	r3, [r1, #1]
 8003c72:	b1e4      	cbz	r4, 8003cae <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003c74:	0612      	lsls	r2, r2, #24
 8003c76:	d511      	bpl.n	8003c9c <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003c78:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003c7c:	4639      	mov	r1, r7
 8003c7e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	4622      	mov	r2, r4
 8003c86:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003c88:	88f2      	ldrh	r2, [r6, #6]
 8003c8a:	4639      	mov	r1, r7
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 fc37 	bl	8004500 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003c92:	4644      	mov	r4, r8
}
 8003c94:	4620      	mov	r0, r4
 8003c96:	b003      	add	sp, #12
 8003c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003c9c:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003ca0:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4639      	mov	r1, r7
 8003ca8:	f000 fc3f 	bl	800452a <USBD_CtlPrepareRx>
 8003cac:	e7f1      	b.n	8003c92 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003cae:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	6895      	ldr	r5, [r2, #8]
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	47a8      	blx	r5
 8003cba:	e7eb      	b.n	8003c94 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003cbc:	784f      	ldrb	r7, [r1, #1]
 8003cbe:	2f0a      	cmp	r7, #10
 8003cc0:	d00d      	beq.n	8003cde <USBD_CDC_Setup+0x94>
 8003cc2:	2f0b      	cmp	r7, #11
 8003cc4:	d015      	beq.n	8003cf2 <USBD_CDC_Setup+0xa8>
 8003cc6:	b9d7      	cbnz	r7, 8003cfe <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003cc8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d114      	bne.n	8003cfa <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f10d 0106 	add.w	r1, sp, #6
 8003cd6:	f000 fc13 	bl	8004500 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003cda:	463c      	mov	r4, r7
 8003cdc:	e7da      	b.n	8003c94 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003cde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d109      	bne.n	8003cfa <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f10d 0105 	add.w	r1, sp, #5
 8003cec:	f000 fc08 	bl	8004500 <USBD_CtlSendData>
 8003cf0:	e7d0      	b.n	8003c94 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003cf2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d0cc      	beq.n	8003c94 <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 8003cfe:	f000 fbd8 	bl	80044b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8003d02:	2402      	movs	r4, #2
      break;
 8003d04:	e7c6      	b.n	8003c94 <USBD_CDC_Setup+0x4a>

08003d06 <USBD_CDC_DeInit>:
{
 8003d06:	b538      	push	{r3, r4, r5, lr}
 8003d08:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d0a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d0c:	2181      	movs	r1, #129	; 0x81
 8003d0e:	f001 f8fb 	bl	8004f08 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d12:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d14:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d16:	4620      	mov	r0, r4
 8003d18:	f001 f8f6 	bl	8004f08 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d1c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d20:	2182      	movs	r1, #130	; 0x82
 8003d22:	4620      	mov	r0, r4
 8003d24:	f001 f8f0 	bl	8004f08 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003d28:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003d2c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003d2e:	b14b      	cbz	r3, 8003d44 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d30:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003d38:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003d3c:	f001 f974 	bl	8005028 <USBD_static_free>
    pdev->pClassData = NULL;
 8003d40:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003d44:	2000      	movs	r0, #0
 8003d46:	bd38      	pop	{r3, r4, r5, pc}

08003d48 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d48:	7c03      	ldrb	r3, [r0, #16]
{
 8003d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d50:	bbcb      	cbnz	r3, 8003dc6 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d56:	2202      	movs	r2, #2
 8003d58:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d5a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d5c:	f001 f8c4 	bl	8004ee8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d60:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d62:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d66:	4629      	mov	r1, r5
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f001 f8bc 	bl	8004ee8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003d70:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003d74:	2308      	movs	r3, #8
 8003d76:	2203      	movs	r2, #3
 8003d78:	2182      	movs	r1, #130	; 0x82
 8003d7a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003d7c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003d7e:	f001 f8b3 	bl	8004ee8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003d82:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003d84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003d88:	f001 f94a 	bl	8005020 <USBD_static_malloc>
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003d92:	b358      	cbz	r0, 8003dec <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003d94:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d9c:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003da0:	2700      	movs	r7, #0
 8003da2:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8003da6:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003daa:	f1b8 0f00 	cmp.w	r8, #0
 8003dae:	d113      	bne.n	8003dd8 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003db8:	4629      	mov	r1, r5
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f001 f8fa 	bl	8004fb4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003dc6:	2340      	movs	r3, #64	; 0x40
 8003dc8:	2202      	movs	r2, #2
 8003dca:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003dcc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003dce:	f001 f88b 	bl	8004ee8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003dd2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003dd4:	2340      	movs	r3, #64	; 0x40
 8003dd6:	e7c6      	b.n	8003d66 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003dd8:	2340      	movs	r3, #64	; 0x40
 8003dda:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003dde:	4629      	mov	r1, r5
 8003de0:	4620      	mov	r0, r4
 8003de2:	f001 f8e7 	bl	8004fb4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003de6:	4638      	mov	r0, r7
 8003de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8003dec:	4628      	mov	r0, r5
}
 8003dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003df2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003df2:	b119      	cbz	r1, 8003dfc <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003df4:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003df8:	2000      	movs	r0, #0
 8003dfa:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003dfc:	2002      	movs	r0, #2
  }

  return ret;
}
 8003dfe:	4770      	bx	lr

08003e00 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e00:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8003e04:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003e06:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003e0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003e0e:	4770      	bx	lr

08003e10 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003e10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003e14:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003e16:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003e1a:	4770      	bx	lr

08003e1c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e1c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003e20:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003e22:	b162      	cbz	r2, 8003e3e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e24:	7c04      	ldrb	r4, [r0, #16]
 8003e26:	b944      	cbnz	r4, 8003e3a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e28:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e2c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003e30:	2101      	movs	r1, #1
 8003e32:	f001 f8bf 	bl	8004fb4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003e36:	2000      	movs	r0, #0
 8003e38:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	e7f6      	b.n	8003e2c <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003e3e:	2002      	movs	r0, #2
  }
}
 8003e40:	bd10      	pop	{r4, pc}

08003e42 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003e42:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003e44:	b180      	cbz	r0, 8003e68 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003e46:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e4a:	b113      	cbz	r3, 8003e52 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003e52:	b109      	cbz	r1, 8003e58 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003e54:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 8003e5e:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003e60:	f000 ffee 	bl	8004e40 <USBD_LL_Init>

  return USBD_OK;
 8003e64:	2000      	movs	r0, #0
 8003e66:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003e68:	2002      	movs	r0, #2
}
 8003e6a:	bd08      	pop	{r3, pc}

08003e6c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003e6c:	b119      	cbz	r1, 8003e76 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003e6e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003e72:	2000      	movs	r0, #0
 8003e74:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003e76:	2002      	movs	r0, #2
  }

  return status;
}
 8003e78:	4770      	bx	lr

08003e7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003e7a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003e7c:	f001 f826 	bl	8004ecc <USBD_LL_Start>

  return USBD_OK;
}
 8003e80:	2000      	movs	r0, #0
 8003e82:	bd08      	pop	{r3, pc}

08003e84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e84:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003e86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e8a:	b90b      	cbnz	r3, 8003e90 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4798      	blx	r3
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d1f9      	bne.n	8003e8c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003e98:	bd08      	pop	{r3, pc}

08003e9a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e9a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003e9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4798      	blx	r3

  return USBD_OK;
}
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	bd08      	pop	{r3, pc}

08003ea8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003eac:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 faea 	bl	800448a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003eb6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003eb8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003ebc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003ec0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003ec4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003ec8:	f001 031f 	and.w	r3, r1, #31
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d00e      	beq.n	8003eee <USBD_LL_SetupStage+0x46>
 8003ed0:	d307      	bcc.n	8003ee2 <USBD_LL_SetupStage+0x3a>
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d010      	beq.n	8003ef8 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003ed6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003eda:	4620      	mov	r0, r4
 8003edc:	f001 f822 	bl	8004f24 <USBD_LL_StallEP>
      break;
 8003ee0:	e003      	b.n	8003eea <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f000 f8f7 	bl	80040d8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003eea:	2000      	movs	r0, #0
 8003eec:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003eee:	4629      	mov	r1, r5
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fa1d 	bl	8004330 <USBD_StdItfReq>
      break;
 8003ef6:	e7f8      	b.n	8003eea <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003ef8:	4629      	mov	r1, r5
 8003efa:	4620      	mov	r0, r4
 8003efc:	f000 fa3d 	bl	800437a <USBD_StdEPReq>
      break;
 8003f00:	e7f3      	b.n	8003eea <USBD_LL_SetupStage+0x42>

08003f02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003f02:	b570      	push	{r4, r5, r6, lr}
 8003f04:	4605      	mov	r5, r0
 8003f06:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003f08:	bb49      	cbnz	r1, 8003f5e <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003f0a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d11e      	bne.n	8003f50 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003f12:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8003f16:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d90b      	bls.n	8003f36 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8003f1e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003f20:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003f22:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003f26:	bf8c      	ite	hi
 8003f28:	b29a      	uxthhi	r2, r3
 8003f2a:	b292      	uxthls	r2, r2
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	f000 fb0b 	bl	8004548 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003f32:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003f36:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	b123      	cbz	r3, 8003f48 <USBD_LL_DataOutStage+0x46>
 8003f3e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003f42:	2a03      	cmp	r2, #3
 8003f44:	d100      	bne.n	8003f48 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003f46:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 fb05 	bl	8004558 <USBD_CtlSendStatus>
 8003f4e:	e7f0      	b.n	8003f32 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d1ee      	bne.n	8003f32 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003f54:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003f58:	f000 ffe4 	bl	8004f24 <USBD_LL_StallEP>
 8003f5c:	e7e9      	b.n	8003f32 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003f5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	b12b      	cbz	r3, 8003f72 <USBD_LL_DataOutStage+0x70>
 8003f66:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003f6a:	2a03      	cmp	r2, #3
 8003f6c:	d101      	bne.n	8003f72 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003f6e:	4798      	blx	r3
 8003f70:	e7df      	b.n	8003f32 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003f72:	2002      	movs	r0, #2
}
 8003f74:	bd70      	pop	{r4, r5, r6, pc}

08003f76 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003f76:	b570      	push	{r4, r5, r6, lr}
 8003f78:	4613      	mov	r3, r2
 8003f7a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003f7c:	460e      	mov	r6, r1
 8003f7e:	2900      	cmp	r1, #0
 8003f80:	d148      	bne.n	8004014 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003f82:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003f86:	2a02      	cmp	r2, #2
 8003f88:	d13d      	bne.n	8004006 <USBD_LL_DataInStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003f8a:	6a05      	ldr	r5, [r0, #32]
 8003f8c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003f8e:	4295      	cmp	r5, r2
 8003f90:	d914      	bls.n	8003fbc <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8003f92:	1aaa      	subs	r2, r5, r2
 8003f94:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003f96:	4619      	mov	r1, r3
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	f000 fabe 	bl	800451a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003f9e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f001 f805 	bl	8004fb4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003faa:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	d13a      	bne.n	800402c <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003fb6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003fbc:	69c3      	ldr	r3, [r0, #28]
 8003fbe:	fbb3 f5f2 	udiv	r5, r3, r2
 8003fc2:	fb02 3515 	mls	r5, r2, r5, r3
 8003fc6:	b965      	cbnz	r5, 8003fe2 <USBD_LL_DataInStage+0x6c>
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d80a      	bhi.n	8003fe2 <USBD_LL_DataInStage+0x6c>
            (pep->total_length >= pep->maxpacket) &&
 8003fcc:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d206      	bcs.n	8003fe2 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003fd4:	462a      	mov	r2, r5
 8003fd6:	f000 faa0 	bl	800451a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003fda:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fde:	462b      	mov	r3, r5
 8003fe0:	e7de      	b.n	8003fa0 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003fe2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	b12b      	cbz	r3, 8003ff6 <USBD_LL_DataInStage+0x80>
 8003fea:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003fee:	2a03      	cmp	r2, #3
 8003ff0:	d101      	bne.n	8003ff6 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f000 ff93 	bl	8004f24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003ffe:	4620      	mov	r0, r4
 8004000:	f000 fab5 	bl	800456e <USBD_CtlReceiveStatus>
 8004004:	e7d1      	b.n	8003faa <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004006:	f032 0304 	bics.w	r3, r2, #4
 800400a:	d1ce      	bne.n	8003faa <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800400c:	2180      	movs	r1, #128	; 0x80
 800400e:	f000 ff89 	bl	8004f24 <USBD_LL_StallEP>
 8004012:	e7ca      	b.n	8003faa <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004014:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	b133      	cbz	r3, 800402a <USBD_LL_DataInStage+0xb4>
 800401c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004020:	2a03      	cmp	r2, #3
 8004022:	d102      	bne.n	800402a <USBD_LL_DataInStage+0xb4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004024:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004026:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004028:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800402a:	2002      	movs	r0, #2
}
 800402c:	bd70      	pop	{r4, r5, r6, pc}

0800402e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800402e:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004030:	2200      	movs	r2, #0
{
 8004032:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004034:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004036:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004038:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800403a:	2340      	movs	r3, #64	; 0x40
 800403c:	f000 ff54 	bl	8004ee8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004040:	4633      	mov	r3, r6
 8004042:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004044:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004048:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800404c:	2200      	movs	r2, #0
 800404e:	4620      	mov	r0, r4
 8004050:	f000 ff4a 	bl	8004ee8 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004054:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004058:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800405a:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800405c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800405e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004062:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004066:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004068:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800406c:	b123      	cbz	r3, 8004078 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800406e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004072:	4620      	mov	r0, r4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004078:	2000      	movs	r0, #0
 800407a:	bd70      	pop	{r4, r5, r6, pc}

0800407c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800407c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800407e:	2000      	movs	r0, #0
 8004080:	4770      	bx	lr

08004082 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004082:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004086:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800408a:	2304      	movs	r3, #4
 800408c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004090:	2000      	movs	r0, #0
 8004092:	4770      	bx	lr

08004094 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004094:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004098:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800409a:	bf04      	itt	eq
 800409c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80040a0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80040a4:	2000      	movs	r0, #0
 80040a6:	4770      	bx	lr

080040a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80040a8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040aa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80040ae:	2a03      	cmp	r2, #3
 80040b0:	d104      	bne.n	80040bc <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80040b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	b103      	cbz	r3, 80040bc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80040ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80040bc:	2000      	movs	r0, #0
 80040be:	bd08      	pop	{r3, pc}

080040c0 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80040c0:	b510      	push	{r4, lr}
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80040c2:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80040c4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80040c6:	f000 ff2d 	bl	8004f24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80040ca:	4620      	mov	r0, r4
 80040cc:	2100      	movs	r1, #0
}
 80040ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80040d2:	f000 bf27 	b.w	8004f24 <USBD_LL_StallEP>
	...

080040d8 <USBD_StdDevReq>:
{
 80040d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040da:	780b      	ldrb	r3, [r1, #0]
 80040dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040e0:	2b20      	cmp	r3, #32
{
 80040e2:	4604      	mov	r4, r0
 80040e4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040e6:	d011      	beq.n	800410c <USBD_StdDevReq+0x34>
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d00f      	beq.n	800410c <USBD_StdDevReq+0x34>
 80040ec:	bb73      	cbnz	r3, 800414c <USBD_StdDevReq+0x74>
      switch (req->bRequest)
 80040ee:	784b      	ldrb	r3, [r1, #1]
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	d82a      	bhi.n	800414a <USBD_StdDevReq+0x72>
 80040f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80040f8:	010e00f2 	.word	0x010e00f2
 80040fc:	01070029 	.word	0x01070029
 8004100:	008b0029 	.word	0x008b0029
 8004104:	00290013 	.word	0x00290013
 8004108:	00a700da 	.word	0x00a700da
      pdev->pClass->Setup(pdev, req);
 800410c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004110:	4629      	mov	r1, r5
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4620      	mov	r0, r4
 8004116:	4798      	blx	r3
}
 8004118:	2000      	movs	r0, #0
 800411a:	b003      	add	sp, #12
 800411c:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004124:	884b      	ldrh	r3, [r1, #2]
 8004126:	0a1a      	lsrs	r2, r3, #8
 8004128:	3a01      	subs	r2, #1
 800412a:	2a0e      	cmp	r2, #14
 800412c:	d80d      	bhi.n	800414a <USBD_StdDevReq+0x72>
 800412e:	e8df f002 	tbb	[pc, r2]
 8004132:	2c10      	.short	0x2c10
 8004134:	590c0c39 	.word	0x590c0c39
 8004138:	0c0c0c63 	.word	0x0c0c0c63
 800413c:	0c0c0c0c 	.word	0x0c0c0c0c
 8004140:	08          	.byte	0x08
 8004141:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004142:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004146:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004148:	b933      	cbnz	r3, 8004158 <USBD_StdDevReq+0x80>
          USBD_CtlError(pdev, req);
 800414a:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 800414c:	f7ff ffb8 	bl	80040c0 <USBD_CtlError.constprop.1>
  return ret;
 8004150:	e7e2      	b.n	8004118 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004152:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004156:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004158:	7c20      	ldrb	r0, [r4, #16]
 800415a:	f10d 0106 	add.w	r1, sp, #6
 800415e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004160:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004164:	b152      	cbz	r2, 800417c <USBD_StdDevReq+0xa4>
 8004166:	88eb      	ldrh	r3, [r5, #6]
 8004168:	b143      	cbz	r3, 800417c <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 800416a:	429a      	cmp	r2, r3
 800416c:	bf28      	it	cs
 800416e:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004170:	4601      	mov	r1, r0
 8004172:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8004174:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004178:	f000 f9c2 	bl	8004500 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800417c:	88eb      	ldrh	r3, [r5, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1ca      	bne.n	8004118 <USBD_StdDevReq+0x40>
        USBD_CtlSendStatus(pdev);
 8004182:	4620      	mov	r0, r4
 8004184:	f000 f9e8 	bl	8004558 <USBD_CtlSendStatus>
 8004188:	e7c6      	b.n	8004118 <USBD_StdDevReq+0x40>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800418a:	7c02      	ldrb	r2, [r0, #16]
 800418c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004190:	b932      	cbnz	r2, 80041a0 <USBD_StdDevReq+0xc8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004194:	f10d 0006 	add.w	r0, sp, #6
 8004198:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800419a:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800419c:	7043      	strb	r3, [r0, #1]
 800419e:	e7df      	b.n	8004160 <USBD_StdDevReq+0x88>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	e7f7      	b.n	8004194 <USBD_StdDevReq+0xbc>
      switch ((uint8_t)(req->wValue))
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d8cf      	bhi.n	800414a <USBD_StdDevReq+0x72>
 80041aa:	e8df f003 	tbb	[pc, r3]
 80041ae:	0703      	.short	0x0703
 80041b0:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80041b4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	e7c5      	b.n	8004148 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80041bc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	e7c1      	b.n	8004148 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80041c4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	e7bd      	b.n	8004148 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80041cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	e7b9      	b.n	8004148 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80041d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	e7b5      	b.n	8004148 <USBD_StdDevReq+0x70>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80041dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	e7b1      	b.n	8004148 <USBD_StdDevReq+0x70>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041e4:	7c03      	ldrb	r3, [r0, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1af      	bne.n	800414a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80041ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041ee:	f10d 0006 	add.w	r0, sp, #6
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	4798      	blx	r3
 80041f6:	e7b3      	b.n	8004160 <USBD_StdDevReq+0x88>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041f8:	7c03      	ldrb	r3, [r0, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1a5      	bne.n	800414a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80041fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004202:	f10d 0006 	add.w	r0, sp, #6
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800420a:	2307      	movs	r3, #7
 800420c:	e7c6      	b.n	800419c <USBD_StdDevReq+0xc4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800420e:	888b      	ldrh	r3, [r1, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d19a      	bne.n	800414a <USBD_StdDevReq+0x72>
 8004214:	88cb      	ldrh	r3, [r1, #6]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d197      	bne.n	800414a <USBD_StdDevReq+0x72>
 800421a:	884d      	ldrh	r5, [r1, #2]
 800421c:	2d7f      	cmp	r5, #127	; 0x7f
 800421e:	d894      	bhi.n	800414a <USBD_StdDevReq+0x72>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004220:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004224:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004226:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004228:	d08f      	beq.n	800414a <USBD_StdDevReq+0x72>
      pdev->dev_address = dev_addr;
 800422a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800422e:	f000 fea5 	bl	8004f7c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004232:	4620      	mov	r0, r4
 8004234:	f000 f990 	bl	8004558 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8004238:	b11d      	cbz	r5, 8004242 <USBD_StdDevReq+0x16a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800423a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800423c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004240:	e76a      	b.n	8004118 <USBD_StdDevReq+0x40>
 8004242:	2301      	movs	r3, #1
 8004244:	e7fa      	b.n	800423c <USBD_StdDevReq+0x164>
  cfgidx = (uint8_t)(req->wValue);
 8004246:	7889      	ldrb	r1, [r1, #2]
 8004248:	4d38      	ldr	r5, [pc, #224]	; (800432c <USBD_StdDevReq+0x254>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800424a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800424c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800424e:	f63f af7c 	bhi.w	800414a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 8004252:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004256:	2b02      	cmp	r3, #2
 8004258:	d008      	beq.n	800426c <USBD_StdDevReq+0x194>
 800425a:	2b03      	cmp	r3, #3
 800425c:	d014      	beq.n	8004288 <USBD_StdDevReq+0x1b0>
        USBD_CtlError(pdev, req);
 800425e:	f7ff ff2f 	bl	80040c0 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004262:	7829      	ldrb	r1, [r5, #0]
 8004264:	4620      	mov	r0, r4
 8004266:	f7ff fe18 	bl	8003e9a <USBD_ClrClassConfig>
 800426a:	e755      	b.n	8004118 <USBD_StdDevReq+0x40>
        if (cfgidx)
 800426c:	2900      	cmp	r1, #0
 800426e:	d088      	beq.n	8004182 <USBD_StdDevReq+0xaa>
          pdev->dev_config = cfgidx;
 8004270:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004272:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004274:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004276:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800427a:	4620      	mov	r0, r4
 800427c:	f7ff fe02 	bl	8003e84 <USBD_SetClassConfig>
 8004280:	2802      	cmp	r0, #2
 8004282:	f47f af7e 	bne.w	8004182 <USBD_StdDevReq+0xaa>
 8004286:	e760      	b.n	800414a <USBD_StdDevReq+0x72>
        if (cfgidx == 0U)
 8004288:	b931      	cbnz	r1, 8004298 <USBD_StdDevReq+0x1c0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800428a:	2302      	movs	r3, #2
 800428c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004290:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004292:	f7ff fe02 	bl	8003e9a <USBD_ClrClassConfig>
 8004296:	e774      	b.n	8004182 <USBD_StdDevReq+0xaa>
        else if (cfgidx != pdev->dev_config)
 8004298:	6841      	ldr	r1, [r0, #4]
 800429a:	2901      	cmp	r1, #1
 800429c:	f43f af71 	beq.w	8004182 <USBD_StdDevReq+0xaa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80042a0:	b2c9      	uxtb	r1, r1
 80042a2:	f7ff fdfa 	bl	8003e9a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80042a6:	7829      	ldrb	r1, [r5, #0]
 80042a8:	6061      	str	r1, [r4, #4]
 80042aa:	e7e6      	b.n	800427a <USBD_StdDevReq+0x1a2>
  if (req->wLength != 1U)
 80042ac:	88ca      	ldrh	r2, [r1, #6]
 80042ae:	2a01      	cmp	r2, #1
 80042b0:	f47f af4b 	bne.w	800414a <USBD_StdDevReq+0x72>
    switch (pdev->dev_state)
 80042b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f43f af46 	beq.w	800414a <USBD_StdDevReq+0x72>
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d904      	bls.n	80042cc <USBD_StdDevReq+0x1f4>
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	f47f af41 	bne.w	800414a <USBD_StdDevReq+0x72>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80042c8:	1d01      	adds	r1, r0, #4
 80042ca:	e003      	b.n	80042d4 <USBD_StdDevReq+0x1fc>
        pdev->dev_default_config = 0U;
 80042cc:	4601      	mov	r1, r0
 80042ce:	2300      	movs	r3, #0
 80042d0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 f913 	bl	8004500 <USBD_CtlSendData>
 80042da:	e71d      	b.n	8004118 <USBD_StdDevReq+0x40>
  switch (pdev->dev_state)
 80042dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042e0:	3b01      	subs	r3, #1
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	f63f af31 	bhi.w	800414a <USBD_StdDevReq+0x72>
      if (req->wLength != 0x2U)
 80042e8:	88cb      	ldrh	r3, [r1, #6]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	f47f af2d 	bne.w	800414a <USBD_StdDevReq+0x72>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80042f0:	2301      	movs	r3, #1
 80042f2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80042f4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80042f8:	b10b      	cbz	r3, 80042fe <USBD_StdDevReq+0x226>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80042fa:	2303      	movs	r3, #3
 80042fc:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80042fe:	2202      	movs	r2, #2
 8004300:	f104 010c 	add.w	r1, r4, #12
 8004304:	e7e6      	b.n	80042d4 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004306:	884b      	ldrh	r3, [r1, #2]
 8004308:	2b01      	cmp	r3, #1
 800430a:	f47f af05 	bne.w	8004118 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 800430e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8004312:	e736      	b.n	8004182 <USBD_StdDevReq+0xaa>
  switch (pdev->dev_state)
 8004314:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004318:	3b01      	subs	r3, #1
 800431a:	2b02      	cmp	r3, #2
 800431c:	f63f af15 	bhi.w	800414a <USBD_StdDevReq+0x72>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004320:	884b      	ldrh	r3, [r1, #2]
 8004322:	2b01      	cmp	r3, #1
 8004324:	f47f aef8 	bne.w	8004118 <USBD_StdDevReq+0x40>
        pdev->dev_remote_wakeup = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	e7f0      	b.n	800430e <USBD_StdDevReq+0x236>
 800432c:	20000204 	.word	0x20000204

08004330 <USBD_StdItfReq>:
{
 8004330:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004332:	780b      	ldrb	r3, [r1, #0]
 8004334:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004338:	2b20      	cmp	r3, #32
{
 800433a:	4604      	mov	r4, r0
 800433c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800433e:	d002      	beq.n	8004346 <USBD_StdItfReq+0x16>
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d000      	beq.n	8004346 <USBD_StdItfReq+0x16>
 8004344:	b9b3      	cbnz	r3, 8004374 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 8004346:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800434a:	3b01      	subs	r3, #1
 800434c:	2b02      	cmp	r3, #2
 800434e:	d810      	bhi.n	8004372 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004350:	792b      	ldrb	r3, [r5, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d80d      	bhi.n	8004372 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004356:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800435a:	4629      	mov	r1, r5
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	4620      	mov	r0, r4
 8004360:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004362:	88eb      	ldrh	r3, [r5, #6]
 8004364:	b91b      	cbnz	r3, 800436e <USBD_StdItfReq+0x3e>
 8004366:	b910      	cbnz	r0, 800436e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8004368:	4620      	mov	r0, r4
 800436a:	f000 f8f5 	bl	8004558 <USBD_CtlSendStatus>
}
 800436e:	2000      	movs	r0, #0
 8004370:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004372:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8004374:	f7ff fea4 	bl	80040c0 <USBD_CtlError.constprop.1>
      break;
 8004378:	e7f9      	b.n	800436e <USBD_StdItfReq+0x3e>

0800437a <USBD_StdEPReq>:
{
 800437a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800437c:	780a      	ldrb	r2, [r1, #0]
 800437e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004382:	2a20      	cmp	r2, #32
{
 8004384:	4604      	mov	r4, r0
 8004386:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004388:	d013      	beq.n	80043b2 <USBD_StdEPReq+0x38>
 800438a:	2a40      	cmp	r2, #64	; 0x40
 800438c:	d011      	beq.n	80043b2 <USBD_StdEPReq+0x38>
 800438e:	b96a      	cbnz	r2, 80043ac <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8004390:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004392:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8004394:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004396:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8004398:	d01f      	beq.n	80043da <USBD_StdEPReq+0x60>
 800439a:	d335      	bcc.n	8004408 <USBD_StdEPReq+0x8e>
 800439c:	2d03      	cmp	r5, #3
 800439e:	d105      	bne.n	80043ac <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80043a0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80043a4:	2a02      	cmp	r2, #2
 80043a6:	d026      	beq.n	80043f6 <USBD_StdEPReq+0x7c>
 80043a8:	2a03      	cmp	r2, #3
 80043aa:	d00a      	beq.n	80043c2 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 80043ac:	f7ff fe88 	bl	80040c0 <USBD_CtlError.constprop.1>
      break;
 80043b0:	e005      	b.n	80043be <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 80043b2:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80043b6:	4619      	mov	r1, r3
 80043b8:	6892      	ldr	r2, [r2, #8]
 80043ba:	4620      	mov	r0, r4
 80043bc:	4790      	blx	r2
}
 80043be:	2000      	movs	r0, #0
 80043c0:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043c2:	885a      	ldrh	r2, [r3, #2]
 80043c4:	b92a      	cbnz	r2, 80043d2 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 80043c6:	064a      	lsls	r2, r1, #25
 80043c8:	d003      	beq.n	80043d2 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80043ca:	88db      	ldrh	r3, [r3, #6]
 80043cc:	b90b      	cbnz	r3, 80043d2 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 80043ce:	f000 fda9 	bl	8004f24 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 f8c0 	bl	8004558 <USBD_CtlSendStatus>
              break;
 80043d8:	e7f1      	b.n	80043be <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 80043da:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80043de:	2a02      	cmp	r2, #2
 80043e0:	d009      	beq.n	80043f6 <USBD_StdEPReq+0x7c>
 80043e2:	2a03      	cmp	r2, #3
 80043e4:	d1e2      	bne.n	80043ac <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043e6:	885b      	ldrh	r3, [r3, #2]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e8      	bne.n	80043be <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 80043ec:	064d      	lsls	r5, r1, #25
 80043ee:	d0f0      	beq.n	80043d2 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80043f0:	f000 fda6 	bl	8004f40 <USBD_LL_ClearStallEP>
 80043f4:	e7ed      	b.n	80043d2 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80043f6:	064b      	lsls	r3, r1, #25
 80043f8:	d017      	beq.n	800442a <USBD_StdEPReq+0xb0>
                USBD_LL_StallEP(pdev, ep_addr);
 80043fa:	f000 fd93 	bl	8004f24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	4620      	mov	r0, r4
 8004402:	f000 fd8f 	bl	8004f24 <USBD_LL_StallEP>
 8004406:	e7da      	b.n	80043be <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8004408:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800440c:	2b02      	cmp	r3, #2
 800440e:	d00e      	beq.n	800442e <USBD_StdEPReq+0xb4>
 8004410:	2b03      	cmp	r3, #3
 8004412:	d1cb      	bne.n	80043ac <USBD_StdEPReq+0x32>
              if ((ep_addr & 0x80U) == 0x80U)
 8004414:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004418:	f04f 0314 	mov.w	r3, #20
 800441c:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004420:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8004424:	d012      	beq.n	800444c <USBD_StdEPReq+0xd2>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004426:	6992      	ldr	r2, [r2, #24]
 8004428:	b9da      	cbnz	r2, 8004462 <USBD_StdEPReq+0xe8>
                USBD_CtlError(pdev, req);
 800442a:	4620      	mov	r0, r4
 800442c:	e7be      	b.n	80043ac <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800442e:	0649      	lsls	r1, r1, #25
 8004430:	d1fb      	bne.n	800442a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004432:	0613      	lsls	r3, r2, #24
 8004434:	bf4c      	ite	mi
 8004436:	f100 0114 	addmi.w	r1, r0, #20
 800443a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800443e:	2300      	movs	r3, #0
 8004440:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004442:	2202      	movs	r2, #2
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004444:	4620      	mov	r0, r4
 8004446:	f000 f85b 	bl	8004500 <USBD_CtlSendData>
              break;
 800444a:	e7b8      	b.n	80043be <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800444c:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004450:	2a00      	cmp	r2, #0
 8004452:	d0ea      	beq.n	800442a <USBD_StdEPReq+0xb0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004454:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004458:	fb03 0505 	mla	r5, r3, r5, r0
 800445c:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004460:	e004      	b.n	800446c <USBD_StdEPReq+0xf2>
 8004462:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004466:	fb05 3503 	mla	r5, r5, r3, r3
 800446a:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800446c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004470:	d103      	bne.n	800447a <USBD_StdEPReq+0x100>
                pep->status = 0x0001U;
 8004472:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004474:	2202      	movs	r2, #2
 8004476:	4629      	mov	r1, r5
 8004478:	e7e4      	b.n	8004444 <USBD_StdEPReq+0xca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800447a:	4620      	mov	r0, r4
 800447c:	f000 fd6e 	bl	8004f5c <USBD_LL_IsStallEP>
 8004480:	b108      	cbz	r0, 8004486 <USBD_StdEPReq+0x10c>
                pep->status = 0x0001U;
 8004482:	2301      	movs	r3, #1
 8004484:	e7f5      	b.n	8004472 <USBD_StdEPReq+0xf8>
                pep->status = 0x0000U;
 8004486:	6028      	str	r0, [r5, #0]
 8004488:	e7f4      	b.n	8004474 <USBD_StdEPReq+0xfa>

0800448a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800448a:	780b      	ldrb	r3, [r1, #0]
 800448c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800448e:	784b      	ldrb	r3, [r1, #1]
 8004490:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004492:	78ca      	ldrb	r2, [r1, #3]
 8004494:	788b      	ldrb	r3, [r1, #2]
 8004496:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800449a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800449c:	794a      	ldrb	r2, [r1, #5]
 800449e:	790b      	ldrb	r3, [r1, #4]
 80044a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044a4:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80044a6:	79ca      	ldrb	r2, [r1, #7]
 80044a8:	798b      	ldrb	r3, [r1, #6]
 80044aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044ae:	80c3      	strh	r3, [r0, #6]
 80044b0:	4770      	bx	lr

080044b2 <USBD_CtlError>:
{
 80044b2:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev, 0x80U);
 80044b4:	2180      	movs	r1, #128	; 0x80
{
 80044b6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80044b8:	f000 fd34 	bl	8004f24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80044bc:	4620      	mov	r0, r4
 80044be:	2100      	movs	r1, #0
}
 80044c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80044c4:	f000 bd2e 	b.w	8004f24 <USBD_LL_StallEP>

080044c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80044c8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80044ca:	b188      	cbz	r0, 80044f0 <USBD_GetString+0x28>
 80044cc:	4605      	mov	r5, r0
 80044ce:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80044d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2c00      	cmp	r4, #0
 80044d8:	d1f9      	bne.n	80044ce <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80044da:	3301      	adds	r3, #1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80044e0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80044e2:	2303      	movs	r3, #3
 80044e4:	704b      	strb	r3, [r1, #1]
 80044e6:	3801      	subs	r0, #1
 80044e8:	2302      	movs	r3, #2
    while (*desc != '\0')
 80044ea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80044ee:	b905      	cbnz	r5, 80044f2 <USBD_GetString+0x2a>
 80044f0:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80044f8:	3302      	adds	r3, #2
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	548c      	strb	r4, [r1, r2]
 80044fe:	e7f4      	b.n	80044ea <USBD_GetString+0x22>

08004500 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004500:	b510      	push	{r4, lr}
 8004502:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004504:	2202      	movs	r2, #2
 8004506:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800450a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800450c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800450e:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004510:	2100      	movs	r1, #0
 8004512:	f000 fd41 	bl	8004f98 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004516:	2000      	movs	r0, #0
 8004518:	bd10      	pop	{r4, pc}

0800451a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800451a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800451c:	4613      	mov	r3, r2
 800451e:	460a      	mov	r2, r1
 8004520:	2100      	movs	r1, #0
 8004522:	f000 fd39 	bl	8004f98 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004526:	2000      	movs	r0, #0
 8004528:	bd08      	pop	{r3, pc}

0800452a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800452a:	b510      	push	{r4, lr}
 800452c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800452e:	2203      	movs	r2, #3
 8004530:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004534:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004538:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800453a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800453e:	2100      	movs	r1, #0
 8004540:	f000 fd38 	bl	8004fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004544:	2000      	movs	r0, #0
 8004546:	bd10      	pop	{r4, pc}

08004548 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004548:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800454a:	4613      	mov	r3, r2
 800454c:	460a      	mov	r2, r1
 800454e:	2100      	movs	r1, #0
 8004550:	f000 fd30 	bl	8004fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004554:	2000      	movs	r0, #0
 8004556:	bd08      	pop	{r3, pc}

08004558 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004558:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800455a:	2304      	movs	r3, #4
 800455c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004560:	2300      	movs	r3, #0
 8004562:	461a      	mov	r2, r3
 8004564:	4619      	mov	r1, r3
 8004566:	f000 fd17 	bl	8004f98 <USBD_LL_Transmit>

  return USBD_OK;
}
 800456a:	2000      	movs	r0, #0
 800456c:	bd08      	pop	{r3, pc}

0800456e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800456e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004570:	2305      	movs	r3, #5
 8004572:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004576:	2300      	movs	r3, #0
 8004578:	461a      	mov	r2, r3
 800457a:	4619      	mov	r1, r3
 800457c:	f000 fd1a 	bl	8004fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004580:	2000      	movs	r0, #0
 8004582:	bd08      	pop	{r3, pc}

08004584 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8004588:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800458a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800458c:	4302      	orrs	r2, r0
 800458e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	4018      	ands	r0, r3
 8004594:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004596:	9b01      	ldr	r3, [sp, #4]
}
 8004598:	b002      	add	sp, #8
 800459a:	4770      	bx	lr

0800459c <print_PMS7003>:
static void MX_LPUART1_UART_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */

void print_PMS7003(void)
{
 800459c:	b570      	push	{r4, r5, r6, lr}
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;

	check_byte_receive=pms7003_Buffer[30]<<8|pms7003_Buffer[31];
 800459e:	4c34      	ldr	r4, [pc, #208]	; (8004670 <print_PMS7003+0xd4>)
 80045a0:	7fa3      	ldrb	r3, [r4, #30]
 80045a2:	7fe6      	ldrb	r6, [r4, #31]
 80045a4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 80045a8:	2300      	movs	r3, #0
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 80045aa:	461d      	mov	r5, r3

	for(uint8_t i=0;i<30;i++)
	{
		check_byte_calculate+=pms7003_Buffer[i];
 80045ac:	5ce2      	ldrb	r2, [r4, r3]
 80045ae:	3301      	adds	r3, #1
 80045b0:	4415      	add	r5, r2
	for(uint8_t i=0;i<30;i++)
 80045b2:	2b1e      	cmp	r3, #30
		check_byte_calculate+=pms7003_Buffer[i];
 80045b4:	b2ad      	uxth	r5, r5
	for(uint8_t i=0;i<30;i++)
 80045b6:	d1f9      	bne.n	80045ac <print_PMS7003+0x10>
	}

	printf("pms : 0x%X	crc_cal : 0x%X\r\n",check_byte_receive,check_byte_calculate);
 80045b8:	462a      	mov	r2, r5
 80045ba:	4631      	mov	r1, r6
 80045bc:	482d      	ldr	r0, [pc, #180]	; (8004674 <print_PMS7003+0xd8>)
 80045be:	f000 fe17 	bl	80051f0 <iprintf>

	if(check_byte_receive==check_byte_calculate)
 80045c2:	42ae      	cmp	r6, r5
 80045c4:	d150      	bne.n	8004668 <print_PMS7003+0xcc>
	{
		printf("PM1.0 : %d	",(combine_value=(pms7003_Buffer[10]<<8)|pms7003_Buffer[11]));
 80045c6:	7ae3      	ldrb	r3, [r4, #11]
 80045c8:	7aa1      	ldrb	r1, [r4, #10]
 80045ca:	482b      	ldr	r0, [pc, #172]	; (8004678 <print_PMS7003+0xdc>)
 80045cc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80045d0:	f000 fe0e 	bl	80051f0 <iprintf>
		printf("PM2.5 : %d	",(combine_value=(pms7003_Buffer[12]<<8)|pms7003_Buffer[13]));
 80045d4:	7b63      	ldrb	r3, [r4, #13]
 80045d6:	7b21      	ldrb	r1, [r4, #12]
 80045d8:	4828      	ldr	r0, [pc, #160]	; (800467c <print_PMS7003+0xe0>)
 80045da:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80045de:	f000 fe07 	bl	80051f0 <iprintf>
		printf("PM10 : %d	",(combine_value=(pms7003_Buffer[14]<<8)|pms7003_Buffer[15]));
 80045e2:	7be3      	ldrb	r3, [r4, #15]
 80045e4:	7ba1      	ldrb	r1, [r4, #14]
 80045e6:	4826      	ldr	r0, [pc, #152]	; (8004680 <print_PMS7003+0xe4>)
 80045e8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80045ec:	f000 fe00 	bl	80051f0 <iprintf>
		printf("0.3um : %d	",(combine_value=(pms7003_Buffer[16]<<8)|pms7003_Buffer[17]));
 80045f0:	7c63      	ldrb	r3, [r4, #17]
 80045f2:	7c21      	ldrb	r1, [r4, #16]
 80045f4:	4823      	ldr	r0, [pc, #140]	; (8004684 <print_PMS7003+0xe8>)
 80045f6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80045fa:	f000 fdf9 	bl	80051f0 <iprintf>
		printf("0.5um : %d	",(combine_value=(pms7003_Buffer[18]<<8)|pms7003_Buffer[19]));
 80045fe:	7ce3      	ldrb	r3, [r4, #19]
 8004600:	7ca1      	ldrb	r1, [r4, #18]
 8004602:	4821      	ldr	r0, [pc, #132]	; (8004688 <print_PMS7003+0xec>)
 8004604:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004608:	f000 fdf2 	bl	80051f0 <iprintf>
		printf("1.0um : %d	",(combine_value=(pms7003_Buffer[20]<<8)|pms7003_Buffer[21]));
 800460c:	7d63      	ldrb	r3, [r4, #21]
 800460e:	7d21      	ldrb	r1, [r4, #20]
 8004610:	481e      	ldr	r0, [pc, #120]	; (800468c <print_PMS7003+0xf0>)
 8004612:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004616:	f000 fdeb 	bl	80051f0 <iprintf>
		printf("2.5um : %d	",(combine_value=(pms7003_Buffer[22]<<8)|pms7003_Buffer[23]));
 800461a:	7de3      	ldrb	r3, [r4, #23]
 800461c:	7da1      	ldrb	r1, [r4, #22]
 800461e:	481c      	ldr	r0, [pc, #112]	; (8004690 <print_PMS7003+0xf4>)
 8004620:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004624:	f000 fde4 	bl	80051f0 <iprintf>
		printf("5.0um : %d	",(combine_value=(pms7003_Buffer[24]<<8)|pms7003_Buffer[25]));
 8004628:	7e63      	ldrb	r3, [r4, #25]
 800462a:	7e21      	ldrb	r1, [r4, #24]
 800462c:	4819      	ldr	r0, [pc, #100]	; (8004694 <print_PMS7003+0xf8>)
 800462e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004632:	f000 fddd 	bl	80051f0 <iprintf>
		printf("10.0um : %d\n",(combine_value=(pms7003_Buffer[26]<<8)|pms7003_Buffer[27]));
 8004636:	7ea1      	ldrb	r1, [r4, #26]
 8004638:	7ee3      	ldrb	r3, [r4, #27]
 800463a:	4817      	ldr	r0, [pc, #92]	; (8004698 <print_PMS7003+0xfc>)
 800463c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004640:	f000 fdd6 	bl	80051f0 <iprintf>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004644:	2101      	movs	r1, #1
 8004646:	4815      	ldr	r0, [pc, #84]	; (800469c <print_PMS7003+0x100>)
 8004648:	f7fc fa65 	bl	8000b16 <HAL_GPIO_TogglePin>
		printf("Check bytes not matched\r\n");
	}

	for(int i=0;i<32;i++)
	{
		printf("%X ",pms7003_Buffer[i]);
 800464c:	4e14      	ldr	r6, [pc, #80]	; (80046a0 <print_PMS7003+0x104>)
	uint16_t combine_value, check_byte_receive, check_byte_calculate=0;
 800464e:	2500      	movs	r5, #0
		printf("%X ",pms7003_Buffer[i]);
 8004650:	5d61      	ldrb	r1, [r4, r5]
 8004652:	4630      	mov	r0, r6
	for(int i=0;i<32;i++)
 8004654:	3501      	adds	r5, #1
		printf("%X ",pms7003_Buffer[i]);
 8004656:	f000 fdcb 	bl	80051f0 <iprintf>
	for(int i=0;i<32;i++)
 800465a:	2d20      	cmp	r5, #32
 800465c:	d1f8      	bne.n	8004650 <print_PMS7003+0xb4>
	}
	printf("\r\n");
 800465e:	4811      	ldr	r0, [pc, #68]	; (80046a4 <print_PMS7003+0x108>)
}
 8004660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("\r\n");
 8004664:	f000 be38 	b.w	80052d8 <puts>
		printf("Check bytes not matched\r\n");
 8004668:	480f      	ldr	r0, [pc, #60]	; (80046a8 <print_PMS7003+0x10c>)
 800466a:	f000 fe35 	bl	80052d8 <puts>
 800466e:	e7ed      	b.n	800464c <print_PMS7003+0xb0>
 8004670:	20000438 	.word	0x20000438
 8004674:	080060f0 	.word	0x080060f0
 8004678:	0800610c 	.word	0x0800610c
 800467c:	08006118 	.word	0x08006118
 8004680:	08006124 	.word	0x08006124
 8004684:	0800612f 	.word	0x0800612f
 8004688:	0800613b 	.word	0x0800613b
 800468c:	08006147 	.word	0x08006147
 8004690:	08006153 	.word	0x08006153
 8004694:	0800615f 	.word	0x0800615f
 8004698:	0800616b 	.word	0x0800616b
 800469c:	48000400 	.word	0x48000400
 80046a0:	08006191 	.word	0x08006191
 80046a4:	0800618f 	.word	0x0800618f
 80046a8:	08006178 	.word	0x08006178

080046ac <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 80046ac:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 80046ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80046b2:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1,ptr,len,1000);
 80046b4:	4802      	ldr	r0, [pc, #8]	; (80046c0 <_write+0x14>)
 80046b6:	b292      	uxth	r2, r2
 80046b8:	f7fe fcde 	bl	8003078 <HAL_UART_Transmit>
  return len;
}
 80046bc:	4620      	mov	r0, r4
 80046be:	bd10      	pop	{r4, pc}
 80046c0:	200004e4 	.word	0x200004e4

080046c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046c4:	b530      	push	{r4, r5, lr}
 80046c6:	b0af      	sub	sp, #188	; 0xbc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046c8:	2248      	movs	r2, #72	; 0x48
 80046ca:	2100      	movs	r1, #0
 80046cc:	a808      	add	r0, sp, #32
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80046ce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046d2:	f000 fd85 	bl	80051e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046d6:	221c      	movs	r2, #28
 80046d8:	2100      	movs	r1, #0
 80046da:	a801      	add	r0, sp, #4
 80046dc:	f000 fd80 	bl	80051e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046e0:	2100      	movs	r1, #0
 80046e2:	2250      	movs	r2, #80	; 0x50
 80046e4:	a81a      	add	r0, sp, #104	; 0x68
 80046e6:	f000 fd7b 	bl	80051e0 <memset>
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f0:	60e3      	str	r3, [r4, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	f023 0303 	bic.w	r3, r3, #3
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	60e3      	str	r3, [r4, #12]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80046fe:	f7fc fe1f 	bl	8001340 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004702:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004706:	4a29      	ldr	r2, [pc, #164]	; (80047ac <SystemClock_Config+0xe8>)
 8004708:	f023 0318 	bic.w	r3, r3, #24
 800470c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004710:	6813      	ldr	r3, [r2, #0]
 8004712:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	9b00      	ldr	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004726:	2327      	movs	r3, #39	; 0x27
 8004728:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800472a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800472e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004734:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004736:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004738:	2400      	movs	r4, #0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800473a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800473c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800473e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004740:	2360      	movs	r3, #96	; 0x60
 8004742:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004744:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004746:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004748:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800474a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800474c:	f7fc feb4 	bl	80014b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004750:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004752:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004754:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004756:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004758:	2302      	movs	r3, #2
 800475a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800475c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800475e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004760:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004762:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004764:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004766:	f7fd f987 	bl	8001a78 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800476a:	f242 1303 	movw	r3, #8451	; 0x2103
 800476e:	931a      	str	r3, [sp, #104]	; 0x68
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8004770:	2318      	movs	r3, #24
 8004772:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004778:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800477a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800477e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004780:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004784:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8004786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800478a:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800478c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004790:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004792:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004794:	2310      	movs	r3, #16
 8004796:	932d      	str	r3, [sp, #180]	; 0xb4
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004798:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800479a:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800479c:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800479e:	f7fd fb18 	bl	8001dd2 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80047a2:	f7fd fcda 	bl	800215a <HAL_RCCEx_EnableMSIPLLMode>
}
 80047a6:	b02f      	add	sp, #188	; 0xbc
 80047a8:	bd30      	pop	{r4, r5, pc}
 80047aa:	bf00      	nop
 80047ac:	58000400 	.word	0x58000400

080047b0 <main>:
{
 80047b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 80047b2:	f7fb fee3 	bl	800057c <HAL_Init>
  SystemClock_Config();
 80047b6:	f7ff ff85 	bl	80046c4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ba:	2214      	movs	r2, #20
 80047bc:	2100      	movs	r1, #0
 80047be:	a801      	add	r0, sp, #4
 80047c0:	f000 fd0e 	bl	80051e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c4:	2004      	movs	r0, #4
 80047c6:	f7ff fedd 	bl	8004584 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ca:	2002      	movs	r0, #2
 80047cc:	f7ff feda 	bl	8004584 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7ff fed7 	bl	8004584 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047d6:	2008      	movs	r0, #8
 80047d8:	f7ff fed4 	bl	8004584 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80047dc:	2200      	movs	r2, #0
 80047de:	2123      	movs	r1, #35	; 0x23
 80047e0:	484c      	ldr	r0, [pc, #304]	; (8004914 <main+0x164>)
  huart1.Instance = USART1;
 80047e2:	4d4d      	ldr	r5, [pc, #308]	; (8004918 <main+0x168>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80047e4:	f7fc f992 	bl	8000b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80047e8:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ea:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = B1_Pin;
 80047ec:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80047ee:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047f0:	4b4a      	ldr	r3, [pc, #296]	; (800491c <main+0x16c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80047f2:	484b      	ldr	r0, [pc, #300]	; (8004920 <main+0x170>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047f4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f6:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80047f8:	f7fc f8ce 	bl	8000998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80047fc:	2323      	movs	r3, #35	; 0x23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047fe:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004800:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004804:	4843      	ldr	r0, [pc, #268]	; (8004914 <main+0x164>)
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8004806:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004808:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480c:	f7fc f8c4 	bl	8000998 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004810:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004812:	a901      	add	r1, sp, #4
 8004814:	4843      	ldr	r0, [pc, #268]	; (8004924 <main+0x174>)
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004816:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004818:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800481c:	f7fc f8bc 	bl	8000998 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8004820:	4a41      	ldr	r2, [pc, #260]	; (8004928 <main+0x178>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004822:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 8004824:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004828:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800482a:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 800482c:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004830:	616e      	str	r6, [r5, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004832:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004834:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004836:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004838:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800483a:	622c      	str	r4, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800483c:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800483e:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004840:	f7fe fca9 	bl	8003196 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004844:	4621      	mov	r1, r4
 8004846:	4628      	mov	r0, r5
 8004848:	f7fe fd3e 	bl	80032c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800484c:	4621      	mov	r1, r4
 800484e:	4628      	mov	r0, r5
 8004850:	f7fe fd5e 	bl	8003310 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004854:	4628      	mov	r0, r5
 8004856:	f7fe fd1c 	bl	8003292 <HAL_UARTEx_DisableFifoMode>
  SET_BIT(RCC->AHB1ENR, Periphs);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 800485e:	210a      	movs	r1, #10
 8004860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  hlpuart1.Instance = LPUART1;
 8004862:	4d32      	ldr	r5, [pc, #200]	; (800492c <main+0x17c>)
 8004864:	f042 0204 	orr.w	r2, r2, #4
 8004868:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800486a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486c:	f002 0204 	and.w	r2, r2, #4
 8004870:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8004872:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 8004882:	4622      	mov	r2, r4
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	200b      	movs	r0, #11
  (void)tmpreg;
 8004888:	9b00      	ldr	r3, [sp, #0]
 800488a:	f7fb feb7 	bl	80005fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800488e:	200b      	movs	r0, #11
 8004890:	f7fb fee8 	bl	8000664 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 10, 0);
 8004894:	4622      	mov	r2, r4
 8004896:	210a      	movs	r1, #10
 8004898:	4630      	mov	r0, r6
 800489a:	f7fb feaf 	bl	80005fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800489e:	4630      	mov	r0, r6
 80048a0:	f7fb fee0 	bl	8000664 <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.BaudRate = 9600;
 80048a4:	4922      	ldr	r1, [pc, #136]	; (8004930 <main+0x180>)
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80048a6:	616e      	str	r6, [r5, #20]
  hlpuart1.Init.BaudRate = 9600;
 80048a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80048ac:	4628      	mov	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 80048ae:	e885 000a 	stmia.w	r5, {r1, r3}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048b2:	60ac      	str	r4, [r5, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80048b4:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80048b6:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048b8:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048ba:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048bc:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048be:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80048c0:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80048c2:	f7fe fc68 	bl	8003196 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f7fe fcfd 	bl	80032c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048ce:	4621      	mov	r1, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f7fe fd1d 	bl	8003310 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80048d6:	4628      	mov	r0, r5
  htim16.Instance = TIM16;
 80048d8:	4e16      	ldr	r6, [pc, #88]	; (8004934 <main+0x184>)
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80048da:	f7fe fcda 	bl	8003292 <HAL_UARTEx_DisableFifoMode>
  MX_USB_Device_Init();
 80048de:	f000 f9d9 	bl	8004c94 <MX_USB_Device_Init>
  htim16.Init.Prescaler = 32000-1;
 80048e2:	4815      	ldr	r0, [pc, #84]	; (8004938 <main+0x188>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e4:	60b4      	str	r4, [r6, #8]
  htim16.Init.Prescaler = 32000-1;
 80048e6:	f647 43ff 	movw	r3, #31999	; 0x7cff
 80048ea:	e886 0009 	stmia.w	r6, {r0, r3}
  htim16.Init.Period = 5000-1;
 80048ee:	f241 3387 	movw	r3, #4999	; 0x1387
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80048f2:	4630      	mov	r0, r6
  htim16.Init.Period = 5000-1;
 80048f4:	60f3      	str	r3, [r6, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048f6:	6134      	str	r4, [r6, #16]
  htim16.Init.RepetitionCounter = 0;
 80048f8:	6174      	str	r4, [r6, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048fa:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80048fc:	f7fd fd38 	bl	8002370 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8004900:	4630      	mov	r0, r6
 8004902:	f7fd fc31 	bl	8002168 <HAL_TIM_Base_Start_IT>
  if(HAL_UART_Receive_DMA(&hlpuart1, pms7003_Buffer, 32)!=HAL_OK)
 8004906:	2220      	movs	r2, #32
 8004908:	490c      	ldr	r1, [pc, #48]	; (800493c <main+0x18c>)
 800490a:	4628      	mov	r0, r5
 800490c:	f7fd fd5e 	bl	80023cc <HAL_UART_Receive_DMA>
 8004910:	e7fe      	b.n	8004910 <main+0x160>
 8004912:	bf00      	nop
 8004914:	48000400 	.word	0x48000400
 8004918:	200004e4 	.word	0x200004e4
 800491c:	10110000 	.word	0x10110000
 8004920:	48000800 	.word	0x48000800
 8004924:	48000c00 	.word	0x48000c00
 8004928:	40013800 	.word	0x40013800
 800492c:	20000458 	.word	0x20000458
 8004930:	40008000 	.word	0x40008000
 8004934:	20000630 	.word	0x20000630
 8004938:	40014400 	.word	0x40014400
 800493c:	20000438 	.word	0x20000438

08004940 <HAL_UART_TxCpltCallback>:
 8004940:	4770      	bx	lr
	...

08004944 <HAL_UART_RxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==LPUART1)
 8004944:	6802      	ldr	r2, [r0, #0]
 8004946:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_UART_RxCpltCallback+0x10>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d101      	bne.n	8004950 <HAL_UART_RxCpltCallback+0xc>
	{
		print_PMS7003();
 800494c:	f7ff be26 	b.w	800459c <print_PMS7003>
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40008000 	.word	0x40008000

08004958 <HAL_TIM_PeriodElapsedCallback>:
//  {
//  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004958:	4770      	bx	lr

0800495a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800495a:	4770      	bx	lr

0800495c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800495c:	4770      	bx	lr
	...

08004960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004960:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004962:	2214      	movs	r2, #20
{
 8004964:	b08b      	sub	sp, #44	; 0x2c
 8004966:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004968:	2100      	movs	r1, #0
 800496a:	eb0d 0002 	add.w	r0, sp, r2
 800496e:	f000 fc37 	bl	80051e0 <memset>
  if(huart->Instance==LPUART1)
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	4a3d      	ldr	r2, [pc, #244]	; (8004a6c <HAL_UART_MspInit+0x10c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d156      	bne.n	8004a28 <HAL_UART_MspInit+0xc8>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800497e:	483c      	ldr	r0, [pc, #240]	; (8004a70 <HAL_UART_MspInit+0x110>)
 8004980:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8004982:	4c3c      	ldr	r4, [pc, #240]	; (8004a74 <HAL_UART_MspInit+0x114>)
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800498a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800498c:	f002 0201 	and.w	r2, r2, #1
 8004990:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8004992:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004996:	f042 0204 	orr.w	r2, r2, #4
 800499a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80049a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049a6:	2303      	movs	r3, #3
 80049a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049aa:	2302      	movs	r3, #2
 80049ac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ae:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80049b0:	2308      	movs	r3, #8
 80049b2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b4:	f7fb fff0 	bl	8000998 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80049b8:	482f      	ldr	r0, [pc, #188]	; (8004a78 <HAL_UART_MspInit+0x118>)
 80049ba:	2310      	movs	r3, #16
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049bc:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80049be:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049c2:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c4:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80049c6:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80049c8:	4620      	mov	r0, r4
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ca:	60a3      	str	r3, [r4, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049cc:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049ce:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049d0:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80049d2:	61e2      	str	r2, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049d4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80049d6:	f7fb feab 	bl	8000730 <HAL_DMA_Init>
 80049da:	b108      	cbz	r0, 80049e0 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 80049dc:	f7ff ffbd 	bl	800495a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_UART_MspInit+0x11c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80049e2:	67ac      	str	r4, [r5, #120]	; 0x78
 80049e4:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80049e6:	4c26      	ldr	r4, [pc, #152]	; (8004a80 <HAL_UART_MspInit+0x120>)
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049e8:	f04f 0c11 	mov.w	ip, #17
 80049ec:	f04f 0e10 	mov.w	lr, #16
 80049f0:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049f4:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f6:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80049f8:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049fa:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049fc:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049fe:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a00:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004a02:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a04:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004a06:	f7fb fe93 	bl	8000730 <HAL_DMA_Init>
 8004a0a:	b108      	cbz	r0, 8004a10 <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 8004a0c:	f7ff ffa5 	bl	800495a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004a10:	2200      	movs	r2, #0
 8004a12:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8004a14:	676c      	str	r4, [r5, #116]	; 0x74
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004a16:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8004a18:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004a1a:	f7fb fdef 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004a1e:	2025      	movs	r0, #37	; 0x25
 8004a20:	f7fb fe20 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a24:	b00b      	add	sp, #44	; 0x2c
 8004a26:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART1)
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_UART_MspInit+0x124>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d1fa      	bne.n	8004a24 <HAL_UART_MspInit+0xc4>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a32:	a905      	add	r1, sp, #20
 8004a34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a36:	4814      	ldr	r0, [pc, #80]	; (8004a88 <HAL_UART_MspInit+0x128>)
 8004a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3c:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a40:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a44:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8004a46:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a4a:	f042 0202 	orr.w	r2, r2, #2
 8004a4e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004a58:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004a5a:	23c0      	movs	r3, #192	; 0xc0
 8004a5c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a62:	2307      	movs	r3, #7
 8004a64:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a66:	f7fb ff97 	bl	8000998 <HAL_GPIO_Init>
}
 8004a6a:	e7db      	b.n	8004a24 <HAL_UART_MspInit+0xc4>
 8004a6c:	40008000 	.word	0x40008000
 8004a70:	48000800 	.word	0x48000800
 8004a74:	200005d0 	.word	0x200005d0
 8004a78:	40020008 	.word	0x40020008
 8004a7c:	4002001c 	.word	0x4002001c
 8004a80:	20000570 	.word	0x20000570
 8004a84:	40013800 	.word	0x40013800
 8004a88:	48000400 	.word	0x48000400

08004a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a8c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM16)
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <HAL_TIM_Base_MspInit+0x38>)
 8004a90:	6802      	ldr	r2, [r0, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d112      	bne.n	8004abc <HAL_TIM_Base_MspInit+0x30>
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 6, 0);
 8004a9a:	2019      	movs	r0, #25
 8004a9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2106      	movs	r1, #6
  (void)tmpreg;
 8004ab0:	9b01      	ldr	r3, [sp, #4]
 8004ab2:	f7fb fda3 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ab6:	2019      	movs	r0, #25
 8004ab8:	f7fb fdd4 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004abc:	b003      	add	sp, #12
 8004abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ac2:	bf00      	nop
 8004ac4:	40014400 	.word	0x40014400

08004ac8 <NMI_Handler>:
 8004ac8:	4770      	bx	lr

08004aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aca:	e7fe      	b.n	8004aca <HardFault_Handler>

08004acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004acc:	e7fe      	b.n	8004acc <MemManage_Handler>

08004ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ace:	e7fe      	b.n	8004ace <BusFault_Handler>

08004ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ad0:	e7fe      	b.n	8004ad0 <UsageFault_Handler>

08004ad2 <SVC_Handler>:
 8004ad2:	4770      	bx	lr

08004ad4 <DebugMon_Handler>:
 8004ad4:	4770      	bx	lr

08004ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ad6:	4770      	bx	lr

08004ad8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ad8:	f7fb bd66 	b.w	80005a8 <HAL_IncTick>

08004adc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
//	printf("rx dma\r\n");
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <DMA1_Channel1_IRQHandler+0x8>)
 8004ade:	f7fb bf10 	b.w	8000902 <HAL_DMA_IRQHandler>
 8004ae2:	bf00      	nop
 8004ae4:	200005d0 	.word	0x200005d0

08004ae8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <DMA1_Channel2_IRQHandler+0x8>)
 8004aea:	f7fb bf0a 	b.w	8000902 <HAL_DMA_IRQHandler>
 8004aee:	bf00      	nop
 8004af0:	20000570 	.word	0x20000570

08004af4 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <USB_LP_IRQHandler+0x8>)
 8004af6:	f7fc b935 	b.w	8000d64 <HAL_PCD_IRQHandler>
 8004afa:	bf00      	nop
 8004afc:	20001934 	.word	0x20001934

08004b00 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004b00:	4801      	ldr	r0, [pc, #4]	; (8004b08 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8004b02:	f7fd bb4b 	b.w	800219c <HAL_TIM_IRQHandler>
 8004b06:	bf00      	nop
 8004b08:	20000630 	.word	0x20000630

08004b0c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <LPUART1_IRQHandler+0x8>)
 8004b0e:	f7fd bcfb 	b.w	8002508 <HAL_UART_IRQHandler>
 8004b12:	bf00      	nop
 8004b14:	20000458 	.word	0x20000458

08004b18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b1e:	460c      	mov	r4, r1
 8004b20:	1ba3      	subs	r3, r4, r6
 8004b22:	429d      	cmp	r5, r3
 8004b24:	dc01      	bgt.n	8004b2a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004b26:	4628      	mov	r0, r5
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004b2a:	f3af 8000 	nop.w
 8004b2e:	f804 0b01 	strb.w	r0, [r4], #1
 8004b32:	e7f5      	b.n	8004b20 <_read+0x8>

08004b34 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004b34:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <_sbrk+0x2c>)
 8004b38:	6819      	ldr	r1, [r3, #0]
{
 8004b3a:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004b3c:	b909      	cbnz	r1, 8004b42 <_sbrk+0xe>
		heap_end = &end;
 8004b3e:	4909      	ldr	r1, [pc, #36]	; (8004b64 <_sbrk+0x30>)
 8004b40:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004b42:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004b44:	4669      	mov	r1, sp
 8004b46:	4402      	add	r2, r0
 8004b48:	428a      	cmp	r2, r1
 8004b4a:	d906      	bls.n	8004b5a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004b4c:	f000 fb1e 	bl	800518c <__errno>
 8004b50:	230c      	movs	r3, #12
 8004b52:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004b5a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004b5c:	bd08      	pop	{r3, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000208 	.word	0x20000208
 8004b64:	20001db0 	.word	0x20001db0

08004b68 <_close>:

int _close(int file)
{
	return -1;
}
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	4770      	bx	lr

08004b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b72:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004b74:	2000      	movs	r0, #0
 8004b76:	4770      	bx	lr

08004b78 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004b78:	2001      	movs	r0, #1
 8004b7a:	4770      	bx	lr

08004b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	4770      	bx	lr

08004b80 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <SystemInit+0x60>)
 8004b82:	2100      	movs	r1, #0
 8004b84:	6099      	str	r1, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004b86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004b96:	f46f 7c82 	mvn.w	ip, #260	; 0x104
  RCC->CR |= RCC_CR_MSION;
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 8004ba2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004ba6:	609a      	str	r2, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8004bae:	4462      	add	r2, ip
 8004bb0:	4002      	ands	r2, r0
 8004bb2:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004bb4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004bb8:	f022 0205 	bic.w	r2, r2, #5
 8004bbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004bc0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004bcc:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <SystemInit+0x64>)
 8004bce:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004bd0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bd8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004bda:	6199      	str	r1, [r3, #24]
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000ed00 	.word	0xe000ed00
 8004be4:	22041000 	.word	0x22041000

08004be8 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bec:	4924      	ldr	r1, [pc, #144]	; (8004c80 <SystemCoreClockUpdate+0x98>)
 8004bee:	6813      	ldr	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf0:	6890      	ldr	r0, [r2, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004bf2:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf6:	f000 000c 	and.w	r0, r0, #12
{
 8004bfa:	b510      	push	{r4, lr}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8004bfc:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8004c00:	4611      	mov	r1, r2
 8004c02:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <SystemCoreClockUpdate+0x9c>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c04:	280c      	cmp	r0, #12
 8004c06:	d839      	bhi.n	8004c7c <SystemCoreClockUpdate+0x94>
 8004c08:	e8df f000 	tbb	[pc, r0]
 8004c0c:	38383838 	.word	0x38383838
 8004c10:	38383807 	.word	0x38383807
 8004c14:	38383816 	.word	0x38383816
 8004c18:	18          	.byte	0x18
 8004c19:	00          	.byte	0x00
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <SystemCoreClockUpdate+0xa0>)
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
      
      SystemCoreClock = pllvco/pllr;
 8004c1c:	6013      	str	r3, [r2, #0]
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8004c22:	481a      	ldr	r0, [pc, #104]	; (8004c8c <SystemCoreClockUpdate+0xa4>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c24:	6899      	ldr	r1, [r3, #8]
  SystemCoreClock = SystemCoreClock / tmp;
 8004c26:	6813      	ldr	r3, [r2, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c28:	f3c1 1103 	ubfx	r1, r1, #4, #4
  SystemCoreClock = SystemCoreClock / tmp;
 8004c2c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8004c30:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <SystemCoreClockUpdate+0xa8>)
 8004c3a:	e7ef      	b.n	8004c1c <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c3c:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004c3e:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c40:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004c44:	f3c3 1302 	ubfx	r3, r3, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004c48:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004c4a:	f103 0301 	add.w	r3, r3, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004c4e:	d10e      	bne.n	8004c6e <SystemCoreClockUpdate+0x86>
        pllvco = (HSI_VALUE / pllm);
 8004c50:	490d      	ldr	r1, [pc, #52]	; (8004c88 <SystemCoreClockUpdate+0xa0>)
        pllvco = (HSE_VALUE / pllm);
 8004c52:	fbb1 f3f3 	udiv	r3, r1, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c5a:	68c8      	ldr	r0, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8004c5c:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c5e:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8004c62:	0f49      	lsrs	r1, r1, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c64:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8004c66:	3101      	adds	r1, #1
      SystemCoreClock = pllvco/pllr;
 8004c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c6c:	e7d6      	b.n	8004c1c <SystemCoreClockUpdate+0x34>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8004c6e:	2803      	cmp	r0, #3
 8004c70:	d101      	bne.n	8004c76 <SystemCoreClockUpdate+0x8e>
        pllvco = (HSE_VALUE / pllm);
 8004c72:	4907      	ldr	r1, [pc, #28]	; (8004c90 <SystemCoreClockUpdate+0xa8>)
 8004c74:	e7ed      	b.n	8004c52 <SystemCoreClockUpdate+0x6a>
        pllvco = (msirange / pllm);
 8004c76:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c7a:	e7ec      	b.n	8004c56 <SystemCoreClockUpdate+0x6e>
      SystemCoreClock = msirange;
 8004c7c:	6014      	str	r4, [r2, #0]
      break;
 8004c7e:	e7ce      	b.n	8004c1e <SystemCoreClockUpdate+0x36>
 8004c80:	080061f8 	.word	0x080061f8
 8004c84:	2000011c 	.word	0x2000011c
 8004c88:	00f42400 	.word	0x00f42400
 8004c8c:	08006198 	.word	0x08006198
 8004c90:	01e84800 	.word	0x01e84800

08004c94 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8004c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8004c96:	2200      	movs	r2, #0
 8004c98:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <MX_USB_Device_Init+0x40>)
 8004c9a:	480f      	ldr	r0, [pc, #60]	; (8004cd8 <MX_USB_Device_Init+0x44>)
 8004c9c:	f7ff f8d1 	bl	8003e42 <USBD_Init>
 8004ca0:	b108      	cbz	r0, 8004ca6 <MX_USB_Device_Init+0x12>
    Error_Handler();
 8004ca2:	f7ff fe5a 	bl	800495a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8004ca6:	490d      	ldr	r1, [pc, #52]	; (8004cdc <MX_USB_Device_Init+0x48>)
 8004ca8:	480b      	ldr	r0, [pc, #44]	; (8004cd8 <MX_USB_Device_Init+0x44>)
 8004caa:	f7ff f8df 	bl	8003e6c <USBD_RegisterClass>
 8004cae:	b108      	cbz	r0, 8004cb4 <MX_USB_Device_Init+0x20>
    Error_Handler();
 8004cb0:	f7ff fe53 	bl	800495a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8004cb4:	490a      	ldr	r1, [pc, #40]	; (8004ce0 <MX_USB_Device_Init+0x4c>)
 8004cb6:	4808      	ldr	r0, [pc, #32]	; (8004cd8 <MX_USB_Device_Init+0x44>)
 8004cb8:	f7ff f89b 	bl	8003df2 <USBD_CDC_RegisterInterface>
 8004cbc:	b108      	cbz	r0, 8004cc2 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8004cbe:	f7ff fe4c 	bl	800495a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8004cc2:	4805      	ldr	r0, [pc, #20]	; (8004cd8 <MX_USB_Device_Init+0x44>)
 8004cc4:	f7ff f8d9 	bl	8003e7a <USBD_Start>
 8004cc8:	b118      	cbz	r0, 8004cd2 <MX_USB_Device_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8004cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004cce:	f7ff be44 	b.w	800495a <Error_Handler>
 8004cd2:	bd08      	pop	{r3, pc}
 8004cd4:	20000130 	.word	0x20000130
 8004cd8:	20000670 	.word	0x20000670
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	20000120 	.word	0x20000120

08004ce4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	4770      	bx	lr

08004ce8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004ce8:	2000      	movs	r0, #0
 8004cea:	4770      	bx	lr

08004cec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004cec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004cee:	4c05      	ldr	r4, [pc, #20]	; (8004d04 <CDC_Receive_FS+0x18>)
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7ff f88c 	bl	8003e10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7ff f88f 	bl	8003e1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004cfe:	2000      	movs	r0, #0
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	20000670 	.word	0x20000670

08004d08 <CDC_Init_FS>:
{
 8004d08:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004d0a:	4c06      	ldr	r4, [pc, #24]	; (8004d24 <CDC_Init_FS+0x1c>)
 8004d0c:	4906      	ldr	r1, [pc, #24]	; (8004d28 <CDC_Init_FS+0x20>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7ff f875 	bl	8003e00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004d16:	4905      	ldr	r1, [pc, #20]	; (8004d2c <CDC_Init_FS+0x24>)
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff f879 	bl	8003e10 <USBD_CDC_SetRxBuffer>
}
 8004d1e:	2000      	movs	r0, #0
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	bf00      	nop
 8004d24:	20000670 	.word	0x20000670
 8004d28:	20001134 	.word	0x20001134
 8004d2c:	20000934 	.word	0x20000934

08004d30 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4604      	mov	r4, r0
 8004d34:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d36:	2214      	movs	r2, #20
 8004d38:	2100      	movs	r1, #0
 8004d3a:	a803      	add	r0, sp, #12
 8004d3c:	f000 fa50 	bl	80051e0 <memset>
  if(pcdHandle->Instance==USB)
 8004d40:	6822      	ldr	r2, [r4, #0]
 8004d42:	4b16      	ldr	r3, [pc, #88]	; (8004d9c <HAL_PCD_MspInit+0x6c>)
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d127      	bne.n	8004d98 <HAL_PCD_MspInit+0x68>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d48:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4c:	a903      	add	r1, sp, #12
 8004d4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004d5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004d60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d66:	2302      	movs	r3, #2
 8004d68:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004d6e:	230a      	movs	r3, #10
 8004d70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d72:	f7fb fe11 	bl	8000998 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004d76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d7c:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8004d80:	2200      	movs	r2, #0
 8004d82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	2014      	movs	r0, #20
 8004d8a:	4611      	mov	r1, r2
  (void)tmpreg;
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	f7fb fc35 	bl	80005fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8004d92:	2014      	movs	r0, #20
 8004d94:	f7fb fc66 	bl	8000664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004d98:	b008      	add	sp, #32
 8004d9a:	bd10      	pop	{r4, pc}
 8004d9c:	40006800 	.word	0x40006800

08004da0 <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8004da0:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8004da4:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004da8:	f7ff b87e 	b.w	8003ea8 <USBD_LL_SetupStage>

08004dac <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8004dac:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004db0:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004db4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8004db8:	f7ff b8a3 	b.w	8003f02 <USBD_LL_DataOutStage>

08004dbc <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8004dbc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004dc0:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc6:	f7ff b8d6 	b.w	8003f76 <USBD_LL_DataInStage>

08004dca <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8004dca:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004dce:	f7ff b96b 	b.w	80040a8 <USBD_LL_SOF>

08004dd2 <HAL_PCD_ResetCallback>:
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004dd2:	6883      	ldr	r3, [r0, #8]
 8004dd4:	2b02      	cmp	r3, #2
{ 
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004dda:	d001      	beq.n	8004de0 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004ddc:	f7ff fdbd 	bl	800495a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004de0:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
 8004de4:	2101      	movs	r1, #1
 8004de6:	f7ff f949 	bl	800407c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004dea:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8004dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004df2:	f7ff b91c 	b.w	800402e <USBD_LL_Reset>
	...

08004df8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004dfc:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8004e00:	f7ff f93f 	bl	8004082 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004e04:	69a3      	ldr	r3, [r4, #24]
 8004e06:	b123      	cbz	r3, 8004e12 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004e08:	4a02      	ldr	r2, [pc, #8]	; (8004e14 <HAL_PCD_SuspendCallback+0x1c>)
 8004e0a:	6913      	ldr	r3, [r2, #16]
 8004e0c:	f043 0306 	orr.w	r3, r3, #6
 8004e10:	6113      	str	r3, [r2, #16]
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	e000ed00 	.word	0xe000ed00

08004e18 <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8004e18:	6983      	ldr	r3, [r0, #24]
{
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8004e1e:	b133      	cbz	r3, 8004e2e <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004e20:	4a06      	ldr	r2, [pc, #24]	; (8004e3c <HAL_PCD_ResumeCallback+0x24>)
 8004e22:	6913      	ldr	r3, [r2, #16]
 8004e24:	f023 0306 	bic.w	r3, r3, #6
 8004e28:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8004e2a:	f7ff fc4b 	bl	80046c4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004e2e:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 8004e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004e36:	f7ff b92d 	b.w	8004094 <USBD_LL_Resume>
 8004e3a:	bf00      	nop
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <USBD_LL_Init>:
{
 8004e40:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 8004e42:	4c20      	ldr	r4, [pc, #128]	; (8004ec4 <USBD_LL_Init+0x84>)
  pdev->pData = &hpcd_USB_FS;
 8004e44:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
{
 8004e48:	4605      	mov	r5, r0
  hpcd_USB_FS.pData = pdev;
 8004e4a:	f8c4 0270 	str.w	r0, [r4, #624]	; 0x270
  HAL_PWREx_EnableVddUSB();
 8004e4e:	f7fc fa87 	bl	8001360 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004e52:	481d      	ldr	r0, [pc, #116]	; (8004ec8 <USBD_LL_Init+0x88>)
 8004e54:	2308      	movs	r3, #8
 8004e56:	e884 0009 	stmia.w	r4, {r0, r3}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	60a3      	str	r3, [r4, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004e5e:	6123      	str	r3, [r4, #16]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004e60:	4620      	mov	r0, r4
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	6163      	str	r3, [r4, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004e66:	61a3      	str	r3, [r4, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004e68:	61e3      	str	r3, [r4, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004e6a:	6223      	str	r3, [r4, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004e6c:	f7fb fe59 	bl	8000b22 <HAL_PCD_Init>
 8004e70:	b108      	cbz	r0, 8004e76 <USBD_LL_Init+0x36>
    Error_Handler( );
 8004e72:	f7ff fd72 	bl	800495a <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004e76:	2200      	movs	r2, #0
 8004e78:	4611      	mov	r1, r2
 8004e7a:	2318      	movs	r3, #24
 8004e7c:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004e80:	f7fc fa2f 	bl	80012e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004e84:	2358      	movs	r3, #88	; 0x58
 8004e86:	2200      	movs	r2, #0
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004e8e:	f7fc fa28 	bl	80012e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004e92:	23c0      	movs	r3, #192	; 0xc0
 8004e94:	2200      	movs	r2, #0
 8004e96:	2181      	movs	r1, #129	; 0x81
 8004e98:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004e9c:	f7fc fa21 	bl	80012e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004ea0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004eac:	f7fc fa19 	bl	80012e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2182      	movs	r1, #130	; 0x82
 8004eb8:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
 8004ebc:	f7fc fa11 	bl	80012e2 <HAL_PCDEx_PMAConfig>
}
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	bd38      	pop	{r3, r4, r5, pc}
 8004ec4:	20001934 	.word	0x20001934
 8004ec8:	40006800 	.word	0x40006800

08004ecc <USBD_LL_Start>:
{
 8004ecc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004ece:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ed2:	f7fb fe86 	bl	8000be2 <HAL_PCD_Start>
 8004ed6:	2803      	cmp	r0, #3
 8004ed8:	bf9a      	itte	ls
 8004eda:	4b02      	ldrls	r3, [pc, #8]	; (8004ee4 <USBD_LL_Start+0x18>)
 8004edc:	5c18      	ldrbls	r0, [r3, r0]
 8004ede:	2002      	movhi	r0, #2
}
 8004ee0:	bd08      	pop	{r3, pc}
 8004ee2:	bf00      	nop
 8004ee4:	08006238 	.word	0x08006238

08004ee8 <USBD_LL_OpenEP>:
{
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004eec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	f7fb fe9e 	bl	8000c34 <HAL_PCD_EP_Open>
 8004ef8:	2803      	cmp	r0, #3
 8004efa:	bf9a      	itte	ls
 8004efc:	4b01      	ldrls	r3, [pc, #4]	; (8004f04 <USBD_LL_OpenEP+0x1c>)
 8004efe:	5c18      	ldrbls	r0, [r3, r0]
 8004f00:	2002      	movhi	r0, #2
}
 8004f02:	bd10      	pop	{r4, pc}
 8004f04:	08006238 	.word	0x08006238

08004f08 <USBD_LL_CloseEP>:
{
 8004f08:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004f0a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f0e:	f7fb fec6 	bl	8000c9e <HAL_PCD_EP_Close>
 8004f12:	2803      	cmp	r0, #3
 8004f14:	bf9a      	itte	ls
 8004f16:	4b02      	ldrls	r3, [pc, #8]	; (8004f20 <USBD_LL_CloseEP+0x18>)
 8004f18:	5c18      	ldrbls	r0, [r3, r0]
 8004f1a:	2002      	movhi	r0, #2
}
 8004f1c:	bd08      	pop	{r3, pc}
 8004f1e:	bf00      	nop
 8004f20:	08006238 	.word	0x08006238

08004f24 <USBD_LL_StallEP>:
{
 8004f24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004f26:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f2a:	f7fc f96b 	bl	8001204 <HAL_PCD_EP_SetStall>
 8004f2e:	2803      	cmp	r0, #3
 8004f30:	bf9a      	itte	ls
 8004f32:	4b02      	ldrls	r3, [pc, #8]	; (8004f3c <USBD_LL_StallEP+0x18>)
 8004f34:	5c18      	ldrbls	r0, [r3, r0]
 8004f36:	2002      	movhi	r0, #2
}
 8004f38:	bd08      	pop	{r3, pc}
 8004f3a:	bf00      	nop
 8004f3c:	08006238 	.word	0x08006238

08004f40 <USBD_LL_ClearStallEP>:
{
 8004f40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004f42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f46:	f7fc f996 	bl	8001276 <HAL_PCD_EP_ClrStall>
 8004f4a:	2803      	cmp	r0, #3
 8004f4c:	bf9a      	itte	ls
 8004f4e:	4b02      	ldrls	r3, [pc, #8]	; (8004f58 <USBD_LL_ClearStallEP+0x18>)
 8004f50:	5c18      	ldrbls	r0, [r3, r0]
 8004f52:	2002      	movhi	r0, #2
}
 8004f54:	bd08      	pop	{r3, pc}
 8004f56:	bf00      	nop
 8004f58:	08006238 	.word	0x08006238

08004f5c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8004f5c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004f5e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004f62:	bf45      	ittet	mi
 8004f64:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004f68:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004f6c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004f70:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004f74:	bf58      	it	pl
 8004f76:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
}
 8004f7a:	4770      	bx	lr

08004f7c <USBD_LL_SetUSBAddress>:
{
 8004f7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004f7e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f82:	f7fb fe43 	bl	8000c0c <HAL_PCD_SetAddress>
 8004f86:	2803      	cmp	r0, #3
 8004f88:	bf9a      	itte	ls
 8004f8a:	4b02      	ldrls	r3, [pc, #8]	; (8004f94 <USBD_LL_SetUSBAddress+0x18>)
 8004f8c:	5c18      	ldrbls	r0, [r3, r0]
 8004f8e:	2002      	movhi	r0, #2
}
 8004f90:	bd08      	pop	{r3, pc}
 8004f92:	bf00      	nop
 8004f94:	08006238 	.word	0x08006238

08004f98 <USBD_LL_Transmit>:
{
 8004f98:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004f9a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f9e:	f7fb fec9 	bl	8000d34 <HAL_PCD_EP_Transmit>
 8004fa2:	2803      	cmp	r0, #3
 8004fa4:	bf9a      	itte	ls
 8004fa6:	4b02      	ldrls	r3, [pc, #8]	; (8004fb0 <USBD_LL_Transmit+0x18>)
 8004fa8:	5c18      	ldrbls	r0, [r3, r0]
 8004faa:	2002      	movhi	r0, #2
}
 8004fac:	bd08      	pop	{r3, pc}
 8004fae:	bf00      	nop
 8004fb0:	08006238 	.word	0x08006238

08004fb4 <USBD_LL_PrepareReceive>:
{
 8004fb4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004fb6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004fba:	f7fb fe9b 	bl	8000cf4 <HAL_PCD_EP_Receive>
 8004fbe:	2803      	cmp	r0, #3
 8004fc0:	bf9a      	itte	ls
 8004fc2:	4b02      	ldrls	r3, [pc, #8]	; (8004fcc <USBD_LL_PrepareReceive+0x18>)
 8004fc4:	5c18      	ldrbls	r0, [r3, r0]
 8004fc6:	2002      	movhi	r0, #2
}
 8004fc8:	bd08      	pop	{r3, pc}
 8004fca:	bf00      	nop
 8004fcc:	08006238 	.word	0x08006238

08004fd0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004fd0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004fd4:	f7fb bea7 	b.w	8000d26 <HAL_PCD_EP_GetRxCount>

08004fd8 <HAL_PCDEx_LPM_Callback>:
{
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
  switch (msg)
 8004fdc:	b111      	cbz	r1, 8004fe4 <HAL_PCDEx_LPM_Callback+0xc>
 8004fde:	2901      	cmp	r1, #1
 8004fe0:	d00f      	beq.n	8005002 <HAL_PCDEx_LPM_Callback+0x2a>
 8004fe2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8004fe4:	6983      	ldr	r3, [r0, #24]
 8004fe6:	b133      	cbz	r3, 8004ff6 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8004fe8:	f7ff fb6c 	bl	80046c4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004fec:	4a0b      	ldr	r2, [pc, #44]	; (800501c <HAL_PCDEx_LPM_Callback+0x44>)
 8004fee:	6913      	ldr	r3, [r2, #16]
 8004ff0:	f023 0306 	bic.w	r3, r3, #6
 8004ff4:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8004ff6:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
}
 8004ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8004ffe:	f7ff b849 	b.w	8004094 <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 8005002:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
 8005006:	f7ff f83c 	bl	8004082 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800500a:	69a3      	ldr	r3, [r4, #24]
 800500c:	b123      	cbz	r3, 8005018 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800500e:	4a03      	ldr	r2, [pc, #12]	; (800501c <HAL_PCDEx_LPM_Callback+0x44>)
 8005010:	6913      	ldr	r3, [r2, #16]
 8005012:	f043 0306 	orr.w	r3, r3, #6
 8005016:	6113      	str	r3, [r2, #16]
 8005018:	bd10      	pop	{r4, pc}
 800501a:	bf00      	nop
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <USBD_static_malloc>:
}
 8005020:	4800      	ldr	r0, [pc, #0]	; (8005024 <USBD_static_malloc+0x4>)
 8005022:	4770      	bx	lr
 8005024:	2000020c 	.word	0x2000020c

08005028 <USBD_static_free>:
{
 8005028:	4770      	bx	lr
	...

0800502c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800502c:	2312      	movs	r3, #18
 800502e:	800b      	strh	r3, [r1, #0]
  return USBD_CDC_DeviceDesc;
}
 8005030:	4800      	ldr	r0, [pc, #0]	; (8005034 <USBD_CDC_DeviceDescriptor+0x8>)
 8005032:	4770      	bx	lr
 8005034:	20000150 	.word	0x20000150

08005038 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005038:	2304      	movs	r3, #4
 800503a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800503c:	4800      	ldr	r0, [pc, #0]	; (8005040 <USBD_CDC_LangIDStrDescriptor+0x8>)
 800503e:	4770      	bx	lr
 8005040:	20000164 	.word	0x20000164

08005044 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005044:	2300      	movs	r3, #0
{
 8005046:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005048:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 800504a:	b2dc      	uxtb	r4, r3
 800504c:	42a2      	cmp	r2, r4
 800504e:	d800      	bhi.n	8005052 <IntToUnicode+0xe>
  }
}
 8005050:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8005052:	0f04      	lsrs	r4, r0, #28
 8005054:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8005056:	bf94      	ite	ls
 8005058:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800505a:	3437      	addhi	r4, #55	; 0x37
 800505c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005060:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8005064:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8005066:	7065      	strb	r5, [r4, #1]
 8005068:	3301      	adds	r3, #1
 800506a:	e7ee      	b.n	800504a <IntToUnicode+0x6>

0800506c <USBD_CDC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800506c:	231a      	movs	r3, #26
{
 800506e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005070:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <USBD_CDC_SerialStrDescriptor+0x2c>)
 8005074:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005076:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8005078:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800507a:	18c0      	adds	r0, r0, r3
 800507c:	d00a      	beq.n	8005094 <USBD_CDC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <USBD_CDC_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005080:	4907      	ldr	r1, [pc, #28]	; (80050a0 <USBD_CDC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005082:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005084:	2208      	movs	r2, #8
 8005086:	f7ff ffdd 	bl	8005044 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800508a:	2204      	movs	r2, #4
 800508c:	4905      	ldr	r1, [pc, #20]	; (80050a4 <USBD_CDC_SerialStrDescriptor+0x38>)
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff ffd8 	bl	8005044 <IntToUnicode>
}
 8005094:	4804      	ldr	r0, [pc, #16]	; (80050a8 <USBD_CDC_SerialStrDescriptor+0x3c>)
 8005096:	bd10      	pop	{r4, pc}
 8005098:	1fff7590 	.word	0x1fff7590
 800509c:	1fff7594 	.word	0x1fff7594
 80050a0:	2000016a 	.word	0x2000016a
 80050a4:	2000017a 	.word	0x2000017a
 80050a8:	20000168 	.word	0x20000168

080050ac <USBD_CDC_ManufacturerStrDescriptor>:
{
 80050ac:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80050ae:	4c04      	ldr	r4, [pc, #16]	; (80050c0 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 80050b0:	4804      	ldr	r0, [pc, #16]	; (80050c4 <USBD_CDC_ManufacturerStrDescriptor+0x18>)
 80050b2:	460a      	mov	r2, r1
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7ff fa07 	bl	80044c8 <USBD_GetString>
}
 80050ba:	4620      	mov	r0, r4
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	bf00      	nop
 80050c0:	20001ba8 	.word	0x20001ba8
 80050c4:	08006255 	.word	0x08006255

080050c8 <USBD_CDC_ProductStrDescriptor>:
{
 80050c8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80050ca:	4c04      	ldr	r4, [pc, #16]	; (80050dc <USBD_CDC_ProductStrDescriptor+0x14>)
 80050cc:	4804      	ldr	r0, [pc, #16]	; (80050e0 <USBD_CDC_ProductStrDescriptor+0x18>)
 80050ce:	460a      	mov	r2, r1
 80050d0:	4621      	mov	r1, r4
 80050d2:	f7ff f9f9 	bl	80044c8 <USBD_GetString>
}
 80050d6:	4620      	mov	r0, r4
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	20001ba8 	.word	0x20001ba8
 80050e0:	08006268 	.word	0x08006268

080050e4 <USBD_CDC_ConfigStrDescriptor>:
{
 80050e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80050e6:	4c04      	ldr	r4, [pc, #16]	; (80050f8 <USBD_CDC_ConfigStrDescriptor+0x14>)
 80050e8:	4804      	ldr	r0, [pc, #16]	; (80050fc <USBD_CDC_ConfigStrDescriptor+0x18>)
 80050ea:	460a      	mov	r2, r1
 80050ec:	4621      	mov	r1, r4
 80050ee:	f7ff f9eb 	bl	80044c8 <USBD_GetString>
}
 80050f2:	4620      	mov	r0, r4
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop
 80050f8:	20001ba8 	.word	0x20001ba8
 80050fc:	0800623c 	.word	0x0800623c

08005100 <USBD_CDC_InterfaceStrDescriptor>:
{
 8005100:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005102:	4c04      	ldr	r4, [pc, #16]	; (8005114 <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8005104:	4804      	ldr	r0, [pc, #16]	; (8005118 <USBD_CDC_InterfaceStrDescriptor+0x18>)
 8005106:	460a      	mov	r2, r1
 8005108:	4621      	mov	r1, r4
 800510a:	f7ff f9dd 	bl	80044c8 <USBD_GetString>
}
 800510e:	4620      	mov	r0, r4
 8005110:	bd10      	pop	{r4, pc}
 8005112:	bf00      	nop
 8005114:	20001ba8 	.word	0x20001ba8
 8005118:	08006247 	.word	0x08006247

0800511c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800511c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800511e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005120:	3304      	adds	r3, #4

08005122 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005122:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005124:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8005126:	d3f9      	bcc.n	800511c <CopyDataInit>
  bx lr
 8005128:	4770      	bx	lr

0800512a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800512a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800512c:	3004      	adds	r0, #4

0800512e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800512e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8005130:	d3fb      	bcc.n	800512a <FillZerobss>
  bx lr
 8005132:	4770      	bx	lr

08005134 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005134:	480c      	ldr	r0, [pc, #48]	; (8005168 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8005136:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8005138:	480c      	ldr	r0, [pc, #48]	; (800516c <LoopForever+0x8>)
 800513a:	490d      	ldr	r1, [pc, #52]	; (8005170 <LoopForever+0xc>)
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <LoopForever+0x10>)
 800513e:	2300      	movs	r3, #0
 8005140:	f7ff ffef 	bl	8005122 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8005144:	480c      	ldr	r0, [pc, #48]	; (8005178 <LoopForever+0x14>)
 8005146:	490d      	ldr	r1, [pc, #52]	; (800517c <LoopForever+0x18>)
 8005148:	2300      	movs	r3, #0
 800514a:	f7ff fff0 	bl	800512e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800514e:	480c      	ldr	r0, [pc, #48]	; (8005180 <LoopForever+0x1c>)
 8005150:	490c      	ldr	r1, [pc, #48]	; (8005184 <LoopForever+0x20>)
 8005152:	2300      	movs	r3, #0
 8005154:	f7ff ffeb 	bl	800512e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005158:	f7ff fd12 	bl	8004b80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800515c:	f000 f81c 	bl	8005198 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8005160:	f7ff fb26 	bl	80047b0 <main>

08005164 <LoopForever>:

LoopForever:
  b LoopForever
 8005164:	e7fe      	b.n	8005164 <LoopForever>
 8005166:	0000      	.short	0x0000
  ldr   r0, =_estack
 8005168:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800516c:	20000004 	.word	0x20000004
 8005170:	200001e8 	.word	0x200001e8
 8005174:	08006328 	.word	0x08006328
  INIT_BSS _sbss, _ebss
 8005178:	200001e8 	.word	0x200001e8
 800517c:	20001dac 	.word	0x20001dac
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8005180:	20030000 	.word	0x20030000
 8005184:	20030000 	.word	0x20030000

08005188 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005188:	e7fe      	b.n	8005188 <ADC1_IRQHandler>
	...

0800518c <__errno>:
 800518c:	4b01      	ldr	r3, [pc, #4]	; (8005194 <__errno+0x8>)
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000184 	.word	0x20000184

08005198 <__libc_init_array>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4e0d      	ldr	r6, [pc, #52]	; (80051d0 <__libc_init_array+0x38>)
 800519c:	4c0d      	ldr	r4, [pc, #52]	; (80051d4 <__libc_init_array+0x3c>)
 800519e:	1ba4      	subs	r4, r4, r6
 80051a0:	10a4      	asrs	r4, r4, #2
 80051a2:	2500      	movs	r5, #0
 80051a4:	42a5      	cmp	r5, r4
 80051a6:	d109      	bne.n	80051bc <__libc_init_array+0x24>
 80051a8:	4e0b      	ldr	r6, [pc, #44]	; (80051d8 <__libc_init_array+0x40>)
 80051aa:	4c0c      	ldr	r4, [pc, #48]	; (80051dc <__libc_init_array+0x44>)
 80051ac:	f000 ff7c 	bl	80060a8 <_init>
 80051b0:	1ba4      	subs	r4, r4, r6
 80051b2:	10a4      	asrs	r4, r4, #2
 80051b4:	2500      	movs	r5, #0
 80051b6:	42a5      	cmp	r5, r4
 80051b8:	d105      	bne.n	80051c6 <__libc_init_array+0x2e>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051c0:	4798      	blx	r3
 80051c2:	3501      	adds	r5, #1
 80051c4:	e7ee      	b.n	80051a4 <__libc_init_array+0xc>
 80051c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051ca:	4798      	blx	r3
 80051cc:	3501      	adds	r5, #1
 80051ce:	e7f2      	b.n	80051b6 <__libc_init_array+0x1e>
 80051d0:	08006320 	.word	0x08006320
 80051d4:	08006320 	.word	0x08006320
 80051d8:	08006320 	.word	0x08006320
 80051dc:	08006324 	.word	0x08006324

080051e0 <memset>:
 80051e0:	4402      	add	r2, r0
 80051e2:	4603      	mov	r3, r0
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d100      	bne.n	80051ea <memset+0xa>
 80051e8:	4770      	bx	lr
 80051ea:	f803 1b01 	strb.w	r1, [r3], #1
 80051ee:	e7f9      	b.n	80051e4 <memset+0x4>

080051f0 <iprintf>:
 80051f0:	b40f      	push	{r0, r1, r2, r3}
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <iprintf+0x2c>)
 80051f4:	b513      	push	{r0, r1, r4, lr}
 80051f6:	681c      	ldr	r4, [r3, #0]
 80051f8:	b124      	cbz	r4, 8005204 <iprintf+0x14>
 80051fa:	69a3      	ldr	r3, [r4, #24]
 80051fc:	b913      	cbnz	r3, 8005204 <iprintf+0x14>
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 fa24 	bl	800564c <__sinit>
 8005204:	ab05      	add	r3, sp, #20
 8005206:	9a04      	ldr	r2, [sp, #16]
 8005208:	68a1      	ldr	r1, [r4, #8]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	4620      	mov	r0, r4
 800520e:	f000 fbe1 	bl	80059d4 <_vfiprintf_r>
 8005212:	b002      	add	sp, #8
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005218:	b004      	add	sp, #16
 800521a:	4770      	bx	lr
 800521c:	20000184 	.word	0x20000184

08005220 <_puts_r>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	460e      	mov	r6, r1
 8005224:	4605      	mov	r5, r0
 8005226:	b118      	cbz	r0, 8005230 <_puts_r+0x10>
 8005228:	6983      	ldr	r3, [r0, #24]
 800522a:	b90b      	cbnz	r3, 8005230 <_puts_r+0x10>
 800522c:	f000 fa0e 	bl	800564c <__sinit>
 8005230:	69ab      	ldr	r3, [r5, #24]
 8005232:	68ac      	ldr	r4, [r5, #8]
 8005234:	b913      	cbnz	r3, 800523c <_puts_r+0x1c>
 8005236:	4628      	mov	r0, r5
 8005238:	f000 fa08 	bl	800564c <__sinit>
 800523c:	4b23      	ldr	r3, [pc, #140]	; (80052cc <_puts_r+0xac>)
 800523e:	429c      	cmp	r4, r3
 8005240:	d117      	bne.n	8005272 <_puts_r+0x52>
 8005242:	686c      	ldr	r4, [r5, #4]
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	071b      	lsls	r3, r3, #28
 8005248:	d51d      	bpl.n	8005286 <_puts_r+0x66>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	b1db      	cbz	r3, 8005286 <_puts_r+0x66>
 800524e:	3e01      	subs	r6, #1
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005256:	3b01      	subs	r3, #1
 8005258:	60a3      	str	r3, [r4, #8]
 800525a:	b9e9      	cbnz	r1, 8005298 <_puts_r+0x78>
 800525c:	2b00      	cmp	r3, #0
 800525e:	da2e      	bge.n	80052be <_puts_r+0x9e>
 8005260:	4622      	mov	r2, r4
 8005262:	210a      	movs	r1, #10
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f83f 	bl	80052e8 <__swbuf_r>
 800526a:	3001      	adds	r0, #1
 800526c:	d011      	beq.n	8005292 <_puts_r+0x72>
 800526e:	200a      	movs	r0, #10
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <_puts_r+0xb0>)
 8005274:	429c      	cmp	r4, r3
 8005276:	d101      	bne.n	800527c <_puts_r+0x5c>
 8005278:	68ac      	ldr	r4, [r5, #8]
 800527a:	e7e3      	b.n	8005244 <_puts_r+0x24>
 800527c:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <_puts_r+0xb4>)
 800527e:	429c      	cmp	r4, r3
 8005280:	bf08      	it	eq
 8005282:	68ec      	ldreq	r4, [r5, #12]
 8005284:	e7de      	b.n	8005244 <_puts_r+0x24>
 8005286:	4621      	mov	r1, r4
 8005288:	4628      	mov	r0, r5
 800528a:	f000 f87f 	bl	800538c <__swsetup_r>
 800528e:	2800      	cmp	r0, #0
 8005290:	d0dd      	beq.n	800524e <_puts_r+0x2e>
 8005292:	f04f 30ff 	mov.w	r0, #4294967295
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	2b00      	cmp	r3, #0
 800529a:	da04      	bge.n	80052a6 <_puts_r+0x86>
 800529c:	69a2      	ldr	r2, [r4, #24]
 800529e:	4293      	cmp	r3, r2
 80052a0:	db06      	blt.n	80052b0 <_puts_r+0x90>
 80052a2:	290a      	cmp	r1, #10
 80052a4:	d004      	beq.n	80052b0 <_puts_r+0x90>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	6022      	str	r2, [r4, #0]
 80052ac:	7019      	strb	r1, [r3, #0]
 80052ae:	e7cf      	b.n	8005250 <_puts_r+0x30>
 80052b0:	4622      	mov	r2, r4
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f818 	bl	80052e8 <__swbuf_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d1c9      	bne.n	8005250 <_puts_r+0x30>
 80052bc:	e7e9      	b.n	8005292 <_puts_r+0x72>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	200a      	movs	r0, #10
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	6022      	str	r2, [r4, #0]
 80052c6:	7018      	strb	r0, [r3, #0]
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
 80052ca:	bf00      	nop
 80052cc:	080062a4 	.word	0x080062a4
 80052d0:	080062c4 	.word	0x080062c4
 80052d4:	08006284 	.word	0x08006284

080052d8 <puts>:
 80052d8:	4b02      	ldr	r3, [pc, #8]	; (80052e4 <puts+0xc>)
 80052da:	4601      	mov	r1, r0
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	f7ff bf9f 	b.w	8005220 <_puts_r>
 80052e2:	bf00      	nop
 80052e4:	20000184 	.word	0x20000184

080052e8 <__swbuf_r>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	460e      	mov	r6, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	4605      	mov	r5, r0
 80052f0:	b118      	cbz	r0, 80052fa <__swbuf_r+0x12>
 80052f2:	6983      	ldr	r3, [r0, #24]
 80052f4:	b90b      	cbnz	r3, 80052fa <__swbuf_r+0x12>
 80052f6:	f000 f9a9 	bl	800564c <__sinit>
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <__swbuf_r+0x98>)
 80052fc:	429c      	cmp	r4, r3
 80052fe:	d12a      	bne.n	8005356 <__swbuf_r+0x6e>
 8005300:	686c      	ldr	r4, [r5, #4]
 8005302:	69a3      	ldr	r3, [r4, #24]
 8005304:	60a3      	str	r3, [r4, #8]
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	071a      	lsls	r2, r3, #28
 800530a:	d52e      	bpl.n	800536a <__swbuf_r+0x82>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	b363      	cbz	r3, 800536a <__swbuf_r+0x82>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	1ac0      	subs	r0, r0, r3
 8005316:	6963      	ldr	r3, [r4, #20]
 8005318:	b2f6      	uxtb	r6, r6
 800531a:	4298      	cmp	r0, r3
 800531c:	4637      	mov	r7, r6
 800531e:	db04      	blt.n	800532a <__swbuf_r+0x42>
 8005320:	4621      	mov	r1, r4
 8005322:	4628      	mov	r0, r5
 8005324:	f000 f928 	bl	8005578 <_fflush_r>
 8005328:	bb28      	cbnz	r0, 8005376 <__swbuf_r+0x8e>
 800532a:	68a3      	ldr	r3, [r4, #8]
 800532c:	3b01      	subs	r3, #1
 800532e:	60a3      	str	r3, [r4, #8]
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	701e      	strb	r6, [r3, #0]
 8005338:	6963      	ldr	r3, [r4, #20]
 800533a:	3001      	adds	r0, #1
 800533c:	4298      	cmp	r0, r3
 800533e:	d004      	beq.n	800534a <__swbuf_r+0x62>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d519      	bpl.n	800537a <__swbuf_r+0x92>
 8005346:	2e0a      	cmp	r6, #10
 8005348:	d117      	bne.n	800537a <__swbuf_r+0x92>
 800534a:	4621      	mov	r1, r4
 800534c:	4628      	mov	r0, r5
 800534e:	f000 f913 	bl	8005578 <_fflush_r>
 8005352:	b190      	cbz	r0, 800537a <__swbuf_r+0x92>
 8005354:	e00f      	b.n	8005376 <__swbuf_r+0x8e>
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <__swbuf_r+0x9c>)
 8005358:	429c      	cmp	r4, r3
 800535a:	d101      	bne.n	8005360 <__swbuf_r+0x78>
 800535c:	68ac      	ldr	r4, [r5, #8]
 800535e:	e7d0      	b.n	8005302 <__swbuf_r+0x1a>
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <__swbuf_r+0xa0>)
 8005362:	429c      	cmp	r4, r3
 8005364:	bf08      	it	eq
 8005366:	68ec      	ldreq	r4, [r5, #12]
 8005368:	e7cb      	b.n	8005302 <__swbuf_r+0x1a>
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f000 f80d 	bl	800538c <__swsetup_r>
 8005372:	2800      	cmp	r0, #0
 8005374:	d0cc      	beq.n	8005310 <__swbuf_r+0x28>
 8005376:	f04f 37ff 	mov.w	r7, #4294967295
 800537a:	4638      	mov	r0, r7
 800537c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537e:	bf00      	nop
 8005380:	080062a4 	.word	0x080062a4
 8005384:	080062c4 	.word	0x080062c4
 8005388:	08006284 	.word	0x08006284

0800538c <__swsetup_r>:
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <__swsetup_r+0xcc>)
 800538e:	b570      	push	{r4, r5, r6, lr}
 8005390:	681d      	ldr	r5, [r3, #0]
 8005392:	4606      	mov	r6, r0
 8005394:	460c      	mov	r4, r1
 8005396:	b125      	cbz	r5, 80053a2 <__swsetup_r+0x16>
 8005398:	69ab      	ldr	r3, [r5, #24]
 800539a:	b913      	cbnz	r3, 80053a2 <__swsetup_r+0x16>
 800539c:	4628      	mov	r0, r5
 800539e:	f000 f955 	bl	800564c <__sinit>
 80053a2:	4b2e      	ldr	r3, [pc, #184]	; (800545c <__swsetup_r+0xd0>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d10f      	bne.n	80053c8 <__swsetup_r+0x3c>
 80053a8:	686c      	ldr	r4, [r5, #4]
 80053aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	0715      	lsls	r5, r2, #28
 80053b2:	d42c      	bmi.n	800540e <__swsetup_r+0x82>
 80053b4:	06d0      	lsls	r0, r2, #27
 80053b6:	d411      	bmi.n	80053dc <__swsetup_r+0x50>
 80053b8:	2209      	movs	r2, #9
 80053ba:	6032      	str	r2, [r6, #0]
 80053bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <__swsetup_r+0xd4>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d101      	bne.n	80053d2 <__swsetup_r+0x46>
 80053ce:	68ac      	ldr	r4, [r5, #8]
 80053d0:	e7eb      	b.n	80053aa <__swsetup_r+0x1e>
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <__swsetup_r+0xd8>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	bf08      	it	eq
 80053d8:	68ec      	ldreq	r4, [r5, #12]
 80053da:	e7e6      	b.n	80053aa <__swsetup_r+0x1e>
 80053dc:	0751      	lsls	r1, r2, #29
 80053de:	d512      	bpl.n	8005406 <__swsetup_r+0x7a>
 80053e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053e2:	b141      	cbz	r1, 80053f6 <__swsetup_r+0x6a>
 80053e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e8:	4299      	cmp	r1, r3
 80053ea:	d002      	beq.n	80053f2 <__swsetup_r+0x66>
 80053ec:	4630      	mov	r0, r6
 80053ee:	f000 fa1b 	bl	8005828 <_free_r>
 80053f2:	2300      	movs	r3, #0
 80053f4:	6363      	str	r3, [r4, #52]	; 0x34
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	2300      	movs	r3, #0
 8005400:	6063      	str	r3, [r4, #4]
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	f043 0308 	orr.w	r3, r3, #8
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	b94b      	cbnz	r3, 8005426 <__swsetup_r+0x9a>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541c:	d003      	beq.n	8005426 <__swsetup_r+0x9a>
 800541e:	4621      	mov	r1, r4
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f9c1 	bl	80057a8 <__smakebuf_r>
 8005426:	89a2      	ldrh	r2, [r4, #12]
 8005428:	f012 0301 	ands.w	r3, r2, #1
 800542c:	d00c      	beq.n	8005448 <__swsetup_r+0xbc>
 800542e:	2300      	movs	r3, #0
 8005430:	60a3      	str	r3, [r4, #8]
 8005432:	6963      	ldr	r3, [r4, #20]
 8005434:	425b      	negs	r3, r3
 8005436:	61a3      	str	r3, [r4, #24]
 8005438:	6923      	ldr	r3, [r4, #16]
 800543a:	b953      	cbnz	r3, 8005452 <__swsetup_r+0xc6>
 800543c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005440:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005444:	d1ba      	bne.n	80053bc <__swsetup_r+0x30>
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	0792      	lsls	r2, r2, #30
 800544a:	bf58      	it	pl
 800544c:	6963      	ldrpl	r3, [r4, #20]
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	e7f2      	b.n	8005438 <__swsetup_r+0xac>
 8005452:	2000      	movs	r0, #0
 8005454:	e7f7      	b.n	8005446 <__swsetup_r+0xba>
 8005456:	bf00      	nop
 8005458:	20000184 	.word	0x20000184
 800545c:	080062a4 	.word	0x080062a4
 8005460:	080062c4 	.word	0x080062c4
 8005464:	08006284 	.word	0x08006284

08005468 <__sflush_r>:
 8005468:	898a      	ldrh	r2, [r1, #12]
 800546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546e:	4605      	mov	r5, r0
 8005470:	0710      	lsls	r0, r2, #28
 8005472:	460c      	mov	r4, r1
 8005474:	d45a      	bmi.n	800552c <__sflush_r+0xc4>
 8005476:	684b      	ldr	r3, [r1, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	dc05      	bgt.n	8005488 <__sflush_r+0x20>
 800547c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	dc02      	bgt.n	8005488 <__sflush_r+0x20>
 8005482:	2000      	movs	r0, #0
 8005484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800548a:	2e00      	cmp	r6, #0
 800548c:	d0f9      	beq.n	8005482 <__sflush_r+0x1a>
 800548e:	2300      	movs	r3, #0
 8005490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005494:	682f      	ldr	r7, [r5, #0]
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	d033      	beq.n	8005502 <__sflush_r+0x9a>
 800549a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	075a      	lsls	r2, r3, #29
 80054a0:	d505      	bpl.n	80054ae <__sflush_r+0x46>
 80054a2:	6863      	ldr	r3, [r4, #4]
 80054a4:	1ac0      	subs	r0, r0, r3
 80054a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054a8:	b10b      	cbz	r3, 80054ae <__sflush_r+0x46>
 80054aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ac:	1ac0      	subs	r0, r0, r3
 80054ae:	2300      	movs	r3, #0
 80054b0:	4602      	mov	r2, r0
 80054b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054b4:	6a21      	ldr	r1, [r4, #32]
 80054b6:	4628      	mov	r0, r5
 80054b8:	47b0      	blx	r6
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	d106      	bne.n	80054ce <__sflush_r+0x66>
 80054c0:	6829      	ldr	r1, [r5, #0]
 80054c2:	291d      	cmp	r1, #29
 80054c4:	d84b      	bhi.n	800555e <__sflush_r+0xf6>
 80054c6:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <__sflush_r+0x10c>)
 80054c8:	40ca      	lsrs	r2, r1
 80054ca:	07d6      	lsls	r6, r2, #31
 80054cc:	d547      	bpl.n	800555e <__sflush_r+0xf6>
 80054ce:	2200      	movs	r2, #0
 80054d0:	6062      	str	r2, [r4, #4]
 80054d2:	04d9      	lsls	r1, r3, #19
 80054d4:	6922      	ldr	r2, [r4, #16]
 80054d6:	6022      	str	r2, [r4, #0]
 80054d8:	d504      	bpl.n	80054e4 <__sflush_r+0x7c>
 80054da:	1c42      	adds	r2, r0, #1
 80054dc:	d101      	bne.n	80054e2 <__sflush_r+0x7a>
 80054de:	682b      	ldr	r3, [r5, #0]
 80054e0:	b903      	cbnz	r3, 80054e4 <__sflush_r+0x7c>
 80054e2:	6560      	str	r0, [r4, #84]	; 0x54
 80054e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054e6:	602f      	str	r7, [r5, #0]
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d0ca      	beq.n	8005482 <__sflush_r+0x1a>
 80054ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054f0:	4299      	cmp	r1, r3
 80054f2:	d002      	beq.n	80054fa <__sflush_r+0x92>
 80054f4:	4628      	mov	r0, r5
 80054f6:	f000 f997 	bl	8005828 <_free_r>
 80054fa:	2000      	movs	r0, #0
 80054fc:	6360      	str	r0, [r4, #52]	; 0x34
 80054fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005502:	6a21      	ldr	r1, [r4, #32]
 8005504:	2301      	movs	r3, #1
 8005506:	4628      	mov	r0, r5
 8005508:	47b0      	blx	r6
 800550a:	1c41      	adds	r1, r0, #1
 800550c:	d1c6      	bne.n	800549c <__sflush_r+0x34>
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0c3      	beq.n	800549c <__sflush_r+0x34>
 8005514:	2b1d      	cmp	r3, #29
 8005516:	d001      	beq.n	800551c <__sflush_r+0xb4>
 8005518:	2b16      	cmp	r3, #22
 800551a:	d101      	bne.n	8005520 <__sflush_r+0xb8>
 800551c:	602f      	str	r7, [r5, #0]
 800551e:	e7b0      	b.n	8005482 <__sflush_r+0x1a>
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	690f      	ldr	r7, [r1, #16]
 800552e:	2f00      	cmp	r7, #0
 8005530:	d0a7      	beq.n	8005482 <__sflush_r+0x1a>
 8005532:	0793      	lsls	r3, r2, #30
 8005534:	680e      	ldr	r6, [r1, #0]
 8005536:	bf08      	it	eq
 8005538:	694b      	ldreq	r3, [r1, #20]
 800553a:	600f      	str	r7, [r1, #0]
 800553c:	bf18      	it	ne
 800553e:	2300      	movne	r3, #0
 8005540:	eba6 0807 	sub.w	r8, r6, r7
 8005544:	608b      	str	r3, [r1, #8]
 8005546:	f1b8 0f00 	cmp.w	r8, #0
 800554a:	dd9a      	ble.n	8005482 <__sflush_r+0x1a>
 800554c:	4643      	mov	r3, r8
 800554e:	463a      	mov	r2, r7
 8005550:	6a21      	ldr	r1, [r4, #32]
 8005552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005554:	4628      	mov	r0, r5
 8005556:	47b0      	blx	r6
 8005558:	2800      	cmp	r0, #0
 800555a:	dc07      	bgt.n	800556c <__sflush_r+0x104>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800556c:	4407      	add	r7, r0
 800556e:	eba8 0800 	sub.w	r8, r8, r0
 8005572:	e7e8      	b.n	8005546 <__sflush_r+0xde>
 8005574:	20400001 	.word	0x20400001

08005578 <_fflush_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	690b      	ldr	r3, [r1, #16]
 800557c:	4605      	mov	r5, r0
 800557e:	460c      	mov	r4, r1
 8005580:	b1db      	cbz	r3, 80055ba <_fflush_r+0x42>
 8005582:	b118      	cbz	r0, 800558c <_fflush_r+0x14>
 8005584:	6983      	ldr	r3, [r0, #24]
 8005586:	b90b      	cbnz	r3, 800558c <_fflush_r+0x14>
 8005588:	f000 f860 	bl	800564c <__sinit>
 800558c:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <_fflush_r+0x48>)
 800558e:	429c      	cmp	r4, r3
 8005590:	d109      	bne.n	80055a6 <_fflush_r+0x2e>
 8005592:	686c      	ldr	r4, [r5, #4]
 8005594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005598:	b17b      	cbz	r3, 80055ba <_fflush_r+0x42>
 800559a:	4621      	mov	r1, r4
 800559c:	4628      	mov	r0, r5
 800559e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a2:	f7ff bf61 	b.w	8005468 <__sflush_r>
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <_fflush_r+0x4c>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	d101      	bne.n	80055b0 <_fflush_r+0x38>
 80055ac:	68ac      	ldr	r4, [r5, #8]
 80055ae:	e7f1      	b.n	8005594 <_fflush_r+0x1c>
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <_fflush_r+0x50>)
 80055b2:	429c      	cmp	r4, r3
 80055b4:	bf08      	it	eq
 80055b6:	68ec      	ldreq	r4, [r5, #12]
 80055b8:	e7ec      	b.n	8005594 <_fflush_r+0x1c>
 80055ba:	2000      	movs	r0, #0
 80055bc:	bd38      	pop	{r3, r4, r5, pc}
 80055be:	bf00      	nop
 80055c0:	080062a4 	.word	0x080062a4
 80055c4:	080062c4 	.word	0x080062c4
 80055c8:	08006284 	.word	0x08006284

080055cc <_cleanup_r>:
 80055cc:	4901      	ldr	r1, [pc, #4]	; (80055d4 <_cleanup_r+0x8>)
 80055ce:	f000 b8a9 	b.w	8005724 <_fwalk_reent>
 80055d2:	bf00      	nop
 80055d4:	08005579 	.word	0x08005579

080055d8 <std.isra.0>:
 80055d8:	2300      	movs	r3, #0
 80055da:	b510      	push	{r4, lr}
 80055dc:	4604      	mov	r4, r0
 80055de:	6003      	str	r3, [r0, #0]
 80055e0:	6043      	str	r3, [r0, #4]
 80055e2:	6083      	str	r3, [r0, #8]
 80055e4:	8181      	strh	r1, [r0, #12]
 80055e6:	6643      	str	r3, [r0, #100]	; 0x64
 80055e8:	81c2      	strh	r2, [r0, #14]
 80055ea:	6103      	str	r3, [r0, #16]
 80055ec:	6143      	str	r3, [r0, #20]
 80055ee:	6183      	str	r3, [r0, #24]
 80055f0:	4619      	mov	r1, r3
 80055f2:	2208      	movs	r2, #8
 80055f4:	305c      	adds	r0, #92	; 0x5c
 80055f6:	f7ff fdf3 	bl	80051e0 <memset>
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <std.isra.0+0x38>)
 80055fc:	6263      	str	r3, [r4, #36]	; 0x24
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <std.isra.0+0x3c>)
 8005600:	62a3      	str	r3, [r4, #40]	; 0x28
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <std.isra.0+0x40>)
 8005604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <std.isra.0+0x44>)
 8005608:	6224      	str	r4, [r4, #32]
 800560a:	6323      	str	r3, [r4, #48]	; 0x30
 800560c:	bd10      	pop	{r4, pc}
 800560e:	bf00      	nop
 8005610:	08005f4d 	.word	0x08005f4d
 8005614:	08005f6f 	.word	0x08005f6f
 8005618:	08005fa7 	.word	0x08005fa7
 800561c:	08005fcb 	.word	0x08005fcb

08005620 <__sfmoreglue>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	1e4a      	subs	r2, r1, #1
 8005624:	2568      	movs	r5, #104	; 0x68
 8005626:	4355      	muls	r5, r2
 8005628:	460e      	mov	r6, r1
 800562a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800562e:	f000 f949 	bl	80058c4 <_malloc_r>
 8005632:	4604      	mov	r4, r0
 8005634:	b140      	cbz	r0, 8005648 <__sfmoreglue+0x28>
 8005636:	2100      	movs	r1, #0
 8005638:	e880 0042 	stmia.w	r0, {r1, r6}
 800563c:	300c      	adds	r0, #12
 800563e:	60a0      	str	r0, [r4, #8]
 8005640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005644:	f7ff fdcc 	bl	80051e0 <memset>
 8005648:	4620      	mov	r0, r4
 800564a:	bd70      	pop	{r4, r5, r6, pc}

0800564c <__sinit>:
 800564c:	6983      	ldr	r3, [r0, #24]
 800564e:	b510      	push	{r4, lr}
 8005650:	4604      	mov	r4, r0
 8005652:	bb33      	cbnz	r3, 80056a2 <__sinit+0x56>
 8005654:	6483      	str	r3, [r0, #72]	; 0x48
 8005656:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005658:	6503      	str	r3, [r0, #80]	; 0x50
 800565a:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <__sinit+0x58>)
 800565c:	4a12      	ldr	r2, [pc, #72]	; (80056a8 <__sinit+0x5c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6282      	str	r2, [r0, #40]	; 0x28
 8005662:	4298      	cmp	r0, r3
 8005664:	bf04      	itt	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	6183      	streq	r3, [r0, #24]
 800566a:	f000 f81f 	bl	80056ac <__sfp>
 800566e:	6060      	str	r0, [r4, #4]
 8005670:	4620      	mov	r0, r4
 8005672:	f000 f81b 	bl	80056ac <__sfp>
 8005676:	60a0      	str	r0, [r4, #8]
 8005678:	4620      	mov	r0, r4
 800567a:	f000 f817 	bl	80056ac <__sfp>
 800567e:	2200      	movs	r2, #0
 8005680:	60e0      	str	r0, [r4, #12]
 8005682:	2104      	movs	r1, #4
 8005684:	6860      	ldr	r0, [r4, #4]
 8005686:	f7ff ffa7 	bl	80055d8 <std.isra.0>
 800568a:	2201      	movs	r2, #1
 800568c:	2109      	movs	r1, #9
 800568e:	68a0      	ldr	r0, [r4, #8]
 8005690:	f7ff ffa2 	bl	80055d8 <std.isra.0>
 8005694:	2202      	movs	r2, #2
 8005696:	2112      	movs	r1, #18
 8005698:	68e0      	ldr	r0, [r4, #12]
 800569a:	f7ff ff9d 	bl	80055d8 <std.isra.0>
 800569e:	2301      	movs	r3, #1
 80056a0:	61a3      	str	r3, [r4, #24]
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	08006280 	.word	0x08006280
 80056a8:	080055cd 	.word	0x080055cd

080056ac <__sfp>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <__sfp+0x74>)
 80056b0:	681e      	ldr	r6, [r3, #0]
 80056b2:	69b3      	ldr	r3, [r6, #24]
 80056b4:	4607      	mov	r7, r0
 80056b6:	b913      	cbnz	r3, 80056be <__sfp+0x12>
 80056b8:	4630      	mov	r0, r6
 80056ba:	f7ff ffc7 	bl	800564c <__sinit>
 80056be:	3648      	adds	r6, #72	; 0x48
 80056c0:	68b4      	ldr	r4, [r6, #8]
 80056c2:	6873      	ldr	r3, [r6, #4]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	d503      	bpl.n	80056d0 <__sfp+0x24>
 80056c8:	6833      	ldr	r3, [r6, #0]
 80056ca:	b133      	cbz	r3, 80056da <__sfp+0x2e>
 80056cc:	6836      	ldr	r6, [r6, #0]
 80056ce:	e7f7      	b.n	80056c0 <__sfp+0x14>
 80056d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056d4:	b16d      	cbz	r5, 80056f2 <__sfp+0x46>
 80056d6:	3468      	adds	r4, #104	; 0x68
 80056d8:	e7f4      	b.n	80056c4 <__sfp+0x18>
 80056da:	2104      	movs	r1, #4
 80056dc:	4638      	mov	r0, r7
 80056de:	f7ff ff9f 	bl	8005620 <__sfmoreglue>
 80056e2:	6030      	str	r0, [r6, #0]
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1f1      	bne.n	80056cc <__sfp+0x20>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4604      	mov	r4, r0
 80056ee:	4620      	mov	r0, r4
 80056f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056f6:	81e3      	strh	r3, [r4, #14]
 80056f8:	2301      	movs	r3, #1
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	6665      	str	r5, [r4, #100]	; 0x64
 80056fe:	6025      	str	r5, [r4, #0]
 8005700:	60a5      	str	r5, [r4, #8]
 8005702:	6065      	str	r5, [r4, #4]
 8005704:	6125      	str	r5, [r4, #16]
 8005706:	6165      	str	r5, [r4, #20]
 8005708:	61a5      	str	r5, [r4, #24]
 800570a:	2208      	movs	r2, #8
 800570c:	4629      	mov	r1, r5
 800570e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005712:	f7ff fd65 	bl	80051e0 <memset>
 8005716:	6365      	str	r5, [r4, #52]	; 0x34
 8005718:	63a5      	str	r5, [r4, #56]	; 0x38
 800571a:	64a5      	str	r5, [r4, #72]	; 0x48
 800571c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800571e:	e7e6      	b.n	80056ee <__sfp+0x42>
 8005720:	08006280 	.word	0x08006280

08005724 <_fwalk_reent>:
 8005724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005728:	4680      	mov	r8, r0
 800572a:	4689      	mov	r9, r1
 800572c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005730:	2600      	movs	r6, #0
 8005732:	b914      	cbnz	r4, 800573a <_fwalk_reent+0x16>
 8005734:	4630      	mov	r0, r6
 8005736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800573a:	68a5      	ldr	r5, [r4, #8]
 800573c:	6867      	ldr	r7, [r4, #4]
 800573e:	3f01      	subs	r7, #1
 8005740:	d501      	bpl.n	8005746 <_fwalk_reent+0x22>
 8005742:	6824      	ldr	r4, [r4, #0]
 8005744:	e7f5      	b.n	8005732 <_fwalk_reent+0xe>
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d907      	bls.n	800575c <_fwalk_reent+0x38>
 800574c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005750:	3301      	adds	r3, #1
 8005752:	d003      	beq.n	800575c <_fwalk_reent+0x38>
 8005754:	4629      	mov	r1, r5
 8005756:	4640      	mov	r0, r8
 8005758:	47c8      	blx	r9
 800575a:	4306      	orrs	r6, r0
 800575c:	3568      	adds	r5, #104	; 0x68
 800575e:	e7ee      	b.n	800573e <_fwalk_reent+0x1a>

08005760 <__swhatbuf_r>:
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	460e      	mov	r6, r1
 8005764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005768:	2900      	cmp	r1, #0
 800576a:	b090      	sub	sp, #64	; 0x40
 800576c:	4614      	mov	r4, r2
 800576e:	461d      	mov	r5, r3
 8005770:	da07      	bge.n	8005782 <__swhatbuf_r+0x22>
 8005772:	2300      	movs	r3, #0
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	89b3      	ldrh	r3, [r6, #12]
 8005778:	061a      	lsls	r2, r3, #24
 800577a:	d410      	bmi.n	800579e <__swhatbuf_r+0x3e>
 800577c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005780:	e00e      	b.n	80057a0 <__swhatbuf_r+0x40>
 8005782:	aa01      	add	r2, sp, #4
 8005784:	f000 fc48 	bl	8006018 <_fstat_r>
 8005788:	2800      	cmp	r0, #0
 800578a:	dbf2      	blt.n	8005772 <__swhatbuf_r+0x12>
 800578c:	9a02      	ldr	r2, [sp, #8]
 800578e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005796:	425a      	negs	r2, r3
 8005798:	415a      	adcs	r2, r3
 800579a:	602a      	str	r2, [r5, #0]
 800579c:	e7ee      	b.n	800577c <__swhatbuf_r+0x1c>
 800579e:	2340      	movs	r3, #64	; 0x40
 80057a0:	2000      	movs	r0, #0
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	b010      	add	sp, #64	; 0x40
 80057a6:	bd70      	pop	{r4, r5, r6, pc}

080057a8 <__smakebuf_r>:
 80057a8:	898b      	ldrh	r3, [r1, #12]
 80057aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057ac:	079d      	lsls	r5, r3, #30
 80057ae:	4606      	mov	r6, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	d507      	bpl.n	80057c4 <__smakebuf_r+0x1c>
 80057b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	2301      	movs	r3, #1
 80057be:	6163      	str	r3, [r4, #20]
 80057c0:	b002      	add	sp, #8
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
 80057c4:	ab01      	add	r3, sp, #4
 80057c6:	466a      	mov	r2, sp
 80057c8:	f7ff ffca 	bl	8005760 <__swhatbuf_r>
 80057cc:	9900      	ldr	r1, [sp, #0]
 80057ce:	4605      	mov	r5, r0
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 f877 	bl	80058c4 <_malloc_r>
 80057d6:	b948      	cbnz	r0, 80057ec <__smakebuf_r+0x44>
 80057d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057dc:	059a      	lsls	r2, r3, #22
 80057de:	d4ef      	bmi.n	80057c0 <__smakebuf_r+0x18>
 80057e0:	f023 0303 	bic.w	r3, r3, #3
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	e7e3      	b.n	80057b4 <__smakebuf_r+0xc>
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <__smakebuf_r+0x7c>)
 80057ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	6020      	str	r0, [r4, #0]
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	9b00      	ldr	r3, [sp, #0]
 80057fc:	6163      	str	r3, [r4, #20]
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	6120      	str	r0, [r4, #16]
 8005802:	b15b      	cbz	r3, 800581c <__smakebuf_r+0x74>
 8005804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005808:	4630      	mov	r0, r6
 800580a:	f000 fc17 	bl	800603c <_isatty_r>
 800580e:	b128      	cbz	r0, 800581c <__smakebuf_r+0x74>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	431d      	orrs	r5, r3
 8005820:	81a5      	strh	r5, [r4, #12]
 8005822:	e7cd      	b.n	80057c0 <__smakebuf_r+0x18>
 8005824:	080055cd 	.word	0x080055cd

08005828 <_free_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4605      	mov	r5, r0
 800582c:	2900      	cmp	r1, #0
 800582e:	d045      	beq.n	80058bc <_free_r+0x94>
 8005830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005834:	1f0c      	subs	r4, r1, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	bfb8      	it	lt
 800583a:	18e4      	addlt	r4, r4, r3
 800583c:	f000 fc20 	bl	8006080 <__malloc_lock>
 8005840:	4a1f      	ldr	r2, [pc, #124]	; (80058c0 <_free_r+0x98>)
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	4610      	mov	r0, r2
 8005846:	b933      	cbnz	r3, 8005856 <_free_r+0x2e>
 8005848:	6063      	str	r3, [r4, #4]
 800584a:	6014      	str	r4, [r2, #0]
 800584c:	4628      	mov	r0, r5
 800584e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005852:	f000 bc16 	b.w	8006082 <__malloc_unlock>
 8005856:	42a3      	cmp	r3, r4
 8005858:	d90c      	bls.n	8005874 <_free_r+0x4c>
 800585a:	6821      	ldr	r1, [r4, #0]
 800585c:	1862      	adds	r2, r4, r1
 800585e:	4293      	cmp	r3, r2
 8005860:	bf04      	itt	eq
 8005862:	681a      	ldreq	r2, [r3, #0]
 8005864:	685b      	ldreq	r3, [r3, #4]
 8005866:	6063      	str	r3, [r4, #4]
 8005868:	bf04      	itt	eq
 800586a:	1852      	addeq	r2, r2, r1
 800586c:	6022      	streq	r2, [r4, #0]
 800586e:	6004      	str	r4, [r0, #0]
 8005870:	e7ec      	b.n	800584c <_free_r+0x24>
 8005872:	4613      	mov	r3, r2
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	b10a      	cbz	r2, 800587c <_free_r+0x54>
 8005878:	42a2      	cmp	r2, r4
 800587a:	d9fa      	bls.n	8005872 <_free_r+0x4a>
 800587c:	6819      	ldr	r1, [r3, #0]
 800587e:	1858      	adds	r0, r3, r1
 8005880:	42a0      	cmp	r0, r4
 8005882:	d10b      	bne.n	800589c <_free_r+0x74>
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	4401      	add	r1, r0
 8005888:	1858      	adds	r0, r3, r1
 800588a:	4282      	cmp	r2, r0
 800588c:	6019      	str	r1, [r3, #0]
 800588e:	d1dd      	bne.n	800584c <_free_r+0x24>
 8005890:	6810      	ldr	r0, [r2, #0]
 8005892:	6852      	ldr	r2, [r2, #4]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	4401      	add	r1, r0
 8005898:	6019      	str	r1, [r3, #0]
 800589a:	e7d7      	b.n	800584c <_free_r+0x24>
 800589c:	d902      	bls.n	80058a4 <_free_r+0x7c>
 800589e:	230c      	movs	r3, #12
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	e7d3      	b.n	800584c <_free_r+0x24>
 80058a4:	6820      	ldr	r0, [r4, #0]
 80058a6:	1821      	adds	r1, r4, r0
 80058a8:	428a      	cmp	r2, r1
 80058aa:	bf04      	itt	eq
 80058ac:	6811      	ldreq	r1, [r2, #0]
 80058ae:	6852      	ldreq	r2, [r2, #4]
 80058b0:	6062      	str	r2, [r4, #4]
 80058b2:	bf04      	itt	eq
 80058b4:	1809      	addeq	r1, r1, r0
 80058b6:	6021      	streq	r1, [r4, #0]
 80058b8:	605c      	str	r4, [r3, #4]
 80058ba:	e7c7      	b.n	800584c <_free_r+0x24>
 80058bc:	bd38      	pop	{r3, r4, r5, pc}
 80058be:	bf00      	nop
 80058c0:	2000042c 	.word	0x2000042c

080058c4 <_malloc_r>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	1ccd      	adds	r5, r1, #3
 80058c8:	f025 0503 	bic.w	r5, r5, #3
 80058cc:	3508      	adds	r5, #8
 80058ce:	2d0c      	cmp	r5, #12
 80058d0:	bf38      	it	cc
 80058d2:	250c      	movcc	r5, #12
 80058d4:	2d00      	cmp	r5, #0
 80058d6:	4606      	mov	r6, r0
 80058d8:	db01      	blt.n	80058de <_malloc_r+0x1a>
 80058da:	42a9      	cmp	r1, r5
 80058dc:	d903      	bls.n	80058e6 <_malloc_r+0x22>
 80058de:	230c      	movs	r3, #12
 80058e0:	6033      	str	r3, [r6, #0]
 80058e2:	2000      	movs	r0, #0
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	f000 fbcb 	bl	8006080 <__malloc_lock>
 80058ea:	4a23      	ldr	r2, [pc, #140]	; (8005978 <_malloc_r+0xb4>)
 80058ec:	6814      	ldr	r4, [r2, #0]
 80058ee:	4621      	mov	r1, r4
 80058f0:	b991      	cbnz	r1, 8005918 <_malloc_r+0x54>
 80058f2:	4c22      	ldr	r4, [pc, #136]	; (800597c <_malloc_r+0xb8>)
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	b91b      	cbnz	r3, 8005900 <_malloc_r+0x3c>
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 fb17 	bl	8005f2c <_sbrk_r>
 80058fe:	6020      	str	r0, [r4, #0]
 8005900:	4629      	mov	r1, r5
 8005902:	4630      	mov	r0, r6
 8005904:	f000 fb12 	bl	8005f2c <_sbrk_r>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d126      	bne.n	800595a <_malloc_r+0x96>
 800590c:	230c      	movs	r3, #12
 800590e:	6033      	str	r3, [r6, #0]
 8005910:	4630      	mov	r0, r6
 8005912:	f000 fbb6 	bl	8006082 <__malloc_unlock>
 8005916:	e7e4      	b.n	80058e2 <_malloc_r+0x1e>
 8005918:	680b      	ldr	r3, [r1, #0]
 800591a:	1b5b      	subs	r3, r3, r5
 800591c:	d41a      	bmi.n	8005954 <_malloc_r+0x90>
 800591e:	2b0b      	cmp	r3, #11
 8005920:	d90f      	bls.n	8005942 <_malloc_r+0x7e>
 8005922:	600b      	str	r3, [r1, #0]
 8005924:	50cd      	str	r5, [r1, r3]
 8005926:	18cc      	adds	r4, r1, r3
 8005928:	4630      	mov	r0, r6
 800592a:	f000 fbaa 	bl	8006082 <__malloc_unlock>
 800592e:	f104 000b 	add.w	r0, r4, #11
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	f020 0007 	bic.w	r0, r0, #7
 8005938:	1ac3      	subs	r3, r0, r3
 800593a:	d01b      	beq.n	8005974 <_malloc_r+0xb0>
 800593c:	425a      	negs	r2, r3
 800593e:	50e2      	str	r2, [r4, r3]
 8005940:	bd70      	pop	{r4, r5, r6, pc}
 8005942:	428c      	cmp	r4, r1
 8005944:	bf0d      	iteet	eq
 8005946:	6863      	ldreq	r3, [r4, #4]
 8005948:	684b      	ldrne	r3, [r1, #4]
 800594a:	6063      	strne	r3, [r4, #4]
 800594c:	6013      	streq	r3, [r2, #0]
 800594e:	bf18      	it	ne
 8005950:	460c      	movne	r4, r1
 8005952:	e7e9      	b.n	8005928 <_malloc_r+0x64>
 8005954:	460c      	mov	r4, r1
 8005956:	6849      	ldr	r1, [r1, #4]
 8005958:	e7ca      	b.n	80058f0 <_malloc_r+0x2c>
 800595a:	1cc4      	adds	r4, r0, #3
 800595c:	f024 0403 	bic.w	r4, r4, #3
 8005960:	42a0      	cmp	r0, r4
 8005962:	d005      	beq.n	8005970 <_malloc_r+0xac>
 8005964:	1a21      	subs	r1, r4, r0
 8005966:	4630      	mov	r0, r6
 8005968:	f000 fae0 	bl	8005f2c <_sbrk_r>
 800596c:	3001      	adds	r0, #1
 800596e:	d0cd      	beq.n	800590c <_malloc_r+0x48>
 8005970:	6025      	str	r5, [r4, #0]
 8005972:	e7d9      	b.n	8005928 <_malloc_r+0x64>
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	bf00      	nop
 8005978:	2000042c 	.word	0x2000042c
 800597c:	20000430 	.word	0x20000430

08005980 <__sfputc_r>:
 8005980:	6893      	ldr	r3, [r2, #8]
 8005982:	3b01      	subs	r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	b410      	push	{r4}
 8005988:	6093      	str	r3, [r2, #8]
 800598a:	da09      	bge.n	80059a0 <__sfputc_r+0x20>
 800598c:	6994      	ldr	r4, [r2, #24]
 800598e:	42a3      	cmp	r3, r4
 8005990:	db02      	blt.n	8005998 <__sfputc_r+0x18>
 8005992:	b2cb      	uxtb	r3, r1
 8005994:	2b0a      	cmp	r3, #10
 8005996:	d103      	bne.n	80059a0 <__sfputc_r+0x20>
 8005998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800599c:	f7ff bca4 	b.w	80052e8 <__swbuf_r>
 80059a0:	6813      	ldr	r3, [r2, #0]
 80059a2:	1c58      	adds	r0, r3, #1
 80059a4:	6010      	str	r0, [r2, #0]
 80059a6:	7019      	strb	r1, [r3, #0]
 80059a8:	b2c8      	uxtb	r0, r1
 80059aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <__sfputs_r>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	4606      	mov	r6, r0
 80059b4:	460f      	mov	r7, r1
 80059b6:	4614      	mov	r4, r2
 80059b8:	18d5      	adds	r5, r2, r3
 80059ba:	42ac      	cmp	r4, r5
 80059bc:	d101      	bne.n	80059c2 <__sfputs_r+0x12>
 80059be:	2000      	movs	r0, #0
 80059c0:	e007      	b.n	80059d2 <__sfputs_r+0x22>
 80059c2:	463a      	mov	r2, r7
 80059c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c8:	4630      	mov	r0, r6
 80059ca:	f7ff ffd9 	bl	8005980 <__sfputc_r>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d1f3      	bne.n	80059ba <__sfputs_r+0xa>
 80059d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059d4 <_vfiprintf_r>:
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	b09d      	sub	sp, #116	; 0x74
 80059da:	460c      	mov	r4, r1
 80059dc:	4617      	mov	r7, r2
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	4606      	mov	r6, r0
 80059e2:	b118      	cbz	r0, 80059ec <_vfiprintf_r+0x18>
 80059e4:	6983      	ldr	r3, [r0, #24]
 80059e6:	b90b      	cbnz	r3, 80059ec <_vfiprintf_r+0x18>
 80059e8:	f7ff fe30 	bl	800564c <__sinit>
 80059ec:	4b7c      	ldr	r3, [pc, #496]	; (8005be0 <_vfiprintf_r+0x20c>)
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d157      	bne.n	8005aa2 <_vfiprintf_r+0xce>
 80059f2:	6874      	ldr	r4, [r6, #4]
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	0718      	lsls	r0, r3, #28
 80059f8:	d55d      	bpl.n	8005ab6 <_vfiprintf_r+0xe2>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05a      	beq.n	8005ab6 <_vfiprintf_r+0xe2>
 8005a00:	2300      	movs	r3, #0
 8005a02:	9309      	str	r3, [sp, #36]	; 0x24
 8005a04:	2320      	movs	r3, #32
 8005a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a0a:	2330      	movs	r3, #48	; 0x30
 8005a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a10:	f04f 0b01 	mov.w	fp, #1
 8005a14:	46b8      	mov	r8, r7
 8005a16:	4645      	mov	r5, r8
 8005a18:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d155      	bne.n	8005acc <_vfiprintf_r+0xf8>
 8005a20:	ebb8 0a07 	subs.w	sl, r8, r7
 8005a24:	d00b      	beq.n	8005a3e <_vfiprintf_r+0x6a>
 8005a26:	4653      	mov	r3, sl
 8005a28:	463a      	mov	r2, r7
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f7ff ffbf 	bl	80059b0 <__sfputs_r>
 8005a32:	3001      	adds	r0, #1
 8005a34:	f000 80c4 	beq.w	8005bc0 <_vfiprintf_r+0x1ec>
 8005a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3a:	4453      	add	r3, sl
 8005a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3e:	f898 3000 	ldrb.w	r3, [r8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80bc 	beq.w	8005bc0 <_vfiprintf_r+0x1ec>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4e:	9304      	str	r3, [sp, #16]
 8005a50:	9307      	str	r3, [sp, #28]
 8005a52:	9205      	str	r2, [sp, #20]
 8005a54:	9306      	str	r3, [sp, #24]
 8005a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a5c:	2205      	movs	r2, #5
 8005a5e:	7829      	ldrb	r1, [r5, #0]
 8005a60:	4860      	ldr	r0, [pc, #384]	; (8005be4 <_vfiprintf_r+0x210>)
 8005a62:	f7fa fb8d 	bl	8000180 <memchr>
 8005a66:	f105 0801 	add.w	r8, r5, #1
 8005a6a:	9b04      	ldr	r3, [sp, #16]
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d131      	bne.n	8005ad4 <_vfiprintf_r+0x100>
 8005a70:	06d9      	lsls	r1, r3, #27
 8005a72:	bf44      	itt	mi
 8005a74:	2220      	movmi	r2, #32
 8005a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a7a:	071a      	lsls	r2, r3, #28
 8005a7c:	bf44      	itt	mi
 8005a7e:	222b      	movmi	r2, #43	; 0x2b
 8005a80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a84:	782a      	ldrb	r2, [r5, #0]
 8005a86:	2a2a      	cmp	r2, #42	; 0x2a
 8005a88:	d02c      	beq.n	8005ae4 <_vfiprintf_r+0x110>
 8005a8a:	9a07      	ldr	r2, [sp, #28]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	200a      	movs	r0, #10
 8005a90:	46a8      	mov	r8, r5
 8005a92:	3501      	adds	r5, #1
 8005a94:	f898 3000 	ldrb.w	r3, [r8]
 8005a98:	3b30      	subs	r3, #48	; 0x30
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d96d      	bls.n	8005b7a <_vfiprintf_r+0x1a6>
 8005a9e:	b371      	cbz	r1, 8005afe <_vfiprintf_r+0x12a>
 8005aa0:	e026      	b.n	8005af0 <_vfiprintf_r+0x11c>
 8005aa2:	4b51      	ldr	r3, [pc, #324]	; (8005be8 <_vfiprintf_r+0x214>)
 8005aa4:	429c      	cmp	r4, r3
 8005aa6:	d101      	bne.n	8005aac <_vfiprintf_r+0xd8>
 8005aa8:	68b4      	ldr	r4, [r6, #8]
 8005aaa:	e7a3      	b.n	80059f4 <_vfiprintf_r+0x20>
 8005aac:	4b4f      	ldr	r3, [pc, #316]	; (8005bec <_vfiprintf_r+0x218>)
 8005aae:	429c      	cmp	r4, r3
 8005ab0:	bf08      	it	eq
 8005ab2:	68f4      	ldreq	r4, [r6, #12]
 8005ab4:	e79e      	b.n	80059f4 <_vfiprintf_r+0x20>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f7ff fc67 	bl	800538c <__swsetup_r>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d09e      	beq.n	8005a00 <_vfiprintf_r+0x2c>
 8005ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac6:	b01d      	add	sp, #116	; 0x74
 8005ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005acc:	2b25      	cmp	r3, #37	; 0x25
 8005ace:	d0a7      	beq.n	8005a20 <_vfiprintf_r+0x4c>
 8005ad0:	46a8      	mov	r8, r5
 8005ad2:	e7a0      	b.n	8005a16 <_vfiprintf_r+0x42>
 8005ad4:	4a43      	ldr	r2, [pc, #268]	; (8005be4 <_vfiprintf_r+0x210>)
 8005ad6:	1a80      	subs	r0, r0, r2
 8005ad8:	fa0b f000 	lsl.w	r0, fp, r0
 8005adc:	4318      	orrs	r0, r3
 8005ade:	9004      	str	r0, [sp, #16]
 8005ae0:	4645      	mov	r5, r8
 8005ae2:	e7bb      	b.n	8005a5c <_vfiprintf_r+0x88>
 8005ae4:	9a03      	ldr	r2, [sp, #12]
 8005ae6:	1d11      	adds	r1, r2, #4
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	9103      	str	r1, [sp, #12]
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	db01      	blt.n	8005af4 <_vfiprintf_r+0x120>
 8005af0:	9207      	str	r2, [sp, #28]
 8005af2:	e004      	b.n	8005afe <_vfiprintf_r+0x12a>
 8005af4:	4252      	negs	r2, r2
 8005af6:	f043 0302 	orr.w	r3, r3, #2
 8005afa:	9207      	str	r2, [sp, #28]
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	f898 3000 	ldrb.w	r3, [r8]
 8005b02:	2b2e      	cmp	r3, #46	; 0x2e
 8005b04:	d110      	bne.n	8005b28 <_vfiprintf_r+0x154>
 8005b06:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	f108 0101 	add.w	r1, r8, #1
 8005b10:	d137      	bne.n	8005b82 <_vfiprintf_r+0x1ae>
 8005b12:	9b03      	ldr	r3, [sp, #12]
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	9203      	str	r2, [sp, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bfb8      	it	lt
 8005b1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b22:	f108 0802 	add.w	r8, r8, #2
 8005b26:	9305      	str	r3, [sp, #20]
 8005b28:	4d31      	ldr	r5, [pc, #196]	; (8005bf0 <_vfiprintf_r+0x21c>)
 8005b2a:	f898 1000 	ldrb.w	r1, [r8]
 8005b2e:	2203      	movs	r2, #3
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7fa fb25 	bl	8000180 <memchr>
 8005b36:	b140      	cbz	r0, 8005b4a <_vfiprintf_r+0x176>
 8005b38:	2340      	movs	r3, #64	; 0x40
 8005b3a:	1b40      	subs	r0, r0, r5
 8005b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8005b40:	9b04      	ldr	r3, [sp, #16]
 8005b42:	4303      	orrs	r3, r0
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	f898 1000 	ldrb.w	r1, [r8]
 8005b4e:	4829      	ldr	r0, [pc, #164]	; (8005bf4 <_vfiprintf_r+0x220>)
 8005b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b54:	2206      	movs	r2, #6
 8005b56:	f108 0701 	add.w	r7, r8, #1
 8005b5a:	f7fa fb11 	bl	8000180 <memchr>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d034      	beq.n	8005bcc <_vfiprintf_r+0x1f8>
 8005b62:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <_vfiprintf_r+0x224>)
 8005b64:	bb03      	cbnz	r3, 8005ba8 <_vfiprintf_r+0x1d4>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	3307      	adds	r3, #7
 8005b6a:	f023 0307 	bic.w	r3, r3, #7
 8005b6e:	3308      	adds	r3, #8
 8005b70:	9303      	str	r3, [sp, #12]
 8005b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b74:	444b      	add	r3, r9
 8005b76:	9309      	str	r3, [sp, #36]	; 0x24
 8005b78:	e74c      	b.n	8005a14 <_vfiprintf_r+0x40>
 8005b7a:	fb00 3202 	mla	r2, r0, r2, r3
 8005b7e:	2101      	movs	r1, #1
 8005b80:	e786      	b.n	8005a90 <_vfiprintf_r+0xbc>
 8005b82:	2300      	movs	r3, #0
 8005b84:	9305      	str	r3, [sp, #20]
 8005b86:	4618      	mov	r0, r3
 8005b88:	250a      	movs	r5, #10
 8005b8a:	4688      	mov	r8, r1
 8005b8c:	3101      	adds	r1, #1
 8005b8e:	f898 2000 	ldrb.w	r2, [r8]
 8005b92:	3a30      	subs	r2, #48	; 0x30
 8005b94:	2a09      	cmp	r2, #9
 8005b96:	d903      	bls.n	8005ba0 <_vfiprintf_r+0x1cc>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0c5      	beq.n	8005b28 <_vfiprintf_r+0x154>
 8005b9c:	9005      	str	r0, [sp, #20]
 8005b9e:	e7c3      	b.n	8005b28 <_vfiprintf_r+0x154>
 8005ba0:	fb05 2000 	mla	r0, r5, r0, r2
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e7f0      	b.n	8005b8a <_vfiprintf_r+0x1b6>
 8005ba8:	ab03      	add	r3, sp, #12
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	4622      	mov	r2, r4
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <_vfiprintf_r+0x228>)
 8005bb0:	a904      	add	r1, sp, #16
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f3af 8000 	nop.w
 8005bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005bbc:	4681      	mov	r9, r0
 8005bbe:	d1d8      	bne.n	8005b72 <_vfiprintf_r+0x19e>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	065b      	lsls	r3, r3, #25
 8005bc4:	f53f af7d 	bmi.w	8005ac2 <_vfiprintf_r+0xee>
 8005bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bca:	e77c      	b.n	8005ac6 <_vfiprintf_r+0xf2>
 8005bcc:	ab03      	add	r3, sp, #12
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <_vfiprintf_r+0x228>)
 8005bd4:	a904      	add	r1, sp, #16
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f000 f888 	bl	8005cec <_printf_i>
 8005bdc:	e7ec      	b.n	8005bb8 <_vfiprintf_r+0x1e4>
 8005bde:	bf00      	nop
 8005be0:	080062a4 	.word	0x080062a4
 8005be4:	080062e4 	.word	0x080062e4
 8005be8:	080062c4 	.word	0x080062c4
 8005bec:	08006284 	.word	0x08006284
 8005bf0:	080062ea 	.word	0x080062ea
 8005bf4:	080062ee 	.word	0x080062ee
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	080059b1 	.word	0x080059b1

08005c00 <_printf_common>:
 8005c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	4691      	mov	r9, r2
 8005c06:	461f      	mov	r7, r3
 8005c08:	688a      	ldr	r2, [r1, #8]
 8005c0a:	690b      	ldr	r3, [r1, #16]
 8005c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c10:	4293      	cmp	r3, r2
 8005c12:	bfb8      	it	lt
 8005c14:	4613      	movlt	r3, r2
 8005c16:	f8c9 3000 	str.w	r3, [r9]
 8005c1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c1e:	4606      	mov	r6, r0
 8005c20:	460c      	mov	r4, r1
 8005c22:	b112      	cbz	r2, 8005c2a <_printf_common+0x2a>
 8005c24:	3301      	adds	r3, #1
 8005c26:	f8c9 3000 	str.w	r3, [r9]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	0699      	lsls	r1, r3, #26
 8005c2e:	bf42      	ittt	mi
 8005c30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c34:	3302      	addmi	r3, #2
 8005c36:	f8c9 3000 	strmi.w	r3, [r9]
 8005c3a:	6825      	ldr	r5, [r4, #0]
 8005c3c:	f015 0506 	ands.w	r5, r5, #6
 8005c40:	d107      	bne.n	8005c52 <_printf_common+0x52>
 8005c42:	f104 0a19 	add.w	sl, r4, #25
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	f8d9 2000 	ldr.w	r2, [r9]
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	429d      	cmp	r5, r3
 8005c50:	db29      	blt.n	8005ca6 <_printf_common+0xa6>
 8005c52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	3300      	adds	r3, #0
 8005c5a:	bf18      	it	ne
 8005c5c:	2301      	movne	r3, #1
 8005c5e:	0692      	lsls	r2, r2, #26
 8005c60:	d42e      	bmi.n	8005cc0 <_printf_common+0xc0>
 8005c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c66:	4639      	mov	r1, r7
 8005c68:	4630      	mov	r0, r6
 8005c6a:	47c0      	blx	r8
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d021      	beq.n	8005cb4 <_printf_common+0xb4>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	68e5      	ldr	r5, [r4, #12]
 8005c74:	f8d9 2000 	ldr.w	r2, [r9]
 8005c78:	f003 0306 	and.w	r3, r3, #6
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	bf08      	it	eq
 8005c80:	1aad      	subeq	r5, r5, r2
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	6922      	ldr	r2, [r4, #16]
 8005c86:	bf0c      	ite	eq
 8005c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c8c:	2500      	movne	r5, #0
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	bfc4      	itt	gt
 8005c92:	1a9b      	subgt	r3, r3, r2
 8005c94:	18ed      	addgt	r5, r5, r3
 8005c96:	f04f 0900 	mov.w	r9, #0
 8005c9a:	341a      	adds	r4, #26
 8005c9c:	454d      	cmp	r5, r9
 8005c9e:	d11b      	bne.n	8005cd8 <_printf_common+0xd8>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4639      	mov	r1, r7
 8005cac:	4630      	mov	r0, r6
 8005cae:	47c0      	blx	r8
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d103      	bne.n	8005cbc <_printf_common+0xbc>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	e7c2      	b.n	8005c46 <_printf_common+0x46>
 8005cc0:	18e1      	adds	r1, r4, r3
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	2030      	movs	r0, #48	; 0x30
 8005cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cca:	4422      	add	r2, r4
 8005ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	e7c4      	b.n	8005c62 <_printf_common+0x62>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4639      	mov	r1, r7
 8005cde:	4630      	mov	r0, r6
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d0e6      	beq.n	8005cb4 <_printf_common+0xb4>
 8005ce6:	f109 0901 	add.w	r9, r9, #1
 8005cea:	e7d7      	b.n	8005c9c <_printf_common+0x9c>

08005cec <_printf_i>:
 8005cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cf0:	4617      	mov	r7, r2
 8005cf2:	7e0a      	ldrb	r2, [r1, #24]
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	2a6e      	cmp	r2, #110	; 0x6e
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	4606      	mov	r6, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d00:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005d04:	f000 80bc 	beq.w	8005e80 <_printf_i+0x194>
 8005d08:	d81a      	bhi.n	8005d40 <_printf_i+0x54>
 8005d0a:	2a63      	cmp	r2, #99	; 0x63
 8005d0c:	d02e      	beq.n	8005d6c <_printf_i+0x80>
 8005d0e:	d80a      	bhi.n	8005d26 <_printf_i+0x3a>
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	f000 80c8 	beq.w	8005ea6 <_printf_i+0x1ba>
 8005d16:	2a58      	cmp	r2, #88	; 0x58
 8005d18:	f000 808a 	beq.w	8005e30 <_printf_i+0x144>
 8005d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d20:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005d24:	e02a      	b.n	8005d7c <_printf_i+0x90>
 8005d26:	2a64      	cmp	r2, #100	; 0x64
 8005d28:	d001      	beq.n	8005d2e <_printf_i+0x42>
 8005d2a:	2a69      	cmp	r2, #105	; 0x69
 8005d2c:	d1f6      	bne.n	8005d1c <_printf_i+0x30>
 8005d2e:	6821      	ldr	r1, [r4, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005d36:	d023      	beq.n	8005d80 <_printf_i+0x94>
 8005d38:	1d11      	adds	r1, r2, #4
 8005d3a:	6019      	str	r1, [r3, #0]
 8005d3c:	6813      	ldr	r3, [r2, #0]
 8005d3e:	e027      	b.n	8005d90 <_printf_i+0xa4>
 8005d40:	2a73      	cmp	r2, #115	; 0x73
 8005d42:	f000 80b4 	beq.w	8005eae <_printf_i+0x1c2>
 8005d46:	d808      	bhi.n	8005d5a <_printf_i+0x6e>
 8005d48:	2a6f      	cmp	r2, #111	; 0x6f
 8005d4a:	d02a      	beq.n	8005da2 <_printf_i+0xb6>
 8005d4c:	2a70      	cmp	r2, #112	; 0x70
 8005d4e:	d1e5      	bne.n	8005d1c <_printf_i+0x30>
 8005d50:	680a      	ldr	r2, [r1, #0]
 8005d52:	f042 0220 	orr.w	r2, r2, #32
 8005d56:	600a      	str	r2, [r1, #0]
 8005d58:	e003      	b.n	8005d62 <_printf_i+0x76>
 8005d5a:	2a75      	cmp	r2, #117	; 0x75
 8005d5c:	d021      	beq.n	8005da2 <_printf_i+0xb6>
 8005d5e:	2a78      	cmp	r2, #120	; 0x78
 8005d60:	d1dc      	bne.n	8005d1c <_printf_i+0x30>
 8005d62:	2278      	movs	r2, #120	; 0x78
 8005d64:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005d68:	496e      	ldr	r1, [pc, #440]	; (8005f24 <_printf_i+0x238>)
 8005d6a:	e064      	b.n	8005e36 <_printf_i+0x14a>
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005d72:	1d11      	adds	r1, r2, #4
 8005d74:	6019      	str	r1, [r3, #0]
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0a3      	b.n	8005ec8 <_printf_i+0x1dc>
 8005d80:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005d84:	f102 0104 	add.w	r1, r2, #4
 8005d88:	6019      	str	r1, [r3, #0]
 8005d8a:	d0d7      	beq.n	8005d3c <_printf_i+0x50>
 8005d8c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da03      	bge.n	8005d9c <_printf_i+0xb0>
 8005d94:	222d      	movs	r2, #45	; 0x2d
 8005d96:	425b      	negs	r3, r3
 8005d98:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d9c:	4962      	ldr	r1, [pc, #392]	; (8005f28 <_printf_i+0x23c>)
 8005d9e:	220a      	movs	r2, #10
 8005da0:	e017      	b.n	8005dd2 <_printf_i+0xe6>
 8005da2:	6820      	ldr	r0, [r4, #0]
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005daa:	d003      	beq.n	8005db4 <_printf_i+0xc8>
 8005dac:	1d08      	adds	r0, r1, #4
 8005dae:	6018      	str	r0, [r3, #0]
 8005db0:	680b      	ldr	r3, [r1, #0]
 8005db2:	e006      	b.n	8005dc2 <_printf_i+0xd6>
 8005db4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005db8:	f101 0004 	add.w	r0, r1, #4
 8005dbc:	6018      	str	r0, [r3, #0]
 8005dbe:	d0f7      	beq.n	8005db0 <_printf_i+0xc4>
 8005dc0:	880b      	ldrh	r3, [r1, #0]
 8005dc2:	4959      	ldr	r1, [pc, #356]	; (8005f28 <_printf_i+0x23c>)
 8005dc4:	2a6f      	cmp	r2, #111	; 0x6f
 8005dc6:	bf14      	ite	ne
 8005dc8:	220a      	movne	r2, #10
 8005dca:	2208      	moveq	r2, #8
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005dd2:	6865      	ldr	r5, [r4, #4]
 8005dd4:	60a5      	str	r5, [r4, #8]
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	f2c0 809c 	blt.w	8005f14 <_printf_i+0x228>
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	f020 0004 	bic.w	r0, r0, #4
 8005de2:	6020      	str	r0, [r4, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d13f      	bne.n	8005e68 <_printf_i+0x17c>
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	f040 8095 	bne.w	8005f18 <_printf_i+0x22c>
 8005dee:	4675      	mov	r5, lr
 8005df0:	2a08      	cmp	r2, #8
 8005df2:	d10b      	bne.n	8005e0c <_printf_i+0x120>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07da      	lsls	r2, r3, #31
 8005df8:	d508      	bpl.n	8005e0c <_printf_i+0x120>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	6862      	ldr	r2, [r4, #4]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	bfde      	ittt	le
 8005e02:	2330      	movle	r3, #48	; 0x30
 8005e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e0c:	ebae 0305 	sub.w	r3, lr, r5
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	f8cd 8000 	str.w	r8, [sp]
 8005e16:	463b      	mov	r3, r7
 8005e18:	aa03      	add	r2, sp, #12
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7ff feef 	bl	8005c00 <_printf_common>
 8005e22:	3001      	adds	r0, #1
 8005e24:	d155      	bne.n	8005ed2 <_printf_i+0x1e6>
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	b005      	add	sp, #20
 8005e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e30:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005e34:	493c      	ldr	r1, [pc, #240]	; (8005f28 <_printf_i+0x23c>)
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e3e:	f100 0504 	add.w	r5, r0, #4
 8005e42:	601d      	str	r5, [r3, #0]
 8005e44:	d001      	beq.n	8005e4a <_printf_i+0x15e>
 8005e46:	6803      	ldr	r3, [r0, #0]
 8005e48:	e002      	b.n	8005e50 <_printf_i+0x164>
 8005e4a:	0655      	lsls	r5, r2, #25
 8005e4c:	d5fb      	bpl.n	8005e46 <_printf_i+0x15a>
 8005e4e:	8803      	ldrh	r3, [r0, #0]
 8005e50:	07d0      	lsls	r0, r2, #31
 8005e52:	bf44      	itt	mi
 8005e54:	f042 0220 	orrmi.w	r2, r2, #32
 8005e58:	6022      	strmi	r2, [r4, #0]
 8005e5a:	b91b      	cbnz	r3, 8005e64 <_printf_i+0x178>
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	f022 0220 	bic.w	r2, r2, #32
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	2210      	movs	r2, #16
 8005e66:	e7b1      	b.n	8005dcc <_printf_i+0xe0>
 8005e68:	4675      	mov	r5, lr
 8005e6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e6e:	fb02 3310 	mls	r3, r2, r0, r3
 8005e72:	5ccb      	ldrb	r3, [r1, r3]
 8005e74:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d1f5      	bne.n	8005e6a <_printf_i+0x17e>
 8005e7e:	e7b7      	b.n	8005df0 <_printf_i+0x104>
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	6949      	ldr	r1, [r1, #20]
 8005e86:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005e8a:	d004      	beq.n	8005e96 <_printf_i+0x1aa>
 8005e8c:	1d10      	adds	r0, r2, #4
 8005e8e:	6018      	str	r0, [r3, #0]
 8005e90:	6813      	ldr	r3, [r2, #0]
 8005e92:	6019      	str	r1, [r3, #0]
 8005e94:	e007      	b.n	8005ea6 <_printf_i+0x1ba>
 8005e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e9a:	f102 0004 	add.w	r0, r2, #4
 8005e9e:	6018      	str	r0, [r3, #0]
 8005ea0:	6813      	ldr	r3, [r2, #0]
 8005ea2:	d0f6      	beq.n	8005e92 <_printf_i+0x1a6>
 8005ea4:	8019      	strh	r1, [r3, #0]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	4675      	mov	r5, lr
 8005eac:	e7b1      	b.n	8005e12 <_printf_i+0x126>
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	1d11      	adds	r1, r2, #4
 8005eb2:	6019      	str	r1, [r3, #0]
 8005eb4:	6815      	ldr	r5, [r2, #0]
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f7fa f960 	bl	8000180 <memchr>
 8005ec0:	b108      	cbz	r0, 8005ec6 <_printf_i+0x1da>
 8005ec2:	1b40      	subs	r0, r0, r5
 8005ec4:	6060      	str	r0, [r4, #4]
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed0:	e79f      	b.n	8005e12 <_printf_i+0x126>
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	4630      	mov	r0, r6
 8005eda:	47c0      	blx	r8
 8005edc:	3001      	adds	r0, #1
 8005ede:	d0a2      	beq.n	8005e26 <_printf_i+0x13a>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	079b      	lsls	r3, r3, #30
 8005ee4:	d507      	bpl.n	8005ef6 <_printf_i+0x20a>
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	f104 0919 	add.w	r9, r4, #25
 8005eec:	68e3      	ldr	r3, [r4, #12]
 8005eee:	9a03      	ldr	r2, [sp, #12]
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	429d      	cmp	r5, r3
 8005ef4:	db05      	blt.n	8005f02 <_printf_i+0x216>
 8005ef6:	68e0      	ldr	r0, [r4, #12]
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	4298      	cmp	r0, r3
 8005efc:	bfb8      	it	lt
 8005efe:	4618      	movlt	r0, r3
 8005f00:	e793      	b.n	8005e2a <_printf_i+0x13e>
 8005f02:	2301      	movs	r3, #1
 8005f04:	464a      	mov	r2, r9
 8005f06:	4639      	mov	r1, r7
 8005f08:	4630      	mov	r0, r6
 8005f0a:	47c0      	blx	r8
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d08a      	beq.n	8005e26 <_printf_i+0x13a>
 8005f10:	3501      	adds	r5, #1
 8005f12:	e7eb      	b.n	8005eec <_printf_i+0x200>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1a7      	bne.n	8005e68 <_printf_i+0x17c>
 8005f18:	780b      	ldrb	r3, [r1, #0]
 8005f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f22:	e765      	b.n	8005df0 <_printf_i+0x104>
 8005f24:	08006306 	.word	0x08006306
 8005f28:	080062f5 	.word	0x080062f5

08005f2c <_sbrk_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4c06      	ldr	r4, [pc, #24]	; (8005f48 <_sbrk_r+0x1c>)
 8005f30:	2300      	movs	r3, #0
 8005f32:	4605      	mov	r5, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	f7fe fdfc 	bl	8004b34 <_sbrk>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_sbrk_r+0x1a>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_sbrk_r+0x1a>
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20001da8 	.word	0x20001da8

08005f4c <__sread>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	460c      	mov	r4, r1
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	f000 f896 	bl	8006084 <_read_r>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	bfab      	itete	ge
 8005f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f60:	181b      	addge	r3, r3, r0
 8005f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f66:	bfac      	ite	ge
 8005f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f6a:	81a3      	strhlt	r3, [r4, #12]
 8005f6c:	bd10      	pop	{r4, pc}

08005f6e <__swrite>:
 8005f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	461f      	mov	r7, r3
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	05db      	lsls	r3, r3, #23
 8005f78:	4605      	mov	r5, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4616      	mov	r6, r2
 8005f7e:	d505      	bpl.n	8005f8c <__swrite+0x1e>
 8005f80:	2302      	movs	r3, #2
 8005f82:	2200      	movs	r2, #0
 8005f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f88:	f000 f868 	bl	800605c <_lseek_r>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	4632      	mov	r2, r6
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	f000 b817 	b.w	8005fd4 <_write_r>

08005fa6 <__sseek>:
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	460c      	mov	r4, r1
 8005faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fae:	f000 f855 	bl	800605c <_lseek_r>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	bf15      	itete	ne
 8005fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fc2:	81a3      	strheq	r3, [r4, #12]
 8005fc4:	bf18      	it	ne
 8005fc6:	81a3      	strhne	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__sclose>:
 8005fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fce:	f000 b813 	b.w	8005ff8 <_close_r>
	...

08005fd4 <_write_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4c07      	ldr	r4, [pc, #28]	; (8005ff4 <_write_r+0x20>)
 8005fd8:	4605      	mov	r5, r0
 8005fda:	4608      	mov	r0, r1
 8005fdc:	4611      	mov	r1, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	6022      	str	r2, [r4, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fe fb62 	bl	80046ac <_write>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_write_r+0x1e>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_write_r+0x1e>
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	20001da8 	.word	0x20001da8

08005ff8 <_close_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4c06      	ldr	r4, [pc, #24]	; (8006014 <_close_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4605      	mov	r5, r0
 8006000:	4608      	mov	r0, r1
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	f7fe fdb0 	bl	8004b68 <_close>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_close_r+0x1a>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	b103      	cbz	r3, 8006012 <_close_r+0x1a>
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	20001da8 	.word	0x20001da8

08006018 <_fstat_r>:
 8006018:	b538      	push	{r3, r4, r5, lr}
 800601a:	4c07      	ldr	r4, [pc, #28]	; (8006038 <_fstat_r+0x20>)
 800601c:	2300      	movs	r3, #0
 800601e:	4605      	mov	r5, r0
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	f7fe fda2 	bl	8004b6e <_fstat>
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	d102      	bne.n	8006034 <_fstat_r+0x1c>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	b103      	cbz	r3, 8006034 <_fstat_r+0x1c>
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	bd38      	pop	{r3, r4, r5, pc}
 8006036:	bf00      	nop
 8006038:	20001da8 	.word	0x20001da8

0800603c <_isatty_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4c06      	ldr	r4, [pc, #24]	; (8006058 <_isatty_r+0x1c>)
 8006040:	2300      	movs	r3, #0
 8006042:	4605      	mov	r5, r0
 8006044:	4608      	mov	r0, r1
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	f7fe fd96 	bl	8004b78 <_isatty>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_isatty_r+0x1a>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	b103      	cbz	r3, 8006056 <_isatty_r+0x1a>
 8006054:	602b      	str	r3, [r5, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	20001da8 	.word	0x20001da8

0800605c <_lseek_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4c07      	ldr	r4, [pc, #28]	; (800607c <_lseek_r+0x20>)
 8006060:	4605      	mov	r5, r0
 8006062:	4608      	mov	r0, r1
 8006064:	4611      	mov	r1, r2
 8006066:	2200      	movs	r2, #0
 8006068:	6022      	str	r2, [r4, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	f7fe fd86 	bl	8004b7c <_lseek>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_lseek_r+0x1e>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	b103      	cbz	r3, 800607a <_lseek_r+0x1e>
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20001da8 	.word	0x20001da8

08006080 <__malloc_lock>:
 8006080:	4770      	bx	lr

08006082 <__malloc_unlock>:
 8006082:	4770      	bx	lr

08006084 <_read_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4c07      	ldr	r4, [pc, #28]	; (80060a4 <_read_r+0x20>)
 8006088:	4605      	mov	r5, r0
 800608a:	4608      	mov	r0, r1
 800608c:	4611      	mov	r1, r2
 800608e:	2200      	movs	r2, #0
 8006090:	6022      	str	r2, [r4, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	f7fe fd40 	bl	8004b18 <_read>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_read_r+0x1e>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_read_r+0x1e>
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	20001da8 	.word	0x20001da8

080060a8 <_init>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr

080060b4 <_fini>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr
